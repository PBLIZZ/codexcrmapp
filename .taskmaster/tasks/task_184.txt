# Task ID: 184
# Title: Update Shared Types and Utility Functions
# Status: done
# Dependencies: 182
# Priority: medium
# Description: Refactor shared type definitions and utility functions across all packages to use 'contact' instead of 'client' terminology.
# Details:
1. Identify all shared type definitions in packages/* directories:
   - Look for files like `types.ts`, `models.ts`, or dedicated type files
   - Rename types like `Client` to `Contact`, `ClientWithRelations` to `ContactWithRelations`, etc.

2. Update type definitions:
   ```typescript
   // Before
   export type Client = {
     id: string;
     name: string;
     // other properties
   };

   // After
   export type Contact = {
     id: string;
     name: string;
     // other properties
   };
   ```

3. Update utility functions that operate on client data:
   ```typescript
   // Before
   export function formatClientName(client: Client): string {
     return `${client.firstName} ${client.lastName}`;
   }

   // After
   export function formatContactName(contact: Contact): string {
     return `${contact.firstName} ${contact.lastName}`;
   }
   ```

4. Update any constants or enums related to clients:
   ```typescript
   // Before
   export enum ClientStatus {
     ACTIVE = 'active',
     INACTIVE = 'inactive',
   }

   // After
   export enum ContactStatus {
     ACTIVE = 'active',
     INACTIVE = 'inactive',
   }
   ```

5. Update imports and exports in all affected files

6. Check for any generated types from Supabase or other tools that might need to be regenerated

Use search functionality to find all occurrences of 'client' in shared packages. Be methodical and ensure you're only changing entity references, not client-side/server-side distinctions.

# Test Strategy:
1. Run TypeScript compiler to check for type errors
2. Verify that all imports and exports are correctly updated
3. Check for any runtime errors when using the updated types
4. Test utility functions with the new type names
5. Ensure that any code that imports these shared types still compiles and functions correctly
6. Run any existing unit tests that use these shared types
7. Verify that type safety is maintained throughout the application

# Subtasks:
## 1. Audit Type Definitions and Identify Shared Types [done]
### Dependencies: None
### Description: Review existing type definitions across packages to identify shared types and inconsistencies
### Details:
Analyze all type declarations, document shared structures, and flag redundant/conflicting definitions

## 2. Rename and Standardize Type References [done]
### Dependencies: 184.1
### Description: Update type names across packages based on audit findings
### Details:
Implement consistent naming conventions, update imports/exports, and modify dependent code

## 3. Refactor Utility Functions and Dependencies [done]
### Dependencies: 184.1, 184.2
### Description: Update shared utilities to align with new type definitions
### Details:
Modify function signatures, validate type compatibility, and update package dependency versions

## 4. Update Constants and Enum Implementations [done]
### Dependencies: 184.1
### Description: Align constant values and enums with standardized types
### Details:
Modify enum declarations, update related validation logic, and ensure cross-package consistency

## 5. Verify Cross-Package Integration [done]
### Dependencies: 184.3, 184.4
### Description: Validate type compatibility and import relationships between packages
### Details:
Execute integration tests, verify build processes, and check published type definitions

