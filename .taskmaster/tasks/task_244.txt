# Task ID: 244
# Title: Refactor Tasks Module to Emulate Things App Functionality
# Status: in-progress
# Dependencies: None
# Priority: high
# Description: Overhaul the current tasks module in the CodexCRM application to replicate the core features, user interface, and user experience of the 'Things' app for macOS. This includes specific functionalities based on a detailed summary to be provided by the user.
# Details:
This task involves a comprehensive refactoring of the existing tasks module within the CodexCRM application. The goal is to align its functionality, UI, and UX closely with the 'Things' application for macOS:

1. Core Design Principles:
   - Minimalist Interface: Clean, uncluttered design prioritizing simplicity
   - Efficient Navigation: Every action accessible within a few clicks from any screen

2. Dashboard Structure:
   - Primary Categories:
     1. Inbox – Default for unscheduled tasks
     2. Today – Tasks due today
     3. Upcoming – Tasks with future due dates
     4. Anytime – No deadline, but need completion
     5. Someday – No urgency, eventual completion
     6. Logbook – Archive for completed tasks
   - Secondary Sections:
     - Projects – Task collections with internal headings
     - Plus Button – For new task creation

3. Task Management:
   - Task Entry: Simple input for name, optional notes
   - Scheduling Options:
     - Specific Date (Today, Upcoming)
     - Anytime, Someday, or No Date (Inbox)
   - Additional Features:
     - Checklists (subtasks), Tags, Notes
     - Completion auto-moves to Logbook
     - Editing, Deletion, and Moving between categories

4. Projects:
   - Appear in dashboard with categories
   - Tasks can be grouped under headings
   - Project properties: Due dates, repeat, tags, notes

5. UI/UX Design:
   - List-based navigation
   - Plus button opens instant task entry
   - Natural language date entry supported

6. Integrations:
   - Calendar sync (Google Calendar)
   - Google Tasks native import
   - Manual import from Reminders, Todoist, etc.

7. AI & NLP Enhancements:
   - NLP for auto-scheduling and contact-based suggestions
   - AI task delegation and follow-up automation

8. Technical Architecture:
   - Organizational Hierarchy:
     ├── Projects
     │   ├── Headings
     │   └── Tasks
     └── Direct Tasks (not in projects)
   - System Categories:
     ├── Inbox
     ├── Today
     ├── Upcoming
     ├── Anytime
     ├── Someday
     └── Logbook
   - Task Schema:
     - Core: Title, Notes, Completion Status
     - Scheduling: Due Date, Repeat, Priority
     - Metadata: Created/Completed Dates, Modification History

9. Design Principles:
   - Clean and intuitive UI
   - Consistent and fast navigation
   - Visual hierarchy for categories and projects
   - Contextual task menus
   - Smart defaults (Inbox for new tasks)

# Test Strategy:
1. Functional Testing:
   - Create tasks across all categories and verify correct placement
   - Move tasks between states and ensure integrity
   - Complete tasks and verify appearance in Logbook

2. UI/UX Testing:
   - Validate minimalist layout and 1-click access
   - Confirm category and project visual clarity

3. AI/NLP Testing:
   - Test NLP-driven scheduling and contact linking
   - Review AI-assigned tasks and automated actions

4. Integration Testing:
   - Connect Google Calendar and Google Tasks
   - Perform manual import/export flows

5. Regression Testing:
   - Verify no existing task functionality is broken

6. Usability Testing:
   - Run through standard workflows with new UI
   - Gather feedback from early users for refinement

# Subtasks:
## 1. Design Database Schema for Things-like Task Structure [completed]
### Dependencies: None
### Description: Create comprehensive database schema supporting the hierarchical structure of Projects > Headings > Tasks, with system categories (Inbox, Today, Upcoming, Anytime, Someday, Logbook) and all required task metadata fields. Current Status is the schema design exists as a png image at the root of the monorepo called database-schema.png Use this as the base  and follow it 100% accurately to write the migrations necessary to migrate the tables to supabase. they are currently not in the database.
### Details:
Design tables for tasks, projects, headings, categories, tags, and relationships. Include fields for title, notes, completion status, due dates, repeat patterns, priority, creation/completion timestamps, and modification history. Ensure proper indexing for performance.

## 2. Implement Core Task Model and Data Access Layer [done]
### Dependencies: 244.1
### Description: Build the foundational data models and repository classes for tasks, projects, headings, and categories with full CRUD operations and business logic validation.
### Details:
Create model classes with proper validation, implement repository pattern for data access, add methods for task categorization, project assignment, and status transitions. Include soft delete functionality for completed tasks moving to Logbook.

## 3. Create Minimalist Dashboard UI Layout [done]
### Dependencies: None
### Description: Design and implement the main dashboard interface with clean, uncluttered layout featuring primary categories sidebar, main content area, and plus button for task creation.
### Details:
Build responsive layout with sidebar navigation (this needs to be the main sidebar for the tasks page similar to the context based sidebars for both contacts and dashboard and is in the same style that is based onthe app-sidebar.tsx and must keep the nav-user.tsx in the sidebar at the very bottom) for Inbox, Today, Upcoming, Anytime, Someday, Logbook, and Projects. Implement visual hierarchy, consistent spacing, and Things-inspired design elements. Include collapsible sections and smooth transitions.

## 4. Implement Task List Views and Navigation [in-progress]
### Dependencies: 244.2, 244.3
### Description: Build dynamic task list components for each category with efficient filtering, sorting, and navigation between different views while maintaining performance.
### Details:
Create reusable list components with virtual scrolling for large datasets, implement category-specific filtering logic, add smooth transitions between views, and ensure consistent task display formatting across all categories.

## 5. Build Quick Task Entry System with Plus Button [pending]
### Dependencies: 244.2, 244.3
### Description: Develop instant task creation interface accessible via plus button with natural language processing for date entry and smart categorization defaults.
### Details:
Implement modal/inline task entry form with auto-focus, natural language date parsing (e.g., 'tomorrow', 'next week'), smart defaults for category assignment, and keyboard shortcuts for quick entry. Include validation and error handling.

## 6. Implement Task Scheduling and Category Management [pending]
### Dependencies: 244.2, 244.4
### Description: Build the core scheduling system that automatically categorizes tasks based on due dates and allows manual movement between categories with proper validation.
### Details:
Create scheduling engine that moves tasks between Today, Upcoming, Anytime, and Someday based on due dates. Implement drag-and-drop functionality for manual categorization, add repeat task handling, and ensure proper validation for category transitions.

## 7. Develop Projects and Headings Management System [pending]
### Dependencies: 244.2, 244.4
### Description: Create comprehensive project management functionality allowing task grouping under projects with internal headings, project properties, and hierarchical organization.
### Details:
Build project creation/editing interface, implement heading management within projects, add project-level properties (due dates, tags, notes), and create drag-and-drop task organization. Include project templates and bulk operations.

## 8. Build Task Detail Management with Subtasks and Tags [pending]
### Dependencies: 244.2, 244.5
### Description: Implement comprehensive task editing interface supporting notes, checklists (subtasks), tags, and all metadata fields with intuitive user experience.
### Details:
Create expandable task detail view with rich text notes, checklist functionality for subtasks, tag management with autocomplete, priority settings, and modification history. Include keyboard shortcuts and quick actions.

## 9. Implement Calendar Integration and External Sync [pending]
### Dependencies: 244.2, 244.6
### Description: Build integration system for Google Calendar synchronization, Google Tasks import, and manual import capabilities from other task management applications.
### Details:
Develop OAuth integration for Google Calendar, implement bidirectional sync for due dates and completion status, create import wizards for Google Tasks and other formats (CSV, JSON), and add conflict resolution for sync issues.

## 10. Add AI-Powered Features and Natural Language Processing [pending]
### Dependencies: 244.2, 244.5, 244.8
### Description: Integrate AI capabilities for smart task scheduling, contact-based suggestions, automated task delegation, and follow-up automation to enhance user productivity.
### Details:
Implement NLP for intelligent date parsing and task categorization, add AI-powered scheduling suggestions based on user patterns, create contact integration for task delegation, and build automated follow-up systems with customizable rules.

## 11. Implement Database Migration Strategy [pending]
### Dependencies: 244.1, 244.2
### Description: Execute the migration plan to transition from the old task structure to the new 'Things'-like schema while preserving existing user data.
### Details:
Implement migration scripts to transfer data from the old schema to the new one, ensuring proper mapping of tasks, categories, and metadata. Include validation checks, rollback procedures, and user communication about the migration process.

## 12. Integrate Task Dependencies and History Tracking [pending]
### Dependencies: 244.2, 244.4
### Description: Implement the task dependencies and history tracking features that were designed in the database schema.
### Details:
Build UI and backend logic for creating and managing task dependencies, implement circular dependency prevention, and create a comprehensive history tracking system for all task modifications. Include visualization of dependencies and history logs in the task detail view.

## 13. Enhance Existing UI Components with Interactive Features [pending]
### Dependencies: 244.3, 244.4
### Description: Build upon the implemented UI components to add interactive features like drag-and-drop, context menus, and keyboard shortcuts.
### Details:
Enhance ThingsSidebar.tsx, ThingsTaskCard.tsx, and ThingsMainContent.tsx with drag-and-drop functionality for task organization, implement context menus for quick actions, and add comprehensive keyboard shortcuts for power users. Ensure all interactions have appropriate visual feedback and accessibility support.

## 14. Create Initial Data Seeding for New Database Schema [pending]
### Dependencies: 244.1
### Description: Develop and implement data seeding scripts to populate the newly created database tables with initial system categories and test data.
### Details:
Create scripts to seed the database with the required system categories (Inbox, Today, Upcoming, Anytime, Someday, Logbook), add sample projects, headings, and tasks for testing purposes. Ensure proper relationships between entities and validate data integrity after seeding.

