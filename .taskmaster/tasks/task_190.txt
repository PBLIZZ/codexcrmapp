# Task ID: 190
# Title: Protect CsvUploadTestPage with authentication
# Status: pending
# Dependencies: None
# Priority: medium
# Description: The page at /apps/web/app/csv-upload-test/page.tsx is currently public but uses a tRPC mutation (contacts.importCsvData) that likely requires authentication. Add an authentication check to this page to redirect unauthenticated users to the sign-in page. This will prevent errors and ensure only logged-in users can attempt CSV imports.
# Details:


# Test Strategy:


# Subtasks:
## 1. Analyze current CsvUploadTestPage implementation and authentication requirements [pending]
### Dependencies: None
### Description: Review the existing code at /apps/web/app/csv-upload-test/page.tsx to understand the current implementation, identify the tRPC mutation usage (contacts.importCsvData), and determine the specific authentication patterns used elsewhere in the codebase for similar protected pages.
### Details:
Examine the page component structure, identify any existing auth checks, review the tRPC mutation implementation to confirm authentication requirements, and document the current user flow. Also analyze other protected pages in the app directory to understand the established authentication patterns and middleware usage.

## 2. Implement server-side authentication check using Next.js middleware or page-level auth [pending]
### Dependencies: 190.1
### Description: Add authentication verification to the CsvUploadTestPage using either Next.js App Router's built-in authentication patterns or by implementing a server component that checks for valid user session before rendering the page content.
### Details:
Create or update middleware.ts to include the /csv-upload-test route in protected paths, or implement getServerSession/auth check directly in the page component. Use Supabase auth integration to verify user authentication status and handle session validation according to the project's established patterns.

## 3. Configure redirect logic to sign-in page for unauthenticated users [pending]
### Dependencies: 190.2
### Description: Implement proper redirect functionality that sends unauthenticated users to the appropriate sign-in page, ensuring the redirect includes a return URL parameter so users can be redirected back to the CSV upload page after successful authentication.
### Details:
Use Next.js redirect() function or router.push() to redirect to the sign-in page (likely /auth/signin or similar based on project structure). Include returnUrl or callbackUrl parameter with the current page path (/csv-upload-test) to enable post-login redirection. Follow the project's established authentication flow patterns.

## 4. Add loading states and error handling for authentication checks [pending]
### Dependencies: 190.3
### Description: Implement proper loading states while authentication status is being verified and add error handling for authentication failures or network issues during the auth check process.
### Details:
Add loading spinner or skeleton UI while authentication is being verified, implement error boundaries for auth failures, and ensure graceful handling of edge cases like expired sessions or network connectivity issues. Use React Suspense patterns if appropriate for the App Router implementation.

## 5. Test complete authentication flow and update any related documentation [pending]
### Dependencies: 190.4
### Description: Perform comprehensive testing of the protected CsvUploadTestPage including authentication checks, redirects, and successful access by authenticated users. Update any relevant documentation or comments in the codebase.
### Details:
Test scenarios: unauthenticated access (should redirect), authenticated access (should allow), session expiration during use, and direct navigation after login. Verify the tRPC mutation works correctly for authenticated users and fails appropriately for unauthenticated attempts. Update code comments and any relevant documentation.

