# Task ID: 182
# Title: Create Database Migration Script for Renaming clients Table to contacts
# Status: done
# Dependencies: None
# Priority: high
# Description: Develop a SQL migration script to rename the 'clients' table to 'contacts' in Supabase while preserving all existing data, constraints, and relationships.
# Details:
Create a migration script that includes:

1. Rename the table: `ALTER TABLE clients RENAME TO contacts;`
2. Update any foreign key constraints that reference the clients table
3. Update any indexes that reference the clients table
4. Handle Row Level Security (RLS) policies:
   - Identify existing RLS policies on the clients table using `SELECT * FROM pg_policies WHERE tablename = 'clients';`
   - For each policy, create a new equivalent policy on the contacts table
   - Drop the old policies after confirming the new ones are working

Example policy migration:
```sql
-- Create new policies on contacts table (example):
CREATE POLICY "Users can view their own contacts" 
  ON contacts FOR SELECT 
  USING (auth.uid() = user_id);

-- After verification, drop old policies:
DROP POLICY "Users can view their own clients" ON clients;
```

Test the migration in a development environment before applying to production. Use Supabase's migration system or run the script via SQL editor in the Supabase dashboard. Ensure you have a database backup before executing the migration.

# Test Strategy:
1. Create a backup of the database before running the migration
2. Execute the migration script in a development/staging environment
3. Verify all data from the original 'clients' table is present in the new 'contacts' table
4. Confirm all constraints, indexes, and relationships are preserved
5. Test RLS policies to ensure they work correctly with the new table name
6. Verify foreign key relationships are intact
7. Run queries against the new 'contacts' table to ensure data can be retrieved correctly
8. Attempt CRUD operations on the 'contacts' table to verify functionality

# Subtasks:
## 1. Table rename script [done]
### Dependencies: None
### Description: Generate and execute SQL script to rename the existing table
### Details:
Ensure all references to old table name are identified for subsequent updates. Use ALTER TABLE statement with appropriate schema qualification.

## 2. RLS policy identification [done]
### Dependencies: 182.1
### Description: Identify all existing Row-Level Security policies associated with the original table
### Details:
Query system catalogs (e.g., pg_policy in PostgreSQL) to list policies. Document policy definitions, roles, and dependencies.

## 3. RLS recreation script [done]
### Dependencies: 182.2
### Description: Create SQL script to reimplement RLS policies on renamed table
### Details:
Modify existing policy definitions to reference new table name. Maintain original security characteristics and permissions.

## 4. Migration testing [done]
### Dependencies: 182.1, 182.2, 182.3
### Description: Validate table functionality and security after migration
### Details:
Test CRUD operations, foreign key constraints, index usage, and RLS enforcement. Verify application compatibility.

## 5. Backup/rollback plan [done]
### Dependencies: None
### Description: Document procedures for backup and emergency rollback
### Details:
Create pre-migration snapshot instructions and rollback scripts to revert table name, RLS policies, and related objects.

