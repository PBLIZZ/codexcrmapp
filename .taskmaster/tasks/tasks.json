{
  "master": {
    "tasks": [
      {
        "id": 209,
        "title": "Update Supabase Auth Integration for Name Collection",
        "description": "Modify the Supabase authentication integration to collect and store the user's name during sign-up.",
        "details": "1. Update the sign-up function to include the name field in the metadata:\n\n2. Verify that the name is being stored in `auth.users.raw_user_meta_data`\n\n3. If using a separate profiles table, ensure that the database trigger is properly set up to copy the name from `raw_user_meta_data` to the profiles table\n\n4. Test the flow to ensure the name is properly stored and accessible in the user's profile",
        "testStrategy": "1. Test the sign-up process with a name provided\n2. Verify in the Supabase dashboard that the name is stored in user metadata\n3. Check that any database triggers correctly copy the name to the profiles table if applicable\n4. Test retrieving and displaying the user's name after sign-up\n5. Test with various name formats (short, long, with special characters, etc.)",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 229,
        "title": "AI Assistant Chat Interface",
        "description": "Develop global AI chat interface with natural language command processing",
        "details": "Build AI assistant with: 1) Persistent chat bubble using floating UI components 2) Chat interface with message history and typing indicators 3) Natural language processing integration with OpenAI GPT-4 or Claude 4) Command suggestion chips for common actions 5) tRPC procedure mapping for CRM actions 6) Approval workflow for critical operations 7) Message persistence and conversation threading. Use WebSocket or Server-Sent Events for real-time communication.",
        "testStrategy": "AI response accuracy testing, command execution validation, real-time communication testing, approval workflow testing, and conversation persistence testing",
        "priority": "high",
        "dependencies": [
          "223",
          "224",
          "217"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 230,
        "title": "AI Background Processing System",
        "description": "Implement background AI processing for contact enrichment and automated insights",
        "details": "Create background processing system with: 1) Queue system using Supabase Edge Functions or Vercel background functions 2) Contact enrichment pipeline using external APIs (Clearbit, FullContact) 3) AI-powered note analysis and tagging 4) Relationship insight generation 5) Email draft assistance 6) Automated task suggestions based on contact interactions. Implement proper error handling, retry logic, and monitoring with logging.",
        "testStrategy": "Queue processing reliability testing, API integration testing, error handling validation, performance monitoring, and data accuracy verification",
        "priority": "medium",
        "dependencies": [
          "222",
          "223",
          "220"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 232,
        "title": "MCP Client Architecture Foundation",
        "description": "Establish Model Context Protocol client architecture for third-party integrations",
        "details": "Build MCP client foundation with: 1) Abstract MCP client interface for standardized integration 2) Authentication flow management for OAuth providers 3) Configuration management for API keys and settings 4) Error handling and retry mechanisms 5) Rate limiting and quota management 6) Integration status monitoring 7) Webhook handling for real-time updates. Create base classes that can be extended for specific integrations.",
        "testStrategy": "Authentication flow testing, error handling validation, rate limiting verification, webhook processing testing, and integration status monitoring",
        "priority": "medium",
        "dependencies": [
          "223",
          "219"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 233,
        "title": "Google Services Integration",
        "description": "Implement two-way sync with Google Calendar, Contacts, and Gmail using MCP client",
        "details": "Create Google integration with: 1) Google Calendar API v3 integration for session scheduling 2) Google Contacts API for contact synchronization 3) Gmail API for email management and drafts 4) Two-way sync with conflict resolution 5) Incremental sync using change tokens 6) Batch operations for efficiency 7) OAuth 2.0 flow with proper scope management. Use Google APIs Node.js client library and implement proper error handling for API limits.",
        "testStrategy": "Two-way sync validation, conflict resolution testing, incremental sync verification, OAuth flow testing, and API rate limit handling",
        "priority": "high",
        "dependencies": [
          232
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 234,
        "title": "Email Service Integration Hub",
        "description": "Build unified email service integration supporting multiple providers",
        "details": "Implement email integration with: 1) Gmail API integration (already covered in Google services) 2) MailChimp API v3 for marketing campaigns 3) SendGrid API for transactional emails 4) Custom SMTP configuration support 5) Email template management 6) Campaign tracking and analytics 7) Unified interface for different providers. Use adapter pattern for provider abstraction and implement proper email validation.",
        "testStrategy": "Multi-provider email sending testing, template rendering validation, campaign tracking verification, SMTP configuration testing, and delivery status monitoring",
        "priority": "medium",
        "dependencies": [
          232
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 235,
        "title": "Messaging Integration (WhatsApp/Twilio)",
        "description": "Integrate WhatsApp Business API and Twilio for client messaging capabilities",
        "details": "Build messaging integration with: 1) WhatsApp Business API integration for client communication 2) Twilio SMS API for text messaging 3) Message thread management and history 4) Template message support for WhatsApp 5) Delivery status tracking 6) Media message support (images, documents) 7) Webhook handling for incoming messages. Implement proper message queuing and retry mechanisms.",
        "testStrategy": "Message delivery testing, webhook processing validation, media message handling, template message verification, and delivery status accuracy",
        "priority": "low",
        "dependencies": [
          232
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 236,
        "title": "Social Media Integration Framework",
        "description": "Create framework for Instagram, Facebook, and LinkedIn integration",
        "details": "Implement social media integration with: 1) Instagram Basic Display API for profile insights 2) Facebook Graph API for page management 3) LinkedIn API for professional networking 4) Social media post scheduling (placeholder) 5) Engagement metrics tracking 6) Content calendar integration 7) OAuth flows for each platform. Focus on read-only operations initially with framework for future write operations.",
        "testStrategy": "OAuth flow testing for each platform, API data retrieval validation, engagement metrics accuracy, and rate limit compliance testing",
        "priority": "low",
        "dependencies": [
          232
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 237,
        "title": "User Authentication and Profile Management",
        "description": "Enhance user authentication system with practitioner profiles and subscription management",
        "details": "Build authentication system with: 1) Supabase Auth integration with email/password and OAuth providers 2) Enhanced user profiles for wellness practitioners 3) Subscription tier management and feature gating 4) AI assistant preferences and settings 5) Integration connection management 6) Security settings and two-factor authentication 7) Profile customization for branding. Implement proper role-based access control and session management.",
        "testStrategy": "Authentication flow testing, subscription tier validation, security settings verification, profile customization testing, and session management validation",
        "priority": "high",
        "dependencies": [
          "222",
          "221"
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 239,
        "title": "Mobile Responsive Design Implementation",
        "description": "Ensure full mobile responsiveness across all modules and components",
        "details": "Implement mobile responsiveness with: 1) Responsive breakpoints using Tailwind CSS 2) Touch-friendly interface elements 3) Mobile-optimized navigation patterns 4) Swipe gestures for task management 5) Mobile-specific AI chat interface 6) Optimized forms for mobile input 7) Progressive Web App capabilities. Use CSS Grid and Flexbox for flexible layouts and implement proper touch targets.",
        "testStrategy": "Cross-device testing on various screen sizes, touch interaction validation, PWA functionality testing, and mobile performance optimization",
        "priority": "medium",
        "dependencies": [
          224
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 240,
        "title": "Testing Infrastructure and Quality Assurance",
        "description": "Establish comprehensive testing infrastructure for the entire application",
        "details": "Set up testing infrastructure with: 1) Jest and React Testing Library for unit tests 2) Playwright for end-to-end testing 3) Storybook for component documentation and testing 4) MSW (Mock Service Worker) for API mocking 5) Accessibility testing with axe-core 6) Visual regression testing with Percy or Chromatic 7) Performance testing with Lighthouse CI. Implement CI/CD pipeline with GitHub Actions for automated testing.",
        "testStrategy": "Test coverage reporting, automated test execution in CI/CD, accessibility compliance validation, visual regression detection, and performance regression monitoring",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 242,
        "title": "Error Handling and User Feedback System",
        "description": "Implement a comprehensive error handling and user feedback system across the application to provide clear, actionable messages for both system errors and user actions.",
        "details": "",
        "testStrategy": "",
        "status": "pending",
        "dependencies": [
          224,
          237,
          238,
          177,
          175
        ],
        "priority": "medium",
        "subtasks": []
      },
      {
        "id": 267,
        "title": "Create TypeScript Type Definitions for Database Schema",
        "description": "Define comprehensive TypeScript interfaces and types that map database snake_case columns to camelCase JavaScript properties",
        "details": "",
        "testStrategy": "Compile TypeScript without errors. Create unit tests that verify type compatibility between database and API types. Test with sample data transformations.",
        "priority": "high",
        "dependencies": [
          266
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 271,
        "title": "Implement TanStack Query 5 with Consistent Query Keys",
        "description": "Setup TanStack Query 5 with standardized query key patterns and proper caching strategies",
        "details": "",
        "testStrategy": "",
        "priority": "medium",
        "dependencies": [
          270
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 301,
        "title": "Epic 1: Implement Core Database Schema",
        "description": "Create the foundational Supabase database migration scripts for all tables required by the V1 Tasks and Calendar modules.",
        "details": "",
        "testStrategy": "",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 302,
        "title": "Epic 1: Implement Foundational tRPC Routers",
        "description": "Create the boilerplate for all necessary tRPC routers with initial, mock data-returning procedures for Tasks, Projects, and Contacts.",
        "details": "In the `packages/server/src/routers/` directory, create the files for `task.ts`, `project.ts`, and `contact.ts`. Implement `taskRouter`, `projectRouter`, and `contactRouter`. Define the initial procedures (`task.list`, `project.list`, `contact.search`) that return hardcoded, mock data conforming to the database schema. This unblocks frontend development.",
        "testStrategy": "Once the AI completes the task, use an API client (like Thunder Client in VS Code) to send a request to each new endpoint (e.g., `task.list`, `project.list`). Verify that each endpoint returns a 200 OK status and the expected mock JSON array.",
        "priority": "high",
        "dependencies": []
      },
      {
        "id": 303,
        "title": "Epic 2: Build Core Task UI - Display",
        "description": "Build the main UI for the Tasks module, focusing on displaying tasks in a 'Things-inspired' list view.",
        "details": "Refactor the existing files in `app/tasks/` to create a clean layout. The main page component will use the `task.list` tRPC hook to fetch data and pass it to a `ThingsTaskCard` component for rendering each task. This task focuses purely on displaying data.",
        "testStrategy": "Navigate to the `/tasks` route in your browser. Verify that the list of mock tasks from your tRPC endpoint is being displayed correctly, with each task rendered as a distinct `ThingsTaskCard`.",
        "priority": "high",
        "dependencies": [
          302
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 304,
        "title": "Epic 2: Implement Manual Task Creation",
        "description": "Implement the full user flow for manually creating a new task and having it appear in the UI.",
        "details": "This involves creating the frontend form and connecting it to a backend tRPC mutation. The goal is a seamless create-and-display loop.",
        "testStrategy": "Go to the `/tasks` page. Type 'My first fully functional task' into the add task form and submit it. The task should instantly appear in your task list (via optimistic update) and should remain there after a full page refresh.",
        "priority": "high",
        "dependencies": [
          303
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 305,
        "title": "Epic 2: Implement Task Completion",
        "description": "Enable users to mark tasks as complete, updating the UI and database state.",
        "details": "This task connects the checkbox on the `ThingsTaskCard` to a backend mutation, providing the core interactive functionality of a to-do list.",
        "testStrategy": "In the UI, find a pending task and click its checkbox. Verify its appearance changes immediately (e.g., text gets a strikethrough). Refresh the page; the task should remain marked as complete. Check the `status` column in the `tasks` table for that record in Supabase to confirm it's set to 'completed'.",
        "priority": "high",
        "dependencies": [
          303
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 306,
        "title": "Epic 3: Implement Project Creation Flow",
        "description": "Build the complete user flow for creating a new Project.",
        "details": "This mirrors the task creation flow but for the 'Projects' entity. It involves the UI form and the backend tRPC mutation.",
        "testStrategy": "In the `TasksSidebar`, use the 'New Project' UI. Create a project named 'Q4 Marketing Campaign'. Verify it immediately appears in the project list in the sidebar and persists after a page refresh.",
        "priority": "medium",
        "dependencies": [
          302
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 307,
        "title": "Epic 3: Implement Project-Based Task Filtering",
        "description": "Enable users to view tasks filtered by the selected project.",
        "details": "This task makes the project list in the sidebar functional, allowing it to control the main task view.",
        "testStrategy": "Create two projects, 'Project A' and 'Project B'. Create 'Task 1' assigned to 'Project A' and 'Task 2' assigned to 'Project B'. Click 'Project A' in the sidebar; only 'Task 1' should be visible. Click 'Project B'; only 'Task 2' should be visible. Click 'Inbox' or 'All Tasks'; both should be visible.",
        "priority": "high",
        "dependencies": [
          306
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 308,
        "title": "Epic 3: Implement Task-to-Project Assignment",
        "description": "Allow existing tasks to be assigned to a project.",
        "details": "This task provides the functionality to organize existing tasks into projects, a key organizational feature.",
        "testStrategy": "Create a task without a project (it should appear in the 'Inbox'). Open the task's detail view, use the project dropdown to assign it to 'Project A', and save. Return to the main view; the task should no longer be in the 'Inbox' but should now appear when you filter by 'Project A'.",
        "priority": "medium",
        "dependencies": [
          306,
          307
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 309,
        "title": "Epic 4: Implement Task-to-Contact Assignment Backend",
        "description": "Create the backend tRPC procedures for assigning tasks to contacts.",
        "details": "This involves creating mutations to manage the records in the `task_assignees` join table.",
        "testStrategy": "Use an API client to call `task.addAssignee` with a task ID and a contact ID. Query the `task_assignees` table in Supabase to verify the new record was created. Then call `task.removeAssignee` and verify the record was deleted.",
        "priority": "medium",
        "dependencies": [
          301,
          302
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 310,
        "title": "Epic 4: Implement Task-to-Contact Assignment Frontend",
        "description": "Build the UI for users to assign contacts to a task.",
        "details": "This involves creating a search-and-select component within the task detail view.",
        "testStrategy": "Open a task that has no assignees. Assign 'John Doe' and 'Jane Smith'. Save and reopen; both should be listed. Then, remove 'Jane Smith'. Save and reopen; only 'John Doe' should be listed.",
        "priority": "medium",
        "dependencies": [
          309
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 311,
        "title": "Epic 5: Implement Google Calendar Onboarding",
        "description": "Build the complete user flow for connecting a Google Calendar, including OAuth and calendar selection.",
        "details": "This is a critical, user-facing security and integration feature that must be smooth and reliable.",
        "testStrategy": "Go to `/settings/integrations`. Click 'Connect Google Calendar'. Successfully log in with a real Google account and grant permissions. On redirect, ensure you are presented with a dropdown of your calendars. Select one. Verify the UI updates to a 'Connected' state and that this state persists on refresh.",
        "priority": "high",
        "dependencies": [
          301
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 312,
        "title": "Epic 5: Implement Calendar Data Display",
        "description": "Create the unified calendar view that displays events from both the CRM and the user's connected Google Calendar.",
        "details": "This task focuses on reading data from multiple sources and presenting it in a single, coherent user interface.",
        "testStrategy": "Manually create one event in your `calendar_events` table for today. Create a separate, different event in your actual Google Calendar for tomorrow. Navigate to the `/calendar` page in the app. Verify you can see both events displayed correctly on their respective days.",
        "priority": "high",
        "dependencies": [
          311
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 313,
        "title": "Epic 5: Implement Task and Calendar Sync",
        "description": "Allow users to push tasks with due dates from the CRM to their Google Calendar as events.",
        "details": "This feature provides a direct, actionable link between the planning done in the Tasks module and the user's scheduled reality in their calendar.",
        "testStrategy": "Create a new task with a title 'My Synced Task' and set its due date to next Tuesday at 2 PM. Open the task's detail view and click 'Add to Google Calendar'. Open your Google Calendar; a new event titled 'My Synced Task' should appear at the correct time on next Tuesday's date.",
        "priority": "medium",
        "dependencies": [
          311,
          303
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 314,
        "title": "Epic 6: Implement AI Task Delegation Backend",
        "description": "Update the database schema and tRPC API to support AI task ownership.",
        "details": "This task lays the backend groundwork for handing off tasks to the AI worker agent.",
        "testStrategy": "Create a new 'AI Worker' user in the `auth.users` table. Find its UUID. Create a normal task; its `owner_id` should be your ID. Use an API client to call the new `task.delegateToAI` mutation with the task's ID. Query the database and confirm the task's `owner_id` has changed to the AI Worker's UUID.",
        "priority": "medium",
        "dependencies": [
          301
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 315,
        "title": "Epic 6: Implement AI Task Delegation Frontend",
        "description": "Build the UI for a user to delegate a task to the AI.",
        "details": "This makes the AI handoff feature usable from the application interface.",
        "testStrategy": "Find a task in your personal inbox. Use the new 'Delegate to AI' menu option. The task should disappear from your view. Navigate to the new 'AI Inbox' page. The task should be listed there.",
        "priority": "medium",
        "dependencies": [
          314
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 316,
        "title": "Epic 6: Build the 'AI Inbox' UI",
        "description": "Create a dedicated view for the user to see which tasks are currently assigned to the AI.",
        "details": "This provides necessary visibility into the AI's workload, building user trust.",
        "testStrategy": "Delegate two tasks to the AI. Navigate to the 'AI Inbox'. Both tasks should be listed. Go back to your personal inbox and delegate a third task. Return to the 'AI Inbox' and verify the list updates to show all three tasks.",
        "priority": "medium",
        "dependencies": [
          315
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 329,
        "title": "Manual End-to-End Authentication Flow Testing",
        "description": "Manually test the sign-in, sign-out, and protected route access flows to confirm functionality.",
        "details": "Perform the following manual tests:\n1.  **Sign-in:** Navigate to the login page, enter valid credentials, and verify successful redirection to a protected page.\n2.  **Protected Route Access (Logged In):** Access various protected routes and ensure content is displayed correctly.\n3.  **Protected Route Access (Logged Out):** Log out and attempt to access protected routes directly. Verify that the application redirects to the login page or displays an unauthorized message.\n4.  **Sign-out:** Log in, then navigate to the sign-out functionality and verify successful logout and redirection to a public page (e.g., login or home).\n5.  **Session Persistence:** Close and reopen the browser (or clear session storage/cookies) after logging in, then attempt to access a protected route to verify session persistence.",
        "testStrategy": "Document each test case with steps, expected results, and actual results. All test cases must pass for successful verification. Use browser developer tools to inspect network requests and cookie states during the tests.",
        "priority": "high",
        "dependencies": [
          328
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 330,
        "title": "Final Codebase Review and Architectural Compliance Check",
        "description": "Conduct a final review of the refactored codebase to ensure adherence to architectural principles and best practices.",
        "details": "Review the following:\n1.  **Dependency Flow:** Confirm that `apps/web` and `packages/api` depend on `packages/auth`, and `packages/auth` has no internal workspace dependencies.\n2.  **Single Source of Truth:** Verify that all Supabase client creation logic is centralized within `packages/auth`.\n3.  **Security:** Ensure `supabase.auth.getUser()` is consistently used for server-side revalidation in server components.\n4.  **Cookie Management:** Confirm that `middleware.ts` is the sole place for writing session cookies.\n5.  **Code Cleanliness:** Check for any remaining legacy Supabase client code or redundant files.",
        "testStrategy": "Perform a comprehensive code review of the relevant files and directories. Use static analysis tools if available to check for dependency violations. Verify the absence of the old `apps/web/lib/supabase` directory.",
        "priority": "medium",
        "dependencies": [
          329
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 331,
        "title": "Standardize ESLint to v9.x",
        "description": "Standardize all ESLint dependencies across the monorepo to version 9.x to resolve critical build failures and version conflicts.",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 332,
        "title": "Align tRPC to Stable v11.3.1",
        "description": "Remove all pre-release tRPC versions and standardize to the stable version 11.3.1 across all packages to ensure stability and type compatibility.",
        "dependencies": [
          331
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 333,
        "title": "Unify Supabase to v2.49.4",
        "description": "Standardize all Supabase packages to the latest stable version 2.49.4 to ensure consistent authentication flows and stable database connections.",
        "dependencies": [
          332
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 334,
        "title": "Centralize Common Dev Dependencies",
        "description": "Move common development dependencies like `typescript`, `@types/react`, `@types/react-dom`, `@types/node`, and `rimraf` to the root `package.json` to reduce duplication and improve build performance.",
        "dependencies": [
          333
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 335,
        "title": "Standardize pnpm Version and Configuration",
        "description": "Standardize the `pnpm` version to 10.12.4 across all packages and remove inconsistent `packageManager` fields to ensure consistent dependency management.",
        "dependencies": [
          334
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 336,
        "title": "Remove Unnecessary Dependencies",
        "description": "Identify and remove unused or misplaced dependencies, such as Next.js dependencies in non-frontend packages, duplicate build tools, and unused TypeScript installations.",
        "dependencies": [
          335
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 337,
        "title": "Optimize Peer Dependencies",
        "description": "Convert appropriate dependencies, such as React in the UI package, to peer dependencies to reduce bundle duplication and ensure proper dependency resolution.",
        "dependencies": [
          336
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 338,
        "title": "Centralize Build Configuration",
        "description": "Consolidate build tools and configurations across the monorepo to ensure consistent build processes and improve performance.",
        "dependencies": [
          337
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 339,
        "title": "Optimize Development Server Memory Usage",
        "description": "Implement strategies to reduce the development server's memory consumption from 2GB+ to under 1GB.",
        "details": "",
        "dependencies": [
          338
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 340,
        "title": "Comprehensive Build Process Validation",
        "description": "Perform a comprehensive test of all build processes across the monorepo to ensure they complete successfully after all dependency changes.",
        "dependencies": [
          339
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 341,
        "title": "Preserve Existing Functionality",
        "description": "Validate that all existing functionality across the CodexCRM application is preserved after dependency cleanup and updates.",
        "details": "Conduct thorough manual and automated testing of key application features. This includes user authentication, data fetching, CRUD operations, UI interactions, and any critical business logic. Leverage existing unit and integration tests. If automated tests are insufficient, perform a detailed regression test plan. Pay close attention to areas affected by tRPC and Supabase updates.",
        "testStrategy": "Execute the full suite of unit and integration tests. Perform manual end-to-end testing of critical user flows. Verify data integrity and API responses. Ensure no regressions are introduced.",
        "priority": "high",
        "dependencies": [
          340
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 342,
        "title": "Verify No New Lint Errors",
        "description": "Ensure that no new lint errors are introduced as a result of ESLint version updates or dependency changes.",
        "details": "Run `pnpm lint` across the entire monorepo. Review the output for any new linting errors or warnings that were not present before the changes. Address these by either fixing the code, updating ESLint rules, or adjusting configurations to be compatible with ESLint v9.x. The goal is to maintain a clean linting output.",
        "testStrategy": "Confirm that `pnpm lint` completes without reporting any new errors or warnings. Compare linting output before and after changes to identify any regressions.",
        "priority": "medium",
        "dependencies": [
          341
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 343,
        "title": "Validate CI/CD Pipeline Success",
        "description": "Validate that the CI/CD pipelines pass successfully with the updated dependencies and build configurations.",
        "details": "Trigger a full CI/CD pipeline run on a dedicated branch or environment. Monitor the pipeline stages, including dependency installation, linting, testing, and building. Ensure that all stages complete without failures. Address any pipeline-specific issues that arise, such as caching problems or environment variable discrepancies.",
        "testStrategy": "Confirm that the CI/CD pipeline completes successfully for a full build. Review pipeline logs for any errors or unexpected behavior. Ensure all automated checks (lint, test, build) pass.",
        "priority": "high",
        "dependencies": [
          342
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 344,
        "title": "Measure Dependency Count Reduction",
        "description": "Measure and confirm the reduction in total dependency count, aiming for a 30% reduction.",
        "details": "Before starting the cleanup, record the total number of installed packages (e.g., by analyzing `pnpm-lock.yaml` or using `pnpm list --json`). After all cleanup and centralization tasks are complete, re-measure the total dependency count. Compare the two numbers to verify the target reduction. This metric directly reflects the success of dependency cleanup and centralization.",
        "testStrategy": "Compare the total number of unique packages in `pnpm-lock.yaml` before and after the changes. Calculate the percentage reduction to ensure it meets or exceeds 30%.",
        "priority": "medium",
        "dependencies": [
          343
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 345,
        "title": "Measure Performance Improvements (Build, Install, Bundle)",
        "description": "Measure and confirm improvements in build time, install time, and bundle size.",
        "details": "Before starting the project, record baseline metrics for build time (e.g., `pnpm build` duration), install time (e.g., `pnpm install` duration on a clean cache), and application bundle size (e.g., using `webpack-bundle-analyzer` or similar tools for the main application). After all tasks are complete, re-measure these metrics and compare them to the baselines. Aim for a 20% improvement in build time, 25% in install time, and 15% in bundle size.",
        "testStrategy": "Record and compare build times, install times, and main application bundle sizes before and after the project. Verify that the target percentage improvements are met or exceeded.",
        "priority": "low",
        "dependencies": [
          344
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 346,
        "title": "Remove Next.js from Auth Package",
        "description": "Remove Next.js dependency from the auth package to ensure it remains framework-agnostic and eliminate architectural violations.",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 347,
        "title": "Remove UI Dependencies from API Package",
        "description": "Remove UI-related dependencies (next-themes, sonner) from the API package to maintain clean architectural separation.",
        "dependencies": [],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 348,
        "title": "Centralize tsup Configuration",
        "description": "Centralize `tsup` dependencies and configurations to the root level of the monorepo to ensure consistent build processes.",
        "dependencies": [
          346,
          347
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 349,
        "title": "Centralize rimraf Utility",
        "description": "Standardize the `rimraf` utility across the monorepo by centralizing its version and usage.",
        "details": "Identify `rimraf` usage in the root (`^6.0.1`) and UI package (`^5.0.9`). Remove `rimraf` from the UI package's `package.json`. Add `rimraf@^6.0.1` (or the latest stable version, e.g., `^6.0.1` as per PRD) to the root `package.json` as a `devDependency`. Update all `clean` scripts in individual packages to reference the centralized `rimraf` executable (e.g., `../../node_modules/.bin/rimraf` or via `pnpm` workspace resolution). Ensure all cleanup operations function correctly after centralization. Consider using `fs-extra` for more robust file system operations if `rimraf` proves insufficient for complex scenarios, but stick to `rimraf` as per PRD.",
        "testStrategy": "Execute `clean` scripts in all relevant packages (e.g., UI, root). Verify that specified directories and files are correctly removed. Check for any errors during the cleanup process. Ensure subsequent builds start from a clean state.",
        "priority": "medium",
        "dependencies": [
          348
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 350,
        "title": "Centralize ESLint Versions",
        "description": "Ensure consistent ESLint versions across all packages by centralizing its configuration and dependencies.",
        "details": "Identify ESLint versions in root (`^9.0.0`), database, and UI (`^9.29.0`). Remove `eslint` from individual packages (`database`, `UI`). Add `eslint@^9.0.0` to the root `package.json` as a `devDependency`. Create a centralized `.eslintrc.js` or `eslint.config.js` in the root, leveraging ESLint's flat config system (introduced in ESLint v9) for better maintainability. Configure individual packages to extend or reference this root configuration. Ensure all linting scripts in `package.json` files point to the centralized ESLint executable. For example, use `pnpm eslint` or `../../node_modules/.bin/eslint`. Refer to ESLint v9 migration guide and flat config documentation: `https://eslint.org/docs/latest/use/configure/configuration-files-new`.",
        "testStrategy": "Run linting scripts for all packages. Verify that linting passes without errors or unexpected warnings. Ensure that the correct ESLint rules are applied consistently across all packages. Check for any version conflicts or resolution issues during the linting process.",
        "priority": "medium",
        "dependencies": [
          348
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 351,
        "title": "Optimize UI Package Next.js Dependency",
        "description": "Optimize the UI package's Next.js dependency by converting it to a peer dependency.",
        "details": "In the UI package's `package.json`, move `next` from `dependencies` (`^15.0.0`) to `peerDependencies`. This signifies that the UI package expects the consuming application to provide Next.js, rather than bundling it directly. Update the `package.json` to include a `peerDependenciesMeta` entry if specific versions or optionality are required. Ensure the UI package still builds correctly and functions when consumed by a Next.js application. This change reduces the UI package's bundle size and prevents potential version conflicts. For example:\n```json\n\"peerDependencies\": {\n  \"next\": \"^15.0.0\"\n},\n\"peerDependenciesMeta\": {\n  \"next\": {\n    \"optional\": false\n  }\n}\n```",
        "testStrategy": "Build the UI package. Verify that it builds successfully without errors related to Next.js. Integrate the UI package into a sample Next.js application. Run the Next.js application and ensure all UI components render and function correctly. Check the bundle size of the UI package to confirm reduction. Verify that proper peer dependency warnings (if any) are displayed during installation in consuming projects.",
        "priority": "medium",
        "dependencies": [
          348
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 352,
        "title": "Consistent Package Manager Configuration",
        "description": "Ensure all packages reference a consistent pnpm version by adding the `packageManager` field.",
        "details": "Add the `packageManager` field to the `package.json` of all packages that currently lack it. The value should be consistent with the root's `packageManager` field, e.g., `\"pnpm@<version>\"`. This helps enforce the use of a specific pnpm version across the monorepo, preventing inconsistencies and build issues. For example, if the root uses `pnpm@9.0.0`, then all packages should have `\"packageManager\": \"pnpm@9.0.0\"`. After modification, run `pnpm install` at the root to ensure the lock file remains stable and dependencies are correctly resolved.",
        "testStrategy": "Run `pnpm install` in the root and within individual packages. Verify that the installation process is consistent and completes without errors. Check the `pnpm-lock.yaml` file to ensure it remains stable and reflects the expected dependency tree. Attempt to install dependencies with a different pnpm version to confirm the `packageManager` field correctly enforces the specified version.",
        "priority": "low",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 353,
        "title": "Centralize PostCSS Configuration",
        "description": "Consolidate PostCSS tooling for Tailwind processing by centralizing its configuration.",
        "details": "Move individual `postcss.config.js` files from packages to a single, centralized `postcss.config.js` in the monorepo root. Add `postcss@^8.4.33` to the root `package.json` as a `devDependency`. Configure the root PostCSS file to handle Tailwind CSS processing for all relevant packages. This might involve using `require.resolve` for plugins or dynamically loading configurations based on the current package. Ensure that the build process for packages using PostCSS (e.g., UI package) correctly picks up the centralized configuration. Refer to PostCSS documentation for configuration options: `https://postcss.org/`. Consider using `postcss-load-config` for more advanced configuration loading.",
        "testStrategy": "Build packages that utilize PostCSS (e.g., UI package). Inspect the generated CSS output to ensure Tailwind CSS styles are correctly processed and applied. Verify that no PostCSS-related errors occur during the build. Check for consistent CSS output across different packages.",
        "priority": "medium",
        "dependencies": [
          348,
          350
        ],
        "status": "in-progress",
        "subtasks": []
      },
      {
        "id": 354,
        "title": "Centralize Tailwind Configuration",
        "description": "Optimize Tailwind CSS build setup by centralizing its configuration.",
        "details": "Move multiple `tailwind.config.js` files from individual packages to a single, centralized `tailwind.config.js` in the monorepo root. Add `tailwindcss@^4.1.4` to the root `package.json` as a `devDependency`. Configure the root Tailwind file to include content paths for all packages that use Tailwind, ensuring proper purging and optimization. This might involve using glob patterns to cover all relevant source files (e.g., `content: ['./packages/**/*.{js,ts,jsx,tsx}']`). Ensure that the build process correctly applies Tailwind styles and that CSS purging works effectively to reduce bundle sizes. Refer to Tailwind CSS documentation for monorepo setup: `https://tailwindcss.com/docs/configuration#content-configuration`.",
        "testStrategy": "Build packages that use Tailwind CSS. Inspect the generated CSS files to confirm that only used Tailwind classes are included (purging works). Verify that all Tailwind styles are correctly applied in the UI. Check for any build errors or warnings related to Tailwind configuration. Compare bundle sizes to ensure optimization.",
        "priority": "medium",
        "dependencies": [
          353
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 355,
        "title": "Standardize Build Tool Versions",
        "description": "Ensure all build tools use consistent versions across the monorepo.",
        "details": "Review the `package.json` files across the entire monorepo. For each build tool (tsup, rimraf, eslint, postcss, tailwindcss), ensure that only the specified target versions (`tsup: ^8.2.3`, `rimraf: ^6.0.1`, `eslint: ^9.0.0`, `postcss: ^8.4.33`, `tailwindcss: ^4.1.4`) are present in the root `package.json` and removed from individual packages. Use `pnpm dedupe` or `pnpm why <package-name>` to identify and resolve any lingering version inconsistencies in the `node_modules` tree. This task is a consolidation and verification step after individual centralization efforts.",
        "testStrategy": "Run `pnpm list <tool-name>` for each centralized tool (tsup, rimraf, eslint, postcss, tailwindcss) to verify that only a single, correct version is installed. Check the `pnpm-lock.yaml` file for any unexpected duplicate entries or version mismatches. Perform a full monorepo build and lint to ensure no new version conflicts arise.",
        "priority": "low",
        "dependencies": [
          348,
          349,
          350,
          353,
          354
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 356,
        "title": "Standardize Development Tools",
        "description": "Ensure consistent development tooling versions across the monorepo, specifically for tools like Supabase CLI.",
        "details": "Identify any development tools that are installed inconsistently across packages (e.g., Supabase CLI). Centralize these tools to the root `package.json` as `devDependencies` if they are shared, or ensure consistent versions are specified in individual packages if they are package-specific but still need standardization. For Supabase CLI, consider adding it to the root `package.json` and documenting its usage for all developers. Use `pnpm add -w -D supabase` to add it to the root workspace. Ensure that all development scripts and workflows correctly utilize the standardized versions.",
        "testStrategy": "Verify the version of key development tools (e.g., `supabase --version`) in different package contexts. Ensure that development scripts (e.g., database migrations, local server startup) function correctly with the standardized tool versions. Check for any warnings or errors related to tool version mismatches during development workflows.",
        "priority": "low",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 357,
        "title": "Comprehensive Monorepo Validation and Testing",
        "description": "Perform comprehensive validation and testing across the entire monorepo after all centralization and cleanup tasks.",
        "details": "Execute a full monorepo build (`pnpm build`). Run all unit, integration, and end-to-end tests across all packages. Verify that all UI components render correctly and interact as expected. Confirm that authentication flows and API endpoints function without regressions. Start the development server and ensure all applications within the monorepo are fully functional. Conduct performance measurements (e.g., build times, bundle sizes) to ensure improvements or at least no degradation. This task serves as the final verification step before considering the project complete.",
        "testStrategy": "Execute `pnpm build` at the monorepo root. Run `pnpm test` (or equivalent) for all packages. Manually test critical user flows in the UI. Use tools like Lighthouse or WebPageTest to measure performance metrics (build time, bundle size, page load time). Verify that all acceptance criteria outlined in the PRD (e.g., build tool count, package complexity, version consistency) are met. Document any regressions or unexpected behavior for immediate resolution.",
        "priority": "high",
        "dependencies": [
          346,
          347,
          348,
          349,
          350,
          351,
          352,
          353,
          354,
          355,
          356
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 358,
        "title": "Project Phoenix: Verify Backend Foundation",
        "description": "Validate that the backend packages are correctly structured according to the latest architectural decisions",
        "details": "Before starting the Project Phoenix integration, ensure:\n1. `@codexcrm/api` correctly creates and exports its `appRouter` and `createContext` function\n2. The `apps/web/app/api/trpc/[trpc]/route.ts` file is correctly set up to handle requests and pass them to the `appRouter`\n3. Verify that the API endpoint is accessible and responds correctly to simple requests",
        "testStrategy": "1. Check if the `@codexcrm/api` package exports the expected objects\n2. Run a basic HTTP request against the tRPC API endpoint to verify it responds\n3. Test a simple procedure call to confirm the full request-response cycle works",
        "priority": "high",
        "dependencies": [],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 359,
        "title": "Create Server-Side tRPC Client Helper",
        "description": "Create the server-side tRPC client helper that allows Server Components to call the API without HTTP requests",
        "details": "1. Create the file `apps/web/lib/trpc/server-client.ts`\n2. Add the exact content:\n```typescript\nimport { appRouter } from '@codexcrm/api/root';\nimport { createContext } from '@codexcrm/api/context';\n\n// This server client allows you to call your API from Server Components\n// without making an HTTP request.\nexport const api = appRouter.createCaller(await createContext({} as any));\n```\n3. Do not modify any other files\n4. Do not change imports or add additional logic",
        "testStrategy": "1. Verify the file exists at the correct path\n2. Check that the file imports from the correct packages\n3. Ensure the exported `api` object is available for import",
        "priority": "high",
        "dependencies": [
          358
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 360,
        "title": "Audit Server Components for Old Supabase Patterns",
        "description": "Identify all Server Components in apps/web that use old Supabase patterns",
        "details": "1. Search in the `apps/web/app` directory for all `.tsx` files that do NOT have `'use client'` directive\n2. Look for files that:\n   - Import from `@/lib/supabase/server` or similar\n   - Use `createServerSupabaseClient()` or similar\n   - Have `supabase.from('table_name')` calls\n   - Use `async/await` for data fetching\n3. Create a list of all such files with their current import statements and data fetching patterns\n4. Do not modify any code, only document findings",
        "testStrategy": "1. Provide a complete list of affected files\n2. Show the specific lines that need to be changed\n3. Confirm no Server Components were missed",
        "priority": "medium",
        "dependencies": [
          359
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 361,
        "title": "Refactor Contact List Page Server Component",
        "description": "Replace old Supabase patterns with new tRPC server client in the contacts page",
        "details": "1. Open `apps/web/app/contacts/page.tsx`\n2. Remove any imports related to Supabase (e.g., `import { createServerSupabaseClient } from '@/lib/supabase/server'`)\n3. Add import: `import { api } from '@/lib/trpc/server-client';`\n4. Replace any `supabase.from('contacts').select('*')` or similar with `await api.contact.getAll()`\n5. Remove any `createServerSupabaseClient()` calls\n6. Keep all UI components and other logic unchanged\n7. Do not modify any other files",
        "testStrategy": "1. Verify no Supabase imports remain\n2. Check that tRPC server client is imported\n3. Confirm data fetching uses the new API pattern",
        "priority": "high",
        "dependencies": [
          360
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 362,
        "title": "Refactor Dashboard Page Server Component",
        "description": "Replace old Supabase patterns with new tRPC server client in the dashboard page",
        "details": "1. Open `apps/web/app/dashboard/page.tsx` or `apps/web/app/page.tsx` (whichever contains the dashboard)\n2. Remove any imports related to Supabase\n3. Add import: `import { api } from '@/lib/trpc/server-client';`\n4. Replace any database queries with appropriate `await api.*` calls\n5. Remove any `createServerSupabaseClient()` calls\n6. Keep all UI components and other logic unchanged\n7. Do not modify any other files",
        "testStrategy": "1. Verify no Supabase imports remain\n2. Check that tRPC server client is imported\n3. Confirm data fetching uses the new API pattern",
        "priority": "high",
        "dependencies": [
          360
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 363,
        "title": "Refactor Individual Contact Page Server Component",
        "description": "Replace old Supabase patterns with new tRPC server client in the individual contact page",
        "details": "1. Open `apps/web/app/contacts/[id]/page.tsx` or similar contact detail page\n2. Remove any imports related to Supabase\n3. Add import: `import { api } from '@/lib/trpc/server-client';`\n4. Replace any `supabase.from('contacts').select('*').eq('id', id)` with `await api.contact.getById({ id })`\n5. Remove any `createServerSupabaseClient()` calls\n6. Keep all UI components and other logic unchanged\n7. Do not modify any other files",
        "testStrategy": "1. Verify no Supabase imports remain\n2. Check that tRPC server client is imported\n3. Confirm data fetching uses the new API pattern with proper parameter passing",
        "priority": "high",
        "dependencies": [
          360
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 364,
        "title": "Audit Client Components for Old Patterns",
        "description": "Identify all Client Components that use old fetch patterns or direct API calls",
        "details": "1. Search in `apps/web` for all `.tsx` files that have `'use client'` directive\n2. Look for files that:\n   - Use `fetch('/api/contacts')` or similar direct API calls\n   - Use `useEffect` with data fetching\n   - Have form submission handlers that call `fetch()`\n3. Create a list of all such files with their current patterns\n4. Do not modify any code, only document findings",
        "testStrategy": "1. Provide a complete list of affected Client Components\n2. Show the specific patterns that need to be changed\n3. Confirm no Client Components were missed",
        "priority": "medium",
        "dependencies": [
          359
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 365,
        "title": "Refactor Contact Form Client Component",
        "description": "Replace old fetch patterns with tRPC mutations in contact form component",
        "details": "1. Find the contact form component (likely in `apps/web/components` or similar)\n2. Add import: `import { trpc } from '@/lib/trpc/client';`\n3. Replace any `fetch('/api/contacts', { method: 'POST', ... })` with `trpc.contact.create.useMutation()`\n4. Update form submission handler to use `mutation.mutate(data)` instead of fetch\n5. Remove any direct fetch calls\n6. Keep all UI logic and validation unchanged\n7. Do not modify any other files",
        "testStrategy": "1. Verify tRPC client is imported\n2. Check that mutations are used instead of fetch\n3. Confirm form submission logic works with new pattern",
        "priority": "high",
        "dependencies": [
          364
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 366,
        "title": "Refactor Contact Edit Client Component",
        "description": "Replace old fetch patterns with tRPC mutations in contact edit component",
        "details": "1. Find the contact edit component (likely in `apps/web/components` or similar)\n2. Add import: `import { trpc } from '@/lib/trpc/client';`\n3. Replace any `fetch('/api/contacts/[id]', { method: 'PUT', ... })` with `trpc.contact.update.useMutation()`\n4. Update form submission handler to use `mutation.mutate({ id, ...data })` instead of fetch\n5. Remove any direct fetch calls\n6. Keep all UI logic and validation unchanged\n7. Do not modify any other files",
        "testStrategy": "1. Verify tRPC client is imported\n2. Check that update mutations are used instead of fetch\n3. Confirm edit form submission logic works with new pattern",
        "priority": "high",
        "dependencies": [
          364
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 367,
        "title": "Refactor Contact Delete Client Component",
        "description": "Replace old fetch patterns with tRPC mutations in contact delete component",
        "details": "1. Find the contact delete component or delete handler (likely in `apps/web/components` or similar)\n2. Add import: `import { trpc } from '@/lib/trpc/client';`\n3. Replace any `fetch('/api/contacts/[id]', { method: 'DELETE', ... })` with `trpc.contact.delete.useMutation()`\n4. Update delete handler to use `mutation.mutate({ id })` instead of fetch\n5. Remove any direct fetch calls\n6. Keep all UI logic and confirmation dialogs unchanged\n7. Do not modify any other files",
        "testStrategy": "1. Verify tRPC client is imported\n2. Check that delete mutations are used instead of fetch\n3. Confirm delete functionality works with new pattern",
        "priority": "high",
        "dependencies": [
          364
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 368,
        "title": "Audit Server Actions Directory",
        "description": "Identify all Server Actions that use old Supabase patterns",
        "details": "1. Search in `apps/web/actions` directory for all `.ts` files\n2. Look for files that:\n   - Have `'use server'` directive\n   - Import from `@/lib/supabase/server` or similar\n   - Use `createServerSupabaseClient()` or similar\n   - Have `supabase.from('table_name')` calls\n3. Create a list of all such files with their current patterns\n4. Do not modify any code, only document findings",
        "testStrategy": "1. Provide a complete list of affected Server Action files\n2. Show the specific patterns that need to be changed\n3. Confirm no Server Actions were missed",
        "priority": "medium",
        "dependencies": [
          359
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 369,
        "title": "Refactor Contact Creation Server Action",
        "description": "Replace old Supabase patterns with tRPC server client in contact creation server action",
        "details": "1. Open `apps/web/actions/contact-actions.ts` or similar contact action file\n2. Remove any imports related to Supabase\n3. Add imports: `import { api } from '@/lib/trpc/server-client';` and `import { revalidatePath } from 'next/cache';`\n4. Replace any `supabase.from('contacts').insert(...)` with `await api.contact.create(data)`\n5. Remove any `createServerSupabaseClient()` calls\n6. Add `revalidatePath('/contacts');` after successful operations\n7. Keep error handling and return structure unchanged\n8. Do not modify any other files",
        "testStrategy": "1. Verify no Supabase imports remain\n2. Check that tRPC server client is imported\n3. Confirm actions use the new API pattern with proper revalidation",
        "priority": "high",
        "dependencies": [
          368
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 370,
        "title": "Refactor Contact Update Server Action",
        "description": "Replace old Supabase patterns with tRPC server client in contact update server action",
        "details": "1. Open the contact update server action file in `apps/web/actions`\n2. Remove any imports related to Supabase\n3. Add imports: `import { api } from '@/lib/trpc/server-client';` and `import { revalidatePath } from 'next/cache';`\n4. Replace any `supabase.from('contacts').update(...).eq('id', id)` with `await api.contact.update({ id, ...data })`\n5. Remove any `createServerSupabaseClient()` calls\n6. Add `revalidatePath('/contacts');` after successful operations\n7. Keep error handling and return structure unchanged\n8. Do not modify any other files",
        "testStrategy": "1. Verify no Supabase imports remain\n2. Check that tRPC server client is imported\n3. Confirm actions use the new API pattern with proper revalidation",
        "priority": "high",
        "dependencies": [
          368
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 371,
        "title": "Refactor Contact Delete Server Action",
        "description": "Replace old Supabase patterns with tRPC server client in contact delete server action",
        "details": "1. Open the contact delete server action file in `apps/web/actions`\n2. Remove any imports related to Supabase\n3. Add imports: `import { api } from '@/lib/trpc/server-client';` and `import { revalidatePath } from 'next/cache';`\n4. Replace any `supabase.from('contacts').delete().eq('id', id)` with `await api.contact.delete({ id })`\n5. Remove any `createServerSupabaseClient()` calls\n6. Add `revalidatePath('/contacts');` after successful operations\n7. Keep error handling and return structure unchanged\n8. Do not modify any other files",
        "testStrategy": "1. Verify no Supabase imports remain\n2. Check that tRPC server client is imported\n3. Confirm actions use the new API pattern with proper revalidation",
        "priority": "high",
        "dependencies": [
          368
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 372,
        "title": "Remove Old Supabase Server Utility",
        "description": "Remove or comment out the old Supabase server utility file",
        "details": "1. Locate `apps/web/lib/supabase/server.ts` or similar Supabase server utility file\n2. Comment out the entire file content with a note: `// DEPRECATED: Replaced by tRPC server client`\n3. Do not delete the file (in case rollback is needed)\n4. Do not modify any other files",
        "testStrategy": "1. Verify the file is commented out\n2. Check that the deprecation note is added\n3. Confirm file still exists but is non-functional",
        "priority": "low",
        "dependencies": [
          361,
          362,
          363,
          369,
          370,
          371
        ],
        "status": "done",
        "subtasks": []
      },
      {
        "id": 373,
        "title": "Final Build Test",
        "description": "Test that the application builds successfully after all refactoring",
        "details": "1. Run `pnpm exec turbo build` in the root directory\n2. Verify that the build completes without errors\n3. If there are build errors, create a list of the errors but do not fix them\n4. Run `pnpm exec turbo dev` to test local development\n5. Verify that the dev server starts without errors\n6. Do not modify any code, only report results",
        "testStrategy": "1. Build completes successfully\n2. Dev server starts without errors\n3. No TypeScript errors related to missing imports or types",
        "priority": "high",
        "dependencies": [
          361,
          362,
          363,
          365,
          366,
          367,
          369,
          370,
          371
        ],
        "status": "pending",
        "subtasks": []
      },
      {
        "id": 374,
        "title": "Search and Remove Remaining Supabase References",
        "description": "Perform a final search for any remaining Supabase references in the apps/web directory",
        "details": "1. Search for all occurrences of 'supabase' in `apps/web` directory (case-insensitive)\n2. Search for all occurrences of 'createServerSupabaseClient' in `apps/web` directory\n3. Search for all occurrences of '.from(' in `apps/web` directory (this catches database queries)\n4. Create a list of any remaining references\n5. Do not modify any code, only document findings\n6. Exclude package.json and lock files from the search",
        "testStrategy": "1. Complete list of remaining Supabase references\n2. Verification that no active database queries remain\n3. Confirmation that only expected references (like package.json) exist",
        "priority": "medium",
        "dependencies": [
          373
        ],
        "status": "pending",
        "subtasks": []
      }
    ],
    "metadata": {
      "created": "2025-06-15T19:15:09.849Z",
      "updated": "2025-07-08T21:52:58.051Z",
      "description": "Tasks for master context"
    }
  }
}