
---

**Omnipotency AI CRM - Product Requirements Document**

**Version:** 2.0 (MVP Definition & Technical Blueprint)
**Date:** 2024-08-15 (Date of Merge)
**Author:** Peter Blizzard (Concept Lead), AI Assistant (Documentation & Merging)
**Status:** Draft

---

## 1. Introduction

### 1.1 Purpose of this document
This Product Requirements Document (PRD) outlines the vision, goals, features, and requirements for **Omnipotency AI CRM**, an AI-first Customer Relationship Management (CRM) platform. It is specifically tailored to solo wellness practitioners and small wellness businesses (e.g., yoga teachers, massage therapists, holistic coaches, alternative therapists). This document serves as the single source of truth for design, development, and testing, ensuring the product meets user needs and achieves its strategic objectives. Version 2.0 merges previous documentation and extensive discussions to define a robust Minimum Viable Product (MVP) with core AI capabilities, technical architecture, and integration strategies.

### 1.2 Project Overview
Omnipotency AI CRM is a web application built around an AI assistant designed to automate administrative tasks, manage client data, guide client communication, and surface business insights. The MVP will deliver core CRM functionality—contact management, authentication, basic grouping, and AI-powered features like email scanning, calendar integration, contact enrichment, and basic segmentation—via a clean, intuitive web interface. The long-term vision includes deeper AI integrations, advanced analytics, and a comprehensive toolset to empower wellness practitioners to grow their practice and focus on client well-being.

### 1.3 Vision
> Empower solo wellness practitioners and small wellness businesses with an intelligent, intuitive, and automated CRM that acts as a **true assistant**, freeing them to focus on client well-being, relationship nurturing, and practice growth.

---

## 2. Product Overview

### 2.1 Product Description
Omnipotency AI CRM is a web application that enables wellness practitioners to manage contacts, track interactions, integrate with their existing communication channels (email, calendar), and streamline administrative tasks. Its key differentiator is its **AI-first** approach: AI automates workflows, enriches data, drafts communications, and provides insights. Data is stored securely in a **Supabase PostgreSQL** database and accessed via a **tRPC** API by a **Next.js** frontend.

### 2.2 Key Differentiators
*   **AI-First Design:** AI is the core engine, not an add-on, automating tasks and providing intelligent assistance.
*   **Niche Focus:** Purpose-built for the unique needs of solo wellness practitioners and small wellness businesses.
*   **Relationship-Centric:** Prioritizes features that help track, nurture, and deepen client relationships.
*   **Automation-First:** Reduces administrative overhead through AI-powered enrichment, smart reminders, and automated communication drafts.
*   **Centralized Data Hub:** Consolidates client data and operations, reducing tool sprawl by integrating with existing lead sources and communication tools.
*   **Intuitive UX:** Designed for non-technical users with straightforward workflows and a clean interface.
*   **Future-Proof Architecture:** Modern stack (Next.js, Supabase, tRPC, pnpm monorepo) enables scalability and rapid feature development.
*   **Privacy-Conscious:** Implements robust security measures to protect sensitive client and business data.

### 2.3 Core Principles
1.  **Simplicity:** Create an intuitive UI/UX accessible to non-technical users.
2.  **Relationship-Centric:** Prioritize features that help track and nurture connections.
3.  **Automation:** Leverage AI and automation to reduce manual administrative overhead.
4.  **Centralization & Integration:** Bring contacts from various sources into one manageable space and integrate seamlessly with users' existing tools.
5.  **Type Safety & Reliability:** Build robust, maintainable code with TypeScript, Zod, and tRPC.
6.  **Scalability & Cost-Effectiveness:** Use Vercel and Supabase for efficient scaling and rapid development.
7.  **Privacy & Security:** Implement robust security measures through Supabase RLS and standard best practices.
8.  **User Empowerment:** Provide tools that make users feel capable and in control, with AI as a helpful assistant.

---

## 3. Goals and Objectives

### 3.1 Business Goals
1.  Launch an MVP that attracts early adopters within the solo/small wellness community and demonstrates clear value.
2.  Achieve high user satisfaction, engagement, and retention through effective AI-driven automation and usability.
3.  Position Omnipotency AI CRM as a leading AI-first CRM in its niche.
4.  Build a scalable and robust platform ready for advanced AI features, further integrations, and potential premium offerings.
5.  Establish a freemium model with a strong open-source base, fostering community and driving adoption.

### 3.2 Product Goals – MVP Focus
1.  **Deliver Core CRM Functionality:** Robust authentication, comprehensive contact CRUD, and basic contact grouping.
2.  **Implement Key AI Assistant Features:**
    *   Automated contact data enrichment.
    *   Gmail integration for AI-powered lead detection from emails and drafting personalized welcome/reply emails.
    *   Google Calendar integration for 2-way sync, AI-assisted booking information capture into CRM, and automated reminder/follow-up scheduling.
    *   Basic AI-driven contact segmentation (e.g., identifying disengaged contacts).
3.  **Introduce Pending Approval System:** Allow users to review and approve AI-generated actions (e.g., email drafts, contact updates).
4.  **Facilitate Lead Source Integration:** Enable import from CSV, Google Contacts, and provide mechanisms (webhooks, WordPress plugin, tracking scripts) for connecting to website forms and ad platforms.
5.  **Ensure Data Integrity & Security:** Implement and verify Row-Level Security (RLS) and secure data handling practices.
6.  **Provide a Foundational UX:** Clean, intuitive interface for managing contacts and interacting with AI features.
7.  **Establish Reliable Build & Deployment:** Ensure a stable build process and Vercel deployment.

### 3.3 Success Metrics (Post-MVP Launch)
*   Active user count and growth rate.
*   Contact creation, import, and interaction rates.
*   Adoption rate and usage frequency of AI features (email scanning, calendar sync, enrichment).
*   User engagement with the Pending Approval system.
*   Number of successful integrations with external lead sources.
*   User feedback (NPS, feature satisfaction surveys, support tickets).
*   Task completion time reduction (e.g., time saved by AI email drafting).
*   Monthly user retention rate.
*   Error rates on critical paths (e.g., auth, contact creation, AI task execution).

---

## 4. Target Audience

### 4.1 Primary Users
*   Solo yoga instructors
*   Massage therapists
*   Holistic coaches and practitioners
*   Alternative therapists (acupuncture, reiki, herbalism, naturopaths, etc.)
*   Independent personal trainers and fitness coaches
*   Small wellness centers with a few practitioners

### 4.2 User Persona Example (Primary)
*   **Name:** Maya
*   **Profession:** Independent Yoga Instructor and Wellness Coach
*   **Technical Proficiency:** Moderate (comfortable with basic tech, easily overwhelmed by complex systems).
*   **Business Size:** Solo practitioner with 50-200 active clients/contacts.
*   **Key Challenges:**
    *   Manages client relationships across email, text, social media, and booking platforms.
    *   Struggles to remember personal details and last contact points for all clients.
    *   Needs reminders for follow-ups and re-engagement.
    *   Has limited time for administrative tasks like data entry, email drafting, and scheduling.
    *   Wants to grow her business through better client relationship management and personalized communication but finds existing CRMs too sales-focused or complicated.
    *   Uses various tools: Google Calendar, Gmail, Mailchimp, possibly a simple website (WordPress/Squarespace), social media for marketing.

### 4.3 User Needs & Pain Points Addressed

| Need                                         | Pain Point Addressed by Omnipotency AI CRM                                   |
| :------------------------------------------- | :------------------------------------------------------------------------- |
| Efficient client information & history       | Centralized, AI-organized contact data, reducing reliance on spreadsheets/paper or generic CRMs. |
| Secure and organized note storage            | Secure, easily accessible notes, reducing data-privacy worries and disorganization. |
| Lower administrative overhead              | AI automation for data entry, email drafting, scheduling, and follow-ups.     |
| Personalized client communication          | AI assistance in drafting personalized emails, tracking preferences, and timely follow-ups. |
| Simple, integrated scheduling              | 2-way Google Calendar sync, AI capturing booking details, reducing double bookings and manual entry. |
| Streamlined lead capture from various sources | Integrations (direct, webhook, plugin) to automatically pull leads from websites, forms, ads. |
| Understanding client engagement              | AI-driven segmentation to identify active vs. inactive clients, prompting re-engagement. |
| Overwhelm from managing multiple tools       | Consolidation of key CRM tasks and integrations within one intuitive platform. |

---

## 5. Features and Requirements – MVP Focus

### 5.1 User Authentication & Account Management
| ID             | Requirement                                                                    |
| :------------- | :----------------------------------------------------------------------------- |
| REQ-AUTH-001   | Email/password sign-up with email confirmation.                                |
| REQ-AUTH-002   | Email/password sign-in.                                                        |
| REQ-AUTH-003   | Passwordless **Magic Link** sign-in.                                           |
| REQ-AUTH-004   | **Google OAuth** sign-in/sign-up.                                              |
| REQ-AUTH-005   | Secure sign-out.                                                               |
| REQ-AUTH-006   | Password-reset flow.                                                           |
| REQ-AUTH-007   | Basic account management page (profile, connected accounts e.g., Google).        |
| REQ-AUTH-008   | Middleware/SSR route protection for authenticated routes.                      |
| REQ-AUTH-009   | Redirect unauthenticated users from protected routes.                          |
| REQ-AUTH-010   | Redirect authenticated users from public-only routes (e.g., sign-in page).     |
| REQ-AUTH-011   | Secure session management (e.g., JWT via Supabase Auth & `@supabase/ssr`).       |
| REQ-AUTH-012   | User profile creation upon first sign-up, storing basic user preferences.      |

### 5.2 Contact Management (CRUD)
| ID               | Requirement                                                                                                                                                                                                                                                           |
| :--------------- | :-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------- |
| REQ-CONTACT-001  | **Create** new contact records manually.                                                                                                                                                                                                                               |
| REQ-CONTACT-002  | **List/View** all contacts belonging to the authenticated user, with pagination/infinite scroll, basic search, and filtering placeholders.                                                                                                                               |
| REQ-CONTACT-003  | **View** detailed information for a specific contact.                                                                                                                                                                                                                  |
| REQ-CONTACT-004  | **Edit/Update** existing contact records.                                                                                                                                                                                                                              |
| REQ-CONTACT-005  | **Delete** contact records with confirmation.                                                                                                                                                                                                                          |
| REQ-CONTACT-006  | **Import Contacts:** Allow import from CSV files.                                                                                                                                                                                                                      |
| REQ-CONTACT-007  | **Import Contacts:** Allow import/sync from Google Contacts (via OAuth).                                                                                                                                                                                               |
| REQ-CONTACT-008  | **Contact Data Model (Minimum):** `id (UUID PK)`, `user_id (UUID FK to auth.users.id)`, `first_name (text)`, `last_name (text)`, `email (text)`, `phone (text)`, `profile_image_url (text)`, `company (text)`, `job_title (text)`, `tags (text[])`, `notes (text)`, `source (text)`, `last_contacted_at (timestamptz)`, `enrichment_status (text)`, `enriched_data (jsonb)`, `created_at (timestamptz)`, `updated_at (timestamptz)`. |
| REQ-CONTACT-009  | UI forms aligned with the data model for create/edit operations.                                                                                                                                                                                                       |
| REQ-CONTACT-010  | Zod validation for contact data (client and server-side).                                                                                                                                                                                                             |

### 5.3 Contact Grouping
| ID             | Requirement                                                                 |
| :------------- | :-------------------------------------------------------------------------- |
| REQ-GROUP-001  | Create, read, update, and delete contact groups (e.g., "Clients," "Leads"). |
| REQ-GROUP-002  | Add/remove contacts to/from multiple groups.                                |
| REQ-GROUP-003  | View contacts filtered by a specific group.                                 |
| REQ-GROUP-004  | Group metadata: `id (UUID PK)`, `user_id (UUID FK)`, `name (text)`, `icon (text)`, `is_private (boolean)`. |

### 5.4 AI-Powered Contact Enrichment
| ID               | Requirement                                                                                                 |
| :--------------- | :---------------------------------------------------------------------------------------------------------- |
| REQ-ENRICH-001   | Automatically trigger contact enrichment (e.g., finding social profiles, company info via OpenRouter/LLM) upon new contact creation or import. |
| REQ-ENRICH-002   | Store enriched data in the `enriched_data (jsonb)` field of the contact record.                             |
| REQ-ENRICH-003   | Track enrichment status (`enrichment_status`: pending, processing, completed, failed).                      |
| REQ-ENRICH-004   | Display enriched data clearly on the contact detail page, distinguishing it from user-entered data.         |
| REQ-ENRICH-005   | Allow manual re-triggering of enrichment for a contact (subject to rate limits).                            |
| REQ-ENRICH-006   | AI-generated updates from enrichment to be processed via the Pending Approval system.                       |

### 5.5 AI-Powered Gmail Integration
| ID            | Requirement                                                                                                                                 |
| :------------ | :------------------------------------------------------------------------------------------------------------------------------------------ |
| REQ-GMAIL-001 | Securely connect user's Gmail account via Google OAuth (with appropriate scopes for reading emails and sending on behalf).                    |
| REQ-GMAIL-002 | AI agent periodically scans connected Gmail inbox (e.g., twice daily) for potential new leads or important client communications.             |
| REQ-GMAIL-003 | If a lead is identified, AI extracts contact information and relevant context.                                                              |
| REQ-GMAIL-004 | AI drafts a personalized welcome email or reply based on the context and user's business information.                                       |
| REQ-GMAIL-005 | Drafted emails are sent to the Pending Approval system for user review, edit, and sending.                                                  |
| REQ-GMAIL-006 | Ability to create new contacts in the CRM from leads identified in emails (via Pending Approval).                                             |

### 5.6 AI-Powered Google Calendar Integration
| ID             | Requirement                                                                                                                                 |
| :------------- | :------------------------------------------------------------------------------------------------------------------------------------------ |
| REQ-GCAL-001   | Securely connect user's Google Calendar via Google OAuth (scopes for reading events, creating/editing events in a specific business calendar). |
| REQ-GCAL-002   | Two-way sync user's availability from their personal Google Calendar to prevent double bookings within the CRM (if scheduling features are added). |
| REQ-GCAL-003   | AI monitors a designated "business" Google Calendar for new bookings/appointments.                                                            |
| REQ-GCAL-004   | For new bookings, AI extracts attendee details (name, email) and appointment information.                                                     |
| REQ-GCAL-005   | AI creates/updates contact in CRM with appointment details (via Pending Approval or direct save with notification).                           |
| REQ-GCAL-006   | AI schedules reminders (e.g., pre-appointment, post-appointment for review request) based on calendar events (via Pending Approval).        |

### 5.7 Basic AI Contact Segmentation & Re-engagement
| ID            | Requirement                                                                                                                               |
| :------------ | :---------------------------------------------------------------------------------------------------------------------------------------- |
| REQ-SEG-001   | AI periodically analyzes contact interaction history (e.g., `last_contacted_at`, email responses, appointments).                          |
| REQ-SEG-002   | Identify contacts that have not had significant interaction for a defined period (e.g., 30 days post-initial system setup grace period). |
| REQ-SEG-003   | AI drafts a personalized "check-in" email for these disengaged contacts.                                                                    |
| REQ-SEG-004   | Drafted check-in emails are sent to the Pending Approval system for user review and sending.                                              |

### 5.8 Pending Approval System
| ID               | Requirement                                                                                              |
| :--------------- | :------------------------------------------------------------------------------------------------------- |
| REQ-APPROVAL-001 | Centralized UI section to display AI-generated actions awaiting user approval (e.g., email drafts, contact updates). |
| REQ-APPROVAL-002 | User can review, edit, approve, or reject each pending action.                                           |
| REQ-APPROVAL-003 | Approved actions are executed by the system (e.g., email sent, contact record updated).                  |
| REQ-APPROVAL-004 | Real-time notifications (e.g., badge counter) for new pending approvals.                                 |
| REQ-APPROVAL-005 | Daily summary/digest of pending approvals (e.g., end-of-day notification).                               |

### 5.9 Lead Source Integration (Onboarding & Setup)
| ID           | Requirement                                                                                                                                     |
| :----------- | :---------------------------------------------------------------------------------------------------------------------------------------------- |
| REQ-LEAD-001 | Onboarding flow guides user to connect various lead sources.                                                                                      |
| REQ-LEAD-002 | Provide a unique webhook URL per user account for generic form/service integration.                                                               |
| REQ-LEAD-003 | Develop a WordPress plugin for easy integration with WordPress site forms (captures data on form submit and sends to user's webhook or dedicated API). |
| REQ-LEAD-004 | Provide a JavaScript tracking snippet/pixel for website header integration to capture form submissions or other events (integrates with GTM if present). |
| REQ-LEAD-005 | AI Assistant guides user through setup for common platforms (e.g., "Paste this webhook into your Mailchimp audience settings").                 |
| REQ-LEAD-006 | UTM parameter builder/guidance for tracking paid ad campaign effectiveness. Data from UTMs should be captured with new leads.                   |

### 5.10 Data Security & Integrity
| ID          | Requirement                                                              |
| :---------- | :----------------------------------------------------------------------- |
| REQ-SEC-001 | Enable Row-Level Security (RLS) on all user-specific tables in Supabase. |
| REQ-SEC-002 | RLS policies must restrict data access strictly to `user_id = auth.uid()`. |
| REQ-SEC-003 | tRPC procedures must respect user scope and RLS.                         |
| REQ-SEC-004 | All sensitive data (API keys, tokens) stored securely (e.g., encrypted or using Supabase Vault if available, environment variables server-side). |

### 5.11 UI & UX (MVP Focus)
*   Clean, modern, intuitive, and responsive design (mobile-first approach).
*   Consistent use of Shadcn UI components and Tailwind CSS styling.
*   Clear navigation, loading states, error messages, and success confirmations.
*   Accessibility considerations (WCAG 2.1 AA compliance as a goal).
*   Dashboard providing an overview (e.g., upcoming reminders, pending approvals).
*   Contact list (table/card view) with search/sort placeholders.
*   Clear forms for creating/editing contacts and groups.
*   Dedicated UI for managing Pending Approvals.

### 5.12 Technical Foundation
*   `pnpm` monorepo structure (e.g., `apps/web`, `packages/api`, `packages/db`, `packages/ui`, `packages/jobs`).
*   TypeScript path aliases for cleaner imports.
*   tRPC v10 API + TanStack Query v4/v5 for client-side data fetching and caching.
*   Successful local build (`pnpm build`).
*   Successful Vercel deployment with CI/CD pipeline (linting, testing, building).

---

## 6. User Stories & Acceptance Criteria – MVP Focus

*(Selected Examples - a full list would be extensive)*

<details>
<summary>Authentication & Account Management</summary>

#### ST-AUTH-MVP-001 · Sign-up with Google OAuth
*As a new practitioner, I want to sign up quickly using my Google account so I can start using the CRM without creating new credentials.*
*   **AC1:** "Sign up with Google" button is visible on the sign-up page.
*   **AC2:** Clicking the button initiates Google OAuth flow.
*   **AC3:** Upon successful Google authentication, a new user account is created in Omnipotency AI CRM.
*   **AC4:** A corresponding `profiles` record (or equivalent link to `auth.users`) is created.
*   **AC5:** User is redirected to the dashboard or onboarding sequence.

#### ST-AUTH-MVP-002 · Connect Gmail Account
*As a registered user, I want to connect my Gmail account so the AI can help manage my email communications and find leads.*
*   **AC1:** An option to "Connect Gmail" is available in account settings or onboarding.
*   **AC2:** Clicking initiates Google OAuth flow requesting necessary Gmail scopes (read, send).
*   **AC3:** Upon successful authorization, the connection status is updated in the UI.
*   **AC4:** System securely stores the necessary tokens to access Gmail API.

</details>

<details>
<summary>Contact Management & Enrichment</summary>

#### ST-CONTACT-MVP-001 · Add New Contact Manually & Trigger Enrichment
*As a practitioner, I want to manually add a new contact with their basic details, and I expect the system to try and find more information about them automatically.*
*   **AC1:** "Add New Contact" form is accessible.
*   **AC2:** User can input at least first name, last name, email.
*   **AC3:** Form includes Zod validation for required fields and data types.
*   **AC4:** On save, the contact record is created and linked to the authenticated user.
*   **AC5:** Contact appears in the contact list.
*   **AC6:** An AI enrichment task is automatically queued for the new contact.
*   **AC7:** Enrichment status is initially 'pending' or 'processing'.

#### ST-CONTACT-MVP-002 · Review Enriched Contact Data via Pending Approval
*As a practitioner, I want to review and approve any significant information the AI adds to my contacts before it's permanently saved.*
*   **AC1:** When AI enrichment finds new data (e.g., company, job title), a "Contact Update Pending" item appears in the Pending Approval system.
*   **AC2:** The pending item clearly shows the contact name, the proposed new/updated fields, and their values.
*   **AC3:** User can approve, reject, or edit the proposed changes.
*   **AC4:** Approved changes are saved to the contact record, and `enriched_data` / `enrichment_status` are updated.

</details>

<details>
<summary>AI Email & Calendar Features</summary>

#### ST-AIMAIL-MVP-001 · AI Detects Lead from Email and Drafts Welcome
*As a busy practitioner, I want the AI to scan my connected Gmail, identify potential new leads, and draft a welcome email for me to review.*
*   **AC1:** AI agent scans Gmail (e.g., twice daily).
*   **AC2:** If an email pattern suggests a new lead (e.g., inquiry about services), AI extracts potential contact details (name, email).
*   **AC3:** AI drafts a personalized welcome email based on email content and user's business profile.
*   **AC4:** The drafted email and extracted contact info appear in the Pending Approval system.
*   **AC5:** User can approve sending the email (optionally creating/updating contact), edit, or reject.

#### ST-AICAL-MVP-001 · AI Processes New Calendar Booking
*As a practitioner using Google Calendar for bookings, I want new appointments to be automatically recognized, contacts created/updated in my CRM, and relevant reminders proposed.*
*   **AC1:** AI monitors the connected business Google Calendar for new events.
*   **AC2:** For a new booking, AI extracts attendee name, email, and appointment time/details.
*   **AC3:** An item appears in Pending Approvals to create/update a contact with these details and log the appointment.
*   **AC4:** AI may also propose scheduling pre-appointment and post-appointment (review request) reminders.
*   **AC5:** User approval processes these actions.

</details>

<details>
<summary>Lead Source Integration</summary>

#### ST-LEAD-MVP-001 · User Installs WordPress Plugin for Website Lead Capture
*As a practitioner with a WordPress website, I want to easily install a plugin to send contact form submissions directly to my Omnipotency AI CRM.*
*   **AC1:** A downloadable WordPress plugin is available from the CRM settings.
*   **AC2:** Onboarding/settings provide clear instructions for installing and activating the plugin.
*   **AC3:** Plugin requires minimal configuration (e.g., pasting an API key or unique webhook URL from the CRM).
*   **AC4:** Once active, submissions from common WordPress form plugins (e.g., Contact Form 7, WPForms) are automatically sent to the user's CRM account.
*   **AC5:** New leads from the WordPress site appear in the CRM (possibly via Pending Approvals or a "New Leads" section).

</details>

---

## 7. Data Model (Supabase PostgreSQL)

### 7.1 Core Tables (MVP)
*   **`profiles`** (Links to `auth.users`, stores user-specific app settings)
    *   `id (UUID PK, FK to auth.users.id)`
    *   `full_name (text)`
    *   `avatar_url (text)`
    *   `app_settings (jsonb)` (e.g., notification preferences, connected Google account status)
    *   `created_at (timestamptz)`
    *   `updated_at (timestamptz)`
*   **`contacts`**
    *   `id (UUID PK)`
    *   `user_id (UUID FK to auth.users.id, NOT NULL)`
    *   `first_name (text)`
    *   `last_name (text, NOT NULL)`
    *   `email (text, UNIQUE constraint scoped to user_id)`
    *   `phone (text)`
    *   `profile_image_url (text)`
    *   `company (text)`
    *   `job_title (text)`
    *   `tags (text[])`
    *   `notes (text)`
    *   `source (text)` (e.g., 'manual', 'csv_import', 'gmail_lead', 'website_form')
    *   `last_contacted_at (timestamptz)`
    *   `enrichment_status (text)` (e.g., 'pending', 'completed', 'failed')
    *   `enriched_data (jsonb)` (stores AI-found data)
    *   `created_at (timestamptz DEFAULT now())`
    *   `updated_at (timestamptz DEFAULT now())`
*   **`groups`**
    *   `id (UUID PK)`
    *   `user_id (UUID FK to auth.users.id, NOT NULL)`
    *   `name (text, NOT NULL)`
    *   `icon (text)`
    *   `is_private (boolean DEFAULT true)`
    *   `created_at (timestamptz DEFAULT now())`
    *   `updated_at (timestamptz DEFAULT now())`
*   **`contact_groups`** (Junction table for many-to-many relationship between contacts and groups)
    *   `contact_id (UUID FK to contacts.id ON DELETE CASCADE)`
    *   `group_id (UUID FK to groups.id ON DELETE CASCADE)`
    *   `user_id (UUID FK to auth.users.id, NOT NULL)` (for RLS convenience)
    *   `PRIMARY KEY (contact_id, group_id)`
*   **`pending_approvals`**
    *   `id (UUID PK)`
    *   `user_id (UUID FK to auth.users.id, NOT NULL)`
    *   `type (text NOT NULL)` (e.g., 'email_draft_welcome', 'email_draft_reply', 'contact_update_enrichment', 'calendar_event_process', 'email_draft_checkin')
    *   `status (text NOT NULL DEFAULT 'pending')` ('pending', 'approved', 'rejected', 'edited')
    *   `related_contact_id (UUID FK to contacts.id, NULLABLE)`
    *   `related_email_id (text, NULLABLE)` (e.g., Gmail message ID)
    *   `related_calendar_event_id (text, NULLABLE)`
    *   `action_summary (text NOT NULL)` (e.g., "Draft welcome email to John Doe")
    *   `data_payload (jsonb NOT NULL)` (contains draft content, proposed changes, etc.)
    *   `created_at (timestamptz DEFAULT now())`
    *   `resolved_at (timestamptz)`
*   **`oauth_connections`** (For storing tokens for Google, etc.)
    *   `id (UUID PK)`
    *   `user_id (UUID FK to auth.users.id, NOT NULL)`
    *   `provider (text NOT NULL)` (e.g., 'google_gmail', 'google_calendar')
    *   `access_token (text NOT NULL)` (Encrypted)
    *   `refresh_token (text, NULLABLE)` (Encrypted)
    *   `expires_at (timestamptz, NULLABLE)`
    *   `scopes (text[])`
    *   `last_synced_at (timestamptz)`
    *   `created_at (timestamptz DEFAULT now())`
    *   `updated_at (timestamptz DEFAULT now())`

*(Tables like `reminders` and `interactions` from PRD v1.0 are considered for post-MVP or if scope allows)*

### 7.2 Row-Level Security (RLS) Policies
*   All tables containing user-specific data (`contacts`, `groups`, `contact_groups`, `pending_approvals`, `oauth_connections`, `profiles`) MUST implement RLS.
*   Policies will enforce that users can only `SELECT`, `INSERT`, `UPDATE`, `DELETE` records where `user_id = auth.uid()`.
*   Junction tables like `contact_groups` will be secured based on the `user_id` column within them, which should match the `user_id` of the linked `contacts` and `groups`.
*   Service role keys will be used exclusively server-side for administrative tasks or specific backend processes where RLS bypass is carefully managed (e.g., Supabase Edge Functions for scheduled jobs).

---

## 8. Technical Requirements / Stack

*   **Framework:** Next.js (App Router, v14+)
*   **Language:** TypeScript
*   **UI Library:** React (v18/19)
*   **Styling:** Tailwind CSS (v3/v4), Shadcn UI (component library)
*   **API Layer:** tRPC (v10/v11)
*   **Backend-as-a-Service (BaaS):** Supabase
    *   **Database:** PostgreSQL
    *   **Authentication:** Supabase Auth (Email/Password, Magic Link, Google OAuth)
    *   **Storage:** Supabase Storage (for profile pictures, future document uploads)
    *   **Edge Functions:** Supabase Edge Functions (Deno runtime; for background jobs like AI enrichment, email scanning, calendar sync)
*   **Client-Side State Management & Data Fetching:**
    *   **Server State/Caching:** TanStack Query (React Query) v4/v5
    *   **tRPC Integration:** `@trpc/react-query`
    *   **Client State (Simple):** React Context/useReducer or Zustand if more complex global state is needed.
*   **Validation:** Zod (for tRPC inputs, form validation)
*   **AI/ML Components:**
    *   **LLM Gateway/APIs:** OpenRouter (to access various LLMs like OpenAI, Anthropic) or direct API calls.
*   **Monorepo Management:** pnpm workspaces (Turborepo optional for build optimization)
*   **Version Control:** Git / GitHub
*   **Deployment:** Vercel
*   **Local DB Management:** Supabase CLI
*   **Testing (Planned):** Vitest (Unit/Integration), Playwright or Cypress (E2E)
*   **Email Sending (for system emails like password reset, notifications):** Supabase Auth built-in, or Resend/Postmark for custom transactional emails.

---

## 9. Monorepo & Application Structure (Target)

```
/omnipotency-ai-crm
├── apps/
│   └── web/                # Next.js application (frontend and tRPC handlers)
│       ├── app/
│       │   ├── (auth)/     # Auth routes (sign-in, sign-up)
│       │   ├── (app)/      # Protected app routes (dashboard, contacts, settings)
│       │   │   └── layout.tsx # Authenticated layout shell
│       │   └── layout.tsx  # Root layout
│       ├── components/     # App-specific UI components
│       ├── lib/            # Utility functions, tRPC client setup
│       ├── actions/        # Next.js Server Actions (if used)
│       └── public/
├── packages/
│   ├── ui/                 # Shared React UI components (built with Shadcn)
│   ├── db/                 # Supabase client setup, schema types (generated by Supabase CLI)
│   ├── api/                # tRPC router definitions, procedures, context (server-side)
│   ├── types/              # Shared TypeScript types/interfaces
│   ├── validators/         # Zod schemas for validation
│   ├── llm-client/         # Client for interacting with OpenRouter/LLMs
│   ├── jobs/               # Code for Supabase Edge Functions (background tasks)
│   └── config/             # Shared configurations (ESLint, TSConfig, Tailwind presets)
├── pnpm-workspace.yaml
├── package.json
└── tsconfig.base.json
```

---

## 10. Security Requirements

*   **Authentication:** Supabase Auth (OAuth, JWT, secure HttpOnly cookies via `@supabase/ssr`). Implement CSRF protection.
*   **Authorization:** Comprehensive RLS policies on all Supabase tables. Service role key usage strictly limited to server-side functions.
*   **Input Validation:** Zod validation on all tRPC inputs and public-facing forms. Sanitize user inputs to prevent XSS.
*   **API Security:** tRPC procedures run server-side. Rate limiting for external API calls (e.g., to LLMs) and potentially for user actions. Secure handling of external API keys (Vercel environment variables).
*   **Data Protection:** Encrypt sensitive stored data where appropriate (e.g., OAuth tokens in `oauth_connections` table). Prepare for GDPR/CCPA compliance.
*   **Frontend Security:** Implement Content Security Policy (CSP).
*   **Dependency Management:** Regularly scan and update dependencies to patch vulnerabilities.

---

## 11. Design & User Interface (Principles & Key Screens - MVP)

### 11.1 Design Principles
*   **Simplicity & Clarity:** Clean, uncluttered interfaces focused on core tasks. Use clear, concise language.
*   **Intuitive & Discoverable:** Features should be easy to find and use with minimal learning curve.
*   **Consistency:** Uniform patterns, components, and visual language throughout the application.
*   **Responsiveness:** Fully functional and aesthetically pleasing on desktop, tablet, and mobile devices.
*   **Feedback:** Clear system status indicators, loading states, error messages, and success confirmations.
*   **Accessibility:** Strive for WCAG 2.1 AA compliance.
*   **AI as Assistant:** AI interactions should feel helpful, non-intrusive, and always give the user final control (especially via Pending Approvals).

### 11.2 Key Screens (MVP)
1.  **Sign-in / Sign-up Pages:** Forms for email/password, magic link, and "Sign in/up with Google" button. Minimalist and action-focused.
2.  **Onboarding Sequence:** Guided steps to connect Gmail/Calendar, import initial contacts, and understand core AI features.
3.  **Dashboard:** Overview of pending approvals, upcoming reminders (from calendar), key stats (e.g., new leads identified). Quick access to "Add Contact."
4.  **Contact List Page:** Table or card view of contacts. Search, filter placeholders. "Add New Contact" button.
5.  **Contact Detail Page:** Displays all contact information, including enriched data, related notes, and history of interactions (placeholder for MVP, expanded later). Quick actions (Edit, Delete, Add to Group).
6.  **Contact Create/Edit Form:** Modal or dedicated page with fields from the contact data model. Zod-powered validation.
7.  **Groups Management Page:** List existing groups, create new groups, edit group details. Interface to add/remove contacts from groups.
8.  **Pending Approvals Page:** List of AI-generated actions (email drafts, contact updates) awaiting user review, with options to approve, edit, or reject.
9.  **Settings Page:** Manage user profile, connected accounts (Google), lead source integration configurations (e.g., view webhook URL, download WordPress plugin).

---

## 12. Integration Strategy (Lead Sources & Onboarding - MVP)

### 12.1 Onboarding for Integrations
1.  **Smart Discovery (AI-Assisted):** During onboarding, AI can ask about user's current tools, website platform, and marketing channels to suggest relevant integrations.
2.  **Guided Setup:** The UI and AI assistant will provide step-by-step instructions for each connection type.
    *   **Google:** Simple OAuth flow for Gmail and Google Calendar.
    *   **CSV Import:** File upload interface with basic column mapping assistance.
    *   **WordPress:** Provide a downloadable plugin and API key/webhook URL for configuration.
    *   **Generic Webhooks:** Provide a unique webhook URL for the user to paste into their form builders (Typeform, Squarespace forms, etc.) or ad platforms.
    *   **Website Tracking Snippet:** Provide a JS snippet for website headers (compatible with GTM if present) to capture form submissions.
3.  **Connection Testing:** Automated or guided tests to confirm integrations are working.

### 12.2 Supported Integration Methods (MVP)
*   **Direct API (OAuth):** Google Contacts, Gmail, Google Calendar.
*   **CSV Import:** For bulk contact uploading.
*   **WordPress Plugin:** Custom plugin to capture form submissions from WordPress sites and send to Omnipotency AI CRM. Hooks into common form plugins (Contact Form 7, WPForms, Gravity Forms) on form submission events.
*   **Generic Webhook Receiver:** A unique endpoint per user to receive data from any service capable of sending webhooks.
*   **JavaScript Tracking Snippet:** For embedding on any website to capture form submissions or other client-side events. Can work alongside Google Tag Manager.
*   **UTM Parameter Handling:** System should capture UTM parameters passed in URLs from lead sources (e.g., website forms filled after clicking an ad) and associate them with the new contact. Provide guidance or a simple builder for UTM-tagged URLs.

---

## 13. AI Features – MVP Detail

*   **Automated Contact Enrichment:**
    *   Triggered on new contact creation/import.
    *   Uses LLMs (via OpenRouter) to find publicly available information (social profiles, company details, job titles).
    *   Results are presented in the Pending Approval system.
*   **AI Email Scanning & Drafting (Gmail):**
    *   Scheduled background job (Supabase Edge Function) uses Gmail API.
    *   Identifies potential leads or important client emails needing replies.
    *   Extracts contact info, drafts personalized welcome/reply emails using LLMs.
    *   Drafts appear in Pending Approvals.
*   **AI Calendar Event Processing (Google Calendar):**
    *   Scheduled background job monitors connected Google Calendar.
    *   Extracts details from new bookings (attendee info, appointment details).
    *   Proposes creating/updating contacts and scheduling CRM reminders (e.g., pre-session, post-session feedback) via Pending Approvals.
    *   Syncs user's personal calendar to block out unavailable times.
*   **AI Contact Segmentation (Basic Re-engagement):**
    *   Scheduled background job analyzes `last_contacted_at` and other interaction flags.
    *   Identifies contacts inactive for >30 days (after an initial grace period post-system setup).
    *   Drafts personalized check-in emails for these contacts, sent to Pending Approvals.
*   **Pending Approval System Core:**
    *   All significant AI-generated actions (data updates, email drafts) require user review.
    *   Provides transparency and user control over AI.
    *   Acts as a learning mechanism for both the user and future AI model improvements.

---

## 14. Sprint Roadmap – Initial Sprints (MVP Focus)

### Sprint 1 (2-3 Weeks): Foundation, Core Auth & Contact CRUD
*   **Objectives:**
    *   Monorepo setup (pnpm, Next.js, Supabase project init).
    *   Core tooling (TypeScript, ESLint, Prettier).
    *   Implement User Authentication (Email/Pass, Magic Link, Google OAuth). Secure routes.
    *   Implement Contact CRUD (Create, Read, List, Update, Delete) with Zod validation and RLS.
    *   Basic UI shell (Sidebar, Header, Dashboard placeholder) using Shadcn/Tailwind.
    *   Setup Vercel deployment with CI/CD basics (lint, build).
*   **Definition of Done:** Users can sign up/in, manage (CRUD) their own contacts. Basic app structure deployed.

### Sprint 2 (2-3 Weeks): AI Enrichment, Gmail/Calendar Connect & Pending Approvals
*   **Objectives:**
    *   Implement `oauth_connections` table and flow for Google services.
    *   Connect Gmail & Google Calendar (OAuth, token storage).
    *   Develop background jobs (Edge Functions) for basic AI Contact Enrichment (stubbed LLM calls initially).
    *   Develop background jobs for basic Gmail scanning (identifying emails, no drafting yet).
    *   Develop background jobs for basic Calendar event processing (identifying events, no CRM actions yet).
    *   Implement the core Pending Approval system (data model and basic UI to display items).
    *   Integrate enrichment results into Pending Approvals.
*   **Definition of Done:** Users can connect Google accounts. AI can perform enrichment and surface results for approval. Basic email/calendar events can be identified and flagged for potential approval.

### Sprint 3 (2-3 Weeks): AI Action Drafting & Lead Source Integration Basics
*   **Objectives:**
    *   Implement LLM integration (via OpenRouter) for drafting welcome/reply emails (Gmail) and check-in emails (Segmentation).
    *   Implement LLM integration for processing calendar event details into CRM actions (contact create/update, reminder suggestions).
    *   All AI drafts/actions flow through Pending Approvals for user review.
    *   Implement CSV contact import.
    *   Develop basic WordPress plugin for lead capture.
    *   Implement generic webhook receiver endpoint.
*   **Definition of Done:** AI drafts emails and proposes CRM actions from Gmail/Calendar for user approval. Users can import contacts via CSV and connect WordPress sites.

*(Further sprints will focus on Contact Grouping, detailed UI/UX refinement, advanced segmentation, other lead source integrations, and iterating on AI accuracy and features based on user feedback.)*

---

## 15. Appendix

### 15.1 Glossary
*   **CRM:** Customer Relationship Management.
*   **MVP:** Minimum Viable Product.
*   **RLS:** Row-Level Security (in Supabase/PostgreSQL).
*   **LLM:** Large Language Model (e.g., GPT-4, Claude).
*   **OpenRouter:** A gateway to access various LLMs.
*   **tRPC:** End-to-end typesafe APIs for TypeScript.
*   **Shadcn UI:** A collection of re-usable UI components.
*   **UTM Parameters:** Urchin Tracking Module; tags added to URLs to track campaign sources.
*   **GTM:** Google Tag Manager.
*   **Webhook:** An automated message sent from apps when something happens.

### 15.2 Future Considerations (Post-MVP)
*   **Advanced AI Insights:** Relationship health scores, predictive lead scoring, churn prediction.
*   **Deeper Integrations:** Other email providers, more social media platforms, payment processors (Stripe), accounting software.
*   **Automated Workflows/Sequences:** User-configurable automation rules beyond current AI features.
*   **Communication Channels:** Native SMS sending, WhatsApp Business integration.
*   **Team/Collaboration Features:** For small wellness centers with multiple practitioners.
*   **Document Management:** Secure storage and e-signature for client waivers, intake forms.
*   **Resource Library:** Allow practitioners to share resources (PDFs, videos) with clients.
*   **Pre-Session Intake Chatbot & Post-Session Feedback:** As originally envisioned.
*   **Mobile Application (PWA or Native):** For on-the-go access.
*   **Advanced Reporting & Analytics:** Customizable dashboards.
*   **Template Library:** Pre-built email templates, workflow templates.
*   **Chrome Extension:** For capturing contacts/info from the web.

---
*End of Merged Document – Version 2.0*