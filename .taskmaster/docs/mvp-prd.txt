Omnipotency AI CRM: Product Requirements Document
Document Information
Document ID: PRD-2023-Omnipotency AI-001
Version: 1.0
Date: November 2023
Status: Draft
Table of Contents

Introduction
Product overview
Goals and objectives
Target audience
Features and requirements
User stories and acceptance criteria
Technical requirements
Design and user interface
Sprint roadmap
Appendix

1. Introduction
This document outlines the product requirements for Omnipotency AI CRM, a relationship-centric contact management system designed specifically for wellness practitioners. Unlike traditional CRMs focused primarily on sales pipelines, Omnipotency AI CRM prioritizes meaningful relationship tracking, nurturing connections, and reducing administrative overhead through intelligent automation.
The purpose of this PRD is to define the Minimum Viable Product (MVP) features, technical architecture, implementation details, and initial sprint roadmap. The MVP will establish core functionality including authentication, contact management, grouping capabilities, and AI-powered contact enrichment.
1.1 Document scope
This PRD covers:

Core principles and product goals
MVP feature specifications
Technical architecture and stack
Data models and workflows
Implementation details
Initial sprint roadmap

2. Product overview
Omnipotency AI CRM is a relationship-centric contact management system designed specifically for wellness practitioners who need to maintain meaningful connections with clients but lack technical expertise or time for complex systems.
The system brings together contacts from various sources into one centralized, easy-to-manage space, and leverages automation to reduce manual administration. At its core, Omnipotency AI CRM helps users track, nurture, and develop professional relationships through intuitive interfaces and intelligent features.
2.1 Key differentiators

Relationship-focused: Unlike sales-driven CRMs, Omnipotency AI prioritizes relationship health over deal progression
Automation-first: Reduces administrative overhead through AI-powered enrichment and smart reminders
Intuitive UX: Designed specifically for non-technical users with straightforward workflows
Centralization: Brings contacts from disparate sources (later versions will include direct syncing)
Privacy-conscious: Implements robust security measures to protect sensitive relationship data

3. Goals and objectives
3.1 Core principles

Simplicity: Create an intuitive UI/UX accessible to non-technical users
Relationship-centric: Prioritize features that help track and nurture connections
Automation: Leverage AI and automation to reduce manual administrative overhead
Centralization: Bring contacts from various sources into one manageable space
Type safety & reliability: Build robust, maintainable code with TypeScript, Zod, and tRPC
Scalability & cost-effectiveness: Use Vercel and Supabase for efficient scaling and rapid development
Privacy & security: Implement robust security measures through Supabase RLS and standard practices

3.2 Business objectives

Deliver a functional MVP within two months that allows users to:

Authenticate securely
Manage contacts with enhanced profile information
Organize contacts into groups
Benefit from automated contact enrichment


Establish a solid technical foundation that enables:

Rapid iteration based on user feedback
Future feature expansion (sync with external services, mobile app)
Reliable performance at scale
Maintainable, type-safe codebase



3.3 Success metrics

User adoption: 100+ active users within 3 months of launch
Engagement: 70%+ of users managing 50+ contacts
Retention: 80%+ monthly retention rate
Enrichment accuracy: 85%+ accuracy on AI-enriched contact data
Performance: Page load times under 2 seconds for core views
Error rates: Under 1% error rate on critical paths

4. Target audience
4.1 Primary user persona
Name: Maya
Profession: Independent Yoga Instructor and Wellness Coach
Technical proficiency: Moderate (comfortable with basic tech, struggles with complex systems)
Business size: Solo practitioner with 50-100 active clients/contacts
Key challenges:

Maintains client relationships across email, text, and social media
Struggles to remember when she last contacted specific clients
Needs reminders to follow up with potential clients who showed interest
Has limited time for administrative tasks
Wants to grow her business through better client relationship management

4.2 Secondary user personas
Name: Wellness Center Team
Description: Small wellness center with 3-5 practitioners sharing a client base
Key needs: Contact sharing, group management, maintaining individual practitioner relationships
Name: Alternative Health Practitioner
Description: Practitioner in fields like acupuncture, massage therapy, or nutrition
Key needs: Field-specific contact details, HIPAA-compliant notes (future), appointment scheduling
5. Features and requirements
5.1 MVP feature set
5.1.1 Authentication system

Complete OAuth authentication via Google
Secure session management
User profile creation and management
JWT-based auth with refresh capabilities

5.1.2 Contact management

Create, read, update, and delete (CRUD) operations for contacts
Extended contact fields including:

Basic info (name, email, phone)
Professional info (company, job title)
Source tracking
Notes
Last contacted date
Avatar/photo


UUID-based identifiers for all records
Structured data validation

5.1.3 Contact grouping

Create, manage, and delete groups
Add/remove contacts to/from groups
View contacts by group
Group metadata (name, icon, privacy setting)
Many-to-many relationship between contacts and groups

5.1.4 Contact enrichment

Automated enrichment via OpenRouter/LLM
Enrichment status tracking
Storage of enriched data in structured format
Manual re-triggering of enrichment
Display of enrichment results

5.2 Data model
5.2.1 Core tables
profiles

id (uuid, FK to auth.users.id)
created_at (timestamptz)
updated_at (timestamptz)
app_settings (jsonb)

contacts

id (uuid, primary key)
user_id (uuid, FK to profiles.id)
first_name (text)
last_name (text)
email (text)
phone (text)
company (text)
job_title (text)
avatar_url (text)
source (text)
notes (text)
last_contacted_at (timestamptz)
created_at (timestamptz)
updated_at (timestamptz)
enrichment_status (text)
enriched_data (jsonb)

groups

id (uuid, primary key)
user_id (uuid, FK to profiles.id)
name (text)
is_private (boolean)
icon (text)
created_at (timestamptz)
updated_at (timestamptz)

contact_groups (Junction table)

contact_id (uuid, FK to contacts.id)
group_id (uuid, FK to groups.id)
Primary Key: (contact_id, group_id)

5.2.2 Supporting tables for MVP
reminders

id (uuid, primary key)
user_id (uuid, FK to profiles.id)
contact_id (uuid, FK to contacts.id)
reminder_at (timestamptz)
message (text)
status (text, default 'pending')
is_recurring (boolean)
recurrence_rule (text)
created_at (timestamptz)
updated_at (timestamptz)

interactions

id (uuid, primary key)
user_id (uuid, FK to profiles.id)
contact_id (uuid, FK to contacts.id)
interaction_at (timestamptz)
type (text)
summary (text)
llm_summary (text)
created_at (timestamptz)

5.3 Row-level security policies
All tables must implement row-level security (RLS) policies to ensure users can only access their own data:

profiles: User can only read/update their own profile
contacts: User can only CRUD contacts where user_id matches auth.uid()
groups: User can only CRUD groups where user_id matches auth.uid()
contact_groups: User can only CRUD where the associated contact and group are owned by them
reminders: User can only CRUD reminders where user_id matches auth.uid()
interactions: User can only CRUD interactions where user_id matches auth.uid()

6. User stories and acceptance criteria
6.1 Authentication
STORY-101: User registration

As a new user, I want to create an account so I can use the system
Acceptance criteria:

User can register using Google OAuth
A profile is created upon successful registration
User is redirected to dashboard after successful registration
Error messages are displayed if registration fails



STORY-102: User login

As a registered user, I want to log in so I can access my data
Acceptance criteria:

User can log in using Google OAuth
User session is maintained securely
User is redirected to dashboard after successful login
Error messages are displayed if login fails



STORY-103: User logout

As a logged-in user, I want to log out to secure my account
Acceptance criteria:

User can log out from any screen via header option
Session is terminated securely
User is redirected to login page
Authenticated resources are no longer accessible



STORY-104: Authentication persistence

As a returning user, I want my login to persist so I don't have to log in repeatedly
Acceptance criteria:

Login persists across browser sessions using secure cookies/JWT
Session expires after appropriate timeout
Refresh token mechanism extends session for active users



6.2 Contact management
STORY-201: Create contact manually

As a user, I want to create a new contact manually so I can store their information
Acceptance criteria:

Form with all required fields is available
Validation prevents submission of invalid data
Contact is stored with user_id automatically assigned
New contact appears in contacts list immediately
Enrichment process is triggered automatically after creation



STORY-202: View contacts list

As a user, I want to view a list of all my contacts so I can browse them
Acceptance criteria:

Contacts are displayed in a list/grid format
Only the user's own contacts are visible
Basic information (name, email, company) is displayed
Last contacted date is visible
Pagination or infinite scroll handles large numbers of contacts



STORY-203: View contact details

As a user, I want to see detailed information about a specific contact
Acceptance criteria:

All contact fields are displayed
Enrichment status and data are visible
Groups the contact belongs to are displayed
Recent interactions are visible
Active reminders are visible



STORY-204: Update contact information

As a user, I want to edit a contact's information to keep it current
Acceptance criteria:

Edit form pre-populated with existing data
All fields can be modified
Validation prevents submission of invalid data
Changes are saved and immediately visible
Updated_at timestamp is refreshed



STORY-205: Delete contact

As a user, I want to remove contacts I no longer need
Acceptance criteria:

Delete option is available on contact detail page
Confirmation is required before deletion
Contact is permanently removed from database
User is redirected to contacts list
Success message confirms deletion



STORY-206: Search contacts

As a user, I want to search for specific contacts by name, email, or company
Acceptance criteria:

Search input is accessible from contacts list
Results update as user types
No results message shown when appropriate
Search covers name, email, and company fields
Results only include user's own contacts



6.3 Contact grouping
STORY-301: Create group

As a user, I want to create contact groups to organize my contacts
Acceptance criteria:

Create group form with name and icon options
Validation prevents blank names
New group appears in groups list immediately
Privacy setting determines visibility



STORY-302: View groups list

As a user, I want to see all my contact groups
Acceptance criteria:

Groups are displayed with name and icon
Count of contacts in each group is shown
Only user's own groups are visible



STORY-303: Add contact to group

As a user, I want to add contacts to groups for organization
Acceptance criteria:

Option to add to group from contact detail page
Multiple selection from groups list
Success message confirms addition
Contact appears in group view immediately



STORY-304: Remove contact from group

As a user, I want to remove contacts from groups when needed
Acceptance criteria:

Remove option available in group view
Confirmation required before removal
Contact is removed only from group, not deleted
Success message confirms removal



STORY-305: View contacts by group

As a user, I want to filter my contacts by group
Acceptance criteria:

Selecting a group shows only contacts in that group
Count of displayed contacts is shown
Option to return to all contacts view
Empty state shown for groups with no contacts



STORY-306: Delete group

As a user, I want to delete groups I no longer need
Acceptance criteria:

Delete option available in group management
Confirmation required before deletion
Associated contact_group records are removed
Contacts remain in system
Success message confirms deletion



6.4 Contact enrichment
STORY-401: Automatic contact enrichment

As a user, I want contacts to be automatically enriched with additional information
Acceptance criteria:

Enrichment process triggers automatically on contact creation
Enrichment status is updated (pending → processing → completed/failed)
Enriched data is stored in structured format
User is not blocked waiting for enrichment to complete
Notification or visual indicator shows when enrichment completes



STORY-402: View enriched data

As a user, I want to see the additional information obtained through enrichment
Acceptance criteria:

Enriched data is displayed in contact details
Clear indication of which data came from enrichment
Original vs. enriched data is distinguishable
Enrichment source/confidence is indicated



STORY-403: Manually trigger enrichment

As a user, I want to manually trigger enrichment for contacts that weren't successfully enriched
Acceptance criteria:

Re-enrich button available for contacts with failed or no enrichment
Status updates to show process is running
User receives confirmation when process completes
Updated data is immediately visible
Rate limiting prevents abuse



6.5 Database modeling
STORY-501: Database schema implementation

As a developer, I want to implement the defined database schema so the application can store data properly
Acceptance criteria:

All tables defined with correct fields and types
Foreign key relationships established
Indexes created for performance
RLS policies implemented for security
Migrations script available for schema changes



STORY-502: Row-level security implementation

As a security-conscious developer, I want to implement RLS policies so users can only access their own data
Acceptance criteria:

Policies defined for all tables
Users can only select/insert/update/delete their own records
Junction tables secured based on ownership of related records
Service role access configured for administrative functions
Policies tested with multiple user scenarios



7. Technical requirements
7.1 Technology stack
7.1.1 Core technology

Framework: Next.js (App Router)
Language: TypeScript
Backend-as-a-Service: Supabase
Database: PostgreSQL (via Supabase)
Deployment: Vercel
Authentication: Supabase Auth with Google OAuth

7.1.2 API and data handling

API layer: tRPC for type-safe client-server communication
Data validation: Zod
Server state management: TanStack Query (React Query v4)
Client state management: React Context/useReducer (primary), Zustand/Jotai (if needed)

7.1.3 AI/ML components

LLM gateway: OpenRouter
Primary use: Contact enrichment, future interaction summarization

7.1.4 Development tools

Monorepo management: pnpm workspaces
Testing: Vitest
Linting/Formatting: ESLint, Prettier
Component library: Custom components built on shadcn/ui and Radix

7.2 Monorepo structure
The application will be organized as a monorepo with the following structure:
app_codexcrmapp
├── apps
│   └── web                 # Next.js application
├── packages
│   ├── ui                  # Shared React UI components
│   ├── db                  # Supabase client setup, schema types
│   ├── trpc                # tRPC router definitions, procedures, context
│   ├── types               # Shared TS types/interfaces
│   ├── validators          # Zod schemas for validation
│   ├── llm-client          # Client for interacting with OpenRouter
│   └── config              # Shared configurations
├── pnpm-workspace.yaml
├── package.json
└── tsconfig.base.json
7.3 Frontend application structure
The Next.js application (apps/web) will follow this structure:
Copy/apps/web
├── app/
│   ├── (auth)/             # Authentication routes
│   ├── (app)/              # Protected application routes
│   │   ├── dashboard/      # Main dashboard
│   │   ├── contacts/       # Contacts list and detail pages
│   │   ├── groups/         # Groups management
│   │   └── settings/       # User settings
│   ├── layout.tsx          # Root layout
│   ├── loading.tsx         # Loading states
│   └── error.tsx           # Error handling
├── components/             # App-specific components
├── lib/                    # Utility functions
│   └── trpc/               # tRPC client setup
├── actions/                # Server Actions
└── public/                 # Static assets
7.4 Security requirements

Authentication:

Implement Supabase Auth with Google OAuth
Secure cookie-based session management
CSRF protection


Authorization:

Row-level security policies for all database tables
Service role API access restricted to server-side only
Function-level permission checks


Data protection:

Input validation with Zod on all routes
Sanitization of user inputs
Prepared statements for all database queries


API security:

Rate limiting for enrichment and API requests
Secure handling of external API keys (environment variables)
Proper error handling to prevent information leakage


Frontend security:

Content Security Policy
XSS protection
Secure cookie configuration



7.5 Performance requirements

Response times:

Page load time < 2 seconds
API response time < 500ms for standard operations
Contact list pagination optimized for 1000+ contacts


Scalability:

Support 10,000+ contacts per user
Handle 100+ concurrent users
Efficient database querying with indexes


Optimization:

Next.js server components for data-heavy pages
Client-side caching via TanStack Query
Image optimization for contact avatars
Lazy loading for non-critical components



8. Design and user interface
8.1 Design principles

Simplicity: Clean, uncluttered interfaces focused on content
Consistency: Uniform patterns and components throughout
Accessibility: WCAG 2.1 AA compliance
Responsiveness: Functional on desktop, tablet, and mobile
Feedback: Clear system status and action confirmation

8.2 Core UI components
8.2.1 Layout components

ApplicationShell: Wrapper with sidebar, header, and content area
Sidebar: Navigation with links to main sections
Header: User info, search, notifications, and global actions
ContentArea: Main content container with breadcrumbs

8.2.2 Data display components

ContactCard: Compact contact information display
ContactGrid/List: Switchable display modes for contacts
ContactDetail: Full contact information layout
GroupList: Visual list of contact groups
ReminderCard: Individual reminder display

8.2.3 Input components

ContactForm: Form for creating/editing contacts
GroupForm: Form for creating/editing groups
SearchInput: Global search component
FilterControl: Advanced filtering options

8.3 Key user interfaces
8.3.1 Dashboard

Recent activity summary
Upcoming reminders
Quick access to frequent contacts
Performance metrics
Quick add contact button

8.3.2 Contacts list page

Grid/list toggle view
Search and filter options
Sort controls (name, last contacted, etc.)
Group filter dropdown
Add contact button
Pagination/infinite scroll

8.3.3 Contact detail page

Contact header with avatar and primary info
Tabbed interface for:

Details (basic and enriched information)
Interactions (timeline of past interactions)
Reminders (active and completed)
Groups (groups this contact belongs to)


Quick action buttons (edit, delete, add to group)
Enrichment status indicator

8.3.4 Groups management

Create group button
List of existing groups with counts
Edit/delete options
Drag-and-drop interface for adding contacts (future)

9. Sprint roadmap
9.1 Sprint 1 (2 weeks): Foundation and core functionality
Week 1 objectives:

Monorepo & tooling setup

Initialize pnpm workspace structure
Configure core development tools
Set up deployment pipeline


Infrastructure setup

Create Supabase project
Enable Google OAuth
Create initial database tables
Configure RLS policies


Authentication flow

Implement Google OAuth login/logout
Set up session management
Create protected routes


UI shell & basic components

Implement layout components
Build core UI components
Create responsive application shell



Week 2 objectives:

Basic contact list & detail view

Create tRPC procedures for contacts
Implement contacts list page
Build contact detail page


AI-first contact creation

Design "Add Contact" component
Implement basic file upload
Create contact creation flow with AI parsing
Build review and confirmation interface


Deployment & testing

Set up CI/CD workflow
Configure Vercel deployment
Perform manual testing
Fix critical issues



9.2 Definition of done for Sprint 1

Monorepo structure set up with core tooling
Users can sign up/log in using Google OAuth
Authenticated users see application shell with navigation
Users can view list of contacts (empty or manually added)
Users can access basic contact detail page
Users can create contacts with basic AI parsing
Application is deployable to Vercel
Code is linted and type-checked in CI

10. Appendix
10.1 Glossary

Contact: An individual whose relationship the user wants to manage
Group: A collection of contacts sharing some characteristic
Enrichment: Process of automatically adding additional information to a contact
Interaction: A recorded communication or meeting with a contact
Reminder: A future-dated prompt to contact someone
RLS: Row-Level Security, Supabase's mechanism for data access control

10.2 Technical terminology

tRPC: TypeScript RPC library for end-to-end typesafe APIs
Next.js: React framework for building web applications
Supabase: Open-source Firebase alternative providing BaaS
Zod: TypeScript-first schema validation library
LLM: Large Language Model, AI models like GPT-4 used for text processing
OpenRouter: API gateway for accessing various LLMs

10.3 Future considerations

Contact synchronization with external services (Google, Microsoft, etc.)
Chrome extension for capturing contacts from websites
Mobile application using React Native
More sophisticated AI features for relationship insights
Advanced notification system
Bulk actions for contact management
Team/collaboration features