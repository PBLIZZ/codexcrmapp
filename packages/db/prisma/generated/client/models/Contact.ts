/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck
/**
 * This file exports the `Contact` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from '@prisma/client/runtime/library';
import type * as $Enums from '../enums';
import type * as Prisma from '../internal/prismaNamespace';

/**
 * Model Contact
 *
 */
export type ContactModel = runtime.Types.Result.DefaultSelection<Prisma.$ContactPayload>;

export type AggregateContact = {
  _count: ContactCountAggregateOutputType | null;
  _min: ContactMinAggregateOutputType | null;
  _max: ContactMaxAggregateOutputType | null;
};

export type ContactMinAggregateOutputType = {
  id: string | null;
  fullName: string | null;
  email: string | null;
  phone: string | null;
  jobTitle: string | null;
  companyName: string | null;
  profileImageUrl: string | null;
  website: string | null;
  addressStreet: string | null;
  addressCity: string | null;
  addressPostalCode: string | null;
  addressCountry: string | null;
  phoneCountryCode: string | null;
  notes: string | null;
  source: string | null;
  lastContactedAt: Date | null;
  wellnessJourneyStage: string | null;
  wellnessStatus: string | null;
  lastAssessmentDate: Date | null;
  clientSince: Date | null;
  relationshipStatus: string | null;
  referralSource: string | null;
  enrichmentStatus: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  userId: string | null;
};

export type ContactMaxAggregateOutputType = {
  id: string | null;
  fullName: string | null;
  email: string | null;
  phone: string | null;
  jobTitle: string | null;
  companyName: string | null;
  profileImageUrl: string | null;
  website: string | null;
  addressStreet: string | null;
  addressCity: string | null;
  addressPostalCode: string | null;
  addressCountry: string | null;
  phoneCountryCode: string | null;
  notes: string | null;
  source: string | null;
  lastContactedAt: Date | null;
  wellnessJourneyStage: string | null;
  wellnessStatus: string | null;
  lastAssessmentDate: Date | null;
  clientSince: Date | null;
  relationshipStatus: string | null;
  referralSource: string | null;
  enrichmentStatus: string | null;
  createdAt: Date | null;
  updatedAt: Date | null;
  userId: string | null;
};

export type ContactCountAggregateOutputType = {
  id: number;
  fullName: number;
  email: number;
  phone: number;
  jobTitle: number;
  companyName: number;
  profileImageUrl: number;
  website: number;
  tags: number;
  socialHandles: number;
  addressStreet: number;
  addressCity: number;
  addressPostalCode: number;
  addressCountry: number;
  phoneCountryCode: number;
  notes: number;
  source: number;
  lastContactedAt: number;
  wellnessGoals: number;
  wellnessJourneyStage: number;
  wellnessStatus: number;
  lastAssessmentDate: number;
  clientSince: number;
  relationshipStatus: number;
  referralSource: number;
  enrichmentStatus: number;
  enrichedData: number;
  communicationPreferences: number;
  createdAt: number;
  updatedAt: number;
  userId: number;
  _all: number;
};

export type ContactMinAggregateInputType = {
  id?: true;
  fullName?: true;
  email?: true;
  phone?: true;
  jobTitle?: true;
  companyName?: true;
  profileImageUrl?: true;
  website?: true;
  addressStreet?: true;
  addressCity?: true;
  addressPostalCode?: true;
  addressCountry?: true;
  phoneCountryCode?: true;
  notes?: true;
  source?: true;
  lastContactedAt?: true;
  wellnessJourneyStage?: true;
  wellnessStatus?: true;
  lastAssessmentDate?: true;
  clientSince?: true;
  relationshipStatus?: true;
  referralSource?: true;
  enrichmentStatus?: true;
  createdAt?: true;
  updatedAt?: true;
  userId?: true;
};

export type ContactMaxAggregateInputType = {
  id?: true;
  fullName?: true;
  email?: true;
  phone?: true;
  jobTitle?: true;
  companyName?: true;
  profileImageUrl?: true;
  website?: true;
  addressStreet?: true;
  addressCity?: true;
  addressPostalCode?: true;
  addressCountry?: true;
  phoneCountryCode?: true;
  notes?: true;
  source?: true;
  lastContactedAt?: true;
  wellnessJourneyStage?: true;
  wellnessStatus?: true;
  lastAssessmentDate?: true;
  clientSince?: true;
  relationshipStatus?: true;
  referralSource?: true;
  enrichmentStatus?: true;
  createdAt?: true;
  updatedAt?: true;
  userId?: true;
};

export type ContactCountAggregateInputType = {
  id?: true;
  fullName?: true;
  email?: true;
  phone?: true;
  jobTitle?: true;
  companyName?: true;
  profileImageUrl?: true;
  website?: true;
  tags?: true;
  socialHandles?: true;
  addressStreet?: true;
  addressCity?: true;
  addressPostalCode?: true;
  addressCountry?: true;
  phoneCountryCode?: true;
  notes?: true;
  source?: true;
  lastContactedAt?: true;
  wellnessGoals?: true;
  wellnessJourneyStage?: true;
  wellnessStatus?: true;
  lastAssessmentDate?: true;
  clientSince?: true;
  relationshipStatus?: true;
  referralSource?: true;
  enrichmentStatus?: true;
  enrichedData?: true;
  communicationPreferences?: true;
  createdAt?: true;
  updatedAt?: true;
  userId?: true;
  _all?: true;
};

export type ContactAggregateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Contact to aggregate.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the start position
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Count returned Contacts
   **/
  _count?: true | ContactCountAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the minimum value
   **/
  _min?: ContactMinAggregateInputType;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   *
   * Select which fields to find the maximum value
   **/
  _max?: ContactMaxAggregateInputType;
};

export type GetContactAggregateType<T extends ContactAggregateArgs> = {
  [P in keyof T & keyof AggregateContact]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateContact[P]>
    : Prisma.GetScalarType<T[P], AggregateContact[P]>;
};

export type ContactGroupByArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.ContactWhereInput;
  orderBy?: Prisma.ContactOrderByWithAggregationInput | Prisma.ContactOrderByWithAggregationInput[];
  by: Prisma.ContactScalarFieldEnum[] | Prisma.ContactScalarFieldEnum;
  having?: Prisma.ContactScalarWhereWithAggregatesInput;
  take?: number;
  skip?: number;
  _count?: ContactCountAggregateInputType | true;
  _min?: ContactMinAggregateInputType;
  _max?: ContactMaxAggregateInputType;
};

export type ContactGroupByOutputType = {
  id: string;
  fullName: string;
  email: string;
  phone: string | null;
  jobTitle: string | null;
  companyName: string | null;
  profileImageUrl: string | null;
  website: string | null;
  tags: string[];
  socialHandles: string[];
  addressStreet: string | null;
  addressCity: string | null;
  addressPostalCode: string | null;
  addressCountry: string | null;
  phoneCountryCode: string | null;
  notes: string | null;
  source: string | null;
  lastContactedAt: Date | null;
  wellnessGoals: string[];
  wellnessJourneyStage: string | null;
  wellnessStatus: string | null;
  lastAssessmentDate: Date | null;
  clientSince: Date | null;
  relationshipStatus: string | null;
  referralSource: string | null;
  enrichmentStatus: string | null;
  enrichedData: runtime.JsonValue | null;
  communicationPreferences: runtime.JsonValue | null;
  createdAt: Date;
  updatedAt: Date;
  userId: string;
  _count: ContactCountAggregateOutputType | null;
  _min: ContactMinAggregateOutputType | null;
  _max: ContactMaxAggregateOutputType | null;
};

type GetContactGroupByPayload<T extends ContactGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<ContactGroupByOutputType, T['by']> & {
      [P in keyof T & keyof ContactGroupByOutputType]: P extends '_count'
        ? T[P] extends boolean
          ? number
          : Prisma.GetScalarType<T[P], ContactGroupByOutputType[P]>
        : Prisma.GetScalarType<T[P], ContactGroupByOutputType[P]>;
    }
  >
>;

export type ContactWhereInput = {
  AND?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
  OR?: Prisma.ContactWhereInput[];
  NOT?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
  id?: Prisma.UuidFilter<'Contact'> | string;
  fullName?: Prisma.StringFilter<'Contact'> | string;
  email?: Prisma.StringFilter<'Contact'> | string;
  phone?: Prisma.StringNullableFilter<'Contact'> | string | null;
  jobTitle?: Prisma.StringNullableFilter<'Contact'> | string | null;
  companyName?: Prisma.StringNullableFilter<'Contact'> | string | null;
  profileImageUrl?: Prisma.StringNullableFilter<'Contact'> | string | null;
  website?: Prisma.StringNullableFilter<'Contact'> | string | null;
  tags?: Prisma.StringNullableListFilter<'Contact'>;
  socialHandles?: Prisma.StringNullableListFilter<'Contact'>;
  addressStreet?: Prisma.StringNullableFilter<'Contact'> | string | null;
  addressCity?: Prisma.StringNullableFilter<'Contact'> | string | null;
  addressPostalCode?: Prisma.StringNullableFilter<'Contact'> | string | null;
  addressCountry?: Prisma.StringNullableFilter<'Contact'> | string | null;
  phoneCountryCode?: Prisma.StringNullableFilter<'Contact'> | string | null;
  notes?: Prisma.StringNullableFilter<'Contact'> | string | null;
  source?: Prisma.StringNullableFilter<'Contact'> | string | null;
  lastContactedAt?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
  wellnessGoals?: Prisma.StringNullableListFilter<'Contact'>;
  wellnessJourneyStage?: Prisma.StringNullableFilter<'Contact'> | string | null;
  wellnessStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
  lastAssessmentDate?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
  clientSince?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
  relationshipStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
  referralSource?: Prisma.StringNullableFilter<'Contact'> | string | null;
  enrichmentStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
  enrichedData?: Prisma.JsonNullableFilter<'Contact'>;
  communicationPreferences?: Prisma.JsonNullableFilter<'Contact'>;
  createdAt?: Prisma.DateTimeFilter<'Contact'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Contact'> | Date | string;
  userId?: Prisma.UuidFilter<'Contact'> | string;
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
  groups?: Prisma.GroupMemberListRelationFilter;
};

export type ContactOrderByWithRelationInput = {
  id?: Prisma.SortOrder;
  fullName?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  phone?: Prisma.SortOrderInput | Prisma.SortOrder;
  jobTitle?: Prisma.SortOrderInput | Prisma.SortOrder;
  companyName?: Prisma.SortOrderInput | Prisma.SortOrder;
  profileImageUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
  website?: Prisma.SortOrderInput | Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  socialHandles?: Prisma.SortOrder;
  addressStreet?: Prisma.SortOrderInput | Prisma.SortOrder;
  addressCity?: Prisma.SortOrderInput | Prisma.SortOrder;
  addressPostalCode?: Prisma.SortOrderInput | Prisma.SortOrder;
  addressCountry?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneCountryCode?: Prisma.SortOrderInput | Prisma.SortOrder;
  notes?: Prisma.SortOrderInput | Prisma.SortOrder;
  source?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastContactedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  wellnessGoals?: Prisma.SortOrder;
  wellnessJourneyStage?: Prisma.SortOrderInput | Prisma.SortOrder;
  wellnessStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastAssessmentDate?: Prisma.SortOrderInput | Prisma.SortOrder;
  clientSince?: Prisma.SortOrderInput | Prisma.SortOrder;
  relationshipStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  referralSource?: Prisma.SortOrderInput | Prisma.SortOrder;
  enrichmentStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  enrichedData?: Prisma.SortOrderInput | Prisma.SortOrder;
  communicationPreferences?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  user?: Prisma.UserOrderByWithRelationInput;
  groups?: Prisma.GroupMemberOrderByRelationAggregateInput;
};

export type ContactWhereUniqueInput = Prisma.AtLeast<
  {
    id?: string;
    AND?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
    OR?: Prisma.ContactWhereInput[];
    NOT?: Prisma.ContactWhereInput | Prisma.ContactWhereInput[];
    fullName?: Prisma.StringFilter<'Contact'> | string;
    email?: Prisma.StringFilter<'Contact'> | string;
    phone?: Prisma.StringNullableFilter<'Contact'> | string | null;
    jobTitle?: Prisma.StringNullableFilter<'Contact'> | string | null;
    companyName?: Prisma.StringNullableFilter<'Contact'> | string | null;
    profileImageUrl?: Prisma.StringNullableFilter<'Contact'> | string | null;
    website?: Prisma.StringNullableFilter<'Contact'> | string | null;
    tags?: Prisma.StringNullableListFilter<'Contact'>;
    socialHandles?: Prisma.StringNullableListFilter<'Contact'>;
    addressStreet?: Prisma.StringNullableFilter<'Contact'> | string | null;
    addressCity?: Prisma.StringNullableFilter<'Contact'> | string | null;
    addressPostalCode?: Prisma.StringNullableFilter<'Contact'> | string | null;
    addressCountry?: Prisma.StringNullableFilter<'Contact'> | string | null;
    phoneCountryCode?: Prisma.StringNullableFilter<'Contact'> | string | null;
    notes?: Prisma.StringNullableFilter<'Contact'> | string | null;
    source?: Prisma.StringNullableFilter<'Contact'> | string | null;
    lastContactedAt?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
    wellnessGoals?: Prisma.StringNullableListFilter<'Contact'>;
    wellnessJourneyStage?: Prisma.StringNullableFilter<'Contact'> | string | null;
    wellnessStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
    lastAssessmentDate?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
    clientSince?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
    relationshipStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
    referralSource?: Prisma.StringNullableFilter<'Contact'> | string | null;
    enrichmentStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
    enrichedData?: Prisma.JsonNullableFilter<'Contact'>;
    communicationPreferences?: Prisma.JsonNullableFilter<'Contact'>;
    createdAt?: Prisma.DateTimeFilter<'Contact'> | Date | string;
    updatedAt?: Prisma.DateTimeFilter<'Contact'> | Date | string;
    userId?: Prisma.UuidFilter<'Contact'> | string;
    user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>;
    groups?: Prisma.GroupMemberListRelationFilter;
  },
  'id'
>;

export type ContactOrderByWithAggregationInput = {
  id?: Prisma.SortOrder;
  fullName?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  phone?: Prisma.SortOrderInput | Prisma.SortOrder;
  jobTitle?: Prisma.SortOrderInput | Prisma.SortOrder;
  companyName?: Prisma.SortOrderInput | Prisma.SortOrder;
  profileImageUrl?: Prisma.SortOrderInput | Prisma.SortOrder;
  website?: Prisma.SortOrderInput | Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  socialHandles?: Prisma.SortOrder;
  addressStreet?: Prisma.SortOrderInput | Prisma.SortOrder;
  addressCity?: Prisma.SortOrderInput | Prisma.SortOrder;
  addressPostalCode?: Prisma.SortOrderInput | Prisma.SortOrder;
  addressCountry?: Prisma.SortOrderInput | Prisma.SortOrder;
  phoneCountryCode?: Prisma.SortOrderInput | Prisma.SortOrder;
  notes?: Prisma.SortOrderInput | Prisma.SortOrder;
  source?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastContactedAt?: Prisma.SortOrderInput | Prisma.SortOrder;
  wellnessGoals?: Prisma.SortOrder;
  wellnessJourneyStage?: Prisma.SortOrderInput | Prisma.SortOrder;
  wellnessStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  lastAssessmentDate?: Prisma.SortOrderInput | Prisma.SortOrder;
  clientSince?: Prisma.SortOrderInput | Prisma.SortOrder;
  relationshipStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  referralSource?: Prisma.SortOrderInput | Prisma.SortOrder;
  enrichmentStatus?: Prisma.SortOrderInput | Prisma.SortOrder;
  enrichedData?: Prisma.SortOrderInput | Prisma.SortOrder;
  communicationPreferences?: Prisma.SortOrderInput | Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
  _count?: Prisma.ContactCountOrderByAggregateInput;
  _max?: Prisma.ContactMaxOrderByAggregateInput;
  _min?: Prisma.ContactMinOrderByAggregateInput;
};

export type ContactScalarWhereWithAggregatesInput = {
  AND?:
    | Prisma.ContactScalarWhereWithAggregatesInput
    | Prisma.ContactScalarWhereWithAggregatesInput[];
  OR?: Prisma.ContactScalarWhereWithAggregatesInput[];
  NOT?:
    | Prisma.ContactScalarWhereWithAggregatesInput
    | Prisma.ContactScalarWhereWithAggregatesInput[];
  id?: Prisma.UuidWithAggregatesFilter<'Contact'> | string;
  fullName?: Prisma.StringWithAggregatesFilter<'Contact'> | string;
  email?: Prisma.StringWithAggregatesFilter<'Contact'> | string;
  phone?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  jobTitle?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  companyName?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  profileImageUrl?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  website?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  tags?: Prisma.StringNullableListFilter<'Contact'>;
  socialHandles?: Prisma.StringNullableListFilter<'Contact'>;
  addressStreet?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  addressCity?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  addressPostalCode?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  addressCountry?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  phoneCountryCode?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  notes?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  source?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  lastContactedAt?: Prisma.DateTimeNullableWithAggregatesFilter<'Contact'> | Date | string | null;
  wellnessGoals?: Prisma.StringNullableListFilter<'Contact'>;
  wellnessJourneyStage?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  wellnessStatus?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  lastAssessmentDate?:
    | Prisma.DateTimeNullableWithAggregatesFilter<'Contact'>
    | Date
    | string
    | null;
  clientSince?: Prisma.DateTimeNullableWithAggregatesFilter<'Contact'> | Date | string | null;
  relationshipStatus?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  referralSource?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  enrichmentStatus?: Prisma.StringNullableWithAggregatesFilter<'Contact'> | string | null;
  enrichedData?: Prisma.JsonNullableWithAggregatesFilter<'Contact'>;
  communicationPreferences?: Prisma.JsonNullableWithAggregatesFilter<'Contact'>;
  createdAt?: Prisma.DateTimeWithAggregatesFilter<'Contact'> | Date | string;
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<'Contact'> | Date | string;
  userId?: Prisma.UuidWithAggregatesFilter<'Contact'> | string;
};

export type ContactCreateInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutContactsInput;
  groups?: Prisma.GroupMemberCreateNestedManyWithoutContactInput;
};

export type ContactUncheckedCreateInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: string;
  groups?: Prisma.GroupMemberUncheckedCreateNestedManyWithoutContactInput;
};

export type ContactUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutContactsNestedInput;
  groups?: Prisma.GroupMemberUpdateManyWithoutContactNestedInput;
};

export type ContactUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
  groups?: Prisma.GroupMemberUncheckedUpdateManyWithoutContactNestedInput;
};

export type ContactCreateManyInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: string;
};

export type ContactUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

export type ContactUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactListRelationFilter = {
  every?: Prisma.ContactWhereInput;
  some?: Prisma.ContactWhereInput;
  none?: Prisma.ContactWhereInput;
};

export type ContactOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder;
};

export type StringNullableListFilter<$PrismaModel = never> = {
  equals?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel> | null;
  has?: string | Prisma.StringFieldRefInput<$PrismaModel> | null;
  hasEvery?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>;
  hasSome?: string[] | Prisma.ListStringFieldRefInput<$PrismaModel>;
  isEmpty?: boolean;
};

export type ContactCountOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  fullName?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  phone?: Prisma.SortOrder;
  jobTitle?: Prisma.SortOrder;
  companyName?: Prisma.SortOrder;
  profileImageUrl?: Prisma.SortOrder;
  website?: Prisma.SortOrder;
  tags?: Prisma.SortOrder;
  socialHandles?: Prisma.SortOrder;
  addressStreet?: Prisma.SortOrder;
  addressCity?: Prisma.SortOrder;
  addressPostalCode?: Prisma.SortOrder;
  addressCountry?: Prisma.SortOrder;
  phoneCountryCode?: Prisma.SortOrder;
  notes?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  lastContactedAt?: Prisma.SortOrder;
  wellnessGoals?: Prisma.SortOrder;
  wellnessJourneyStage?: Prisma.SortOrder;
  wellnessStatus?: Prisma.SortOrder;
  lastAssessmentDate?: Prisma.SortOrder;
  clientSince?: Prisma.SortOrder;
  relationshipStatus?: Prisma.SortOrder;
  referralSource?: Prisma.SortOrder;
  enrichmentStatus?: Prisma.SortOrder;
  enrichedData?: Prisma.SortOrder;
  communicationPreferences?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ContactMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  fullName?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  phone?: Prisma.SortOrder;
  jobTitle?: Prisma.SortOrder;
  companyName?: Prisma.SortOrder;
  profileImageUrl?: Prisma.SortOrder;
  website?: Prisma.SortOrder;
  addressStreet?: Prisma.SortOrder;
  addressCity?: Prisma.SortOrder;
  addressPostalCode?: Prisma.SortOrder;
  addressCountry?: Prisma.SortOrder;
  phoneCountryCode?: Prisma.SortOrder;
  notes?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  lastContactedAt?: Prisma.SortOrder;
  wellnessJourneyStage?: Prisma.SortOrder;
  wellnessStatus?: Prisma.SortOrder;
  lastAssessmentDate?: Prisma.SortOrder;
  clientSince?: Prisma.SortOrder;
  relationshipStatus?: Prisma.SortOrder;
  referralSource?: Prisma.SortOrder;
  enrichmentStatus?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ContactMinOrderByAggregateInput = {
  id?: Prisma.SortOrder;
  fullName?: Prisma.SortOrder;
  email?: Prisma.SortOrder;
  phone?: Prisma.SortOrder;
  jobTitle?: Prisma.SortOrder;
  companyName?: Prisma.SortOrder;
  profileImageUrl?: Prisma.SortOrder;
  website?: Prisma.SortOrder;
  addressStreet?: Prisma.SortOrder;
  addressCity?: Prisma.SortOrder;
  addressPostalCode?: Prisma.SortOrder;
  addressCountry?: Prisma.SortOrder;
  phoneCountryCode?: Prisma.SortOrder;
  notes?: Prisma.SortOrder;
  source?: Prisma.SortOrder;
  lastContactedAt?: Prisma.SortOrder;
  wellnessJourneyStage?: Prisma.SortOrder;
  wellnessStatus?: Prisma.SortOrder;
  lastAssessmentDate?: Prisma.SortOrder;
  clientSince?: Prisma.SortOrder;
  relationshipStatus?: Prisma.SortOrder;
  referralSource?: Prisma.SortOrder;
  enrichmentStatus?: Prisma.SortOrder;
  createdAt?: Prisma.SortOrder;
  updatedAt?: Prisma.SortOrder;
  userId?: Prisma.SortOrder;
};

export type ContactScalarRelationFilter = {
  is?: Prisma.ContactWhereInput;
  isNot?: Prisma.ContactWhereInput;
};

export type ContactCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUncheckedCreateNestedManyWithoutUserInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
};

export type ContactUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[];
};

export type ContactUncheckedUpdateManyWithoutUserNestedInput = {
  create?:
    | Prisma.XOR<
        Prisma.ContactCreateWithoutUserInput,
        Prisma.ContactUncheckedCreateWithoutUserInput
      >
    | Prisma.ContactCreateWithoutUserInput[]
    | Prisma.ContactUncheckedCreateWithoutUserInput[];
  connectOrCreate?:
    | Prisma.ContactCreateOrConnectWithoutUserInput
    | Prisma.ContactCreateOrConnectWithoutUserInput[];
  upsert?:
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpsertWithWhereUniqueWithoutUserInput[];
  createMany?: Prisma.ContactCreateManyUserInputEnvelope;
  set?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  disconnect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  delete?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  connect?: Prisma.ContactWhereUniqueInput | Prisma.ContactWhereUniqueInput[];
  update?:
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput
    | Prisma.ContactUpdateWithWhereUniqueWithoutUserInput[];
  updateMany?:
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput
    | Prisma.ContactUpdateManyWithWhereWithoutUserInput[];
  deleteMany?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[];
};

export type ContactCreatetagsInput = {
  set: string[];
};

export type ContactCreatesocialHandlesInput = {
  set: string[];
};

export type ContactCreatewellnessGoalsInput = {
  set: string[];
};

export type NullableStringFieldUpdateOperationsInput = {
  set?: string | null;
};

export type ContactUpdatetagsInput = {
  set?: string[];
  push?: string | string[];
};

export type ContactUpdatesocialHandlesInput = {
  set?: string[];
  push?: string | string[];
};

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: Date | string | null;
};

export type ContactUpdatewellnessGoalsInput = {
  set?: string[];
  push?: string | string[];
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: Date | string;
};

export type ContactCreateNestedOneWithoutGroupsInput = {
  create?: Prisma.XOR<
    Prisma.ContactCreateWithoutGroupsInput,
    Prisma.ContactUncheckedCreateWithoutGroupsInput
  >;
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutGroupsInput;
  connect?: Prisma.ContactWhereUniqueInput;
};

export type ContactUpdateOneRequiredWithoutGroupsNestedInput = {
  create?: Prisma.XOR<
    Prisma.ContactCreateWithoutGroupsInput,
    Prisma.ContactUncheckedCreateWithoutGroupsInput
  >;
  connectOrCreate?: Prisma.ContactCreateOrConnectWithoutGroupsInput;
  upsert?: Prisma.ContactUpsertWithoutGroupsInput;
  connect?: Prisma.ContactWhereUniqueInput;
  update?: Prisma.XOR<
    Prisma.XOR<
      Prisma.ContactUpdateToOneWithWhereWithoutGroupsInput,
      Prisma.ContactUpdateWithoutGroupsInput
    >,
    Prisma.ContactUncheckedUpdateWithoutGroupsInput
  >;
};

export type ContactCreateWithoutUserInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  groups?: Prisma.GroupMemberCreateNestedManyWithoutContactInput;
};

export type ContactUncheckedCreateWithoutUserInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  groups?: Prisma.GroupMemberUncheckedCreateNestedManyWithoutContactInput;
};

export type ContactCreateOrConnectWithoutUserInput = {
  where: Prisma.ContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutUserInput,
    Prisma.ContactUncheckedCreateWithoutUserInput
  >;
};

export type ContactCreateManyUserInputEnvelope = {
  data: Prisma.ContactCreateManyUserInput | Prisma.ContactCreateManyUserInput[];
  skipDuplicates?: boolean;
};

export type ContactUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.ContactWhereUniqueInput;
  update: Prisma.XOR<
    Prisma.ContactUpdateWithoutUserInput,
    Prisma.ContactUncheckedUpdateWithoutUserInput
  >;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutUserInput,
    Prisma.ContactUncheckedCreateWithoutUserInput
  >;
};

export type ContactUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.ContactWhereUniqueInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateWithoutUserInput,
    Prisma.ContactUncheckedUpdateWithoutUserInput
  >;
};

export type ContactUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.ContactScalarWhereInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateManyMutationInput,
    Prisma.ContactUncheckedUpdateManyWithoutUserInput
  >;
};

export type ContactScalarWhereInput = {
  AND?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[];
  OR?: Prisma.ContactScalarWhereInput[];
  NOT?: Prisma.ContactScalarWhereInput | Prisma.ContactScalarWhereInput[];
  id?: Prisma.UuidFilter<'Contact'> | string;
  fullName?: Prisma.StringFilter<'Contact'> | string;
  email?: Prisma.StringFilter<'Contact'> | string;
  phone?: Prisma.StringNullableFilter<'Contact'> | string | null;
  jobTitle?: Prisma.StringNullableFilter<'Contact'> | string | null;
  companyName?: Prisma.StringNullableFilter<'Contact'> | string | null;
  profileImageUrl?: Prisma.StringNullableFilter<'Contact'> | string | null;
  website?: Prisma.StringNullableFilter<'Contact'> | string | null;
  tags?: Prisma.StringNullableListFilter<'Contact'>;
  socialHandles?: Prisma.StringNullableListFilter<'Contact'>;
  addressStreet?: Prisma.StringNullableFilter<'Contact'> | string | null;
  addressCity?: Prisma.StringNullableFilter<'Contact'> | string | null;
  addressPostalCode?: Prisma.StringNullableFilter<'Contact'> | string | null;
  addressCountry?: Prisma.StringNullableFilter<'Contact'> | string | null;
  phoneCountryCode?: Prisma.StringNullableFilter<'Contact'> | string | null;
  notes?: Prisma.StringNullableFilter<'Contact'> | string | null;
  source?: Prisma.StringNullableFilter<'Contact'> | string | null;
  lastContactedAt?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
  wellnessGoals?: Prisma.StringNullableListFilter<'Contact'>;
  wellnessJourneyStage?: Prisma.StringNullableFilter<'Contact'> | string | null;
  wellnessStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
  lastAssessmentDate?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
  clientSince?: Prisma.DateTimeNullableFilter<'Contact'> | Date | string | null;
  relationshipStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
  referralSource?: Prisma.StringNullableFilter<'Contact'> | string | null;
  enrichmentStatus?: Prisma.StringNullableFilter<'Contact'> | string | null;
  enrichedData?: Prisma.JsonNullableFilter<'Contact'>;
  communicationPreferences?: Prisma.JsonNullableFilter<'Contact'>;
  createdAt?: Prisma.DateTimeFilter<'Contact'> | Date | string;
  updatedAt?: Prisma.DateTimeFilter<'Contact'> | Date | string;
  userId?: Prisma.UuidFilter<'Contact'> | string;
};

export type ContactCreateWithoutGroupsInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  user: Prisma.UserCreateNestedOneWithoutContactsInput;
};

export type ContactUncheckedCreateWithoutGroupsInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
  userId: string;
};

export type ContactCreateOrConnectWithoutGroupsInput = {
  where: Prisma.ContactWhereUniqueInput;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutGroupsInput,
    Prisma.ContactUncheckedCreateWithoutGroupsInput
  >;
};

export type ContactUpsertWithoutGroupsInput = {
  update: Prisma.XOR<
    Prisma.ContactUpdateWithoutGroupsInput,
    Prisma.ContactUncheckedUpdateWithoutGroupsInput
  >;
  create: Prisma.XOR<
    Prisma.ContactCreateWithoutGroupsInput,
    Prisma.ContactUncheckedCreateWithoutGroupsInput
  >;
  where?: Prisma.ContactWhereInput;
};

export type ContactUpdateToOneWithWhereWithoutGroupsInput = {
  where?: Prisma.ContactWhereInput;
  data: Prisma.XOR<
    Prisma.ContactUpdateWithoutGroupsInput,
    Prisma.ContactUncheckedUpdateWithoutGroupsInput
  >;
};

export type ContactUpdateWithoutGroupsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  user?: Prisma.UserUpdateOneRequiredWithoutContactsNestedInput;
};

export type ContactUncheckedUpdateWithoutGroupsInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  userId?: Prisma.StringFieldUpdateOperationsInput | string;
};

export type ContactCreateManyUserInput = {
  id?: string;
  fullName: string;
  email: string;
  phone?: string | null;
  jobTitle?: string | null;
  companyName?: string | null;
  profileImageUrl?: string | null;
  website?: string | null;
  tags?: Prisma.ContactCreatetagsInput | string[];
  socialHandles?: Prisma.ContactCreatesocialHandlesInput | string[];
  addressStreet?: string | null;
  addressCity?: string | null;
  addressPostalCode?: string | null;
  addressCountry?: string | null;
  phoneCountryCode?: string | null;
  notes?: string | null;
  source?: string | null;
  lastContactedAt?: Date | string | null;
  wellnessGoals?: Prisma.ContactCreatewellnessGoalsInput | string[];
  wellnessJourneyStage?: string | null;
  wellnessStatus?: string | null;
  lastAssessmentDate?: Date | string | null;
  clientSince?: Date | string | null;
  relationshipStatus?: string | null;
  referralSource?: string | null;
  enrichmentStatus?: string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Date | string;
  updatedAt?: Date | string;
};

export type ContactUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  groups?: Prisma.GroupMemberUpdateManyWithoutContactNestedInput;
};

export type ContactUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  groups?: Prisma.GroupMemberUncheckedUpdateManyWithoutContactNestedInput;
};

export type ContactUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string;
  fullName?: Prisma.StringFieldUpdateOperationsInput | string;
  email?: Prisma.StringFieldUpdateOperationsInput | string;
  phone?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  jobTitle?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  companyName?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  profileImageUrl?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  website?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  tags?: Prisma.ContactUpdatetagsInput | string[];
  socialHandles?: Prisma.ContactUpdatesocialHandlesInput | string[];
  addressStreet?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCity?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressPostalCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  addressCountry?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  phoneCountryCode?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  notes?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  source?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastContactedAt?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  wellnessGoals?: Prisma.ContactUpdatewellnessGoalsInput | string[];
  wellnessJourneyStage?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  wellnessStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  lastAssessmentDate?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  clientSince?: Prisma.NullableDateTimeFieldUpdateOperationsInput | Date | string | null;
  relationshipStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  referralSource?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichmentStatus?: Prisma.NullableStringFieldUpdateOperationsInput | string | null;
  enrichedData?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  communicationPreferences?: Prisma.NullableJsonNullValueInput | runtime.InputJsonValue;
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string;
};

/**
 * Count Type ContactCountOutputType
 */

export type ContactCountOutputType = {
  groups: number;
};

export type ContactCountOutputTypeSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  groups?: boolean | ContactCountOutputTypeCountGroupsArgs;
};

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the ContactCountOutputType
   */
  select?: Prisma.ContactCountOutputTypeSelect<ExtArgs> | null;
};

/**
 * ContactCountOutputType without action
 */
export type ContactCountOutputTypeCountGroupsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  where?: Prisma.GroupMemberWhereInput;
};

export type ContactSelect<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    fullName?: boolean;
    email?: boolean;
    phone?: boolean;
    jobTitle?: boolean;
    companyName?: boolean;
    profileImageUrl?: boolean;
    website?: boolean;
    tags?: boolean;
    socialHandles?: boolean;
    addressStreet?: boolean;
    addressCity?: boolean;
    addressPostalCode?: boolean;
    addressCountry?: boolean;
    phoneCountryCode?: boolean;
    notes?: boolean;
    source?: boolean;
    lastContactedAt?: boolean;
    wellnessGoals?: boolean;
    wellnessJourneyStage?: boolean;
    wellnessStatus?: boolean;
    lastAssessmentDate?: boolean;
    clientSince?: boolean;
    relationshipStatus?: boolean;
    referralSource?: boolean;
    enrichmentStatus?: boolean;
    enrichedData?: boolean;
    communicationPreferences?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
    groups?: boolean | Prisma.Contact$groupsArgs<ExtArgs>;
    _count?: boolean | Prisma.ContactCountOutputTypeDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['contact']
>;

export type ContactSelectCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    fullName?: boolean;
    email?: boolean;
    phone?: boolean;
    jobTitle?: boolean;
    companyName?: boolean;
    profileImageUrl?: boolean;
    website?: boolean;
    tags?: boolean;
    socialHandles?: boolean;
    addressStreet?: boolean;
    addressCity?: boolean;
    addressPostalCode?: boolean;
    addressCountry?: boolean;
    phoneCountryCode?: boolean;
    notes?: boolean;
    source?: boolean;
    lastContactedAt?: boolean;
    wellnessGoals?: boolean;
    wellnessJourneyStage?: boolean;
    wellnessStatus?: boolean;
    lastAssessmentDate?: boolean;
    clientSince?: boolean;
    relationshipStatus?: boolean;
    referralSource?: boolean;
    enrichmentStatus?: boolean;
    enrichedData?: boolean;
    communicationPreferences?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['contact']
>;

export type ContactSelectUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetSelect<
  {
    id?: boolean;
    fullName?: boolean;
    email?: boolean;
    phone?: boolean;
    jobTitle?: boolean;
    companyName?: boolean;
    profileImageUrl?: boolean;
    website?: boolean;
    tags?: boolean;
    socialHandles?: boolean;
    addressStreet?: boolean;
    addressCity?: boolean;
    addressPostalCode?: boolean;
    addressCountry?: boolean;
    phoneCountryCode?: boolean;
    notes?: boolean;
    source?: boolean;
    lastContactedAt?: boolean;
    wellnessGoals?: boolean;
    wellnessJourneyStage?: boolean;
    wellnessStatus?: boolean;
    lastAssessmentDate?: boolean;
    clientSince?: boolean;
    relationshipStatus?: boolean;
    referralSource?: boolean;
    enrichmentStatus?: boolean;
    enrichedData?: boolean;
    communicationPreferences?: boolean;
    createdAt?: boolean;
    updatedAt?: boolean;
    userId?: boolean;
    user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  },
  ExtArgs['result']['contact']
>;

export type ContactSelectScalar = {
  id?: boolean;
  fullName?: boolean;
  email?: boolean;
  phone?: boolean;
  jobTitle?: boolean;
  companyName?: boolean;
  profileImageUrl?: boolean;
  website?: boolean;
  tags?: boolean;
  socialHandles?: boolean;
  addressStreet?: boolean;
  addressCity?: boolean;
  addressPostalCode?: boolean;
  addressCountry?: boolean;
  phoneCountryCode?: boolean;
  notes?: boolean;
  source?: boolean;
  lastContactedAt?: boolean;
  wellnessGoals?: boolean;
  wellnessJourneyStage?: boolean;
  wellnessStatus?: boolean;
  lastAssessmentDate?: boolean;
  clientSince?: boolean;
  relationshipStatus?: boolean;
  referralSource?: boolean;
  enrichmentStatus?: boolean;
  enrichedData?: boolean;
  communicationPreferences?: boolean;
  createdAt?: boolean;
  updatedAt?: boolean;
  userId?: boolean;
};

export type ContactOmit<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = runtime.Types.Extensions.GetOmit<
  | 'id'
  | 'fullName'
  | 'email'
  | 'phone'
  | 'jobTitle'
  | 'companyName'
  | 'profileImageUrl'
  | 'website'
  | 'tags'
  | 'socialHandles'
  | 'addressStreet'
  | 'addressCity'
  | 'addressPostalCode'
  | 'addressCountry'
  | 'phoneCountryCode'
  | 'notes'
  | 'source'
  | 'lastContactedAt'
  | 'wellnessGoals'
  | 'wellnessJourneyStage'
  | 'wellnessStatus'
  | 'lastAssessmentDate'
  | 'clientSince'
  | 'relationshipStatus'
  | 'referralSource'
  | 'enrichmentStatus'
  | 'enrichedData'
  | 'communicationPreferences'
  | 'createdAt'
  | 'updatedAt'
  | 'userId',
  ExtArgs['result']['contact']
>;
export type ContactInclude<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
  groups?: boolean | Prisma.Contact$groupsArgs<ExtArgs>;
  _count?: boolean | Prisma.ContactCountOutputTypeDefaultArgs<ExtArgs>;
};
export type ContactIncludeCreateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};
export type ContactIncludeUpdateManyAndReturn<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>;
};

export type $ContactPayload<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  name: 'Contact';
  objects: {
    user: Prisma.$UserPayload<ExtArgs>;
    groups: Prisma.$GroupMemberPayload<ExtArgs>[];
  };
  scalars: runtime.Types.Extensions.GetPayloadResult<
    {
      id: string;
      fullName: string;
      email: string;
      phone: string | null;
      jobTitle: string | null;
      companyName: string | null;
      profileImageUrl: string | null;
      website: string | null;
      tags: string[];
      socialHandles: string[];
      addressStreet: string | null;
      addressCity: string | null;
      addressPostalCode: string | null;
      addressCountry: string | null;
      phoneCountryCode: string | null;
      notes: string | null;
      source: string | null;
      lastContactedAt: Date | null;
      wellnessGoals: string[];
      wellnessJourneyStage: string | null;
      wellnessStatus: string | null;
      lastAssessmentDate: Date | null;
      clientSince: Date | null;
      relationshipStatus: string | null;
      referralSource: string | null;
      enrichmentStatus: string | null;
      enrichedData: runtime.JsonValue | null;
      communicationPreferences: runtime.JsonValue | null;
      createdAt: Date;
      updatedAt: Date;
      userId: string;
    },
    ExtArgs['result']['contact']
  >;
  composites: {};
};

export type ContactGetPayload<S extends boolean | null | undefined | ContactDefaultArgs> =
  runtime.Types.Result.GetResult<Prisma.$ContactPayload, S>;

export type ContactCountArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = Omit<ContactFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
  select?: ContactCountAggregateInputType | true;
};

export interface ContactDelegate<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Contact']; meta: { name: 'Contact' } };
  /**
   * Find zero or one Contact that matches the filter.
   * @param {ContactFindUniqueArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends ContactFindUniqueArgs>(
    args: Prisma.SelectSubset<T, ContactFindUniqueArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      'findUnique',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find one Contact that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {ContactFindUniqueOrThrowArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends ContactFindUniqueOrThrowArgs>(
    args: Prisma.SelectSubset<T, ContactFindUniqueOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      'findUniqueOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Contact that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindFirstArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends ContactFindFirstArgs>(
    args?: Prisma.SelectSubset<T, ContactFindFirstArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      'findFirst',
      GlobalOmitOptions
    > | null,
    null,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find the first Contact that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindFirstOrThrowArgs} args - Arguments to find a Contact
   * @example
   * // Get one Contact
   * const contact = await prisma.contact.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends ContactFindFirstOrThrowArgs>(
    args?: Prisma.SelectSubset<T, ContactFindFirstOrThrowArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      'findFirstOrThrow',
      GlobalOmitOptions
    >,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Find zero or more Contacts that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Contacts
   * const contacts = await prisma.contact.findMany()
   *
   * // Get first 10 Contacts
   * const contacts = await prisma.contact.findMany({ take: 10 })
   *
   * // Only select the `id`
   * const contactWithIdOnly = await prisma.contact.findMany({ select: { id: true } })
   *
   */
  findMany<T extends ContactFindManyArgs>(
    args?: Prisma.SelectSubset<T, ContactFindManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      'findMany',
      GlobalOmitOptions
    >
  >;

  /**
   * Create a Contact.
   * @param {ContactCreateArgs} args - Arguments to create a Contact.
   * @example
   * // Create one Contact
   * const Contact = await prisma.contact.create({
   *   data: {
   *     // ... data to create a Contact
   *   }
   * })
   *
   */
  create<T extends ContactCreateArgs>(
    args: Prisma.SelectSubset<T, ContactCreateArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'create', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Create many Contacts.
   * @param {ContactCreateManyArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contact = await prisma.contact.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   */
  createMany<T extends ContactCreateManyArgs>(
    args?: Prisma.SelectSubset<T, ContactCreateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Create many Contacts and returns the data saved in the database.
   * @param {ContactCreateManyAndReturnArgs} args - Arguments to create many Contacts.
   * @example
   * // Create many Contacts
   * const contact = await prisma.contact.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Create many Contacts and only return the `id`
   * const contactWithIdOnly = await prisma.contact.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  createManyAndReturn<T extends ContactCreateManyAndReturnArgs>(
    args?: Prisma.SelectSubset<T, ContactCreateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      'createManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Delete a Contact.
   * @param {ContactDeleteArgs} args - Arguments to delete one Contact.
   * @example
   * // Delete one Contact
   * const Contact = await prisma.contact.delete({
   *   where: {
   *     // ... filter to delete one Contact
   *   }
   * })
   *
   */
  delete<T extends ContactDeleteArgs>(
    args: Prisma.SelectSubset<T, ContactDeleteArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'delete', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Update one Contact.
   * @param {ContactUpdateArgs} args - Arguments to update one Contact.
   * @example
   * // Update one Contact
   * const contact = await prisma.contact.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  update<T extends ContactUpdateArgs>(
    args: Prisma.SelectSubset<T, ContactUpdateArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'update', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Delete zero or more Contacts.
   * @param {ContactDeleteManyArgs} args - Arguments to filter Contacts to delete.
   * @example
   * // Delete a few Contacts
   * const { count } = await prisma.contact.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   *
   */
  deleteMany<T extends ContactDeleteManyArgs>(
    args?: Prisma.SelectSubset<T, ContactDeleteManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Contacts
   * const contact = await prisma.contact.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   *
   */
  updateMany<T extends ContactUpdateManyArgs>(
    args: Prisma.SelectSubset<T, ContactUpdateManyArgs<ExtArgs>>
  ): Prisma.PrismaPromise<Prisma.BatchPayload>;

  /**
   * Update zero or more Contacts and returns the data updated in the database.
   * @param {ContactUpdateManyAndReturnArgs} args - Arguments to update many Contacts.
   * @example
   * // Update many Contacts
   * const contact = await prisma.contact.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *
   * // Update zero or more Contacts and only return the `id`
   * const contactWithIdOnly = await prisma.contact.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   *
   */
  updateManyAndReturn<T extends ContactUpdateManyAndReturnArgs>(
    args: Prisma.SelectSubset<T, ContactUpdateManyAndReturnArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    runtime.Types.Result.GetResult<
      Prisma.$ContactPayload<ExtArgs>,
      T,
      'updateManyAndReturn',
      GlobalOmitOptions
    >
  >;

  /**
   * Create or update one Contact.
   * @param {ContactUpsertArgs} args - Arguments to update or create a Contact.
   * @example
   * // Update or create a Contact
   * const contact = await prisma.contact.upsert({
   *   create: {
   *     // ... data to create a Contact
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Contact we want to update
   *   }
   * })
   */
  upsert<T extends ContactUpsertArgs>(
    args: Prisma.SelectSubset<T, ContactUpsertArgs<ExtArgs>>
  ): Prisma.Prisma__ContactClient<
    runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, 'upsert', GlobalOmitOptions>,
    never,
    ExtArgs,
    GlobalOmitOptions
  >;

  /**
   * Count the number of Contacts.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactCountArgs} args - Arguments to filter Contacts to count.
   * @example
   * // Count the number of Contacts
   * const count = await prisma.contact.count({
   *   where: {
   *     // ... the filter for the Contacts we want to count
   *   }
   * })
   **/
  count<T extends ContactCountArgs>(
    args?: Prisma.Subset<T, ContactCountArgs>
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], ContactCountAggregateOutputType>
      : number
  >;

  /**
   * Allows you to perform aggregations operations on a Contact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
   **/
  aggregate<T extends ContactAggregateArgs>(
    args: Prisma.Subset<T, ContactAggregateArgs>
  ): Prisma.PrismaPromise<GetContactAggregateType<T>>;

  /**
   * Group by Contact.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {ContactGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   *
   **/
  groupBy<
    T extends ContactGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: ContactGroupByArgs['orderBy'] }
      : { orderBy?: ContactGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<
      Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>
    >,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
      ? `Error: "by" must not be empty.`
      : HavingValid extends Prisma.False
        ? {
            [P in HavingFields]: P extends ByFields
              ? never
              : P extends string
                ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
                : [Error, 'Field ', P, ` in "having" needs to be provided in "by"`];
          }[HavingFields]
        : 'take' extends Prisma.Keys<T>
          ? 'orderBy' extends Prisma.Keys<T>
            ? ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields]
            : 'Error: If you provide "take", you also need to provide "orderBy"'
          : 'skip' extends Prisma.Keys<T>
            ? 'orderBy' extends Prisma.Keys<T>
              ? ByValid extends Prisma.True
                ? {}
                : {
                    [P in OrderFields]: P extends ByFields
                      ? never
                      : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                  }[OrderFields]
              : 'Error: If you provide "skip", you also need to provide "orderBy"'
            : ByValid extends Prisma.True
              ? {}
              : {
                  [P in OrderFields]: P extends ByFields
                    ? never
                    : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`;
                }[OrderFields],
  >(
    args: Prisma.SubsetIntersection<T, ContactGroupByArgs, OrderByArg> & InputErrors
  ): {} extends InputErrors ? GetContactGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>;
  /**
   * Fields of the Contact model
   */
  readonly fields: ContactFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Contact.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__ContactClient<
  T,
  Null = never,
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
  GlobalOmitOptions = {},
> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: 'PrismaPromise';
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>
  ): Prisma.Prisma__UserClient<
    | runtime.Types.Result.GetResult<
        Prisma.$UserPayload<ExtArgs>,
        T,
        'findUniqueOrThrow',
        GlobalOmitOptions
      >
    | Null,
    Null,
    ExtArgs,
    GlobalOmitOptions
  >;
  groups<T extends Prisma.Contact$groupsArgs<ExtArgs> = {}>(
    args?: Prisma.Subset<T, Prisma.Contact$groupsArgs<ExtArgs>>
  ): Prisma.PrismaPromise<
    | runtime.Types.Result.GetResult<
        Prisma.$GroupMemberPayload<ExtArgs>,
        T,
        'findMany',
        GlobalOmitOptions
      >
    | Null
  >;
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(
    onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null,
    onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null
  ): runtime.Types.Utils.JsPromise<TResult1 | TResult2>;
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(
    onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null
  ): runtime.Types.Utils.JsPromise<T | TResult>;
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>;
}

/**
 * Fields of the Contact model
 */
export interface ContactFieldRefs {
  readonly id: Prisma.FieldRef<'Contact', 'String'>;
  readonly fullName: Prisma.FieldRef<'Contact', 'String'>;
  readonly email: Prisma.FieldRef<'Contact', 'String'>;
  readonly phone: Prisma.FieldRef<'Contact', 'String'>;
  readonly jobTitle: Prisma.FieldRef<'Contact', 'String'>;
  readonly companyName: Prisma.FieldRef<'Contact', 'String'>;
  readonly profileImageUrl: Prisma.FieldRef<'Contact', 'String'>;
  readonly website: Prisma.FieldRef<'Contact', 'String'>;
  readonly tags: Prisma.FieldRef<'Contact', 'String[]'>;
  readonly socialHandles: Prisma.FieldRef<'Contact', 'String[]'>;
  readonly addressStreet: Prisma.FieldRef<'Contact', 'String'>;
  readonly addressCity: Prisma.FieldRef<'Contact', 'String'>;
  readonly addressPostalCode: Prisma.FieldRef<'Contact', 'String'>;
  readonly addressCountry: Prisma.FieldRef<'Contact', 'String'>;
  readonly phoneCountryCode: Prisma.FieldRef<'Contact', 'String'>;
  readonly notes: Prisma.FieldRef<'Contact', 'String'>;
  readonly source: Prisma.FieldRef<'Contact', 'String'>;
  readonly lastContactedAt: Prisma.FieldRef<'Contact', 'DateTime'>;
  readonly wellnessGoals: Prisma.FieldRef<'Contact', 'String[]'>;
  readonly wellnessJourneyStage: Prisma.FieldRef<'Contact', 'String'>;
  readonly wellnessStatus: Prisma.FieldRef<'Contact', 'String'>;
  readonly lastAssessmentDate: Prisma.FieldRef<'Contact', 'DateTime'>;
  readonly clientSince: Prisma.FieldRef<'Contact', 'DateTime'>;
  readonly relationshipStatus: Prisma.FieldRef<'Contact', 'String'>;
  readonly referralSource: Prisma.FieldRef<'Contact', 'String'>;
  readonly enrichmentStatus: Prisma.FieldRef<'Contact', 'String'>;
  readonly enrichedData: Prisma.FieldRef<'Contact', 'Json'>;
  readonly communicationPreferences: Prisma.FieldRef<'Contact', 'Json'>;
  readonly createdAt: Prisma.FieldRef<'Contact', 'DateTime'>;
  readonly updatedAt: Prisma.FieldRef<'Contact', 'DateTime'>;
  readonly userId: Prisma.FieldRef<'Contact', 'String'>;
}

// Custom InputTypes
/**
 * Contact findUnique
 */
export type ContactFindUniqueArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact findUniqueOrThrow
 */
export type ContactFindUniqueOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact findFirst
 */
export type ContactFindFirstArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[];
};

/**
 * Contact findFirstOrThrow
 */
export type ContactFindFirstOrThrowArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contact to fetch.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for searching for Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   *
   * Filter by unique combinations of Contacts.
   */
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[];
};

/**
 * Contact findMany
 */
export type ContactFindManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter, which Contacts to fetch.
   */
  where?: Prisma.ContactWhereInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   *
   * Determine the order of Contacts to fetch.
   */
  orderBy?: Prisma.ContactOrderByWithRelationInput | Prisma.ContactOrderByWithRelationInput[];
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   *
   * Sets the position for listing Contacts.
   */
  cursor?: Prisma.ContactWhereUniqueInput;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Take `Â±n` Contacts from the position of the cursor.
   */
  take?: number;
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   *
   * Skip the first `n` Contacts.
   */
  skip?: number;
  distinct?: Prisma.ContactScalarFieldEnum | Prisma.ContactScalarFieldEnum[];
};

/**
 * Contact create
 */
export type ContactCreateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * The data needed to create a Contact.
   */
  data: Prisma.XOR<Prisma.ContactCreateInput, Prisma.ContactUncheckedCreateInput>;
};

/**
 * Contact createMany
 */
export type ContactCreateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactCreateManyInput | Prisma.ContactCreateManyInput[];
  skipDuplicates?: boolean;
};

/**
 * Contact createManyAndReturn
 */
export type ContactCreateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelectCreateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * The data used to create many Contacts.
   */
  data: Prisma.ContactCreateManyInput | Prisma.ContactCreateManyInput[];
  skipDuplicates?: boolean;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactIncludeCreateManyAndReturn<ExtArgs> | null;
};

/**
 * Contact update
 */
export type ContactUpdateArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * The data needed to update a Contact.
   */
  data: Prisma.XOR<Prisma.ContactUpdateInput, Prisma.ContactUncheckedUpdateInput>;
  /**
   * Choose, which Contact to update.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact updateMany
 */
export type ContactUpdateManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<Prisma.ContactUpdateManyMutationInput, Prisma.ContactUncheckedUpdateManyInput>;
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactWhereInput;
  /**
   * Limit how many Contacts to update.
   */
  limit?: number;
};

/**
 * Contact updateManyAndReturn
 */
export type ContactUpdateManyAndReturnArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelectUpdateManyAndReturn<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * The data used to update Contacts.
   */
  data: Prisma.XOR<Prisma.ContactUpdateManyMutationInput, Prisma.ContactUncheckedUpdateManyInput>;
  /**
   * Filter which Contacts to update
   */
  where?: Prisma.ContactWhereInput;
  /**
   * Limit how many Contacts to update.
   */
  limit?: number;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactIncludeUpdateManyAndReturn<ExtArgs> | null;
};

/**
 * Contact upsert
 */
export type ContactUpsertArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * The filter to search for the Contact to update in case it exists.
   */
  where: Prisma.ContactWhereUniqueInput;
  /**
   * In case the Contact found by the `where` argument doesn't exist, create a new Contact with this data.
   */
  create: Prisma.XOR<Prisma.ContactCreateInput, Prisma.ContactUncheckedCreateInput>;
  /**
   * In case the Contact was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.ContactUpdateInput, Prisma.ContactUncheckedUpdateInput>;
};

/**
 * Contact delete
 */
export type ContactDeleteArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
  /**
   * Filter which Contact to delete.
   */
  where: Prisma.ContactWhereUniqueInput;
};

/**
 * Contact deleteMany
 */
export type ContactDeleteManyArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Filter which Contacts to delete
   */
  where?: Prisma.ContactWhereInput;
  /**
   * Limit how many Contacts to delete.
   */
  limit?: number;
};

/**
 * Contact.groups
 */
export type Contact$groupsArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null;
  where?: Prisma.GroupMemberWhereInput;
  orderBy?:
    | Prisma.GroupMemberOrderByWithRelationInput
    | Prisma.GroupMemberOrderByWithRelationInput[];
  cursor?: Prisma.GroupMemberWhereUniqueInput;
  take?: number;
  skip?: number;
  distinct?: Prisma.GroupMemberScalarFieldEnum | Prisma.GroupMemberScalarFieldEnum[];
};

/**
 * Contact without action
 */
export type ContactDefaultArgs<
  ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs,
> = {
  /**
   * Select specific fields to fetch from the Contact
   */
  select?: Prisma.ContactSelect<ExtArgs> | null;
  /**
   * Omit specific fields from the Contact
   */
  omit?: Prisma.ContactOmit<ExtArgs> | null;
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.ContactInclude<ExtArgs> | null;
};
