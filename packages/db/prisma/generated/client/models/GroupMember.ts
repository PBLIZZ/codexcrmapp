
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `GroupMember` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model GroupMember
 * 
 */
export type GroupMemberModel = runtime.Types.Result.DefaultSelection<Prisma.$GroupMemberPayload>

export type AggregateGroupMember = {
  _count: GroupMemberCountAggregateOutputType | null
  _min: GroupMemberMinAggregateOutputType | null
  _max: GroupMemberMaxAggregateOutputType | null
}

export type GroupMemberMinAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  groupId: string | null
  contactId: string | null
}

export type GroupMemberMaxAggregateOutputType = {
  id: string | null
  createdAt: Date | null
  groupId: string | null
  contactId: string | null
}

export type GroupMemberCountAggregateOutputType = {
  id: number
  createdAt: number
  groupId: number
  contactId: number
  _all: number
}


export type GroupMemberMinAggregateInputType = {
  id?: true
  createdAt?: true
  groupId?: true
  contactId?: true
}

export type GroupMemberMaxAggregateInputType = {
  id?: true
  createdAt?: true
  groupId?: true
  contactId?: true
}

export type GroupMemberCountAggregateInputType = {
  id?: true
  createdAt?: true
  groupId?: true
  contactId?: true
  _all?: true
}

export type GroupMemberAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GroupMember to aggregate.
   */
  where?: Prisma.GroupMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupMembers to fetch.
   */
  orderBy?: Prisma.GroupMemberOrderByWithRelationInput | Prisma.GroupMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GroupMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned GroupMembers
  **/
  _count?: true | GroupMemberCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GroupMemberMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GroupMemberMaxAggregateInputType
}

export type GetGroupMemberAggregateType<T extends GroupMemberAggregateArgs> = {
      [P in keyof T & keyof AggregateGroupMember]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGroupMember[P]>
    : Prisma.GetScalarType<T[P], AggregateGroupMember[P]>
}




export type GroupMemberGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupMemberWhereInput
  orderBy?: Prisma.GroupMemberOrderByWithAggregationInput | Prisma.GroupMemberOrderByWithAggregationInput[]
  by: Prisma.GroupMemberScalarFieldEnum[] | Prisma.GroupMemberScalarFieldEnum
  having?: Prisma.GroupMemberScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GroupMemberCountAggregateInputType | true
  _min?: GroupMemberMinAggregateInputType
  _max?: GroupMemberMaxAggregateInputType
}

export type GroupMemberGroupByOutputType = {
  id: string
  createdAt: Date
  groupId: string
  contactId: string
  _count: GroupMemberCountAggregateOutputType | null
  _min: GroupMemberMinAggregateOutputType | null
  _max: GroupMemberMaxAggregateOutputType | null
}

type GetGroupMemberGroupByPayload<T extends GroupMemberGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GroupMemberGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GroupMemberGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GroupMemberGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GroupMemberGroupByOutputType[P]>
      }
    >
  > 



export type GroupMemberWhereInput = {
  AND?: Prisma.GroupMemberWhereInput | Prisma.GroupMemberWhereInput[]
  OR?: Prisma.GroupMemberWhereInput[]
  NOT?: Prisma.GroupMemberWhereInput | Prisma.GroupMemberWhereInput[]
  id?: Prisma.UuidFilter<"GroupMember"> | string
  createdAt?: Prisma.DateTimeFilter<"GroupMember"> | Date | string
  groupId?: Prisma.UuidFilter<"GroupMember"> | string
  contactId?: Prisma.UuidFilter<"GroupMember"> | string
  group?: Prisma.XOR<Prisma.GroupScalarRelationFilter, Prisma.GroupWhereInput>
  contact?: Prisma.XOR<Prisma.ContactScalarRelationFilter, Prisma.ContactWhereInput>
}

export type GroupMemberOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  groupId?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  group?: Prisma.GroupOrderByWithRelationInput
  contact?: Prisma.ContactOrderByWithRelationInput
}

export type GroupMemberWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  groupId_contactId?: Prisma.GroupMemberGroupIdContactIdCompoundUniqueInput
  AND?: Prisma.GroupMemberWhereInput | Prisma.GroupMemberWhereInput[]
  OR?: Prisma.GroupMemberWhereInput[]
  NOT?: Prisma.GroupMemberWhereInput | Prisma.GroupMemberWhereInput[]
  createdAt?: Prisma.DateTimeFilter<"GroupMember"> | Date | string
  groupId?: Prisma.UuidFilter<"GroupMember"> | string
  contactId?: Prisma.UuidFilter<"GroupMember"> | string
  group?: Prisma.XOR<Prisma.GroupScalarRelationFilter, Prisma.GroupWhereInput>
  contact?: Prisma.XOR<Prisma.ContactScalarRelationFilter, Prisma.ContactWhereInput>
}, "id" | "groupId_contactId">

export type GroupMemberOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  groupId?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
  _count?: Prisma.GroupMemberCountOrderByAggregateInput
  _max?: Prisma.GroupMemberMaxOrderByAggregateInput
  _min?: Prisma.GroupMemberMinOrderByAggregateInput
}

export type GroupMemberScalarWhereWithAggregatesInput = {
  AND?: Prisma.GroupMemberScalarWhereWithAggregatesInput | Prisma.GroupMemberScalarWhereWithAggregatesInput[]
  OR?: Prisma.GroupMemberScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GroupMemberScalarWhereWithAggregatesInput | Prisma.GroupMemberScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"GroupMember"> | string
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"GroupMember"> | Date | string
  groupId?: Prisma.UuidWithAggregatesFilter<"GroupMember"> | string
  contactId?: Prisma.UuidWithAggregatesFilter<"GroupMember"> | string
}

export type GroupMemberCreateInput = {
  id?: string
  createdAt?: Date | string
  group: Prisma.GroupCreateNestedOneWithoutMembersInput
  contact: Prisma.ContactCreateNestedOneWithoutGroupsInput
}

export type GroupMemberUncheckedCreateInput = {
  id?: string
  createdAt?: Date | string
  groupId: string
  contactId: string
}

export type GroupMemberUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  group?: Prisma.GroupUpdateOneRequiredWithoutMembersNestedInput
  contact?: Prisma.ContactUpdateOneRequiredWithoutGroupsNestedInput
}

export type GroupMemberUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GroupMemberCreateManyInput = {
  id?: string
  createdAt?: Date | string
  groupId: string
  contactId: string
}

export type GroupMemberUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GroupMemberUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GroupMemberListRelationFilter = {
  every?: Prisma.GroupMemberWhereInput
  some?: Prisma.GroupMemberWhereInput
  none?: Prisma.GroupMemberWhereInput
}

export type GroupMemberOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GroupMemberGroupIdContactIdCompoundUniqueInput = {
  groupId: string
  contactId: string
}

export type GroupMemberCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  groupId?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
}

export type GroupMemberMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  groupId?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
}

export type GroupMemberMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  groupId?: Prisma.SortOrder
  contactId?: Prisma.SortOrder
}

export type GroupMemberCreateNestedManyWithoutContactInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutContactInput, Prisma.GroupMemberUncheckedCreateWithoutContactInput> | Prisma.GroupMemberCreateWithoutContactInput[] | Prisma.GroupMemberUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutContactInput | Prisma.GroupMemberCreateOrConnectWithoutContactInput[]
  createMany?: Prisma.GroupMemberCreateManyContactInputEnvelope
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
}

export type GroupMemberUncheckedCreateNestedManyWithoutContactInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutContactInput, Prisma.GroupMemberUncheckedCreateWithoutContactInput> | Prisma.GroupMemberCreateWithoutContactInput[] | Prisma.GroupMemberUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutContactInput | Prisma.GroupMemberCreateOrConnectWithoutContactInput[]
  createMany?: Prisma.GroupMemberCreateManyContactInputEnvelope
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
}

export type GroupMemberUpdateManyWithoutContactNestedInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutContactInput, Prisma.GroupMemberUncheckedCreateWithoutContactInput> | Prisma.GroupMemberCreateWithoutContactInput[] | Prisma.GroupMemberUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutContactInput | Prisma.GroupMemberCreateOrConnectWithoutContactInput[]
  upsert?: Prisma.GroupMemberUpsertWithWhereUniqueWithoutContactInput | Prisma.GroupMemberUpsertWithWhereUniqueWithoutContactInput[]
  createMany?: Prisma.GroupMemberCreateManyContactInputEnvelope
  set?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  disconnect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  delete?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  update?: Prisma.GroupMemberUpdateWithWhereUniqueWithoutContactInput | Prisma.GroupMemberUpdateWithWhereUniqueWithoutContactInput[]
  updateMany?: Prisma.GroupMemberUpdateManyWithWhereWithoutContactInput | Prisma.GroupMemberUpdateManyWithWhereWithoutContactInput[]
  deleteMany?: Prisma.GroupMemberScalarWhereInput | Prisma.GroupMemberScalarWhereInput[]
}

export type GroupMemberUncheckedUpdateManyWithoutContactNestedInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutContactInput, Prisma.GroupMemberUncheckedCreateWithoutContactInput> | Prisma.GroupMemberCreateWithoutContactInput[] | Prisma.GroupMemberUncheckedCreateWithoutContactInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutContactInput | Prisma.GroupMemberCreateOrConnectWithoutContactInput[]
  upsert?: Prisma.GroupMemberUpsertWithWhereUniqueWithoutContactInput | Prisma.GroupMemberUpsertWithWhereUniqueWithoutContactInput[]
  createMany?: Prisma.GroupMemberCreateManyContactInputEnvelope
  set?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  disconnect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  delete?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  update?: Prisma.GroupMemberUpdateWithWhereUniqueWithoutContactInput | Prisma.GroupMemberUpdateWithWhereUniqueWithoutContactInput[]
  updateMany?: Prisma.GroupMemberUpdateManyWithWhereWithoutContactInput | Prisma.GroupMemberUpdateManyWithWhereWithoutContactInput[]
  deleteMany?: Prisma.GroupMemberScalarWhereInput | Prisma.GroupMemberScalarWhereInput[]
}

export type GroupMemberCreateNestedManyWithoutGroupInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutGroupInput, Prisma.GroupMemberUncheckedCreateWithoutGroupInput> | Prisma.GroupMemberCreateWithoutGroupInput[] | Prisma.GroupMemberUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutGroupInput | Prisma.GroupMemberCreateOrConnectWithoutGroupInput[]
  createMany?: Prisma.GroupMemberCreateManyGroupInputEnvelope
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
}

export type GroupMemberUncheckedCreateNestedManyWithoutGroupInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutGroupInput, Prisma.GroupMemberUncheckedCreateWithoutGroupInput> | Prisma.GroupMemberCreateWithoutGroupInput[] | Prisma.GroupMemberUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutGroupInput | Prisma.GroupMemberCreateOrConnectWithoutGroupInput[]
  createMany?: Prisma.GroupMemberCreateManyGroupInputEnvelope
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
}

export type GroupMemberUpdateManyWithoutGroupNestedInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutGroupInput, Prisma.GroupMemberUncheckedCreateWithoutGroupInput> | Prisma.GroupMemberCreateWithoutGroupInput[] | Prisma.GroupMemberUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutGroupInput | Prisma.GroupMemberCreateOrConnectWithoutGroupInput[]
  upsert?: Prisma.GroupMemberUpsertWithWhereUniqueWithoutGroupInput | Prisma.GroupMemberUpsertWithWhereUniqueWithoutGroupInput[]
  createMany?: Prisma.GroupMemberCreateManyGroupInputEnvelope
  set?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  disconnect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  delete?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  update?: Prisma.GroupMemberUpdateWithWhereUniqueWithoutGroupInput | Prisma.GroupMemberUpdateWithWhereUniqueWithoutGroupInput[]
  updateMany?: Prisma.GroupMemberUpdateManyWithWhereWithoutGroupInput | Prisma.GroupMemberUpdateManyWithWhereWithoutGroupInput[]
  deleteMany?: Prisma.GroupMemberScalarWhereInput | Prisma.GroupMemberScalarWhereInput[]
}

export type GroupMemberUncheckedUpdateManyWithoutGroupNestedInput = {
  create?: Prisma.XOR<Prisma.GroupMemberCreateWithoutGroupInput, Prisma.GroupMemberUncheckedCreateWithoutGroupInput> | Prisma.GroupMemberCreateWithoutGroupInput[] | Prisma.GroupMemberUncheckedCreateWithoutGroupInput[]
  connectOrCreate?: Prisma.GroupMemberCreateOrConnectWithoutGroupInput | Prisma.GroupMemberCreateOrConnectWithoutGroupInput[]
  upsert?: Prisma.GroupMemberUpsertWithWhereUniqueWithoutGroupInput | Prisma.GroupMemberUpsertWithWhereUniqueWithoutGroupInput[]
  createMany?: Prisma.GroupMemberCreateManyGroupInputEnvelope
  set?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  disconnect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  delete?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  connect?: Prisma.GroupMemberWhereUniqueInput | Prisma.GroupMemberWhereUniqueInput[]
  update?: Prisma.GroupMemberUpdateWithWhereUniqueWithoutGroupInput | Prisma.GroupMemberUpdateWithWhereUniqueWithoutGroupInput[]
  updateMany?: Prisma.GroupMemberUpdateManyWithWhereWithoutGroupInput | Prisma.GroupMemberUpdateManyWithWhereWithoutGroupInput[]
  deleteMany?: Prisma.GroupMemberScalarWhereInput | Prisma.GroupMemberScalarWhereInput[]
}

export type GroupMemberCreateWithoutContactInput = {
  id?: string
  createdAt?: Date | string
  group: Prisma.GroupCreateNestedOneWithoutMembersInput
}

export type GroupMemberUncheckedCreateWithoutContactInput = {
  id?: string
  createdAt?: Date | string
  groupId: string
}

export type GroupMemberCreateOrConnectWithoutContactInput = {
  where: Prisma.GroupMemberWhereUniqueInput
  create: Prisma.XOR<Prisma.GroupMemberCreateWithoutContactInput, Prisma.GroupMemberUncheckedCreateWithoutContactInput>
}

export type GroupMemberCreateManyContactInputEnvelope = {
  data: Prisma.GroupMemberCreateManyContactInput | Prisma.GroupMemberCreateManyContactInput[]
  skipDuplicates?: boolean
}

export type GroupMemberUpsertWithWhereUniqueWithoutContactInput = {
  where: Prisma.GroupMemberWhereUniqueInput
  update: Prisma.XOR<Prisma.GroupMemberUpdateWithoutContactInput, Prisma.GroupMemberUncheckedUpdateWithoutContactInput>
  create: Prisma.XOR<Prisma.GroupMemberCreateWithoutContactInput, Prisma.GroupMemberUncheckedCreateWithoutContactInput>
}

export type GroupMemberUpdateWithWhereUniqueWithoutContactInput = {
  where: Prisma.GroupMemberWhereUniqueInput
  data: Prisma.XOR<Prisma.GroupMemberUpdateWithoutContactInput, Prisma.GroupMemberUncheckedUpdateWithoutContactInput>
}

export type GroupMemberUpdateManyWithWhereWithoutContactInput = {
  where: Prisma.GroupMemberScalarWhereInput
  data: Prisma.XOR<Prisma.GroupMemberUpdateManyMutationInput, Prisma.GroupMemberUncheckedUpdateManyWithoutContactInput>
}

export type GroupMemberScalarWhereInput = {
  AND?: Prisma.GroupMemberScalarWhereInput | Prisma.GroupMemberScalarWhereInput[]
  OR?: Prisma.GroupMemberScalarWhereInput[]
  NOT?: Prisma.GroupMemberScalarWhereInput | Prisma.GroupMemberScalarWhereInput[]
  id?: Prisma.UuidFilter<"GroupMember"> | string
  createdAt?: Prisma.DateTimeFilter<"GroupMember"> | Date | string
  groupId?: Prisma.UuidFilter<"GroupMember"> | string
  contactId?: Prisma.UuidFilter<"GroupMember"> | string
}

export type GroupMemberCreateWithoutGroupInput = {
  id?: string
  createdAt?: Date | string
  contact: Prisma.ContactCreateNestedOneWithoutGroupsInput
}

export type GroupMemberUncheckedCreateWithoutGroupInput = {
  id?: string
  createdAt?: Date | string
  contactId: string
}

export type GroupMemberCreateOrConnectWithoutGroupInput = {
  where: Prisma.GroupMemberWhereUniqueInput
  create: Prisma.XOR<Prisma.GroupMemberCreateWithoutGroupInput, Prisma.GroupMemberUncheckedCreateWithoutGroupInput>
}

export type GroupMemberCreateManyGroupInputEnvelope = {
  data: Prisma.GroupMemberCreateManyGroupInput | Prisma.GroupMemberCreateManyGroupInput[]
  skipDuplicates?: boolean
}

export type GroupMemberUpsertWithWhereUniqueWithoutGroupInput = {
  where: Prisma.GroupMemberWhereUniqueInput
  update: Prisma.XOR<Prisma.GroupMemberUpdateWithoutGroupInput, Prisma.GroupMemberUncheckedUpdateWithoutGroupInput>
  create: Prisma.XOR<Prisma.GroupMemberCreateWithoutGroupInput, Prisma.GroupMemberUncheckedCreateWithoutGroupInput>
}

export type GroupMemberUpdateWithWhereUniqueWithoutGroupInput = {
  where: Prisma.GroupMemberWhereUniqueInput
  data: Prisma.XOR<Prisma.GroupMemberUpdateWithoutGroupInput, Prisma.GroupMemberUncheckedUpdateWithoutGroupInput>
}

export type GroupMemberUpdateManyWithWhereWithoutGroupInput = {
  where: Prisma.GroupMemberScalarWhereInput
  data: Prisma.XOR<Prisma.GroupMemberUpdateManyMutationInput, Prisma.GroupMemberUncheckedUpdateManyWithoutGroupInput>
}

export type GroupMemberCreateManyContactInput = {
  id?: string
  createdAt?: Date | string
  groupId: string
}

export type GroupMemberUpdateWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  group?: Prisma.GroupUpdateOneRequiredWithoutMembersNestedInput
}

export type GroupMemberUncheckedUpdateWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GroupMemberUncheckedUpdateManyWithoutContactInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  groupId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GroupMemberCreateManyGroupInput = {
  id?: string
  createdAt?: Date | string
  contactId: string
}

export type GroupMemberUpdateWithoutGroupInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contact?: Prisma.ContactUpdateOneRequiredWithoutGroupsNestedInput
}

export type GroupMemberUncheckedUpdateWithoutGroupInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GroupMemberUncheckedUpdateManyWithoutGroupInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  contactId?: Prisma.StringFieldUpdateOperationsInput | string
}



export type GroupMemberSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  groupId?: boolean
  contactId?: boolean
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupMember"]>

export type GroupMemberSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  groupId?: boolean
  contactId?: boolean
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupMember"]>

export type GroupMemberSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  createdAt?: boolean
  groupId?: boolean
  contactId?: boolean
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
}, ExtArgs["result"]["groupMember"]>

export type GroupMemberSelectScalar = {
  id?: boolean
  createdAt?: boolean
  groupId?: boolean
  contactId?: boolean
}

export type GroupMemberOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "createdAt" | "groupId" | "contactId", ExtArgs["result"]["groupMember"]>
export type GroupMemberInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
}
export type GroupMemberIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
}
export type GroupMemberIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  group?: boolean | Prisma.GroupDefaultArgs<ExtArgs>
  contact?: boolean | Prisma.ContactDefaultArgs<ExtArgs>
}

export type $GroupMemberPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "GroupMember"
  objects: {
    group: Prisma.$GroupPayload<ExtArgs>
    contact: Prisma.$ContactPayload<ExtArgs>
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    createdAt: Date
    groupId: string
    contactId: string
  }, ExtArgs["result"]["groupMember"]>
  composites: {}
}

export type GroupMemberGetPayload<S extends boolean | null | undefined | GroupMemberDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload, S>

export type GroupMemberCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GroupMemberFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GroupMemberCountAggregateInputType | true
  }

export interface GroupMemberDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['GroupMember'], meta: { name: 'GroupMember' } }
  /**
   * Find zero or one GroupMember that matches the filter.
   * @param {GroupMemberFindUniqueArgs} args - Arguments to find a GroupMember
   * @example
   * // Get one GroupMember
   * const groupMember = await prisma.groupMember.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GroupMemberFindUniqueArgs>(args: Prisma.SelectSubset<T, GroupMemberFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one GroupMember that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GroupMemberFindUniqueOrThrowArgs} args - Arguments to find a GroupMember
   * @example
   * // Get one GroupMember
   * const groupMember = await prisma.groupMember.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GroupMemberFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GroupMemberFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GroupMember that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupMemberFindFirstArgs} args - Arguments to find a GroupMember
   * @example
   * // Get one GroupMember
   * const groupMember = await prisma.groupMember.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GroupMemberFindFirstArgs>(args?: Prisma.SelectSubset<T, GroupMemberFindFirstArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first GroupMember that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupMemberFindFirstOrThrowArgs} args - Arguments to find a GroupMember
   * @example
   * // Get one GroupMember
   * const groupMember = await prisma.groupMember.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GroupMemberFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GroupMemberFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more GroupMembers that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupMemberFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all GroupMembers
   * const groupMembers = await prisma.groupMember.findMany()
   * 
   * // Get first 10 GroupMembers
   * const groupMembers = await prisma.groupMember.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const groupMemberWithIdOnly = await prisma.groupMember.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GroupMemberFindManyArgs>(args?: Prisma.SelectSubset<T, GroupMemberFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a GroupMember.
   * @param {GroupMemberCreateArgs} args - Arguments to create a GroupMember.
   * @example
   * // Create one GroupMember
   * const GroupMember = await prisma.groupMember.create({
   *   data: {
   *     // ... data to create a GroupMember
   *   }
   * })
   * 
   */
  create<T extends GroupMemberCreateArgs>(args: Prisma.SelectSubset<T, GroupMemberCreateArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many GroupMembers.
   * @param {GroupMemberCreateManyArgs} args - Arguments to create many GroupMembers.
   * @example
   * // Create many GroupMembers
   * const groupMember = await prisma.groupMember.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GroupMemberCreateManyArgs>(args?: Prisma.SelectSubset<T, GroupMemberCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many GroupMembers and returns the data saved in the database.
   * @param {GroupMemberCreateManyAndReturnArgs} args - Arguments to create many GroupMembers.
   * @example
   * // Create many GroupMembers
   * const groupMember = await prisma.groupMember.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many GroupMembers and only return the `id`
   * const groupMemberWithIdOnly = await prisma.groupMember.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GroupMemberCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GroupMemberCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a GroupMember.
   * @param {GroupMemberDeleteArgs} args - Arguments to delete one GroupMember.
   * @example
   * // Delete one GroupMember
   * const GroupMember = await prisma.groupMember.delete({
   *   where: {
   *     // ... filter to delete one GroupMember
   *   }
   * })
   * 
   */
  delete<T extends GroupMemberDeleteArgs>(args: Prisma.SelectSubset<T, GroupMemberDeleteArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one GroupMember.
   * @param {GroupMemberUpdateArgs} args - Arguments to update one GroupMember.
   * @example
   * // Update one GroupMember
   * const groupMember = await prisma.groupMember.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GroupMemberUpdateArgs>(args: Prisma.SelectSubset<T, GroupMemberUpdateArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more GroupMembers.
   * @param {GroupMemberDeleteManyArgs} args - Arguments to filter GroupMembers to delete.
   * @example
   * // Delete a few GroupMembers
   * const { count } = await prisma.groupMember.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GroupMemberDeleteManyArgs>(args?: Prisma.SelectSubset<T, GroupMemberDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GroupMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupMemberUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many GroupMembers
   * const groupMember = await prisma.groupMember.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GroupMemberUpdateManyArgs>(args: Prisma.SelectSubset<T, GroupMemberUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more GroupMembers and returns the data updated in the database.
   * @param {GroupMemberUpdateManyAndReturnArgs} args - Arguments to update many GroupMembers.
   * @example
   * // Update many GroupMembers
   * const groupMember = await prisma.groupMember.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more GroupMembers and only return the `id`
   * const groupMemberWithIdOnly = await prisma.groupMember.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GroupMemberUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GroupMemberUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one GroupMember.
   * @param {GroupMemberUpsertArgs} args - Arguments to update or create a GroupMember.
   * @example
   * // Update or create a GroupMember
   * const groupMember = await prisma.groupMember.upsert({
   *   create: {
   *     // ... data to create a GroupMember
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the GroupMember we want to update
   *   }
   * })
   */
  upsert<T extends GroupMemberUpsertArgs>(args: Prisma.SelectSubset<T, GroupMemberUpsertArgs<ExtArgs>>): Prisma.Prisma__GroupMemberClient<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of GroupMembers.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupMemberCountArgs} args - Arguments to filter GroupMembers to count.
   * @example
   * // Count the number of GroupMembers
   * const count = await prisma.groupMember.count({
   *   where: {
   *     // ... the filter for the GroupMembers we want to count
   *   }
   * })
  **/
  count<T extends GroupMemberCountArgs>(
    args?: Prisma.Subset<T, GroupMemberCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GroupMemberCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a GroupMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GroupMemberAggregateArgs>(args: Prisma.Subset<T, GroupMemberAggregateArgs>): Prisma.PrismaPromise<GetGroupMemberAggregateType<T>>

  /**
   * Group by GroupMember.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupMemberGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GroupMemberGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GroupMemberGroupByArgs['orderBy'] }
      : { orderBy?: GroupMemberGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GroupMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the GroupMember model
 */
readonly fields: GroupMemberFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for GroupMember.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GroupMemberClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  group<T extends Prisma.GroupDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.GroupDefaultArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  contact<T extends Prisma.ContactDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.ContactDefaultArgs<ExtArgs>>): Prisma.Prisma__ContactClient<runtime.Types.Result.GetResult<Prisma.$ContactPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the GroupMember model
 */
export interface GroupMemberFieldRefs {
  readonly id: Prisma.FieldRef<"GroupMember", 'String'>
  readonly createdAt: Prisma.FieldRef<"GroupMember", 'DateTime'>
  readonly groupId: Prisma.FieldRef<"GroupMember", 'String'>
  readonly contactId: Prisma.FieldRef<"GroupMember", 'String'>
}
    

// Custom InputTypes
/**
 * GroupMember findUnique
 */
export type GroupMemberFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * Filter, which GroupMember to fetch.
   */
  where: Prisma.GroupMemberWhereUniqueInput
}

/**
 * GroupMember findUniqueOrThrow
 */
export type GroupMemberFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * Filter, which GroupMember to fetch.
   */
  where: Prisma.GroupMemberWhereUniqueInput
}

/**
 * GroupMember findFirst
 */
export type GroupMemberFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * Filter, which GroupMember to fetch.
   */
  where?: Prisma.GroupMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupMembers to fetch.
   */
  orderBy?: Prisma.GroupMemberOrderByWithRelationInput | Prisma.GroupMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GroupMembers.
   */
  cursor?: Prisma.GroupMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GroupMembers.
   */
  distinct?: Prisma.GroupMemberScalarFieldEnum | Prisma.GroupMemberScalarFieldEnum[]
}

/**
 * GroupMember findFirstOrThrow
 */
export type GroupMemberFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * Filter, which GroupMember to fetch.
   */
  where?: Prisma.GroupMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupMembers to fetch.
   */
  orderBy?: Prisma.GroupMemberOrderByWithRelationInput | Prisma.GroupMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for GroupMembers.
   */
  cursor?: Prisma.GroupMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupMembers.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of GroupMembers.
   */
  distinct?: Prisma.GroupMemberScalarFieldEnum | Prisma.GroupMemberScalarFieldEnum[]
}

/**
 * GroupMember findMany
 */
export type GroupMemberFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * Filter, which GroupMembers to fetch.
   */
  where?: Prisma.GroupMemberWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of GroupMembers to fetch.
   */
  orderBy?: Prisma.GroupMemberOrderByWithRelationInput | Prisma.GroupMemberOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing GroupMembers.
   */
  cursor?: Prisma.GroupMemberWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` GroupMembers from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` GroupMembers.
   */
  skip?: number
  distinct?: Prisma.GroupMemberScalarFieldEnum | Prisma.GroupMemberScalarFieldEnum[]
}

/**
 * GroupMember create
 */
export type GroupMemberCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * The data needed to create a GroupMember.
   */
  data: Prisma.XOR<Prisma.GroupMemberCreateInput, Prisma.GroupMemberUncheckedCreateInput>
}

/**
 * GroupMember createMany
 */
export type GroupMemberCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many GroupMembers.
   */
  data: Prisma.GroupMemberCreateManyInput | Prisma.GroupMemberCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * GroupMember createManyAndReturn
 */
export type GroupMemberCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * The data used to create many GroupMembers.
   */
  data: Prisma.GroupMemberCreateManyInput | Prisma.GroupMemberCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * GroupMember update
 */
export type GroupMemberUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * The data needed to update a GroupMember.
   */
  data: Prisma.XOR<Prisma.GroupMemberUpdateInput, Prisma.GroupMemberUncheckedUpdateInput>
  /**
   * Choose, which GroupMember to update.
   */
  where: Prisma.GroupMemberWhereUniqueInput
}

/**
 * GroupMember updateMany
 */
export type GroupMemberUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update GroupMembers.
   */
  data: Prisma.XOR<Prisma.GroupMemberUpdateManyMutationInput, Prisma.GroupMemberUncheckedUpdateManyInput>
  /**
   * Filter which GroupMembers to update
   */
  where?: Prisma.GroupMemberWhereInput
  /**
   * Limit how many GroupMembers to update.
   */
  limit?: number
}

/**
 * GroupMember updateManyAndReturn
 */
export type GroupMemberUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * The data used to update GroupMembers.
   */
  data: Prisma.XOR<Prisma.GroupMemberUpdateManyMutationInput, Prisma.GroupMemberUncheckedUpdateManyInput>
  /**
   * Filter which GroupMembers to update
   */
  where?: Prisma.GroupMemberWhereInput
  /**
   * Limit how many GroupMembers to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * GroupMember upsert
 */
export type GroupMemberUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * The filter to search for the GroupMember to update in case it exists.
   */
  where: Prisma.GroupMemberWhereUniqueInput
  /**
   * In case the GroupMember found by the `where` argument doesn't exist, create a new GroupMember with this data.
   */
  create: Prisma.XOR<Prisma.GroupMemberCreateInput, Prisma.GroupMemberUncheckedCreateInput>
  /**
   * In case the GroupMember was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GroupMemberUpdateInput, Prisma.GroupMemberUncheckedUpdateInput>
}

/**
 * GroupMember delete
 */
export type GroupMemberDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  /**
   * Filter which GroupMember to delete.
   */
  where: Prisma.GroupMemberWhereUniqueInput
}

/**
 * GroupMember deleteMany
 */
export type GroupMemberDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which GroupMembers to delete
   */
  where?: Prisma.GroupMemberWhereInput
  /**
   * Limit how many GroupMembers to delete.
   */
  limit?: number
}

/**
 * GroupMember without action
 */
export type GroupMemberDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
}
