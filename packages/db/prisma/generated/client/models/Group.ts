
/* !!! This is code generated by Prisma. Do not edit directly. !!! */
/* eslint-disable */
// @ts-nocheck 
/**
 * This file exports the `Group` model and its related types.
 *
 * ðŸŸ¢ You can import this file directly.
 */
import * as runtime from "@prisma/client/runtime/library"
import type * as $Enums from "../enums"
import type * as Prisma from "../internal/prismaNamespace"

/**
 * Model Group
 * 
 */
export type GroupModel = runtime.Types.Result.DefaultSelection<Prisma.$GroupPayload>

export type AggregateGroup = {
  _count: GroupCountAggregateOutputType | null
  _min: GroupMinAggregateOutputType | null
  _max: GroupMaxAggregateOutputType | null
}

export type GroupMinAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  emoji: string | null
  color: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type GroupMaxAggregateOutputType = {
  id: string | null
  name: string | null
  description: string | null
  emoji: string | null
  color: string | null
  createdAt: Date | null
  updatedAt: Date | null
  userId: string | null
}

export type GroupCountAggregateOutputType = {
  id: number
  name: number
  description: number
  emoji: number
  color: number
  createdAt: number
  updatedAt: number
  userId: number
  _all: number
}


export type GroupMinAggregateInputType = {
  id?: true
  name?: true
  description?: true
  emoji?: true
  color?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type GroupMaxAggregateInputType = {
  id?: true
  name?: true
  description?: true
  emoji?: true
  color?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
}

export type GroupCountAggregateInputType = {
  id?: true
  name?: true
  description?: true
  emoji?: true
  color?: true
  createdAt?: true
  updatedAt?: true
  userId?: true
  _all?: true
}

export type GroupAggregateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Group to aggregate.
   */
  where?: Prisma.GroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Groups to fetch.
   */
  orderBy?: Prisma.GroupOrderByWithRelationInput | Prisma.GroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the start position
   */
  cursor?: Prisma.GroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Groups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Groups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Count returned Groups
  **/
  _count?: true | GroupCountAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the minimum value
  **/
  _min?: GroupMinAggregateInputType
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
   * 
   * Select which fields to find the maximum value
  **/
  _max?: GroupMaxAggregateInputType
}

export type GetGroupAggregateType<T extends GroupAggregateArgs> = {
      [P in keyof T & keyof AggregateGroup]: P extends '_count' | 'count'
    ? T[P] extends true
      ? number
      : Prisma.GetScalarType<T[P], AggregateGroup[P]>
    : Prisma.GetScalarType<T[P], AggregateGroup[P]>
}




export type GroupGroupByArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupWhereInput
  orderBy?: Prisma.GroupOrderByWithAggregationInput | Prisma.GroupOrderByWithAggregationInput[]
  by: Prisma.GroupScalarFieldEnum[] | Prisma.GroupScalarFieldEnum
  having?: Prisma.GroupScalarWhereWithAggregatesInput
  take?: number
  skip?: number
  _count?: GroupCountAggregateInputType | true
  _min?: GroupMinAggregateInputType
  _max?: GroupMaxAggregateInputType
}

export type GroupGroupByOutputType = {
  id: string
  name: string
  description: string | null
  emoji: string | null
  color: string | null
  createdAt: Date
  updatedAt: Date
  userId: string
  _count: GroupCountAggregateOutputType | null
  _min: GroupMinAggregateOutputType | null
  _max: GroupMaxAggregateOutputType | null
}

type GetGroupGroupByPayload<T extends GroupGroupByArgs> = Prisma.PrismaPromise<
  Array<
    Prisma.PickEnumerable<GroupGroupByOutputType, T['by']> &
      {
        [P in ((keyof T) & (keyof GroupGroupByOutputType))]: P extends '_count'
          ? T[P] extends boolean
            ? number
            : Prisma.GetScalarType<T[P], GroupGroupByOutputType[P]>
          : Prisma.GetScalarType<T[P], GroupGroupByOutputType[P]>
      }
    >
  > 



export type GroupWhereInput = {
  AND?: Prisma.GroupWhereInput | Prisma.GroupWhereInput[]
  OR?: Prisma.GroupWhereInput[]
  NOT?: Prisma.GroupWhereInput | Prisma.GroupWhereInput[]
  id?: Prisma.UuidFilter<"Group"> | string
  name?: Prisma.StringFilter<"Group"> | string
  description?: Prisma.StringNullableFilter<"Group"> | string | null
  emoji?: Prisma.StringNullableFilter<"Group"> | string | null
  color?: Prisma.StringNullableFilter<"Group"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Group"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Group"> | Date | string
  userId?: Prisma.UuidFilter<"Group"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  members?: Prisma.GroupMemberListRelationFilter
}

export type GroupOrderByWithRelationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  emoji?: Prisma.SortOrderInput | Prisma.SortOrder
  color?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  user?: Prisma.UserOrderByWithRelationInput
  members?: Prisma.GroupMemberOrderByRelationAggregateInput
}

export type GroupWhereUniqueInput = Prisma.AtLeast<{
  id?: string
  AND?: Prisma.GroupWhereInput | Prisma.GroupWhereInput[]
  OR?: Prisma.GroupWhereInput[]
  NOT?: Prisma.GroupWhereInput | Prisma.GroupWhereInput[]
  name?: Prisma.StringFilter<"Group"> | string
  description?: Prisma.StringNullableFilter<"Group"> | string | null
  emoji?: Prisma.StringNullableFilter<"Group"> | string | null
  color?: Prisma.StringNullableFilter<"Group"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Group"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Group"> | Date | string
  userId?: Prisma.UuidFilter<"Group"> | string
  user?: Prisma.XOR<Prisma.UserScalarRelationFilter, Prisma.UserWhereInput>
  members?: Prisma.GroupMemberListRelationFilter
}, "id">

export type GroupOrderByWithAggregationInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrderInput | Prisma.SortOrder
  emoji?: Prisma.SortOrderInput | Prisma.SortOrder
  color?: Prisma.SortOrderInput | Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
  _count?: Prisma.GroupCountOrderByAggregateInput
  _max?: Prisma.GroupMaxOrderByAggregateInput
  _min?: Prisma.GroupMinOrderByAggregateInput
}

export type GroupScalarWhereWithAggregatesInput = {
  AND?: Prisma.GroupScalarWhereWithAggregatesInput | Prisma.GroupScalarWhereWithAggregatesInput[]
  OR?: Prisma.GroupScalarWhereWithAggregatesInput[]
  NOT?: Prisma.GroupScalarWhereWithAggregatesInput | Prisma.GroupScalarWhereWithAggregatesInput[]
  id?: Prisma.UuidWithAggregatesFilter<"Group"> | string
  name?: Prisma.StringWithAggregatesFilter<"Group"> | string
  description?: Prisma.StringNullableWithAggregatesFilter<"Group"> | string | null
  emoji?: Prisma.StringNullableWithAggregatesFilter<"Group"> | string | null
  color?: Prisma.StringNullableWithAggregatesFilter<"Group"> | string | null
  createdAt?: Prisma.DateTimeWithAggregatesFilter<"Group"> | Date | string
  updatedAt?: Prisma.DateTimeWithAggregatesFilter<"Group"> | Date | string
  userId?: Prisma.UuidWithAggregatesFilter<"Group"> | string
}

export type GroupCreateInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutGroupsInput
  members?: Prisma.GroupMemberCreateNestedManyWithoutGroupInput
}

export type GroupUncheckedCreateInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
  members?: Prisma.GroupMemberUncheckedCreateNestedManyWithoutGroupInput
}

export type GroupUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutGroupsNestedInput
  members?: Prisma.GroupMemberUpdateManyWithoutGroupNestedInput
}

export type GroupUncheckedUpdateInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
  members?: Prisma.GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
}

export type GroupCreateManyInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type GroupUpdateManyMutationInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}

export type GroupUncheckedUpdateManyInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GroupListRelationFilter = {
  every?: Prisma.GroupWhereInput
  some?: Prisma.GroupWhereInput
  none?: Prisma.GroupWhereInput
}

export type GroupOrderByRelationAggregateInput = {
  _count?: Prisma.SortOrder
}

export type GroupCountOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type GroupMaxOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type GroupMinOrderByAggregateInput = {
  id?: Prisma.SortOrder
  name?: Prisma.SortOrder
  description?: Prisma.SortOrder
  emoji?: Prisma.SortOrder
  color?: Prisma.SortOrder
  createdAt?: Prisma.SortOrder
  updatedAt?: Prisma.SortOrder
  userId?: Prisma.SortOrder
}

export type GroupScalarRelationFilter = {
  is?: Prisma.GroupWhereInput
  isNot?: Prisma.GroupWhereInput
}

export type GroupCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.GroupCreateWithoutUserInput, Prisma.GroupUncheckedCreateWithoutUserInput> | Prisma.GroupCreateWithoutUserInput[] | Prisma.GroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.GroupCreateOrConnectWithoutUserInput | Prisma.GroupCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.GroupCreateManyUserInputEnvelope
  connect?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
}

export type GroupUncheckedCreateNestedManyWithoutUserInput = {
  create?: Prisma.XOR<Prisma.GroupCreateWithoutUserInput, Prisma.GroupUncheckedCreateWithoutUserInput> | Prisma.GroupCreateWithoutUserInput[] | Prisma.GroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.GroupCreateOrConnectWithoutUserInput | Prisma.GroupCreateOrConnectWithoutUserInput[]
  createMany?: Prisma.GroupCreateManyUserInputEnvelope
  connect?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
}

export type GroupUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.GroupCreateWithoutUserInput, Prisma.GroupUncheckedCreateWithoutUserInput> | Prisma.GroupCreateWithoutUserInput[] | Prisma.GroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.GroupCreateOrConnectWithoutUserInput | Prisma.GroupCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.GroupUpsertWithWhereUniqueWithoutUserInput | Prisma.GroupUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.GroupCreateManyUserInputEnvelope
  set?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  disconnect?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  delete?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  connect?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  update?: Prisma.GroupUpdateWithWhereUniqueWithoutUserInput | Prisma.GroupUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.GroupUpdateManyWithWhereWithoutUserInput | Prisma.GroupUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.GroupScalarWhereInput | Prisma.GroupScalarWhereInput[]
}

export type GroupUncheckedUpdateManyWithoutUserNestedInput = {
  create?: Prisma.XOR<Prisma.GroupCreateWithoutUserInput, Prisma.GroupUncheckedCreateWithoutUserInput> | Prisma.GroupCreateWithoutUserInput[] | Prisma.GroupUncheckedCreateWithoutUserInput[]
  connectOrCreate?: Prisma.GroupCreateOrConnectWithoutUserInput | Prisma.GroupCreateOrConnectWithoutUserInput[]
  upsert?: Prisma.GroupUpsertWithWhereUniqueWithoutUserInput | Prisma.GroupUpsertWithWhereUniqueWithoutUserInput[]
  createMany?: Prisma.GroupCreateManyUserInputEnvelope
  set?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  disconnect?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  delete?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  connect?: Prisma.GroupWhereUniqueInput | Prisma.GroupWhereUniqueInput[]
  update?: Prisma.GroupUpdateWithWhereUniqueWithoutUserInput | Prisma.GroupUpdateWithWhereUniqueWithoutUserInput[]
  updateMany?: Prisma.GroupUpdateManyWithWhereWithoutUserInput | Prisma.GroupUpdateManyWithWhereWithoutUserInput[]
  deleteMany?: Prisma.GroupScalarWhereInput | Prisma.GroupScalarWhereInput[]
}

export type GroupCreateNestedOneWithoutMembersInput = {
  create?: Prisma.XOR<Prisma.GroupCreateWithoutMembersInput, Prisma.GroupUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.GroupCreateOrConnectWithoutMembersInput
  connect?: Prisma.GroupWhereUniqueInput
}

export type GroupUpdateOneRequiredWithoutMembersNestedInput = {
  create?: Prisma.XOR<Prisma.GroupCreateWithoutMembersInput, Prisma.GroupUncheckedCreateWithoutMembersInput>
  connectOrCreate?: Prisma.GroupCreateOrConnectWithoutMembersInput
  upsert?: Prisma.GroupUpsertWithoutMembersInput
  connect?: Prisma.GroupWhereUniqueInput
  update?: Prisma.XOR<Prisma.XOR<Prisma.GroupUpdateToOneWithWhereWithoutMembersInput, Prisma.GroupUpdateWithoutMembersInput>, Prisma.GroupUncheckedUpdateWithoutMembersInput>
}

export type GroupCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.GroupMemberCreateNestedManyWithoutGroupInput
}

export type GroupUncheckedCreateWithoutUserInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  members?: Prisma.GroupMemberUncheckedCreateNestedManyWithoutGroupInput
}

export type GroupCreateOrConnectWithoutUserInput = {
  where: Prisma.GroupWhereUniqueInput
  create: Prisma.XOR<Prisma.GroupCreateWithoutUserInput, Prisma.GroupUncheckedCreateWithoutUserInput>
}

export type GroupCreateManyUserInputEnvelope = {
  data: Prisma.GroupCreateManyUserInput | Prisma.GroupCreateManyUserInput[]
  skipDuplicates?: boolean
}

export type GroupUpsertWithWhereUniqueWithoutUserInput = {
  where: Prisma.GroupWhereUniqueInput
  update: Prisma.XOR<Prisma.GroupUpdateWithoutUserInput, Prisma.GroupUncheckedUpdateWithoutUserInput>
  create: Prisma.XOR<Prisma.GroupCreateWithoutUserInput, Prisma.GroupUncheckedCreateWithoutUserInput>
}

export type GroupUpdateWithWhereUniqueWithoutUserInput = {
  where: Prisma.GroupWhereUniqueInput
  data: Prisma.XOR<Prisma.GroupUpdateWithoutUserInput, Prisma.GroupUncheckedUpdateWithoutUserInput>
}

export type GroupUpdateManyWithWhereWithoutUserInput = {
  where: Prisma.GroupScalarWhereInput
  data: Prisma.XOR<Prisma.GroupUpdateManyMutationInput, Prisma.GroupUncheckedUpdateManyWithoutUserInput>
}

export type GroupScalarWhereInput = {
  AND?: Prisma.GroupScalarWhereInput | Prisma.GroupScalarWhereInput[]
  OR?: Prisma.GroupScalarWhereInput[]
  NOT?: Prisma.GroupScalarWhereInput | Prisma.GroupScalarWhereInput[]
  id?: Prisma.UuidFilter<"Group"> | string
  name?: Prisma.StringFilter<"Group"> | string
  description?: Prisma.StringNullableFilter<"Group"> | string | null
  emoji?: Prisma.StringNullableFilter<"Group"> | string | null
  color?: Prisma.StringNullableFilter<"Group"> | string | null
  createdAt?: Prisma.DateTimeFilter<"Group"> | Date | string
  updatedAt?: Prisma.DateTimeFilter<"Group"> | Date | string
  userId?: Prisma.UuidFilter<"Group"> | string
}

export type GroupCreateWithoutMembersInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  user: Prisma.UserCreateNestedOneWithoutGroupsInput
}

export type GroupUncheckedCreateWithoutMembersInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
  userId: string
}

export type GroupCreateOrConnectWithoutMembersInput = {
  where: Prisma.GroupWhereUniqueInput
  create: Prisma.XOR<Prisma.GroupCreateWithoutMembersInput, Prisma.GroupUncheckedCreateWithoutMembersInput>
}

export type GroupUpsertWithoutMembersInput = {
  update: Prisma.XOR<Prisma.GroupUpdateWithoutMembersInput, Prisma.GroupUncheckedUpdateWithoutMembersInput>
  create: Prisma.XOR<Prisma.GroupCreateWithoutMembersInput, Prisma.GroupUncheckedCreateWithoutMembersInput>
  where?: Prisma.GroupWhereInput
}

export type GroupUpdateToOneWithWhereWithoutMembersInput = {
  where?: Prisma.GroupWhereInput
  data: Prisma.XOR<Prisma.GroupUpdateWithoutMembersInput, Prisma.GroupUncheckedUpdateWithoutMembersInput>
}

export type GroupUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  user?: Prisma.UserUpdateOneRequiredWithoutGroupsNestedInput
}

export type GroupUncheckedUpdateWithoutMembersInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  userId?: Prisma.StringFieldUpdateOperationsInput | string
}

export type GroupCreateManyUserInput = {
  id?: string
  name: string
  description?: string | null
  emoji?: string | null
  color?: string | null
  createdAt?: Date | string
  updatedAt?: Date | string
}

export type GroupUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.GroupMemberUpdateManyWithoutGroupNestedInput
}

export type GroupUncheckedUpdateWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  members?: Prisma.GroupMemberUncheckedUpdateManyWithoutGroupNestedInput
}

export type GroupUncheckedUpdateManyWithoutUserInput = {
  id?: Prisma.StringFieldUpdateOperationsInput | string
  name?: Prisma.StringFieldUpdateOperationsInput | string
  description?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  emoji?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  color?: Prisma.NullableStringFieldUpdateOperationsInput | string | null
  createdAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
  updatedAt?: Prisma.DateTimeFieldUpdateOperationsInput | Date | string
}


/**
 * Count Type GroupCountOutputType
 */

export type GroupCountOutputType = {
  members: number
}

export type GroupCountOutputTypeSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  members?: boolean | GroupCountOutputTypeCountMembersArgs
}

/**
 * GroupCountOutputType without action
 */
export type GroupCountOutputTypeDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupCountOutputType
   */
  select?: Prisma.GroupCountOutputTypeSelect<ExtArgs> | null
}

/**
 * GroupCountOutputType without action
 */
export type GroupCountOutputTypeCountMembersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  where?: Prisma.GroupMemberWhereInput
}


export type GroupSelect<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  emoji?: boolean
  color?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  members?: boolean | Prisma.Group$membersArgs<ExtArgs>
  _count?: boolean | Prisma.GroupCountOutputTypeDefaultArgs<ExtArgs>
}, ExtArgs["result"]["group"]>

export type GroupSelectCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  emoji?: boolean
  color?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["group"]>

export type GroupSelectUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetSelect<{
  id?: boolean
  name?: boolean
  description?: boolean
  emoji?: boolean
  color?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}, ExtArgs["result"]["group"]>

export type GroupSelectScalar = {
  id?: boolean
  name?: boolean
  description?: boolean
  emoji?: boolean
  color?: boolean
  createdAt?: boolean
  updatedAt?: boolean
  userId?: boolean
}

export type GroupOmit<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = runtime.Types.Extensions.GetOmit<"id" | "name" | "description" | "emoji" | "color" | "createdAt" | "updatedAt" | "userId", ExtArgs["result"]["group"]>
export type GroupInclude<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
  members?: boolean | Prisma.Group$membersArgs<ExtArgs>
  _count?: boolean | Prisma.GroupCountOutputTypeDefaultArgs<ExtArgs>
}
export type GroupIncludeCreateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}
export type GroupIncludeUpdateManyAndReturn<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  user?: boolean | Prisma.UserDefaultArgs<ExtArgs>
}

export type $GroupPayload<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  name: "Group"
  objects: {
    user: Prisma.$UserPayload<ExtArgs>
    members: Prisma.$GroupMemberPayload<ExtArgs>[]
  }
  scalars: runtime.Types.Extensions.GetPayloadResult<{
    id: string
    name: string
    description: string | null
    emoji: string | null
    color: string | null
    createdAt: Date
    updatedAt: Date
    userId: string
  }, ExtArgs["result"]["group"]>
  composites: {}
}

export type GroupGetPayload<S extends boolean | null | undefined | GroupDefaultArgs> = runtime.Types.Result.GetResult<Prisma.$GroupPayload, S>

export type GroupCountArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> =
  Omit<GroupFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
    select?: GroupCountAggregateInputType | true
  }

export interface GroupDelegate<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Group'], meta: { name: 'Group' } }
  /**
   * Find zero or one Group that matches the filter.
   * @param {GroupFindUniqueArgs} args - Arguments to find a Group
   * @example
   * // Get one Group
   * const group = await prisma.group.findUnique({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUnique<T extends GroupFindUniqueArgs>(args: Prisma.SelectSubset<T, GroupFindUniqueArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find one Group that matches the filter or throw an error with `error.code='P2025'`
   * if no matches were found.
   * @param {GroupFindUniqueOrThrowArgs} args - Arguments to find a Group
   * @example
   * // Get one Group
   * const group = await prisma.group.findUniqueOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findUniqueOrThrow<T extends GroupFindUniqueOrThrowArgs>(args: Prisma.SelectSubset<T, GroupFindUniqueOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Group that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupFindFirstArgs} args - Arguments to find a Group
   * @example
   * // Get one Group
   * const group = await prisma.group.findFirst({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirst<T extends GroupFindFirstArgs>(args?: Prisma.SelectSubset<T, GroupFindFirstArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

  /**
   * Find the first Group that matches the filter or
   * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupFindFirstOrThrowArgs} args - Arguments to find a Group
   * @example
   * // Get one Group
   * const group = await prisma.group.findFirstOrThrow({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   */
  findFirstOrThrow<T extends GroupFindFirstOrThrowArgs>(args?: Prisma.SelectSubset<T, GroupFindFirstOrThrowArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Find zero or more Groups that matches the filter.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupFindManyArgs} args - Arguments to filter and select certain fields only.
   * @example
   * // Get all Groups
   * const groups = await prisma.group.findMany()
   * 
   * // Get first 10 Groups
   * const groups = await prisma.group.findMany({ take: 10 })
   * 
   * // Only select the `id`
   * const groupWithIdOnly = await prisma.group.findMany({ select: { id: true } })
   * 
   */
  findMany<T extends GroupFindManyArgs>(args?: Prisma.SelectSubset<T, GroupFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

  /**
   * Create a Group.
   * @param {GroupCreateArgs} args - Arguments to create a Group.
   * @example
   * // Create one Group
   * const Group = await prisma.group.create({
   *   data: {
   *     // ... data to create a Group
   *   }
   * })
   * 
   */
  create<T extends GroupCreateArgs>(args: Prisma.SelectSubset<T, GroupCreateArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Create many Groups.
   * @param {GroupCreateManyArgs} args - Arguments to create many Groups.
   * @example
   * // Create many Groups
   * const group = await prisma.group.createMany({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   *     
   */
  createMany<T extends GroupCreateManyArgs>(args?: Prisma.SelectSubset<T, GroupCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Create many Groups and returns the data saved in the database.
   * @param {GroupCreateManyAndReturnArgs} args - Arguments to create many Groups.
   * @example
   * // Create many Groups
   * const group = await prisma.group.createManyAndReturn({
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Create many Groups and only return the `id`
   * const groupWithIdOnly = await prisma.group.createManyAndReturn({
   *   select: { id: true },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  createManyAndReturn<T extends GroupCreateManyAndReturnArgs>(args?: Prisma.SelectSubset<T, GroupCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

  /**
   * Delete a Group.
   * @param {GroupDeleteArgs} args - Arguments to delete one Group.
   * @example
   * // Delete one Group
   * const Group = await prisma.group.delete({
   *   where: {
   *     // ... filter to delete one Group
   *   }
   * })
   * 
   */
  delete<T extends GroupDeleteArgs>(args: Prisma.SelectSubset<T, GroupDeleteArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Update one Group.
   * @param {GroupUpdateArgs} args - Arguments to update one Group.
   * @example
   * // Update one Group
   * const group = await prisma.group.update({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  update<T extends GroupUpdateArgs>(args: Prisma.SelectSubset<T, GroupUpdateArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

  /**
   * Delete zero or more Groups.
   * @param {GroupDeleteManyArgs} args - Arguments to filter Groups to delete.
   * @example
   * // Delete a few Groups
   * const { count } = await prisma.group.deleteMany({
   *   where: {
   *     // ... provide filter here
   *   }
   * })
   * 
   */
  deleteMany<T extends GroupDeleteManyArgs>(args?: Prisma.SelectSubset<T, GroupDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Groups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupUpdateManyArgs} args - Arguments to update one or more rows.
   * @example
   * // Update many Groups
   * const group = await prisma.group.updateMany({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: {
   *     // ... provide data here
   *   }
   * })
   * 
   */
  updateMany<T extends GroupUpdateManyArgs>(args: Prisma.SelectSubset<T, GroupUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<Prisma.BatchPayload>

  /**
   * Update zero or more Groups and returns the data updated in the database.
   * @param {GroupUpdateManyAndReturnArgs} args - Arguments to update many Groups.
   * @example
   * // Update many Groups
   * const group = await prisma.group.updateManyAndReturn({
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * 
   * // Update zero or more Groups and only return the `id`
   * const groupWithIdOnly = await prisma.group.updateManyAndReturn({
   *   select: { id: true },
   *   where: {
   *     // ... provide filter here
   *   },
   *   data: [
   *     // ... provide data here
   *   ]
   * })
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * 
   */
  updateManyAndReturn<T extends GroupUpdateManyAndReturnArgs>(args: Prisma.SelectSubset<T, GroupUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

  /**
   * Create or update one Group.
   * @param {GroupUpsertArgs} args - Arguments to update or create a Group.
   * @example
   * // Update or create a Group
   * const group = await prisma.group.upsert({
   *   create: {
   *     // ... data to create a Group
   *   },
   *   update: {
   *     // ... in case it already exists, update
   *   },
   *   where: {
   *     // ... the filter for the Group we want to update
   *   }
   * })
   */
  upsert<T extends GroupUpsertArgs>(args: Prisma.SelectSubset<T, GroupUpsertArgs<ExtArgs>>): Prisma.Prisma__GroupClient<runtime.Types.Result.GetResult<Prisma.$GroupPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


  /**
   * Count the number of Groups.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupCountArgs} args - Arguments to filter Groups to count.
   * @example
   * // Count the number of Groups
   * const count = await prisma.group.count({
   *   where: {
   *     // ... the filter for the Groups we want to count
   *   }
   * })
  **/
  count<T extends GroupCountArgs>(
    args?: Prisma.Subset<T, GroupCountArgs>,
  ): Prisma.PrismaPromise<
    T extends runtime.Types.Utils.Record<'select', any>
      ? T['select'] extends true
        ? number
        : Prisma.GetScalarType<T['select'], GroupCountAggregateOutputType>
      : number
  >

  /**
   * Allows you to perform aggregations operations on a Group.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
   * @example
   * // Ordered by age ascending
   * // Where email contains prisma.io
   * // Limited to the 10 users
   * const aggregations = await prisma.user.aggregate({
   *   _avg: {
   *     age: true,
   *   },
   *   where: {
   *     email: {
   *       contains: "prisma.io",
   *     },
   *   },
   *   orderBy: {
   *     age: "asc",
   *   },
   *   take: 10,
   * })
  **/
  aggregate<T extends GroupAggregateArgs>(args: Prisma.Subset<T, GroupAggregateArgs>): Prisma.PrismaPromise<GetGroupAggregateType<T>>

  /**
   * Group by Group.
   * Note, that providing `undefined` is treated as the value not being there.
   * Read more here: https://pris.ly/d/null-undefined
   * @param {GroupGroupByArgs} args - Group by arguments.
   * @example
   * // Group by city, order by createdAt, get count
   * const result = await prisma.user.groupBy({
   *   by: ['city', 'createdAt'],
   *   orderBy: {
   *     createdAt: true
   *   },
   *   _count: {
   *     _all: true
   *   },
   * })
   * 
  **/
  groupBy<
    T extends GroupGroupByArgs,
    HasSelectOrTake extends Prisma.Or<
      Prisma.Extends<'skip', Prisma.Keys<T>>,
      Prisma.Extends<'take', Prisma.Keys<T>>
    >,
    OrderByArg extends Prisma.True extends HasSelectOrTake
      ? { orderBy: GroupGroupByArgs['orderBy'] }
      : { orderBy?: GroupGroupByArgs['orderBy'] },
    OrderFields extends Prisma.ExcludeUnderscoreKeys<Prisma.Keys<Prisma.MaybeTupleToUnion<T['orderBy']>>>,
    ByFields extends Prisma.MaybeTupleToUnion<T['by']>,
    ByValid extends Prisma.Has<ByFields, OrderFields>,
    HavingFields extends Prisma.GetHavingFields<T['having']>,
    HavingValid extends Prisma.Has<ByFields, HavingFields>,
    ByEmpty extends T['by'] extends never[] ? Prisma.True : Prisma.False,
    InputErrors extends ByEmpty extends Prisma.True
    ? `Error: "by" must not be empty.`
    : HavingValid extends Prisma.False
    ? {
        [P in HavingFields]: P extends ByFields
          ? never
          : P extends string
          ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
          : [
              Error,
              'Field ',
              P,
              ` in "having" needs to be provided in "by"`,
            ]
      }[HavingFields]
    : 'take' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "take", you also need to provide "orderBy"'
    : 'skip' extends Prisma.Keys<T>
    ? 'orderBy' extends Prisma.Keys<T>
      ? ByValid extends Prisma.True
        ? {}
        : {
            [P in OrderFields]: P extends ByFields
              ? never
              : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
          }[OrderFields]
      : 'Error: If you provide "skip", you also need to provide "orderBy"'
    : ByValid extends Prisma.True
    ? {}
    : {
        [P in OrderFields]: P extends ByFields
          ? never
          : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
      }[OrderFields]
  >(args: Prisma.SubsetIntersection<T, GroupGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetGroupGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
/**
 * Fields of the Group model
 */
readonly fields: GroupFieldRefs;
}

/**
 * The delegate class that acts as a "Promise-like" for Group.
 * Why is this prefixed with `Prisma__`?
 * Because we want to prevent naming conflicts as mentioned in
 * https://github.com/prisma/prisma-client-js/issues/707
 */
export interface Prisma__GroupClient<T, Null = never, ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
  readonly [Symbol.toStringTag]: "PrismaPromise"
  user<T extends Prisma.UserDefaultArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.UserDefaultArgs<ExtArgs>>): Prisma.Prisma__UserClient<runtime.Types.Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
  members<T extends Prisma.Group$membersArgs<ExtArgs> = {}>(args?: Prisma.Subset<T, Prisma.Group$membersArgs<ExtArgs>>): Prisma.PrismaPromise<runtime.Types.Result.GetResult<Prisma.$GroupMemberPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
  /**
   * Attaches callbacks for the resolution and/or rejection of the Promise.
   * @param onfulfilled The callback to execute when the Promise is resolved.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of which ever callback is executed.
   */
  then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): runtime.Types.Utils.JsPromise<TResult1 | TResult2>
  /**
   * Attaches a callback for only the rejection of the Promise.
   * @param onrejected The callback to execute when the Promise is rejected.
   * @returns A Promise for the completion of the callback.
   */
  catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): runtime.Types.Utils.JsPromise<T | TResult>
  /**
   * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
   * resolved value cannot be modified from the callback.
   * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
   * @returns A Promise for the completion of the callback.
   */
  finally(onfinally?: (() => void) | undefined | null): runtime.Types.Utils.JsPromise<T>
}




/**
 * Fields of the Group model
 */
export interface GroupFieldRefs {
  readonly id: Prisma.FieldRef<"Group", 'String'>
  readonly name: Prisma.FieldRef<"Group", 'String'>
  readonly description: Prisma.FieldRef<"Group", 'String'>
  readonly emoji: Prisma.FieldRef<"Group", 'String'>
  readonly color: Prisma.FieldRef<"Group", 'String'>
  readonly createdAt: Prisma.FieldRef<"Group", 'DateTime'>
  readonly updatedAt: Prisma.FieldRef<"Group", 'DateTime'>
  readonly userId: Prisma.FieldRef<"Group", 'String'>
}
    

// Custom InputTypes
/**
 * Group findUnique
 */
export type GroupFindUniqueArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * Filter, which Group to fetch.
   */
  where: Prisma.GroupWhereUniqueInput
}

/**
 * Group findUniqueOrThrow
 */
export type GroupFindUniqueOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * Filter, which Group to fetch.
   */
  where: Prisma.GroupWhereUniqueInput
}

/**
 * Group findFirst
 */
export type GroupFindFirstArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * Filter, which Group to fetch.
   */
  where?: Prisma.GroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Groups to fetch.
   */
  orderBy?: Prisma.GroupOrderByWithRelationInput | Prisma.GroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Groups.
   */
  cursor?: Prisma.GroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Groups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Groups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Groups.
   */
  distinct?: Prisma.GroupScalarFieldEnum | Prisma.GroupScalarFieldEnum[]
}

/**
 * Group findFirstOrThrow
 */
export type GroupFindFirstOrThrowArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * Filter, which Group to fetch.
   */
  where?: Prisma.GroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Groups to fetch.
   */
  orderBy?: Prisma.GroupOrderByWithRelationInput | Prisma.GroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for searching for Groups.
   */
  cursor?: Prisma.GroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Groups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Groups.
   */
  skip?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
   * 
   * Filter by unique combinations of Groups.
   */
  distinct?: Prisma.GroupScalarFieldEnum | Prisma.GroupScalarFieldEnum[]
}

/**
 * Group findMany
 */
export type GroupFindManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * Filter, which Groups to fetch.
   */
  where?: Prisma.GroupWhereInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
   * 
   * Determine the order of Groups to fetch.
   */
  orderBy?: Prisma.GroupOrderByWithRelationInput | Prisma.GroupOrderByWithRelationInput[]
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
   * 
   * Sets the position for listing Groups.
   */
  cursor?: Prisma.GroupWhereUniqueInput
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Take `Â±n` Groups from the position of the cursor.
   */
  take?: number
  /**
   * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
   * 
   * Skip the first `n` Groups.
   */
  skip?: number
  distinct?: Prisma.GroupScalarFieldEnum | Prisma.GroupScalarFieldEnum[]
}

/**
 * Group create
 */
export type GroupCreateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * The data needed to create a Group.
   */
  data: Prisma.XOR<Prisma.GroupCreateInput, Prisma.GroupUncheckedCreateInput>
}

/**
 * Group createMany
 */
export type GroupCreateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to create many Groups.
   */
  data: Prisma.GroupCreateManyInput | Prisma.GroupCreateManyInput[]
  skipDuplicates?: boolean
}

/**
 * Group createManyAndReturn
 */
export type GroupCreateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelectCreateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * The data used to create many Groups.
   */
  data: Prisma.GroupCreateManyInput | Prisma.GroupCreateManyInput[]
  skipDuplicates?: boolean
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupIncludeCreateManyAndReturn<ExtArgs> | null
}

/**
 * Group update
 */
export type GroupUpdateArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * The data needed to update a Group.
   */
  data: Prisma.XOR<Prisma.GroupUpdateInput, Prisma.GroupUncheckedUpdateInput>
  /**
   * Choose, which Group to update.
   */
  where: Prisma.GroupWhereUniqueInput
}

/**
 * Group updateMany
 */
export type GroupUpdateManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * The data used to update Groups.
   */
  data: Prisma.XOR<Prisma.GroupUpdateManyMutationInput, Prisma.GroupUncheckedUpdateManyInput>
  /**
   * Filter which Groups to update
   */
  where?: Prisma.GroupWhereInput
  /**
   * Limit how many Groups to update.
   */
  limit?: number
}

/**
 * Group updateManyAndReturn
 */
export type GroupUpdateManyAndReturnArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelectUpdateManyAndReturn<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * The data used to update Groups.
   */
  data: Prisma.XOR<Prisma.GroupUpdateManyMutationInput, Prisma.GroupUncheckedUpdateManyInput>
  /**
   * Filter which Groups to update
   */
  where?: Prisma.GroupWhereInput
  /**
   * Limit how many Groups to update.
   */
  limit?: number
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupIncludeUpdateManyAndReturn<ExtArgs> | null
}

/**
 * Group upsert
 */
export type GroupUpsertArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * The filter to search for the Group to update in case it exists.
   */
  where: Prisma.GroupWhereUniqueInput
  /**
   * In case the Group found by the `where` argument doesn't exist, create a new Group with this data.
   */
  create: Prisma.XOR<Prisma.GroupCreateInput, Prisma.GroupUncheckedCreateInput>
  /**
   * In case the Group was found with the provided `where` argument, update it with this data.
   */
  update: Prisma.XOR<Prisma.GroupUpdateInput, Prisma.GroupUncheckedUpdateInput>
}

/**
 * Group delete
 */
export type GroupDeleteArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
  /**
   * Filter which Group to delete.
   */
  where: Prisma.GroupWhereUniqueInput
}

/**
 * Group deleteMany
 */
export type GroupDeleteManyArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Filter which Groups to delete
   */
  where?: Prisma.GroupWhereInput
  /**
   * Limit how many Groups to delete.
   */
  limit?: number
}

/**
 * Group.members
 */
export type Group$membersArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the GroupMember
   */
  select?: Prisma.GroupMemberSelect<ExtArgs> | null
  /**
   * Omit specific fields from the GroupMember
   */
  omit?: Prisma.GroupMemberOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupMemberInclude<ExtArgs> | null
  where?: Prisma.GroupMemberWhereInput
  orderBy?: Prisma.GroupMemberOrderByWithRelationInput | Prisma.GroupMemberOrderByWithRelationInput[]
  cursor?: Prisma.GroupMemberWhereUniqueInput
  take?: number
  skip?: number
  distinct?: Prisma.GroupMemberScalarFieldEnum | Prisma.GroupMemberScalarFieldEnum[]
}

/**
 * Group without action
 */
export type GroupDefaultArgs<ExtArgs extends runtime.Types.Extensions.InternalArgs = runtime.Types.Extensions.DefaultArgs> = {
  /**
   * Select specific fields to fetch from the Group
   */
  select?: Prisma.GroupSelect<ExtArgs> | null
  /**
   * Omit specific fields from the Group
   */
  omit?: Prisma.GroupOmit<ExtArgs> | null
  /**
   * Choose, which related nodes to fetch as well
   */
  include?: Prisma.GroupInclude<ExtArgs> | null
}
