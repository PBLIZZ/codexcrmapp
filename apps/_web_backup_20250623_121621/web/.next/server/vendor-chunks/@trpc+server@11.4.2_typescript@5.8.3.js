"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+server@11.4.2_typescript@5.8.3";
exports.ids = ["vendor-chunks/@trpc+server@11.4.2_typescript@5.8.3"];
exports.modules = {

/***/ "(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/adapters/fetch/index.mjs":
/*!*****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/adapters/fetch/index.mjs ***!
  \*****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchRequestHandler: () => (/* binding */ fetchRequestHandler)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../../getErrorShape-Uhlrl4Bk.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _resolveResponse_CzlbRpCI_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../resolveResponse-CzlbRpCI.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs\");\n\n\n\n\n\n//#region src/adapters/fetch/fetchRequestHandler.ts\nvar import_objectSpread2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nconst trimSlashes = (path)=>{\n    path = path.startsWith(\"/\") ? path.slice(1) : path;\n    path = path.endsWith(\"/\") ? path.slice(0, -1) : path;\n    return path;\n};\nasync function fetchRequestHandler(opts) {\n    const resHeaders = new Headers();\n    const createContext = async (innerOpts)=>{\n        var _opts$createContext;\n        return (_opts$createContext = opts.createContext) === null || _opts$createContext === void 0 ? void 0 : _opts$createContext.call(opts, (0, import_objectSpread2.default)({\n            req: opts.req,\n            resHeaders\n        }, innerOpts));\n    };\n    const url = new URL(opts.req.url);\n    const pathname = trimSlashes(url.pathname);\n    const endpoint = trimSlashes(opts.endpoint);\n    const path = trimSlashes(pathname.slice(endpoint.length));\n    return await (0,_resolveResponse_CzlbRpCI_mjs__WEBPACK_IMPORTED_MODULE_1__.resolveResponse)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n        req: opts.req,\n        createContext,\n        path,\n        error: null,\n        onError (o) {\n            var _opts$onError;\n            opts === null || opts === void 0 || (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, o), {}, {\n                req: opts.req\n            }));\n        },\n        responseMeta (data) {\n            var _opts$responseMeta;\n            const meta = (_opts$responseMeta = opts.responseMeta) === null || _opts$responseMeta === void 0 ? void 0 : _opts$responseMeta.call(opts, data);\n            if (meta === null || meta === void 0 ? void 0 : meta.headers) {\n                if (meta.headers instanceof Headers) for (const [key, value] of meta.headers.entries())resHeaders.append(key, value);\n                else /**\n\t\t\t\t* @deprecated, delete in v12\n\t\t\t\t*/ for (const [key, value] of Object.entries(meta.headers))if (Array.isArray(value)) for (const v of value)resHeaders.append(key, v);\n                else if (typeof value === \"string\") resHeaders.set(key, value);\n            }\n            return {\n                headers: resHeaders,\n                status: meta === null || meta === void 0 ? void 0 : meta.status\n            };\n        }\n    }));\n}\n//#endregion\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHJzYykvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK3NlcnZlckAxMS40LjJfdHlwZXNjcmlwdEA1LjguMy9ub2RlX21vZHVsZXMvQHRycGMvc2VydmVyL2Rpc3QvYWRhcHRlcnMvZmV0Y2gvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7QUFnQkEsTUFBTSxjQUFjLENBQUNBO0lBQ25CLE9BQU8sS0FBSyxXQUFXLElBQUksR0FBRyxLQUFLLE1BQU0sRUFBRSxHQUFHO0lBQzlDLE9BQU8sS0FBSyxTQUFTLElBQUksR0FBRyxLQUFLLE1BQU0sR0FBRyxHQUFHLEdBQUc7SUFFaEQsT0FBTztBQUNSO0FBRUQsZUFBc0Isb0JBQ3BCQyxJQUFBQSxFQUNtQjtJQUNuQixNQUFNLGFBQWEsSUFBSTtJQUV2QixNQUFNQyxnQkFBNkQsT0FDakU7O1FBRUEsOEJBQU8sS0FBSyxxRUFBTDtZQUF1QixLQUFLLEtBQUs7WUFBSztXQUFlLFdBQVk7SUFDekU7SUFFRCxNQUFNLE1BQU0sSUFBSSxJQUFJLEtBQUssSUFBSTtJQUU3QixNQUFNLFdBQVcsWUFBWSxJQUFJLFNBQVM7SUFDMUMsTUFBTSxXQUFXLFlBQVksS0FBSyxTQUFTO0lBQzNDLE1BQU0sT0FBTyxZQUFZLFNBQVMsTUFBTSxTQUFTLE9BQU8sQ0FBQztJQUV6RCxPQUFPLE1BQU0sOEVBQWUsQ0FBZix3RUFDUjtRQUNILEtBQUssS0FBSztRQUNWO1FBQ0E7UUFDQSxPQUFPO1FBQ1AsU0FBUSxHQUFHOztZQUNULDBEQUFNLGlEQUFOLGlHQUFxQjtnQkFBRyxLQUFLLEtBQUs7WUFBQSxHQUFNO1FBQ3pDO1FBQ0QsY0FBYSxNQUFNOztZQUNqQixNQUFNLDZCQUFPLEtBQUssbUVBQUwsOEJBQW9CLEtBQUs7WUFFdEMsZ0RBQUksS0FBTSxTQUNSO29CQUFJLEtBQUssbUJBQW1CLFFBQzFCLE1BQUssTUFBTSxDQUFDLEtBQUssTUFBTSxJQUFJLEtBQUssUUFBUSxTQUFTLENBQy9DLFdBQVcsT0FBTyxLQUFLLE1BQU07OztPQU0vQixLQUFLLE1BQU0sQ0FBQyxLQUFLLE1BQU0sSUFBSSxPQUFPLFFBQVEsS0FBSyxRQUFRLENBQ3JELElBQUksTUFBTSxRQUFRLE1BQU0sQ0FDdEIsTUFBSyxNQUFNLEtBQUssTUFDZCxXQUFXLE9BQU8sS0FBSyxFQUFFO2dDQUVYLFVBQVUsU0FDMUIsWUFBVyxJQUFJLEtBQUssTUFBTTtZQUcvQjtZQUdILE9BQU87Z0JBQ0wsU0FBUztnQkFDVCxvREFBUSxLQUFNO1lBQ2Y7UUFDRjtPQUNEO0FBQ0giLCJzb3VyY2VzIjpbIi9Vc2Vycy9wZXRlcmphbWVzYmxpenphcmQvcHJvamVjdHMvc3JjL2FkYXB0ZXJzL2ZldGNoL2ZldGNoUmVxdWVzdEhhbmRsZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBJZiB5b3UncmUgbWFraW5nIGFuIGFkYXB0ZXIgZm9yIHRSUEMgYW5kIGxvb2tpbmcgYXQgdGhpcyBmaWxlIGZvciByZWZlcmVuY2UsIHlvdSBzaG91bGQgaW1wb3J0IHR5cGVzIGFuZCBmdW5jdGlvbnMgZnJvbSBgQHRycGMvc2VydmVyYCBhbmQgYEB0cnBjL3NlcnZlci9odHRwYFxuICpcbiAqIEBleGFtcGxlXG4gKiBgYGB0c1xuICogaW1wb3J0IHR5cGUgeyBBbnlUUlBDUm91dGVyIH0gZnJvbSAnQHRycGMvc2VydmVyJ1xuICogaW1wb3J0IHR5cGUgeyBIVFRQQmFzZUhhbmRsZXJPcHRpb25zIH0gZnJvbSAnQHRycGMvc2VydmVyL2h0dHAnXG4gKiBgYGBcbiAqL1xuLy8gQHRycGMvc2VydmVyXG5cbmltcG9ydCB0eXBlIHsgQW55Um91dGVyIH0gZnJvbSAnLi4vLi4vQHRycGMvc2VydmVyJztcbmltcG9ydCB0eXBlIHsgUmVzb2x2ZUhUVFBSZXF1ZXN0T3B0aW9uc0NvbnRleHRGbiB9IGZyb20gJy4uLy4uL0B0cnBjL3NlcnZlci9odHRwJztcbmltcG9ydCB7IHJlc29sdmVSZXNwb25zZSB9IGZyb20gJy4uLy4uL0B0cnBjL3NlcnZlci9odHRwJztcbmltcG9ydCB0eXBlIHsgRmV0Y2hIYW5kbGVyUmVxdWVzdE9wdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuY29uc3QgdHJpbVNsYXNoZXMgPSAocGF0aDogc3RyaW5nKTogc3RyaW5nID0+IHtcbiAgcGF0aCA9IHBhdGguc3RhcnRzV2l0aCgnLycpID8gcGF0aC5zbGljZSgxKSA6IHBhdGg7XG4gIHBhdGggPSBwYXRoLmVuZHNXaXRoKCcvJykgPyBwYXRoLnNsaWNlKDAsIC0xKSA6IHBhdGg7XG5cbiAgcmV0dXJuIHBhdGg7XG59O1xuXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gZmV0Y2hSZXF1ZXN0SGFuZGxlcjxUUm91dGVyIGV4dGVuZHMgQW55Um91dGVyPihcbiAgb3B0czogRmV0Y2hIYW5kbGVyUmVxdWVzdE9wdGlvbnM8VFJvdXRlcj4sXG4pOiBQcm9taXNlPFJlc3BvbnNlPiB7XG4gIGNvbnN0IHJlc0hlYWRlcnMgPSBuZXcgSGVhZGVycygpO1xuXG4gIGNvbnN0IGNyZWF0ZUNvbnRleHQ6IFJlc29sdmVIVFRQUmVxdWVzdE9wdGlvbnNDb250ZXh0Rm48VFJvdXRlcj4gPSBhc3luYyAoXG4gICAgaW5uZXJPcHRzLFxuICApID0+IHtcbiAgICByZXR1cm4gb3B0cy5jcmVhdGVDb250ZXh0Py4oeyByZXE6IG9wdHMucmVxLCByZXNIZWFkZXJzLCAuLi5pbm5lck9wdHMgfSk7XG4gIH07XG5cbiAgY29uc3QgdXJsID0gbmV3IFVSTChvcHRzLnJlcS51cmwpO1xuXG4gIGNvbnN0IHBhdGhuYW1lID0gdHJpbVNsYXNoZXModXJsLnBhdGhuYW1lKTtcbiAgY29uc3QgZW5kcG9pbnQgPSB0cmltU2xhc2hlcyhvcHRzLmVuZHBvaW50KTtcbiAgY29uc3QgcGF0aCA9IHRyaW1TbGFzaGVzKHBhdGhuYW1lLnNsaWNlKGVuZHBvaW50Lmxlbmd0aCkpO1xuXG4gIHJldHVybiBhd2FpdCByZXNvbHZlUmVzcG9uc2Uoe1xuICAgIC4uLm9wdHMsXG4gICAgcmVxOiBvcHRzLnJlcSxcbiAgICBjcmVhdGVDb250ZXh0LFxuICAgIHBhdGgsXG4gICAgZXJyb3I6IG51bGwsXG4gICAgb25FcnJvcihvKSB7XG4gICAgICBvcHRzPy5vbkVycm9yPy4oeyAuLi5vLCByZXE6IG9wdHMucmVxIH0pO1xuICAgIH0sXG4gICAgcmVzcG9uc2VNZXRhKGRhdGEpIHtcbiAgICAgIGNvbnN0IG1ldGEgPSBvcHRzLnJlc3BvbnNlTWV0YT8uKGRhdGEpO1xuXG4gICAgICBpZiAobWV0YT8uaGVhZGVycykge1xuICAgICAgICBpZiAobWV0YS5oZWFkZXJzIGluc3RhbmNlb2YgSGVhZGVycykge1xuICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIG1ldGEuaGVhZGVycy5lbnRyaWVzKCkpIHtcbiAgICAgICAgICAgIHJlc0hlYWRlcnMuYXBwZW5kKGtleSwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKipcbiAgICAgICAgICAgKiBAZGVwcmVjYXRlZCwgZGVsZXRlIGluIHYxMlxuICAgICAgICAgICAqL1xuICAgICAgICAgIGZvciAoY29uc3QgW2tleSwgdmFsdWVdIG9mIE9iamVjdC5lbnRyaWVzKG1ldGEuaGVhZGVycykpIHtcbiAgICAgICAgICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHYgb2YgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXNIZWFkZXJzLmFwcGVuZChrZXksIHYpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICAgICAgcmVzSGVhZGVycy5zZXQoa2V5LCB2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiB7XG4gICAgICAgIGhlYWRlcnM6IHJlc0hlYWRlcnMsXG4gICAgICAgIHN0YXR1czogbWV0YT8uc3RhdHVzLFxuICAgICAgfTtcbiAgICB9LFxuICB9KTtcbn1cbiJdLCJuYW1lcyI6WyJwYXRoOiBzdHJpbmciLCJvcHRzOiBGZXRjaEhhbmRsZXJSZXF1ZXN0T3B0aW9uczxUUm91dGVyPiIsImNyZWF0ZUNvbnRleHQ6IFJlc29sdmVIVFRQUmVxdWVzdE9wdGlvbnNDb250ZXh0Rm48VFJvdXRlcj4iXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/adapters/fetch/index.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs":
/*!*******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTP_CODE_TO_JSONRPC2: () => (/* binding */ HTTP_CODE_TO_JSONRPC2),\n/* harmony export */   JSONRPC2_TO_HTTP_CODE: () => (/* binding */ JSONRPC2_TO_HTTP_CODE),\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __toESM: () => (/* binding */ __toESM),\n/* harmony export */   createFlatProxy: () => (/* binding */ createFlatProxy),\n/* harmony export */   createRecursiveProxy: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   getErrorShape: () => (/* binding */ getErrorShape),\n/* harmony export */   getHTTPStatusCode: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   getHTTPStatusCodeFromError: () => (/* binding */ getHTTPStatusCodeFromError),\n/* harmony export */   getStatusCodeFromKey: () => (/* binding */ getStatusCodeFromKey),\n/* harmony export */   getStatusKeyFromCode: () => (/* binding */ getStatusKeyFromCode),\n/* harmony export */   require_defineProperty: () => (/* binding */ require_defineProperty),\n/* harmony export */   require_objectSpread2: () => (/* binding */ require_objectSpread2)\n/* harmony export */ });\n/* harmony import */ var _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-DdbbrDku.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n//#region rolldown:runtime\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") for(var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++){\n        key = keys[i];\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ((k)=>from[k]).bind(null, key),\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n//#endregion\n//#region src/unstable-core-do-not-import/createProxy.ts\nconst noop = ()=>{};\nconst freezeIfAvailable = (obj)=>{\n    if (Object.freeze) Object.freeze(obj);\n};\nfunction createInnerProxy(callback, path, memo) {\n    var _memo$cacheKey;\n    const cacheKey = path.join(\".\");\n    (_memo$cacheKey = memo[cacheKey]) !== null && _memo$cacheKey !== void 0 || (memo[cacheKey] = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") return void 0;\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ], memo);\n        },\n        apply (_1, _2, args) {\n            const lastOfPath = path[path.length - 1];\n            let opts = {\n                args,\n                path\n            };\n            if (lastOfPath === \"call\") opts = {\n                args: args.length >= 2 ? [\n                    args[1]\n                ] : [],\n                path: path.slice(0, -1)\n            };\n            else if (lastOfPath === \"apply\") opts = {\n                args: args.length >= 2 ? args[1] : [],\n                path: path.slice(0, -1)\n            };\n            freezeIfAvailable(opts.args);\n            freezeIfAvailable(opts.path);\n            return callback(opts);\n        }\n    }));\n    return memo[cacheKey];\n}\n/**\n* Creates a proxy that calls the callback with the path and arguments\n*\n* @internal\n*/ const createRecursiveProxy = (callback)=>createInnerProxy(callback, [], Object.create(null));\n/**\n* Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n*\n* @internal\n*/ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (name === \"then\") return void 0;\n            return callback(name);\n        }\n    });\n};\n//#endregion\n//#region src/unstable-core-do-not-import/http/getHTTPStatusCode.ts\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    PAYMENT_REQUIRED: 402,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNSUPPORTED_MEDIA_TYPE: 415,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501,\n    BAD_GATEWAY: 502,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504\n};\nconst HTTP_CODE_TO_JSONRPC2 = {\n    400: \"BAD_REQUEST\",\n    401: \"UNAUTHORIZED\",\n    402: \"PAYMENT_REQUIRED\",\n    403: \"FORBIDDEN\",\n    404: \"NOT_FOUND\",\n    405: \"METHOD_NOT_SUPPORTED\",\n    408: \"TIMEOUT\",\n    409: \"CONFLICT\",\n    412: \"PRECONDITION_FAILED\",\n    413: \"PAYLOAD_TOO_LARGE\",\n    415: \"UNSUPPORTED_MEDIA_TYPE\",\n    422: \"UNPROCESSABLE_CONTENT\",\n    429: \"TOO_MANY_REQUESTS\",\n    499: \"CLIENT_CLOSED_REQUEST\",\n    500: \"INTERNAL_SERVER_ERROR\",\n    501: \"NOT_IMPLEMENTED\",\n    502: \"BAD_GATEWAY\",\n    503: \"SERVICE_UNAVAILABLE\",\n    504: \"GATEWAY_TIMEOUT\"\n};\nfunction getStatusCodeFromKey(code) {\n    var _JSONRPC2_TO_HTTP_COD;\n    return (_JSONRPC2_TO_HTTP_COD = JSONRPC2_TO_HTTP_CODE[code]) !== null && _JSONRPC2_TO_HTTP_COD !== void 0 ? _JSONRPC2_TO_HTTP_COD : 500;\n}\nfunction getStatusKeyFromCode(code) {\n    var _HTTP_CODE_TO_JSONRPC;\n    return (_HTTP_CODE_TO_JSONRPC = HTTP_CODE_TO_JSONRPC2[code]) !== null && _HTTP_CODE_TO_JSONRPC !== void 0 ? _HTTP_CODE_TO_JSONRPC : \"INTERNAL_SERVER_ERROR\";\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res && (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(res.error.data)) {\n            var _res$error$data;\n            if (typeof ((_res$error$data = res.error.data) === null || _res$error$data === void 0 ? void 0 : _res$error$data[\"httpStatus\"]) === \"number\") return res.error.data[\"httpStatus\"];\n            const code = _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) return 207;\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\nvar require_typeof = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\" (exports, module) {\n        function _typeof$2(o) {\n            \"@babel/helpers - typeof\";\n            return module.exports = _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o$1) {\n                return typeof o$1;\n            } : function(o$1) {\n                return o$1 && \"function\" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? \"symbol\" : typeof o$1;\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof$2(o);\n        }\n        module.exports = _typeof$2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\nvar require_toPrimitive = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\" (exports, module) {\n        var _typeof$1 = require_typeof()[\"default\"];\n        function toPrimitive$1(t, r) {\n            if (\"object\" != _typeof$1(t) || !t) return t;\n            var e = t[Symbol.toPrimitive];\n            if (void 0 !== e) {\n                var i = e.call(t, r || \"default\");\n                if (\"object\" != _typeof$1(i)) return i;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (\"string\" === r ? String : Number)(t);\n        }\n        module.exports = toPrimitive$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\nvar require_toPropertyKey = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\" (exports, module) {\n        var _typeof = require_typeof()[\"default\"];\n        var toPrimitive = require_toPrimitive();\n        function toPropertyKey$1(t) {\n            var i = toPrimitive(t, \"string\");\n            return \"symbol\" == _typeof(i) ? i : i + \"\";\n        }\n        module.exports = toPropertyKey$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\nvar require_defineProperty = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\" (exports, module) {\n        var toPropertyKey = require_toPropertyKey();\n        function _defineProperty(e, r, t) {\n            return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n                value: t,\n                enumerable: !0,\n                configurable: !0,\n                writable: !0\n            }) : e[r] = t, e;\n        }\n        module.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\nvar require_objectSpread2 = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\" (exports, module) {\n        var defineProperty = require_defineProperty();\n        function ownKeys(e, r) {\n            var t = Object.keys(e);\n            if (Object.getOwnPropertySymbols) {\n                var o = Object.getOwnPropertySymbols(e);\n                r && (o = o.filter(function(r$1) {\n                    return Object.getOwnPropertyDescriptor(e, r$1).enumerable;\n                })), t.push.apply(t, o);\n            }\n            return t;\n        }\n        function _objectSpread2(e) {\n            for(var r = 1; r < arguments.length; r++){\n                var t = null != arguments[r] ? arguments[r] : {};\n                r % 2 ? ownKeys(Object(t), !0).forEach(function(r$1) {\n                    defineProperty(e, r$1, t[r$1]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r$1) {\n                    Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));\n                });\n            }\n            return e;\n        }\n        module.exports = _objectSpread2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/error/getErrorShape.ts\nvar import_objectSpread2 = __toESM(require_objectSpread2(), 1);\n/**\n* @internal\n*/ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_KEY[code],\n        data: {\n            code,\n            httpStatus: getHTTPStatusCodeFromError(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") shape.data.stack = opts.error.stack;\n    if (typeof path === \"string\") shape.data.path = path;\n    return config.errorFormatter((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n        shape\n    }));\n}\n//#endregion\n //# sourceMappingURL=getErrorShape-Uhlrl4Bk.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/initTRPC-IT_6ZYJd.mjs":
/*!**************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/initTRPC-IT_6ZYJd.mjs ***!
  \**************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StandardSchemaV1Error: () => (/* binding */ StandardSchemaV1Error),\n/* harmony export */   createBuilder: () => (/* binding */ createBuilder),\n/* harmony export */   createInputMiddleware: () => (/* binding */ createInputMiddleware),\n/* harmony export */   createMiddlewareFactory: () => (/* binding */ createMiddlewareFactory),\n/* harmony export */   createOutputMiddleware: () => (/* binding */ createOutputMiddleware),\n/* harmony export */   experimental_standaloneMiddleware: () => (/* binding */ experimental_standaloneMiddleware),\n/* harmony export */   getParseFn: () => (/* binding */ getParseFn),\n/* harmony export */   initTRPC: () => (/* binding */ initTRPC),\n/* harmony export */   isServerDefault: () => (/* binding */ isServerDefault),\n/* harmony export */   middlewareMarker: () => (/* binding */ middlewareMarker)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getErrorShape-Uhlrl4Bk.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracked-gU3ttYjg.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\");\n/* harmony import */ var _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils-DdbbrDku.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n\n\n//#region src/unstable-core-do-not-import/middleware.ts\nvar import_objectSpread2$2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/** @internal */ const middlewareMarker = \"middlewareMarker\";\n/**\n* @internal\n*/ function createMiddlewareFactory() {\n    function createMiddlewareInner(middlewares) {\n        return {\n            _middlewares: middlewares,\n            unstable_pipe (middlewareBuilderOrFn) {\n                const pipedMiddleware = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                    middlewareBuilderOrFn\n                ];\n                return createMiddlewareInner([\n                    ...middlewares,\n                    ...pipedMiddleware\n                ]);\n            }\n        };\n    }\n    function createMiddleware(fn) {\n        return createMiddlewareInner([\n            fn\n        ]);\n    }\n    return createMiddleware;\n}\n/**\n* Create a standalone middleware\n* @see https://trpc.io/docs/v11/server/middlewares#experimental-standalone-middlewares\n* @deprecated use `.concat()` instead\n*/ const experimental_standaloneMiddleware = ()=>({\n        create: createMiddlewareFactory()\n    });\n/**\n* @internal\n* Please note, `trpc-openapi` uses this function.\n*/ function createInputMiddleware(parse) {\n    const inputMiddleware = async function inputValidatorMiddleware(opts) {\n        let parsedInput;\n        const rawInput = await opts.getRawInput();\n        try {\n            parsedInput = await parse(rawInput);\n        } catch (cause) {\n            throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                code: \"BAD_REQUEST\",\n                cause\n            });\n        }\n        const combinedInput = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(opts.input) && (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_2__.isObject)(parsedInput) ? (0, import_objectSpread2$2.default)((0, import_objectSpread2$2.default)({}, opts.input), parsedInput) : parsedInput;\n        return opts.next({\n            input: combinedInput\n        });\n    };\n    inputMiddleware._type = \"input\";\n    return inputMiddleware;\n}\n/**\n* @internal\n*/ function createOutputMiddleware(parse) {\n    const outputMiddleware = async function outputValidatorMiddleware({ next }) {\n        const result = await next();\n        if (!result.ok) return result;\n        try {\n            const data = await parse(result.data);\n            return (0, import_objectSpread2$2.default)((0, import_objectSpread2$2.default)({}, result), {}, {\n                data\n            });\n        } catch (cause) {\n            throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                message: \"Output validation failed\",\n                code: \"INTERNAL_SERVER_ERROR\",\n                cause\n            });\n        }\n    };\n    outputMiddleware._type = \"output\";\n    return outputMiddleware;\n}\n//#endregion\n//#region src/vendor/standard-schema-v1/error.ts\nvar import_defineProperty = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\n/** A schema error with useful information. */ var StandardSchemaV1Error = class extends Error {\n    /**\n\t* Creates a schema error with useful information.\n\t*\n\t* @param issues The schema issues.\n\t*/ constructor(issues){\n        var _issues$;\n        super((_issues$ = issues[0]) === null || _issues$ === void 0 ? void 0 : _issues$.message);\n        (0, import_defineProperty.default)(this, \"issues\", void 0);\n        this.name = \"SchemaError\";\n        this.issues = issues;\n    }\n};\n//#endregion\n//#region src/unstable-core-do-not-import/parser.ts\nfunction getParseFn(procedureParser) {\n    const parser = procedureParser;\n    const isStandardSchema = \"~standard\" in parser;\n    if (typeof parser === \"function\" && typeof parser.assert === \"function\") return parser.assert.bind(parser);\n    if (typeof parser === \"function\" && !isStandardSchema) return parser;\n    if (typeof parser.parseAsync === \"function\") return parser.parseAsync.bind(parser);\n    if (typeof parser.parse === \"function\") return parser.parse.bind(parser);\n    if (typeof parser.validateSync === \"function\") return parser.validateSync.bind(parser);\n    if (typeof parser.create === \"function\") return parser.create.bind(parser);\n    if (typeof parser.assert === \"function\") return (value)=>{\n        parser.assert(value);\n        return value;\n    };\n    if (isStandardSchema) return async (value)=>{\n        const result = await parser[\"~standard\"].validate(value);\n        if (result.issues) throw new StandardSchemaV1Error(result.issues);\n        return result.value;\n    };\n    throw new Error(\"Could not find a validator fn\");\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutPropertiesLoose.js\nvar require_objectWithoutPropertiesLoose = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutPropertiesLoose.js\" (exports, module) {\n        function _objectWithoutPropertiesLoose(r, e) {\n            if (null == r) return {};\n            var t = {};\n            for(var n in r)if (({}).hasOwnProperty.call(r, n)) {\n                if (e.includes(n)) continue;\n                t[n] = r[n];\n            }\n            return t;\n        }\n        module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutProperties.js\nvar require_objectWithoutProperties = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutProperties.js\" (exports, module) {\n        var objectWithoutPropertiesLoose = require_objectWithoutPropertiesLoose();\n        function _objectWithoutProperties$1(e, t) {\n            if (null == e) return {};\n            var o, r, i = objectWithoutPropertiesLoose(e, t);\n            if (Object.getOwnPropertySymbols) {\n                var s = Object.getOwnPropertySymbols(e);\n                for(r = 0; r < s.length; r++)o = s[r], t.includes(o) || ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n            }\n            return i;\n        }\n        module.exports = _objectWithoutProperties$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/procedureBuilder.ts\nvar import_objectWithoutProperties = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)(require_objectWithoutProperties(), 1);\nvar import_objectSpread2$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nconst _excluded = [\n    \"middlewares\",\n    \"inputs\",\n    \"meta\"\n];\nfunction createNewBuilder(def1, def2) {\n    const { middlewares = [], inputs, meta } = def2, rest = (0, import_objectWithoutProperties.default)(def2, _excluded);\n    return createBuilder((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_2__.mergeWithoutOverrides)(def1, rest)), {}, {\n        inputs: [\n            ...def1.inputs,\n            ...inputs !== null && inputs !== void 0 ? inputs : []\n        ],\n        middlewares: [\n            ...def1.middlewares,\n            ...middlewares\n        ],\n        meta: def1.meta && meta ? (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, def1.meta), meta) : meta !== null && meta !== void 0 ? meta : def1.meta\n    }));\n}\nfunction createBuilder(initDef = {}) {\n    const _def = (0, import_objectSpread2$1.default)({\n        procedure: true,\n        inputs: [],\n        middlewares: []\n    }, initDef);\n    const builder = {\n        _def,\n        input (input) {\n            const parser = getParseFn(input);\n            return createNewBuilder(_def, {\n                inputs: [\n                    input\n                ],\n                middlewares: [\n                    createInputMiddleware(parser)\n                ]\n            });\n        },\n        output (output) {\n            const parser = getParseFn(output);\n            return createNewBuilder(_def, {\n                output,\n                middlewares: [\n                    createOutputMiddleware(parser)\n                ]\n            });\n        },\n        meta (meta) {\n            return createNewBuilder(_def, {\n                meta\n            });\n        },\n        use (middlewareBuilderOrFn) {\n            const middlewares = \"_middlewares\" in middlewareBuilderOrFn ? middlewareBuilderOrFn._middlewares : [\n                middlewareBuilderOrFn\n            ];\n            return createNewBuilder(_def, {\n                middlewares\n            });\n        },\n        unstable_concat (builder$1) {\n            return createNewBuilder(_def, builder$1._def);\n        },\n        concat (builder$1) {\n            return createNewBuilder(_def, builder$1._def);\n        },\n        query (resolver) {\n            return createResolver((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, _def), {}, {\n                type: \"query\"\n            }), resolver);\n        },\n        mutation (resolver) {\n            return createResolver((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, _def), {}, {\n                type: \"mutation\"\n            }), resolver);\n        },\n        subscription (resolver) {\n            return createResolver((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, _def), {}, {\n                type: \"subscription\"\n            }), resolver);\n        },\n        experimental_caller (caller) {\n            return createNewBuilder(_def, {\n                caller\n            });\n        }\n    };\n    return builder;\n}\nfunction createResolver(_defIn, resolver) {\n    const finalBuilder = createNewBuilder(_defIn, {\n        resolver,\n        middlewares: [\n            async function resolveMiddleware(opts) {\n                const data = await resolver(opts);\n                return {\n                    marker: middlewareMarker,\n                    ok: true,\n                    data,\n                    ctx: opts.ctx\n                };\n            }\n        ]\n    });\n    const _def = (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, finalBuilder._def), {}, {\n        type: _defIn.type,\n        experimental_caller: Boolean(finalBuilder._def.caller),\n        meta: finalBuilder._def.meta,\n        $types: null\n    });\n    const invoke = createProcedureCaller(finalBuilder._def);\n    const callerOverride = finalBuilder._def.caller;\n    if (!callerOverride) return invoke;\n    const callerWrapper = async (...args)=>{\n        return await callerOverride({\n            args,\n            invoke,\n            _def\n        });\n    };\n    callerWrapper._def = _def;\n    return callerWrapper;\n}\nconst codeblock = `\nThis is a client-only function.\nIf you want to call this function on the server, see https://trpc.io/docs/v11/server/server-side-calls\n`.trim();\nasync function callRecursive(index, _def, opts) {\n    try {\n        const middleware = _def.middlewares[index];\n        const result = await middleware((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts), {}, {\n            meta: _def.meta,\n            input: opts.input,\n            next (_nextOpts) {\n                var _nextOpts$getRawInput;\n                const nextOpts = _nextOpts;\n                return callRecursive(index + 1, _def, (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts), {}, {\n                    ctx: (nextOpts === null || nextOpts === void 0 ? void 0 : nextOpts.ctx) ? (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts.ctx), nextOpts.ctx) : opts.ctx,\n                    input: nextOpts && \"input\" in nextOpts ? nextOpts.input : opts.input,\n                    getRawInput: (_nextOpts$getRawInput = nextOpts === null || nextOpts === void 0 ? void 0 : nextOpts.getRawInput) !== null && _nextOpts$getRawInput !== void 0 ? _nextOpts$getRawInput : opts.getRawInput\n                }));\n            }\n        }));\n        return result;\n    } catch (cause) {\n        return {\n            ok: false,\n            error: (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n            marker: middlewareMarker\n        };\n    }\n}\nfunction createProcedureCaller(_def) {\n    async function procedure(opts) {\n        if (!opts || !(\"getRawInput\" in opts)) throw new Error(codeblock);\n        const result = await callRecursive(0, _def, opts);\n        if (!result) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"INTERNAL_SERVER_ERROR\",\n            message: \"No result from middlewares - did you forget to `return next()`?\"\n        });\n        if (!result.ok) throw result.error;\n        return result.data;\n    }\n    procedure._def = _def;\n    procedure.procedure = true;\n    procedure.meta = _def.meta;\n    return procedure;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/rootConfig.ts\nvar _globalThis$process, _globalThis$process2, _globalThis$process3;\n/**\n* The default check to see if we're in a server\n*/ const isServerDefault =  true || 0;\n//#endregion\n//#region src/unstable-core-do-not-import/initTRPC.ts\nvar import_objectSpread2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nvar TRPCBuilder = class TRPCBuilder {\n    /**\n\t* Add a context shape as a generic to the root object\n\t* @see https://trpc.io/docs/v11/server/context\n\t*/ context() {\n        return new TRPCBuilder();\n    }\n    /**\n\t* Add a meta shape as a generic to the root object\n\t* @see https://trpc.io/docs/v11/quickstart\n\t*/ meta() {\n        return new TRPCBuilder();\n    }\n    /**\n\t* Create the root object\n\t* @see https://trpc.io/docs/v11/server/routers#initialize-trpc\n\t*/ create(opts) {\n        var _opts$transformer, _opts$isDev, _globalThis$process$1, _opts$allowOutsideOfS, _opts$errorFormatter, _opts$isServer;\n        const config = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            transformer: (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getDataTransformer)((_opts$transformer = opts === null || opts === void 0 ? void 0 : opts.transformer) !== null && _opts$transformer !== void 0 ? _opts$transformer : _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultTransformer),\n            isDev: (_opts$isDev = opts === null || opts === void 0 ? void 0 : opts.isDev) !== null && _opts$isDev !== void 0 ? _opts$isDev : ((_globalThis$process$1 = globalThis.process) === null || _globalThis$process$1 === void 0 ? void 0 : _globalThis$process$1.env[\"NODE_ENV\"]) !== \"production\",\n            allowOutsideOfServer: (_opts$allowOutsideOfS = opts === null || opts === void 0 ? void 0 : opts.allowOutsideOfServer) !== null && _opts$allowOutsideOfS !== void 0 ? _opts$allowOutsideOfS : false,\n            errorFormatter: (_opts$errorFormatter = opts === null || opts === void 0 ? void 0 : opts.errorFormatter) !== null && _opts$errorFormatter !== void 0 ? _opts$errorFormatter : _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.defaultFormatter,\n            isServer: (_opts$isServer = opts === null || opts === void 0 ? void 0 : opts.isServer) !== null && _opts$isServer !== void 0 ? _opts$isServer : isServerDefault,\n            $types: null\n        });\n        {\n            var _opts$isServer2;\n            const isServer = (_opts$isServer2 = opts === null || opts === void 0 ? void 0 : opts.isServer) !== null && _opts$isServer2 !== void 0 ? _opts$isServer2 : isServerDefault;\n            if (!isServer && (opts === null || opts === void 0 ? void 0 : opts.allowOutsideOfServer) !== true) throw new Error(`You're trying to use @trpc/server in a non-server environment. This is not supported by default.`);\n        }\n        return {\n            _config: config,\n            procedure: createBuilder({\n                meta: opts === null || opts === void 0 ? void 0 : opts.defaultMeta\n            }),\n            middleware: createMiddlewareFactory(),\n            router: (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.createRouterFactory)(config),\n            mergeRouters: _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.mergeRouters,\n            createCallerFactory: (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.createCallerFactory)()\n        };\n    }\n};\n/**\n* Builder to initialize the tRPC root object - use this exactly once per backend\n* @see https://trpc.io/docs/v11/quickstart\n*/ const initTRPC = new TRPCBuilder();\n//#endregion\n //# sourceMappingURL=initTRPC-IT_6ZYJd.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/initTRPC-IT_6ZYJd.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   observable: () => (/* binding */ observable),\n/* harmony export */   observableToAsyncIterable: () => (/* binding */ observableToAsyncIterable),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise)\n/* harmony export */ });\n//#region src/observable/observable.ts\n/** @public */ function isObservable(x) {\n    return typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\n/** @public */ function observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) return;\n                unsubscribed = true;\n                if (typeof teardownRef === \"function\") teardownRef();\n                else if (teardownRef) teardownRef.unsubscribe();\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    var _observer$next;\n                    if (isDone) return;\n                    (_observer$next = observer.next) === null || _observer$next === void 0 || _observer$next.call(observer, value);\n                },\n                error (err) {\n                    var _observer$error;\n                    if (isDone) return;\n                    isDone = true;\n                    (_observer$error = observer.error) === null || _observer$error === void 0 || _observer$error.call(observer, err);\n                    unsubscribe();\n                },\n                complete () {\n                    var _observer$complete;\n                    if (isDone) return;\n                    isDone = true;\n                    (_observer$complete = observer.complete) === null || _observer$complete === void 0 || _observer$complete.call(observer);\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) unsubscribe();\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return operations.reduce(pipeReducer, self);\n        }\n    };\n    return self;\n}\nfunction pipeReducer(prev, fn) {\n    return fn(prev);\n}\n/** @internal */ function observableToPromise(observable$1) {\n    const ac = new AbortController();\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) return;\n            isDone = true;\n            obs$.unsubscribe();\n        }\n        ac.signal.addEventListener(\"abort\", ()=>{\n            reject(ac.signal.reason);\n        });\n        const obs$ = observable$1.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                reject(data);\n            },\n            complete () {\n                ac.abort();\n                onDone();\n            }\n        });\n    });\n    return promise;\n}\n/**\n* @internal\n*/ function observableToReadableStream(observable$1, signal) {\n    let unsub = null;\n    const onAbort = ()=>{\n        unsub === null || unsub === void 0 || unsub.unsubscribe();\n        unsub = null;\n        signal.removeEventListener(\"abort\", onAbort);\n    };\n    return new ReadableStream({\n        start (controller) {\n            unsub = observable$1.subscribe({\n                next (data) {\n                    controller.enqueue({\n                        ok: true,\n                        value: data\n                    });\n                },\n                error (error) {\n                    controller.enqueue({\n                        ok: false,\n                        error\n                    });\n                    controller.close();\n                },\n                complete () {\n                    controller.close();\n                }\n            });\n            if (signal.aborted) onAbort();\n            else signal.addEventListener(\"abort\", onAbort, {\n                once: true\n            });\n        },\n        cancel () {\n            onAbort();\n        }\n    });\n}\n/** @internal */ function observableToAsyncIterable(observable$1, signal) {\n    const stream = observableToReadableStream(observable$1, signal);\n    const reader = stream.getReader();\n    const iterator = {\n        async next () {\n            const value = await reader.read();\n            if (value.done) return {\n                value: void 0,\n                done: true\n            };\n            const { value: result } = value;\n            if (!result.ok) throw result.error;\n            return {\n                value: result.value,\n                done: false\n            };\n        },\n        async return () {\n            await reader.cancel();\n            return {\n                value: void 0,\n                done: true\n            };\n        }\n    };\n    return {\n        [Symbol.asyncIterator] () {\n            return iterator;\n        }\n    };\n}\n//#endregion\n //# sourceMappingURL=observable-UMO3vUa_.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs":
/*!*********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Unpromise: () => (/* binding */ Unpromise),\n/* harmony export */   createDeferred: () => (/* binding */ createDeferred),\n/* harmony export */   getRequestInfo: () => (/* binding */ getRequestInfo),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   iteratorResource: () => (/* binding */ iteratorResource),\n/* harmony export */   jsonlStreamConsumer: () => (/* binding */ jsonlStreamConsumer),\n/* harmony export */   jsonlStreamProducer: () => (/* binding */ jsonlStreamProducer),\n/* harmony export */   makeAsyncResource: () => (/* binding */ makeAsyncResource),\n/* harmony export */   makeResource: () => (/* binding */ makeResource),\n/* harmony export */   parseConnectionParamsFromString: () => (/* binding */ parseConnectionParamsFromString),\n/* harmony export */   parseConnectionParamsFromUnknown: () => (/* binding */ parseConnectionParamsFromUnknown),\n/* harmony export */   require_usingCtx: () => (/* binding */ require_usingCtx),\n/* harmony export */   resolveResponse: () => (/* binding */ resolveResponse),\n/* harmony export */   sseHeaders: () => (/* binding */ sseHeaders),\n/* harmony export */   sseStreamConsumer: () => (/* binding */ sseStreamConsumer),\n/* harmony export */   sseStreamProducer: () => (/* binding */ sseStreamProducer),\n/* harmony export */   takeWithGrace: () => (/* binding */ takeWithGrace),\n/* harmony export */   throwAbortError: () => (/* binding */ throwAbortError),\n/* harmony export */   withMaxDuration: () => (/* binding */ withMaxDuration)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getErrorShape-Uhlrl4Bk.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracked-gU3ttYjg.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\");\n/* harmony import */ var _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-DdbbrDku.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n/* harmony import */ var _observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./observable-UMO3vUa_.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n\n\n\n\n//#region src/unstable-core-do-not-import/http/parseConnectionParams.ts\nfunction parseConnectionParamsFromUnknown(parsed) {\n    try {\n        if (parsed === null) return null;\n        if (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(parsed)) throw new Error(\"Expected object\");\n        const nonStringValues = Object.entries(parsed).filter(([_key, value])=>typeof value !== \"string\");\n        if (nonStringValues.length > 0) throw new Error(`Expected connectionParams to be string values. Got ${nonStringValues.map(([key, value])=>`${key}: ${typeof value}`).join(\", \")}`);\n        return parsed;\n    } catch (cause) {\n        throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"PARSE_ERROR\",\n            message: \"Invalid connection params shape\",\n            cause\n        });\n    }\n}\nfunction parseConnectionParamsFromString(str) {\n    let parsed;\n    try {\n        parsed = JSON.parse(str);\n    } catch (cause) {\n        throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"PARSE_ERROR\",\n            message: \"Not JSON-parsable query params\",\n            cause\n        });\n    }\n    return parseConnectionParamsFromUnknown(parsed);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/http/contentType.ts\nvar import_objectSpread2$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.require_objectSpread2)(), 1);\n/**\n* Memoize a function that takes no arguments\n* @internal\n*/ function memo(fn) {\n    let promise = null;\n    const sym = Symbol.for(\"@trpc/server/http/memo\");\n    let value = sym;\n    return {\n        read: async ()=>{\n            var _promise;\n            if (value !== sym) return value;\n            (_promise = promise) !== null && _promise !== void 0 || (promise = fn().catch((cause)=>{\n                if (cause instanceof _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError) throw cause;\n                throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"BAD_REQUEST\",\n                    message: cause instanceof Error ? cause.message : \"Invalid input\",\n                    cause\n                });\n            }));\n            value = await promise;\n            promise = null;\n            return value;\n        },\n        result: ()=>{\n            return value !== sym ? value : void 0;\n        }\n    };\n}\nconst jsonContentTypeHandler = {\n    isMatch (req) {\n        var _req$headers$get;\n        return !!((_req$headers$get = req.headers.get(\"content-type\")) === null || _req$headers$get === void 0 ? void 0 : _req$headers$get.startsWith(\"application/json\"));\n    },\n    async parse (opts) {\n        var _types$values$next$va;\n        const { req } = opts;\n        const isBatchCall = opts.searchParams.get(\"batch\") === \"1\";\n        const paths = isBatchCall ? opts.path.split(\",\") : [\n            opts.path\n        ];\n        const getInputs = memo(async ()=>{\n            let inputs = void 0;\n            if (req.method === \"GET\") {\n                const queryInput = opts.searchParams.get(\"input\");\n                if (queryInput) inputs = JSON.parse(queryInput);\n            } else inputs = await req.json();\n            if (inputs === void 0) return {};\n            if (!isBatchCall) return {\n                0: opts.router._def._config.transformer.input.deserialize(inputs)\n            };\n            if (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(inputs)) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                code: \"BAD_REQUEST\",\n                message: \"\\\"input\\\" needs to be an object when doing a batch call\"\n            });\n            const acc = {};\n            for (const index of paths.keys()){\n                const input = inputs[index];\n                if (input !== void 0) acc[index] = opts.router._def._config.transformer.input.deserialize(input);\n            }\n            return acc;\n        });\n        const calls = await Promise.all(paths.map(async (path, index)=>{\n            const procedure = await (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, path);\n            return {\n                path,\n                procedure,\n                getRawInput: async ()=>{\n                    const inputs = await getInputs.read();\n                    let input = inputs[index];\n                    if ((procedure === null || procedure === void 0 ? void 0 : procedure._def.type) === \"subscription\") {\n                        var _ref, _opts$headers$get;\n                        const lastEventId = (_ref = (_opts$headers$get = opts.headers.get(\"last-event-id\")) !== null && _opts$headers$get !== void 0 ? _opts$headers$get : opts.searchParams.get(\"lastEventId\")) !== null && _ref !== void 0 ? _ref : opts.searchParams.get(\"Last-Event-Id\");\n                        if (lastEventId) if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(input)) input = (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, input), {}, {\n                            lastEventId\n                        });\n                        else {\n                            var _input;\n                            (_input = input) !== null && _input !== void 0 || (input = {\n                                lastEventId\n                            });\n                        }\n                    }\n                    return input;\n                },\n                result: ()=>{\n                    var _getInputs$result;\n                    return (_getInputs$result = getInputs.result()) === null || _getInputs$result === void 0 ? void 0 : _getInputs$result[index];\n                }\n            };\n        }));\n        const types = new Set(calls.map((call)=>{\n            var _call$procedure;\n            return (_call$procedure = call.procedure) === null || _call$procedure === void 0 ? void 0 : _call$procedure._def.type;\n        }).filter(Boolean));\n        /* istanbul ignore if -- @preserve */ if (types.size > 1) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"BAD_REQUEST\",\n            message: `Cannot mix procedure types in call: ${Array.from(types).join(\", \")}`\n        });\n        const type = (_types$values$next$va = types.values().next().value) !== null && _types$values$next$va !== void 0 ? _types$values$next$va : \"unknown\";\n        const connectionParamsStr = opts.searchParams.get(\"connectionParams\");\n        const info = {\n            isBatchCall,\n            accept: req.headers.get(\"trpc-accept\"),\n            calls,\n            type,\n            connectionParams: connectionParamsStr === null ? null : parseConnectionParamsFromString(connectionParamsStr),\n            signal: req.signal,\n            url: opts.url\n        };\n        return info;\n    }\n};\nconst formDataContentTypeHandler = {\n    isMatch (req) {\n        var _req$headers$get2;\n        return !!((_req$headers$get2 = req.headers.get(\"content-type\")) === null || _req$headers$get2 === void 0 ? void 0 : _req$headers$get2.startsWith(\"multipart/form-data\"));\n    },\n    async parse (opts) {\n        const { req } = opts;\n        if (req.method !== \"POST\") throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"METHOD_NOT_SUPPORTED\",\n            message: \"Only POST requests are supported for multipart/form-data requests\"\n        });\n        const getInputs = memo(async ()=>{\n            const fd = await req.formData();\n            return fd;\n        });\n        const procedure = await (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path);\n        return {\n            accept: null,\n            calls: [\n                {\n                    path: opts.path,\n                    getRawInput: getInputs.read,\n                    result: getInputs.result,\n                    procedure\n                }\n            ],\n            isBatchCall: false,\n            type: \"mutation\",\n            connectionParams: null,\n            signal: req.signal,\n            url: opts.url\n        };\n    }\n};\nconst octetStreamContentTypeHandler = {\n    isMatch (req) {\n        var _req$headers$get3;\n        return !!((_req$headers$get3 = req.headers.get(\"content-type\")) === null || _req$headers$get3 === void 0 ? void 0 : _req$headers$get3.startsWith(\"application/octet-stream\"));\n    },\n    async parse (opts) {\n        const { req } = opts;\n        if (req.method !== \"POST\") throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"METHOD_NOT_SUPPORTED\",\n            message: \"Only POST requests are supported for application/octet-stream requests\"\n        });\n        const getInputs = memo(async ()=>{\n            return req.body;\n        });\n        return {\n            calls: [\n                {\n                    path: opts.path,\n                    getRawInput: getInputs.read,\n                    result: getInputs.result,\n                    procedure: await (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path)\n                }\n            ],\n            isBatchCall: false,\n            accept: null,\n            type: \"mutation\",\n            connectionParams: null,\n            signal: req.signal,\n            url: opts.url\n        };\n    }\n};\nconst handlers = [\n    jsonContentTypeHandler,\n    formDataContentTypeHandler,\n    octetStreamContentTypeHandler\n];\nfunction getContentTypeHandler(req) {\n    const handler = handlers.find((handler$1)=>handler$1.isMatch(req));\n    if (handler) return handler;\n    if (!handler && req.method === \"GET\") return jsonContentTypeHandler;\n    throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n        code: \"UNSUPPORTED_MEDIA_TYPE\",\n        message: req.headers.has(\"content-type\") ? `Unsupported content-type \"${req.headers.get(\"content-type\")}` : \"Missing content-type header\"\n    });\n}\nasync function getRequestInfo(opts) {\n    const handler = getContentTypeHandler(opts.req);\n    return await handler.parse(opts);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/http/abortError.ts\nfunction isAbortError(error) {\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(error) && error[\"name\"] === \"AbortError\";\n}\nfunction throwAbortError(message = \"AbortError\") {\n    throw new DOMException(message, \"AbortError\");\n}\n//#endregion\n//#region src/vendor/unpromise/unpromise.ts\nvar import_defineProperty = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.require_defineProperty)(), 1);\nlet _Symbol$toStringTag;\n/** Memory safe (weakmapped) cache of the ProxyPromise for each Promise,\n* which is retained for the lifetime of the original Promise.\n*/ const subscribableCache = /* @__PURE__ */ new WeakMap();\n/** A NOOP function allowing a consistent interface for settled\n* SubscribedPromises (settled promises are not subscribed - they resolve\n* immediately). */ const NOOP = ()=>{};\n_Symbol$toStringTag = Symbol.toStringTag;\n/**\n* Every `Promise<T>` can be shadowed by a single `ProxyPromise<T>`. It is\n* created once, cached and reused throughout the lifetime of the Promise. Get a\n* Promise's ProxyPromise using `Unpromise.proxy(promise)`.\n*\n* The `ProxyPromise<T>` attaches handlers to the original `Promise<T>`\n* `.then()` and `.catch()` just once. Promises derived from it use a\n* subscription- (and unsubscription-) based mechanism that monitors these\n* handlers.\n*\n* Every time you call `.subscribe()`, `.then()` `.catch()` or `.finally()` on a\n* `ProxyPromise<T>` it returns a `SubscribedPromise<T>` having an additional\n* `unsubscribe()` method. Calling `unsubscribe()` detaches reference chains\n* from the original, potentially long-lived Promise, eliminating memory leaks.\n*\n* This approach can eliminate the memory leaks that otherwise come about from\n* repeated `race()` or `any()` calls invoking `.then()` and `.catch()` multiple\n* times on the same long-lived native Promise (subscriptions which can never be\n* cleaned up).\n*\n* `Unpromise.race(promises)` is a reference implementation of `Promise.race`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.any(promises)` is a reference implementation of `Promise.any`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.resolve(promise)` returns an ephemeral `SubscribedPromise<T>` for\n* any given `Promise<T>` facilitating arbitrary async/await patterns. Behind\n* the scenes, `resolve` is implemented simply as\n* `Unpromise.proxy(promise).subscribe()`. Don't forget to call `.unsubscribe()`\n* to tidy up!\n*\n*/ var Unpromise = class Unpromise {\n    constructor(arg){\n        (0, import_defineProperty.default)(this, \"promise\", void 0);\n        (0, import_defineProperty.default)(this, \"subscribers\", []);\n        (0, import_defineProperty.default)(this, \"settlement\", null);\n        (0, import_defineProperty.default)(this, _Symbol$toStringTag, \"Unpromise\");\n        if (typeof arg === \"function\") this.promise = new Promise(arg);\n        else this.promise = arg;\n        const thenReturn = this.promise.then((value)=>{\n            const { subscribers } = this;\n            this.subscribers = null;\n            this.settlement = {\n                status: \"fulfilled\",\n                value\n            };\n            subscribers === null || subscribers === void 0 || subscribers.forEach(({ resolve })=>{\n                resolve(value);\n            });\n        });\n        if (\"catch\" in thenReturn) thenReturn.catch((reason)=>{\n            const { subscribers } = this;\n            this.subscribers = null;\n            this.settlement = {\n                status: \"rejected\",\n                reason\n            };\n            subscribers === null || subscribers === void 0 || subscribers.forEach(({ reject })=>{\n                reject(reason);\n            });\n        });\n    }\n    /** Create a promise that mitigates uncontrolled subscription to a long-lived\n\t* Promise via .then() and .catch() - otherwise a source of memory leaks.\n\t*\n\t* The returned promise has an `unsubscribe()` method which can be called when\n\t* the Promise is no longer being tracked by application logic, and which\n\t* ensures that there is no reference chain from the original promise to the\n\t* new one, and therefore no memory leak.\n\t*\n\t* If original promise has not yet settled, this adds a new unique promise\n\t* that listens to then/catch events, along with an `unsubscribe()` method to\n\t* detach it.\n\t*\n\t* If original promise has settled, then creates a new Promise.resolve() or\n\t* Promise.reject() and provided unsubscribe is a noop.\n\t*\n\t* If you call `unsubscribe()` before the returned Promise has settled, it\n\t* will never settle.\n\t*/ subscribe() {\n        let promise;\n        let unsubscribe;\n        const { settlement } = this;\n        if (settlement === null) {\n            if (this.subscribers === null) throw new Error(\"Unpromise settled but still has subscribers\");\n            const subscriber = withResolvers();\n            this.subscribers = listWithMember(this.subscribers, subscriber);\n            promise = subscriber.promise;\n            unsubscribe = ()=>{\n                if (this.subscribers !== null) this.subscribers = listWithoutMember(this.subscribers, subscriber);\n            };\n        } else {\n            const { status } = settlement;\n            if (status === \"fulfilled\") promise = Promise.resolve(settlement.value);\n            else promise = Promise.reject(settlement.reason);\n            unsubscribe = NOOP;\n        }\n        return Object.assign(promise, {\n            unsubscribe\n        });\n    }\n    /** STANDARD PROMISE METHODS (but returning a SubscribedPromise) */ then(onfulfilled, onrejected) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.then(onfulfilled, onrejected), {\n            unsubscribe\n        });\n    }\n    catch(onrejected) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.catch(onrejected), {\n            unsubscribe\n        });\n    }\n    finally(onfinally) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.finally(onfinally), {\n            unsubscribe\n        });\n    }\n    /** Unpromise STATIC METHODS */ /** Create or Retrieve the proxy Unpromise (a re-used Unpromise for the VM lifetime\n\t* of the provided Promise reference) */ static proxy(promise) {\n        const cached = Unpromise.getSubscribablePromise(promise);\n        return typeof cached !== \"undefined\" ? cached : Unpromise.createSubscribablePromise(promise);\n    }\n    /** Create and store an Unpromise keyed by an original Promise. */ static createSubscribablePromise(promise) {\n        const created = new Unpromise(promise);\n        subscribableCache.set(promise, created);\n        subscribableCache.set(created, created);\n        return created;\n    }\n    /** Retrieve a previously-created Unpromise keyed by an original Promise. */ static getSubscribablePromise(promise) {\n        return subscribableCache.get(promise);\n    }\n    /** Promise STATIC METHODS */ /** Lookup the Unpromise for this promise, and derive a SubscribedPromise from\n\t* it (that can be later unsubscribed to eliminate Memory leaks) */ static resolve(value) {\n        const promise = typeof value === \"object\" && value !== null && \"then\" in value && typeof value.then === \"function\" ? value : Promise.resolve(value);\n        return Unpromise.proxy(promise).subscribe();\n    }\n    static async any(values) {\n        const valuesArray = Array.isArray(values) ? values : [\n            ...values\n        ];\n        const subscribedPromises = valuesArray.map(Unpromise.resolve);\n        try {\n            return await Promise.any(subscribedPromises);\n        } finally{\n            subscribedPromises.forEach(({ unsubscribe })=>{\n                unsubscribe();\n            });\n        }\n    }\n    static async race(values) {\n        const valuesArray = Array.isArray(values) ? values : [\n            ...values\n        ];\n        const subscribedPromises = valuesArray.map(Unpromise.resolve);\n        try {\n            return await Promise.race(subscribedPromises);\n        } finally{\n            subscribedPromises.forEach(({ unsubscribe })=>{\n                unsubscribe();\n            });\n        }\n    }\n    /** Create a race of SubscribedPromises that will fulfil to a single winning\n\t* Promise (in a 1-Tuple). Eliminates memory leaks from long-lived promises\n\t* accumulating .then() and .catch() subscribers. Allows simple logic to\n\t* consume the result, like...\n\t* ```ts\n\t* const [ winner ] = await Unpromise.race([ promiseA, promiseB ]);\n\t* if(winner === promiseB){\n\t*   const result = await promiseB;\n\t*   // do the thing\n\t* }\n\t* ```\n\t* */ static async raceReferences(promises) {\n        const selfPromises = promises.map(resolveSelfTuple);\n        try {\n            return await Promise.race(selfPromises);\n        } finally{\n            for (const promise of selfPromises)promise.unsubscribe();\n        }\n    }\n};\n/** Promises a 1-tuple containing the original promise when it resolves. Allows\n* awaiting the eventual Promise ***reference*** (easy to destructure and\n* exactly compare with ===). Avoids resolving to the Promise ***value*** (which\n* may be ambiguous and therefore hard to identify as the winner of a race).\n* You can call unsubscribe on the Promise to mitigate memory leaks.\n* */ function resolveSelfTuple(promise) {\n    return Unpromise.proxy(promise).then(()=>[\n            promise\n        ]);\n}\n/** VENDORED (Future) PROMISE UTILITIES */ /** Reference implementation of https://github.com/tc39/proposal-promise-with-resolvers */ function withResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n/** IMMUTABLE LIST OPERATIONS */ function listWithMember(arr, member) {\n    return [\n        ...arr,\n        member\n    ];\n}\nfunction listWithoutIndex(arr, index) {\n    return [\n        ...arr.slice(0, index),\n        ...arr.slice(index + 1)\n    ];\n}\nfunction listWithoutMember(arr, member) {\n    const index = arr.indexOf(member);\n    if (index !== -1) return listWithoutIndex(arr, index);\n    return arr;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/disposable.ts\nvar _Symbol, _Symbol$dispose, _Symbol2, _Symbol2$asyncDispose;\n(_Symbol$dispose = (_Symbol = Symbol).dispose) !== null && _Symbol$dispose !== void 0 || (_Symbol.dispose = Symbol());\n(_Symbol2$asyncDispose = (_Symbol2 = Symbol).asyncDispose) !== null && _Symbol2$asyncDispose !== void 0 || (_Symbol2.asyncDispose = Symbol());\n/**\n* Takes a value and a dispose function and returns a new object that implements the Disposable interface.\n* The returned object is the original value augmented with a Symbol.dispose method.\n* @param thing The value to make disposable\n* @param dispose Function to call when disposing the resource\n* @returns The original value with Symbol.dispose method added\n*/ function makeResource(thing, dispose) {\n    const it = thing;\n    const existing = it[Symbol.dispose];\n    it[Symbol.dispose] = ()=>{\n        dispose();\n        existing === null || existing === void 0 || existing();\n    };\n    return it;\n}\n/**\n* Takes a value and an async dispose function and returns a new object that implements the AsyncDisposable interface.\n* The returned object is the original value augmented with a Symbol.asyncDispose method.\n* @param thing The value to make async disposable\n* @param dispose Async function to call when disposing the resource\n* @returns The original value with Symbol.asyncDispose method added\n*/ function makeAsyncResource(thing, dispose) {\n    const it = thing;\n    const existing = it[Symbol.asyncDispose];\n    it[Symbol.asyncDispose] = async ()=>{\n        await dispose();\n        await (existing === null || existing === void 0 ? void 0 : existing());\n    };\n    return it;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/timerResource.ts\nconst disposablePromiseTimerResult = Symbol();\nfunction timerResource(ms) {\n    let timer = null;\n    return makeResource({\n        start () {\n            if (timer) throw new Error(\"Timer already started\");\n            const promise = new Promise((resolve)=>{\n                timer = setTimeout(()=>resolve(disposablePromiseTimerResult), ms);\n            });\n            return promise;\n        }\n    }, ()=>{\n        if (timer) clearTimeout(timer);\n    });\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\nvar require_usingCtx = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\" (exports, module) {\n        function _usingCtx() {\n            var r = \"function\" == typeof SuppressedError ? SuppressedError : function(r$1, e$1) {\n                var n$1 = Error();\n                return n$1.name = \"SuppressedError\", n$1.error = r$1, n$1.suppressed = e$1, n$1;\n            }, e = {}, n = [];\n            function using(r$1, e$1) {\n                if (null != e$1) {\n                    if (Object(e$1) !== e$1) throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");\n                    if (r$1) var o = e$1[Symbol.asyncDispose || Symbol[\"for\"](\"Symbol.asyncDispose\")];\n                    if (void 0 === o && (o = e$1[Symbol.dispose || Symbol[\"for\"](\"Symbol.dispose\")], r$1)) var t = o;\n                    if (\"function\" != typeof o) throw new TypeError(\"Object is not disposable.\");\n                    t && (o = function o$1() {\n                        try {\n                            t.call(e$1);\n                        } catch (r$2) {\n                            return Promise.reject(r$2);\n                        }\n                    }), n.push({\n                        v: e$1,\n                        d: o,\n                        a: r$1\n                    });\n                } else r$1 && n.push({\n                    d: e$1,\n                    a: r$1\n                });\n                return e$1;\n            }\n            return {\n                e,\n                u: using.bind(null, !1),\n                a: using.bind(null, !0),\n                d: function d() {\n                    var o, t = this.e, s = 0;\n                    function next() {\n                        for(; o = n.pop();)try {\n                            if (!o.a && 1 === s) return s = 0, n.push(o), Promise.resolve().then(next);\n                            if (o.d) {\n                                var r$1 = o.d.call(o.v);\n                                if (o.a) return s |= 2, Promise.resolve(r$1).then(next, err);\n                            } else s |= 1;\n                        } catch (r$2) {\n                            return err(r$2);\n                        }\n                        if (1 === s) return t !== e ? Promise.reject(t) : Promise.resolve();\n                        if (t !== e) throw t;\n                    }\n                    function err(n$1) {\n                        return t = t !== e ? new r(n$1, t) : n$1, next();\n                    }\n                    return next();\n                }\n            };\n        }\n        module.exports = _usingCtx, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/OverloadYield.js\nvar require_OverloadYield = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/OverloadYield.js\" (exports, module) {\n        function _OverloadYield(e, d) {\n            this.v = e, this.k = d;\n        }\n        module.exports = _OverloadYield, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/awaitAsyncGenerator.js\nvar require_awaitAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/awaitAsyncGenerator.js\" (exports, module) {\n        var OverloadYield$2 = require_OverloadYield();\n        function _awaitAsyncGenerator$5(e) {\n            return new OverloadYield$2(e, 0);\n        }\n        module.exports = _awaitAsyncGenerator$5, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/wrapAsyncGenerator.js\nvar require_wrapAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/wrapAsyncGenerator.js\" (exports, module) {\n        var OverloadYield$1 = require_OverloadYield();\n        function _wrapAsyncGenerator$6(e) {\n            return function() {\n                return new AsyncGenerator(e.apply(this, arguments));\n            };\n        }\n        function AsyncGenerator(e) {\n            var r, t;\n            function resume(r$1, t$1) {\n                try {\n                    var n = e[r$1](t$1), o = n.value, u = o instanceof OverloadYield$1;\n                    Promise.resolve(u ? o.v : o).then(function(t$2) {\n                        if (u) {\n                            var i = \"return\" === r$1 ? \"return\" : \"next\";\n                            if (!o.k || t$2.done) return resume(i, t$2);\n                            t$2 = e[i](t$2).value;\n                        }\n                        settle(n.done ? \"return\" : \"normal\", t$2);\n                    }, function(e$1) {\n                        resume(\"throw\", e$1);\n                    });\n                } catch (e$1) {\n                    settle(\"throw\", e$1);\n                }\n            }\n            function settle(e$1, n) {\n                switch(e$1){\n                    case \"return\":\n                        r.resolve({\n                            value: n,\n                            done: !0\n                        });\n                        break;\n                    case \"throw\":\n                        r.reject(n);\n                        break;\n                    default:\n                        r.resolve({\n                            value: n,\n                            done: !1\n                        });\n                }\n                (r = r.next) ? resume(r.key, r.arg) : t = null;\n            }\n            this._invoke = function(e$1, n) {\n                return new Promise(function(o, u) {\n                    var i = {\n                        key: e$1,\n                        arg: n,\n                        resolve: o,\n                        reject: u,\n                        next: null\n                    };\n                    t ? t = t.next = i : (r = t = i, resume(e$1, n));\n                });\n            }, \"function\" != typeof e[\"return\"] && (this[\"return\"] = void 0);\n        }\n        AsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function() {\n            return this;\n        }, AsyncGenerator.prototype.next = function(e) {\n            return this._invoke(\"next\", e);\n        }, AsyncGenerator.prototype[\"throw\"] = function(e) {\n            return this._invoke(\"throw\", e);\n        }, AsyncGenerator.prototype[\"return\"] = function(e) {\n            return this._invoke(\"return\", e);\n        };\n        module.exports = _wrapAsyncGenerator$6, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/asyncIterable.ts\nvar import_usingCtx$4 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_awaitAsyncGenerator$4 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$5 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nfunction iteratorResource(iterable) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    if (iterator[Symbol.asyncDispose]) return iterator;\n    return makeAsyncResource(iterator, async ()=>{\n        var _iterator$return;\n        await ((_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n    });\n}\n/**\n* Derives a new {@link AsyncGenerator} based on {@link iterable}, that automatically aborts after the specified duration.\n*/ function withMaxDuration(_x, _x2) {\n    return _withMaxDuration.apply(this, arguments);\n}\nfunction _withMaxDuration() {\n    _withMaxDuration = (0, import_wrapAsyncGenerator$5.default)(function*(iterable, opts) {\n        try {\n            var _usingCtx$1 = (0, import_usingCtx$4.default)();\n            const iterator = _usingCtx$1.a(iteratorResource(iterable));\n            const timer = _usingCtx$1.u(timerResource(opts.maxDurationMs));\n            const timerPromise = timer.start();\n            let result;\n            while(true){\n                result = yield (0, import_awaitAsyncGenerator$4.default)(Unpromise.race([\n                    iterator.next(),\n                    timerPromise\n                ]));\n                if (result === disposablePromiseTimerResult) throwAbortError();\n                if (result.done) return result;\n                yield result.value;\n                result = null;\n            }\n        } catch (_) {\n            _usingCtx$1.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator$4.default)(_usingCtx$1.d());\n        }\n    });\n    return _withMaxDuration.apply(this, arguments);\n}\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields its first\n* {@link count} values. Then, a grace period of {@link gracePeriodMs} is started in which further\n* values may still come through. After this period, the generator aborts.\n*/ function takeWithGrace(_x3, _x4) {\n    return _takeWithGrace.apply(this, arguments);\n}\nfunction _takeWithGrace() {\n    _takeWithGrace = (0, import_wrapAsyncGenerator$5.default)(function*(iterable, opts) {\n        try {\n            var _usingCtx3 = (0, import_usingCtx$4.default)();\n            const iterator = _usingCtx3.a(iteratorResource(iterable));\n            let result;\n            const timer = _usingCtx3.u(timerResource(opts.gracePeriodMs));\n            let count = opts.count;\n            let timerPromise = new Promise(()=>{});\n            while(true){\n                result = yield (0, import_awaitAsyncGenerator$4.default)(Unpromise.race([\n                    iterator.next(),\n                    timerPromise\n                ]));\n                if (result === disposablePromiseTimerResult) throwAbortError();\n                if (result.done) return result.value;\n                yield result.value;\n                if (--count === 0) timerPromise = timer.start();\n                result = null;\n            }\n        } catch (_) {\n            _usingCtx3.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator$4.default)(_usingCtx3.d());\n        }\n    });\n    return _takeWithGrace.apply(this, arguments);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/createDeferred.ts\nfunction createDeferred() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/mergeAsyncIterables.ts\nvar import_usingCtx$3 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_awaitAsyncGenerator$3 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$4 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nfunction createManagedIterator(iterable, onResult) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    let state = \"idle\";\n    function cleanup() {\n        state = \"done\";\n        onResult = ()=>{};\n    }\n    function pull() {\n        if (state !== \"idle\") return;\n        state = \"pending\";\n        const next = iterator.next();\n        next.then((result)=>{\n            if (result.done) {\n                state = \"done\";\n                onResult({\n                    status: \"return\",\n                    value: result.value\n                });\n                cleanup();\n                return;\n            }\n            state = \"idle\";\n            onResult({\n                status: \"yield\",\n                value: result.value\n            });\n        }).catch((cause)=>{\n            onResult({\n                status: \"error\",\n                error: cause\n            });\n            cleanup();\n        });\n    }\n    return {\n        pull,\n        destroy: async ()=>{\n            var _iterator$return;\n            cleanup();\n            await ((_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n        }\n    };\n}\n/**\n* Creates a new async iterable that merges multiple async iterables into a single stream.\n* Values from the input iterables are yielded in the order they resolve, similar to Promise.race().\n*\n* New iterables can be added dynamically using the returned {@link MergedAsyncIterables.add} method, even after iteration has started.\n*\n* If any of the input iterables throws an error, that error will be propagated through the merged stream.\n* Other iterables will not continue to be processed.\n*\n* @template TYield The type of values yielded by the input iterables\n*/ function mergeAsyncIterables() {\n    let state = \"idle\";\n    let flushSignal = createDeferred();\n    /**\n\t* used while {@link state} is `idle`\n\t*/ const iterables = [];\n    /**\n\t* used while {@link state} is `pending`\n\t*/ const iterators = /* @__PURE__ */ new Set();\n    const buffer = [];\n    function initIterable(iterable) {\n        if (state !== \"pending\") return;\n        const iterator = createManagedIterator(iterable, (result)=>{\n            if (state !== \"pending\") return;\n            switch(result.status){\n                case \"yield\":\n                    buffer.push([\n                        iterator,\n                        result\n                    ]);\n                    break;\n                case \"return\":\n                    iterators.delete(iterator);\n                    break;\n                case \"error\":\n                    buffer.push([\n                        iterator,\n                        result\n                    ]);\n                    iterators.delete(iterator);\n                    break;\n            }\n            flushSignal.resolve();\n        });\n        iterators.add(iterator);\n        iterator.pull();\n    }\n    return {\n        add (iterable) {\n            switch(state){\n                case \"idle\":\n                    iterables.push(iterable);\n                    break;\n                case \"pending\":\n                    initIterable(iterable);\n                    break;\n                case \"done\":\n                    break;\n            }\n        },\n        [Symbol.asyncIterator] () {\n            return (0, import_wrapAsyncGenerator$4.default)(function*() {\n                try {\n                    var _usingCtx$1 = (0, import_usingCtx$3.default)();\n                    if (state !== \"idle\") throw new Error(\"Cannot iterate twice\");\n                    state = \"pending\";\n                    const _finally = _usingCtx$1.a(makeAsyncResource({}, async ()=>{\n                        state = \"done\";\n                        const errors = [];\n                        await Promise.all(Array.from(iterators.values()).map(async (it)=>{\n                            try {\n                                await it.destroy();\n                            } catch (cause) {\n                                errors.push(cause);\n                            }\n                        }));\n                        buffer.length = 0;\n                        iterators.clear();\n                        flushSignal.resolve();\n                        if (errors.length > 0) throw new AggregateError(errors);\n                    }));\n                    while(iterables.length > 0)initIterable(iterables.shift());\n                    while(iterators.size > 0){\n                        yield (0, import_awaitAsyncGenerator$3.default)(flushSignal.promise);\n                        while(buffer.length > 0){\n                            const [iterator, result] = buffer.shift();\n                            switch(result.status){\n                                case \"yield\":\n                                    yield result.value;\n                                    iterator.pull();\n                                    break;\n                                case \"error\":\n                                    throw result.error;\n                            }\n                        }\n                        flushSignal = createDeferred();\n                    }\n                } catch (_) {\n                    _usingCtx$1.e = _;\n                } finally{\n                    yield (0, import_awaitAsyncGenerator$3.default)(_usingCtx$1.d());\n                }\n            })();\n        }\n    };\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/readableStreamFrom.ts\n/**\n* Creates a ReadableStream from an AsyncIterable.\n*\n* @param iterable - The source AsyncIterable to stream from\n* @returns A ReadableStream that yields values from the AsyncIterable\n*/ function readableStreamFrom(iterable) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async cancel () {\n            var _iterator$return;\n            await ((_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n        },\n        async pull (controller) {\n            const result = await iterator.next();\n            if (result.done) {\n                controller.close();\n                return;\n            }\n            controller.enqueue(result.value);\n        }\n    });\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/withPing.ts\nvar import_usingCtx$2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_awaitAsyncGenerator$2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$3 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nconst PING_SYM = Symbol(\"ping\");\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields {@link PING_SYM}\n* whenever no value has been yielded for {@link pingIntervalMs}.\n*/ function withPing(_x, _x2) {\n    return _withPing.apply(this, arguments);\n}\nfunction _withPing() {\n    _withPing = (0, import_wrapAsyncGenerator$3.default)(function*(iterable, pingIntervalMs) {\n        try {\n            var _usingCtx$1 = (0, import_usingCtx$2.default)();\n            const iterator = _usingCtx$1.a(iteratorResource(iterable));\n            let result;\n            let nextPromise = iterator.next();\n            while(true)try {\n                var _usingCtx3 = (0, import_usingCtx$2.default)();\n                const pingPromise = _usingCtx3.u(timerResource(pingIntervalMs));\n                result = yield (0, import_awaitAsyncGenerator$2.default)(Unpromise.race([\n                    nextPromise,\n                    pingPromise.start()\n                ]));\n                if (result === disposablePromiseTimerResult) {\n                    yield PING_SYM;\n                    continue;\n                }\n                if (result.done) return result.value;\n                nextPromise = iterator.next();\n                yield result.value;\n                result = null;\n            } catch (_) {\n                _usingCtx3.e = _;\n            } finally{\n                _usingCtx3.d();\n            }\n        } catch (_) {\n            _usingCtx$1.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator$2.default)(_usingCtx$1.d());\n        }\n    });\n    return _withPing.apply(this, arguments);\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\nvar require_asyncIterator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\" (exports, module) {\n        function _asyncIterator$2(r) {\n            var n, t, o, e = 2;\n            for(\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;){\n                if (t && null != (n = r[t])) return n.call(r);\n                if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));\n                t = \"@@asyncIterator\", o = \"@@iterator\";\n            }\n            throw new TypeError(\"Object is not async iterable\");\n        }\n        function AsyncFromSyncIterator(r) {\n            function AsyncFromSyncIteratorContinuation(r$1) {\n                if (Object(r$1) !== r$1) return Promise.reject(new TypeError(r$1 + \" is not an object.\"));\n                var n = r$1.done;\n                return Promise.resolve(r$1.value).then(function(r$2) {\n                    return {\n                        value: r$2,\n                        done: n\n                    };\n                });\n            }\n            return AsyncFromSyncIterator = function AsyncFromSyncIterator$1(r$1) {\n                this.s = r$1, this.n = r$1.next;\n            }, AsyncFromSyncIterator.prototype = {\n                s: null,\n                n: null,\n                next: function next() {\n                    return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n                },\n                \"return\": function _return(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.resolve({\n                        value: r$1,\n                        done: !0\n                    }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                },\n                \"throw\": function _throw(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.reject(r$1) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                }\n            }, new AsyncFromSyncIterator(r);\n        }\n        module.exports = _asyncIterator$2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/stream/jsonl.ts\nvar import_awaitAsyncGenerator$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nvar import_usingCtx$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_asyncIterator$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_asyncIterator(), 1);\nfunction isPlainObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\nconst CHUNK_VALUE_TYPE_PROMISE = 0;\nconst CHUNK_VALUE_TYPE_ASYNC_ITERABLE = 1;\nconst PROMISE_STATUS_FULFILLED = 0;\nconst PROMISE_STATUS_REJECTED = 1;\nconst ASYNC_ITERABLE_STATUS_RETURN = 0;\nconst ASYNC_ITERABLE_STATUS_YIELD = 1;\nconst ASYNC_ITERABLE_STATUS_ERROR = 2;\nfunction isPromise(value) {\n    return ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) || (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value)) && typeof (value === null || value === void 0 ? void 0 : value[\"then\"]) === \"function\" && typeof (value === null || value === void 0 ? void 0 : value[\"catch\"]) === \"function\";\n}\nvar MaxDepthError = class extends Error {\n    constructor(path){\n        super(\"Max depth reached at path: \" + path.join(\".\"));\n        this.path = path;\n    }\n};\nfunction createBatchStreamProducer(_x3) {\n    return _createBatchStreamProducer.apply(this, arguments);\n}\nfunction _createBatchStreamProducer() {\n    _createBatchStreamProducer = (0, import_wrapAsyncGenerator$2.default)(function*(opts) {\n        const { data } = opts;\n        let counter = 0;\n        const placeholder = 0;\n        const mergedIterables = mergeAsyncIterables();\n        function registerAsync(callback) {\n            const idx = counter++;\n            const iterable$1 = callback(idx);\n            mergedIterables.add(iterable$1);\n            return idx;\n        }\n        function encodePromise(promise, path) {\n            return registerAsync(/* @__PURE__ */ function() {\n                var _ref = (0, import_wrapAsyncGenerator$2.default)(function*(idx) {\n                    const error = checkMaxDepth(path);\n                    if (error) {\n                        promise.catch((cause)=>{\n                            var _opts$onError;\n                            (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, {\n                                error: cause,\n                                path\n                            });\n                        });\n                        promise = Promise.reject(error);\n                    }\n                    try {\n                        const next = yield (0, import_awaitAsyncGenerator$1.default)(promise);\n                        yield [\n                            idx,\n                            PROMISE_STATUS_FULFILLED,\n                            encode(next, path)\n                        ];\n                    } catch (cause) {\n                        var _opts$onError2, _opts$formatError;\n                        (_opts$onError2 = opts.onError) === null || _opts$onError2 === void 0 || _opts$onError2.call(opts, {\n                            error: cause,\n                            path\n                        });\n                        yield [\n                            idx,\n                            PROMISE_STATUS_REJECTED,\n                            (_opts$formatError = opts.formatError) === null || _opts$formatError === void 0 ? void 0 : _opts$formatError.call(opts, {\n                                error: cause,\n                                path\n                            })\n                        ];\n                    }\n                });\n                return function(_x) {\n                    return _ref.apply(this, arguments);\n                };\n            }());\n        }\n        function encodeAsyncIterable(iterable$1, path) {\n            return registerAsync(/* @__PURE__ */ function() {\n                var _ref2 = (0, import_wrapAsyncGenerator$2.default)(function*(idx) {\n                    try {\n                        var _usingCtx$1 = (0, import_usingCtx$1.default)();\n                        const error = checkMaxDepth(path);\n                        if (error) throw error;\n                        const iterator = _usingCtx$1.a(iteratorResource(iterable$1));\n                        try {\n                            while(true){\n                                const next = yield (0, import_awaitAsyncGenerator$1.default)(iterator.next());\n                                if (next.done) {\n                                    yield [\n                                        idx,\n                                        ASYNC_ITERABLE_STATUS_RETURN,\n                                        encode(next.value, path)\n                                    ];\n                                    break;\n                                }\n                                yield [\n                                    idx,\n                                    ASYNC_ITERABLE_STATUS_YIELD,\n                                    encode(next.value, path)\n                                ];\n                            }\n                        } catch (cause) {\n                            var _opts$onError3, _opts$formatError2;\n                            (_opts$onError3 = opts.onError) === null || _opts$onError3 === void 0 || _opts$onError3.call(opts, {\n                                error: cause,\n                                path\n                            });\n                            yield [\n                                idx,\n                                ASYNC_ITERABLE_STATUS_ERROR,\n                                (_opts$formatError2 = opts.formatError) === null || _opts$formatError2 === void 0 ? void 0 : _opts$formatError2.call(opts, {\n                                    error: cause,\n                                    path\n                                })\n                            ];\n                        }\n                    } catch (_) {\n                        _usingCtx$1.e = _;\n                    } finally{\n                        yield (0, import_awaitAsyncGenerator$1.default)(_usingCtx$1.d());\n                    }\n                });\n                return function(_x2) {\n                    return _ref2.apply(this, arguments);\n                };\n            }());\n        }\n        function checkMaxDepth(path) {\n            if (opts.maxDepth && path.length > opts.maxDepth) return new MaxDepthError(path);\n            return null;\n        }\n        function encodeAsync(value, path) {\n            if (isPromise(value)) return [\n                CHUNK_VALUE_TYPE_PROMISE,\n                encodePromise(value, path)\n            ];\n            if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(value)) {\n                if (opts.maxDepth && path.length >= opts.maxDepth) throw new Error(\"Max depth reached\");\n                return [\n                    CHUNK_VALUE_TYPE_ASYNC_ITERABLE,\n                    encodeAsyncIterable(value, path)\n                ];\n            }\n            return null;\n        }\n        function encode(value, path) {\n            if (value === void 0) return [\n                []\n            ];\n            const reg = encodeAsync(value, path);\n            if (reg) return [\n                [\n                    placeholder\n                ],\n                [\n                    null,\n                    ...reg\n                ]\n            ];\n            if (!isPlainObject(value)) return [\n                [\n                    value\n                ]\n            ];\n            const newObj = {};\n            const asyncValues = [];\n            for (const [key, item] of Object.entries(value)){\n                const transformed = encodeAsync(item, [\n                    ...path,\n                    key\n                ]);\n                if (!transformed) {\n                    newObj[key] = item;\n                    continue;\n                }\n                newObj[key] = placeholder;\n                asyncValues.push([\n                    key,\n                    ...transformed\n                ]);\n            }\n            return [\n                [\n                    newObj\n                ],\n                ...asyncValues\n            ];\n        }\n        const newHead = {};\n        for (const [key, item] of Object.entries(data))newHead[key] = encode(item, [\n            key\n        ]);\n        yield newHead;\n        let iterable = mergedIterables;\n        if (opts.pingMs) iterable = withPing(mergedIterables, opts.pingMs);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n            for(var _iterator = (0, import_asyncIterator$1.default)(iterable), _step; _iteratorAbruptCompletion = !(_step = yield (0, import_awaitAsyncGenerator$1.default)(_iterator.next())).done; _iteratorAbruptCompletion = false){\n                const value = _step.value;\n                yield value;\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (_iteratorAbruptCompletion && _iterator.return != null) yield (0, import_awaitAsyncGenerator$1.default)(_iterator.return());\n            } finally{\n                if (_didIteratorError) throw _iteratorError;\n            }\n        }\n    });\n    return _createBatchStreamProducer.apply(this, arguments);\n}\n/**\n* JSON Lines stream producer\n* @see https://jsonlines.org/\n*/ function jsonlStreamProducer(opts) {\n    let stream = readableStreamFrom(createBatchStreamProducer(opts));\n    const { serialize } = opts;\n    if (serialize) stream = stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (chunk === PING_SYM) controller.enqueue(PING_SYM);\n            else controller.enqueue(serialize(chunk));\n        }\n    }));\n    return stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (chunk === PING_SYM) controller.enqueue(\" \");\n            else controller.enqueue(JSON.stringify(chunk) + \"\\n\");\n        }\n    })).pipeThrough(new TextEncoderStream());\n}\nvar AsyncError = class extends Error {\n    constructor(data){\n        super(\"Received error from server\");\n        this.data = data;\n    }\n};\nconst nodeJsStreamToReaderEsque = (source)=>{\n    return {\n        getReader () {\n            const stream = new ReadableStream({\n                start (controller) {\n                    source.on(\"data\", (chunk)=>{\n                        controller.enqueue(chunk);\n                    });\n                    source.on(\"end\", ()=>{\n                        controller.close();\n                    });\n                    source.on(\"error\", (error)=>{\n                        controller.error(error);\n                    });\n                }\n            });\n            return stream.getReader();\n        }\n    };\n};\nfunction createLineAccumulator(from) {\n    const reader = \"getReader\" in from ? from.getReader() : nodeJsStreamToReaderEsque(from).getReader();\n    let lineAggregate = \"\";\n    return new ReadableStream({\n        async pull (controller) {\n            const { done, value } = await reader.read();\n            if (done) controller.close();\n            else controller.enqueue(value);\n        },\n        cancel () {\n            return reader.cancel();\n        }\n    }).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            var _parts$pop;\n            lineAggregate += chunk;\n            const parts = lineAggregate.split(\"\\n\");\n            lineAggregate = (_parts$pop = parts.pop()) !== null && _parts$pop !== void 0 ? _parts$pop : \"\";\n            for (const part of parts)controller.enqueue(part);\n        }\n    }));\n}\nfunction createConsumerStream(from) {\n    const stream = createLineAccumulator(from);\n    let sentHead = false;\n    return stream.pipeThrough(new TransformStream({\n        transform (line, controller) {\n            if (!sentHead) {\n                const head = JSON.parse(line);\n                controller.enqueue(head);\n                sentHead = true;\n            } else {\n                const chunk = JSON.parse(line);\n                controller.enqueue(chunk);\n            }\n        }\n    }));\n}\n/**\n* Creates a handler for managing stream controllers and their lifecycle\n*/ function createStreamsManager(abortController) {\n    const controllerMap = /* @__PURE__ */ new Map();\n    /**\n\t* Checks if there are no pending controllers or deferred promises\n\t*/ function isEmpty() {\n        return Array.from(controllerMap.values()).every((c)=>c.closed);\n    }\n    /**\n\t* Creates a stream controller\n\t*/ function createStreamController() {\n        let originalController;\n        const stream = new ReadableStream({\n            start (controller) {\n                originalController = controller;\n            }\n        });\n        const streamController = {\n            enqueue: (v)=>originalController.enqueue(v),\n            close: ()=>{\n                originalController.close();\n                clear();\n                if (isEmpty()) abortController.abort();\n            },\n            closed: false,\n            getReaderResource: ()=>{\n                const reader = stream.getReader();\n                return makeResource(reader, ()=>{\n                    reader.releaseLock();\n                    streamController.close();\n                });\n            },\n            error: (reason)=>{\n                originalController.error(reason);\n                clear();\n            }\n        };\n        function clear() {\n            Object.assign(streamController, {\n                closed: true,\n                close: ()=>{},\n                enqueue: ()=>{},\n                getReaderResource: null,\n                error: ()=>{}\n            });\n        }\n        return streamController;\n    }\n    /**\n\t* Gets or creates a stream controller\n\t*/ function getOrCreate(chunkId) {\n        let c = controllerMap.get(chunkId);\n        if (!c) {\n            c = createStreamController();\n            controllerMap.set(chunkId, c);\n        }\n        return c;\n    }\n    /**\n\t* Cancels all pending controllers and rejects deferred promises\n\t*/ function cancelAll(reason) {\n        for (const controller of controllerMap.values())controller.error(reason);\n    }\n    return {\n        getOrCreate,\n        isEmpty,\n        cancelAll\n    };\n}\n/**\n* JSON Lines stream consumer\n* @see https://jsonlines.org/\n*/ async function jsonlStreamConsumer(opts) {\n    const { deserialize = (v)=>v } = opts;\n    let source = createConsumerStream(opts.from);\n    if (deserialize) source = source.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(deserialize(chunk));\n        }\n    }));\n    let headDeferred = createDeferred();\n    const streamManager = createStreamsManager(opts.abortController);\n    function decodeChunkDefinition(value) {\n        const [_path, type, chunkId] = value;\n        const controller = streamManager.getOrCreate(chunkId);\n        switch(type){\n            case CHUNK_VALUE_TYPE_PROMISE:\n                return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async ()=>{\n                    try {\n                        var _usingCtx3 = (0, import_usingCtx$1.default)();\n                        const reader = _usingCtx3.u(controller.getReaderResource());\n                        const { value: value$1 } = await reader.read();\n                        const [_chunkId, status, data] = value$1;\n                        switch(status){\n                            case PROMISE_STATUS_FULFILLED:\n                                return decode(data);\n                            case PROMISE_STATUS_REJECTED:\n                                var _opts$formatError3, _opts$formatError4;\n                                throw (_opts$formatError3 = (_opts$formatError4 = opts.formatError) === null || _opts$formatError4 === void 0 ? void 0 : _opts$formatError4.call(opts, {\n                                    error: data\n                                })) !== null && _opts$formatError3 !== void 0 ? _opts$formatError3 : new AsyncError(data);\n                        }\n                    } catch (_) {\n                        _usingCtx3.e = _;\n                    } finally{\n                        _usingCtx3.d();\n                    }\n                });\n            case CHUNK_VALUE_TYPE_ASYNC_ITERABLE:\n                return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)((0, import_wrapAsyncGenerator$2.default)(function*() {\n                    try {\n                        var _usingCtx4 = (0, import_usingCtx$1.default)();\n                        const reader = _usingCtx4.u(controller.getReaderResource());\n                        while(true){\n                            const { value: value$1 } = yield (0, import_awaitAsyncGenerator$1.default)(reader.read());\n                            const [_chunkId, status, data] = value$1;\n                            switch(status){\n                                case ASYNC_ITERABLE_STATUS_YIELD:\n                                    yield decode(data);\n                                    break;\n                                case ASYNC_ITERABLE_STATUS_RETURN:\n                                    return decode(data);\n                                case ASYNC_ITERABLE_STATUS_ERROR:\n                                    var _opts$formatError5, _opts$formatError6;\n                                    throw (_opts$formatError5 = (_opts$formatError6 = opts.formatError) === null || _opts$formatError6 === void 0 ? void 0 : _opts$formatError6.call(opts, {\n                                        error: data\n                                    })) !== null && _opts$formatError5 !== void 0 ? _opts$formatError5 : new AsyncError(data);\n                            }\n                        }\n                    } catch (_) {\n                        _usingCtx4.e = _;\n                    } finally{\n                        _usingCtx4.d();\n                    }\n                }));\n        }\n    }\n    function decode(value) {\n        const [[data], ...asyncProps] = value;\n        for (const value$1 of asyncProps){\n            const [key] = value$1;\n            const decoded = decodeChunkDefinition(value$1);\n            if (key === null) return decoded;\n            data[key] = decoded;\n        }\n        return data;\n    }\n    const closeOrAbort = (reason)=>{\n        headDeferred === null || headDeferred === void 0 || headDeferred.reject(reason);\n        streamManager.cancelAll(reason);\n    };\n    source.pipeTo(new WritableStream({\n        write (chunkOrHead) {\n            if (headDeferred) {\n                const head = chunkOrHead;\n                for (const [key, value] of Object.entries(chunkOrHead)){\n                    const parsed = decode(value);\n                    head[key] = parsed;\n                }\n                headDeferred.resolve(head);\n                headDeferred = null;\n                return;\n            }\n            const chunk = chunkOrHead;\n            const [idx] = chunk;\n            const controller = streamManager.getOrCreate(idx);\n            controller.enqueue(chunk);\n        },\n        close: ()=>closeOrAbort(new Error(\"Stream closed\")),\n        abort: closeOrAbort\n    }), {\n        signal: opts.abortController.signal\n    }).catch((error)=>{\n        var _opts$onError4;\n        (_opts$onError4 = opts.onError) === null || _opts$onError4 === void 0 || _opts$onError4.call(opts, {\n            error\n        });\n        closeOrAbort(error);\n    });\n    return [\n        await headDeferred.promise,\n        streamManager\n    ];\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncGeneratorDelegate.js\nvar require_asyncGeneratorDelegate = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncGeneratorDelegate.js\" (exports, module) {\n        var OverloadYield = require_OverloadYield();\n        function _asyncGeneratorDelegate$1(t) {\n            var e = {}, n = !1;\n            function pump(e$1, r) {\n                return n = !0, r = new Promise(function(n$1) {\n                    n$1(t[e$1](r));\n                }), {\n                    done: !1,\n                    value: new OverloadYield(r, 1)\n                };\n            }\n            return e[\"undefined\" != typeof Symbol && Symbol.iterator || \"@@iterator\"] = function() {\n                return this;\n            }, e.next = function(t$1) {\n                return n ? (n = !1, t$1) : pump(\"next\", t$1);\n            }, \"function\" == typeof t[\"throw\"] && (e[\"throw\"] = function(t$1) {\n                if (n) throw n = !1, t$1;\n                return pump(\"throw\", t$1);\n            }), \"function\" == typeof t[\"return\"] && (e[\"return\"] = function(t$1) {\n                return n ? (n = !1, t$1) : pump(\"return\", t$1);\n            }), e;\n        }\n        module.exports = _asyncGeneratorDelegate$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/stream/sse.ts\nvar import_asyncIterator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_asyncIterator(), 1);\nvar import_awaitAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nvar import_asyncGeneratorDelegate = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_asyncGeneratorDelegate(), 1);\nvar import_usingCtx = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nconst PING_EVENT = \"ping\";\nconst SERIALIZED_ERROR_EVENT = \"serialized-error\";\nconst CONNECTED_EVENT = \"connected\";\nconst RETURN_EVENT = \"return\";\n/**\n*\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/ function sseStreamProducer(opts) {\n    var _opts$ping$enabled, _opts$ping, _opts$ping$intervalMs, _opts$ping2, _opts$client;\n    const { serialize = _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.identity } = opts;\n    const ping = {\n        enabled: (_opts$ping$enabled = (_opts$ping = opts.ping) === null || _opts$ping === void 0 ? void 0 : _opts$ping.enabled) !== null && _opts$ping$enabled !== void 0 ? _opts$ping$enabled : false,\n        intervalMs: (_opts$ping$intervalMs = (_opts$ping2 = opts.ping) === null || _opts$ping2 === void 0 ? void 0 : _opts$ping2.intervalMs) !== null && _opts$ping$intervalMs !== void 0 ? _opts$ping$intervalMs : 1e3\n    };\n    const client = (_opts$client = opts.client) !== null && _opts$client !== void 0 ? _opts$client : {};\n    if (ping.enabled && client.reconnectAfterInactivityMs && ping.intervalMs > client.reconnectAfterInactivityMs) throw new Error(`Ping interval must be less than client reconnect interval to prevent unnecessary reconnection - ping.intervalMs: ${ping.intervalMs} client.reconnectAfterInactivityMs: ${client.reconnectAfterInactivityMs}`);\n    function generator() {\n        return _generator.apply(this, arguments);\n    }\n    function _generator() {\n        _generator = (0, import_wrapAsyncGenerator$1.default)(function*() {\n            yield {\n                event: CONNECTED_EVENT,\n                data: JSON.stringify(client)\n            };\n            let iterable = opts.data;\n            if (opts.emitAndEndImmediately) iterable = takeWithGrace(iterable, {\n                count: 1,\n                gracePeriodMs: 1\n            });\n            if (opts.maxDurationMs && opts.maxDurationMs > 0 && opts.maxDurationMs !== Infinity) iterable = withMaxDuration(iterable, {\n                maxDurationMs: opts.maxDurationMs\n            });\n            if (ping.enabled && ping.intervalMs !== Infinity && ping.intervalMs > 0) iterable = withPing(iterable, ping.intervalMs);\n            let value;\n            let chunk;\n            var _iteratorAbruptCompletion = false;\n            var _didIteratorError = false;\n            var _iteratorError;\n            try {\n                for(var _iterator = (0, import_asyncIterator.default)(iterable), _step; _iteratorAbruptCompletion = !(_step = yield (0, import_awaitAsyncGenerator.default)(_iterator.next())).done; _iteratorAbruptCompletion = false){\n                    value = _step.value;\n                    {\n                        if (value === PING_SYM) {\n                            yield {\n                                event: PING_EVENT,\n                                data: \"\"\n                            };\n                            continue;\n                        }\n                        chunk = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.isTrackedEnvelope)(value) ? {\n                            id: value[0],\n                            data: value[1]\n                        } : {\n                            data: value\n                        };\n                        chunk.data = JSON.stringify(serialize(chunk.data));\n                        yield chunk;\n                        value = null;\n                        chunk = null;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (_iteratorAbruptCompletion && _iterator.return != null) yield (0, import_awaitAsyncGenerator.default)(_iterator.return());\n                } finally{\n                    if (_didIteratorError) throw _iteratorError;\n                }\n            }\n        });\n        return _generator.apply(this, arguments);\n    }\n    function generatorWithErrorHandling() {\n        return _generatorWithErrorHandling.apply(this, arguments);\n    }\n    function _generatorWithErrorHandling() {\n        _generatorWithErrorHandling = (0, import_wrapAsyncGenerator$1.default)(function*() {\n            try {\n                yield* (0, import_asyncGeneratorDelegate.default)((0, import_asyncIterator.default)(generator()));\n                yield {\n                    event: RETURN_EVENT,\n                    data: \"\"\n                };\n            } catch (cause) {\n                var _opts$formatError, _opts$formatError2;\n                if (isAbortError(cause)) return;\n                const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n                const data = (_opts$formatError = (_opts$formatError2 = opts.formatError) === null || _opts$formatError2 === void 0 ? void 0 : _opts$formatError2.call(opts, {\n                    error\n                })) !== null && _opts$formatError !== void 0 ? _opts$formatError : null;\n                yield {\n                    event: SERIALIZED_ERROR_EVENT,\n                    data: JSON.stringify(serialize(data))\n                };\n            }\n        });\n        return _generatorWithErrorHandling.apply(this, arguments);\n    }\n    const stream = readableStreamFrom(generatorWithErrorHandling());\n    return stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (\"event\" in chunk) controller.enqueue(`event: ${chunk.event}\\n`);\n            if (\"data\" in chunk) controller.enqueue(`data: ${chunk.data}\\n`);\n            if (\"id\" in chunk) controller.enqueue(`id: ${chunk.id}\\n`);\n            if (\"comment\" in chunk) controller.enqueue(`: ${chunk.comment}\\n`);\n            controller.enqueue(\"\\n\\n\");\n        }\n    })).pipeThrough(new TextEncoderStream());\n}\nasync function withTimeout(opts) {\n    try {\n        var _usingCtx$1 = (0, import_usingCtx.default)();\n        const timeoutPromise = _usingCtx$1.u(timerResource(opts.timeoutMs));\n        const res = await Unpromise.race([\n            opts.promise,\n            timeoutPromise.start()\n        ]);\n        if (res === disposablePromiseTimerResult) return await opts.onTimeout();\n        return res;\n    } catch (_) {\n        _usingCtx$1.e = _;\n    } finally{\n        _usingCtx$1.d();\n    }\n}\n/**\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/ function sseStreamConsumer(opts) {\n    const { deserialize = (v)=>v } = opts;\n    let clientOptions = {};\n    const signal = opts.signal;\n    let _es = null;\n    const createStream = ()=>new ReadableStream({\n            async start (controller) {\n                const [url, init] = await Promise.all([\n                    opts.url(),\n                    opts.init()\n                ]);\n                const eventSource = _es = new opts.EventSource(url, init);\n                controller.enqueue({\n                    type: \"connecting\",\n                    eventSource: _es,\n                    event: null\n                });\n                eventSource.addEventListener(CONNECTED_EVENT, (_msg)=>{\n                    const msg = _msg;\n                    const options = JSON.parse(msg.data);\n                    clientOptions = options;\n                    controller.enqueue({\n                        type: \"connected\",\n                        options,\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(SERIALIZED_ERROR_EVENT, (_msg)=>{\n                    const msg = _msg;\n                    controller.enqueue({\n                        type: \"serialized-error\",\n                        error: deserialize(JSON.parse(msg.data)),\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(PING_EVENT, ()=>{\n                    controller.enqueue({\n                        type: \"ping\",\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(RETURN_EVENT, ()=>{\n                    eventSource.close();\n                    controller.close();\n                    _es = null;\n                });\n                eventSource.addEventListener(\"error\", (event)=>{\n                    if (eventSource.readyState === eventSource.CLOSED) controller.error(event);\n                    else controller.enqueue({\n                        type: \"connecting\",\n                        eventSource,\n                        event\n                    });\n                });\n                eventSource.addEventListener(\"message\", (_msg)=>{\n                    const msg = _msg;\n                    const chunk = deserialize(JSON.parse(msg.data));\n                    const def = {\n                        data: chunk\n                    };\n                    if (msg.lastEventId) def.id = msg.lastEventId;\n                    controller.enqueue({\n                        type: \"data\",\n                        data: def,\n                        eventSource\n                    });\n                });\n                const onAbort = ()=>{\n                    try {\n                        eventSource.close();\n                        controller.close();\n                    } catch (_unused) {}\n                };\n                if (signal.aborted) onAbort();\n                else signal.addEventListener(\"abort\", onAbort);\n            },\n            cancel () {\n                _es === null || _es === void 0 || _es.close();\n            }\n        });\n    const getStreamResource = ()=>{\n        let stream = createStream();\n        let reader = stream.getReader();\n        async function dispose() {\n            await reader.cancel();\n            _es = null;\n        }\n        return makeAsyncResource({\n            read () {\n                return reader.read();\n            },\n            async recreate () {\n                await dispose();\n                stream = createStream();\n                reader = stream.getReader();\n            }\n        }, dispose);\n    };\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)((0, import_wrapAsyncGenerator$1.default)(function*() {\n        try {\n            var _usingCtx3 = (0, import_usingCtx.default)();\n            const stream = _usingCtx3.a(getStreamResource());\n            while(true){\n                let promise = stream.read();\n                const timeoutMs = clientOptions.reconnectAfterInactivityMs;\n                if (timeoutMs) promise = withTimeout({\n                    promise,\n                    timeoutMs,\n                    onTimeout: async ()=>{\n                        const res = {\n                            value: {\n                                type: \"timeout\",\n                                ms: timeoutMs,\n                                eventSource: _es\n                            },\n                            done: false\n                        };\n                        await stream.recreate();\n                        return res;\n                    }\n                });\n                const result = yield (0, import_awaitAsyncGenerator.default)(promise);\n                if (result.done) return result.value;\n                yield result.value;\n            }\n        } catch (_) {\n            _usingCtx3.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator.default)(_usingCtx3.d());\n        }\n    }));\n}\nconst sseHeaders = {\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache, no-transform\",\n    \"X-Accel-Buffering\": \"no\",\n    Connection: \"keep-alive\"\n};\n//#endregion\n//#region src/unstable-core-do-not-import/http/resolveResponse.ts\nvar import_wrapAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nvar import_objectSpread2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.require_objectSpread2)(), 1);\nfunction errorToAsyncIterable(err) {\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)((0, import_wrapAsyncGenerator.default)(function*() {\n        throw err;\n    }));\n}\nconst TYPE_ACCEPTED_METHOD_MAP = {\n    mutation: [\n        \"POST\"\n    ],\n    query: [\n        \"GET\"\n    ],\n    subscription: [\n        \"GET\"\n    ]\n};\nconst TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE = {\n    mutation: [\n        \"POST\"\n    ],\n    query: [\n        \"GET\",\n        \"POST\"\n    ],\n    subscription: [\n        \"GET\",\n        \"POST\"\n    ]\n};\nfunction initResponse(initOpts) {\n    var _responseMeta, _info$calls$find$proc, _info$calls$find;\n    const { ctx, info, responseMeta, untransformedJSON, errors = [], headers } = initOpts;\n    let status = untransformedJSON ? (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getHTTPStatusCode)(untransformedJSON) : 200;\n    const eagerGeneration = !untransformedJSON;\n    const data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [\n        untransformedJSON\n    ];\n    const meta = (_responseMeta = responseMeta === null || responseMeta === void 0 ? void 0 : responseMeta({\n        ctx,\n        info,\n        paths: info === null || info === void 0 ? void 0 : info.calls.map((call)=>call.path),\n        data,\n        errors,\n        eagerGeneration,\n        type: (_info$calls$find$proc = info === null || info === void 0 || (_info$calls$find = info.calls.find((call)=>{\n            var _call$procedure;\n            return (_call$procedure = call.procedure) === null || _call$procedure === void 0 ? void 0 : _call$procedure._def.type;\n        })) === null || _info$calls$find === void 0 || (_info$calls$find = _info$calls$find.procedure) === null || _info$calls$find === void 0 ? void 0 : _info$calls$find._def.type) !== null && _info$calls$find$proc !== void 0 ? _info$calls$find$proc : \"unknown\"\n    })) !== null && _responseMeta !== void 0 ? _responseMeta : {};\n    if (meta.headers) {\n        if (meta.headers instanceof Headers) for (const [key, value] of meta.headers.entries())headers.append(key, value);\n        else /**\n\t\t* @deprecated, delete in v12\n\t\t*/ for (const [key, value] of Object.entries(meta.headers))if (Array.isArray(value)) for (const v of value)headers.append(key, v);\n        else if (typeof value === \"string\") headers.set(key, value);\n    }\n    if (meta.status) status = meta.status;\n    return {\n        status\n    };\n}\nfunction caughtErrorToData(cause, errorOpts) {\n    const { router, req, onError } = errorOpts.opts;\n    const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n    onError === null || onError === void 0 || onError({\n        error,\n        path: errorOpts.path,\n        input: errorOpts.input,\n        ctx: errorOpts.ctx,\n        type: errorOpts.type,\n        req\n    });\n    const untransformedJSON = {\n        error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n            config: router._def._config,\n            error,\n            type: errorOpts.type,\n            path: errorOpts.path,\n            input: errorOpts.input,\n            ctx: errorOpts.ctx\n        })\n    };\n    const transformedJSON = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(router._def._config, untransformedJSON);\n    const body = JSON.stringify(transformedJSON);\n    return {\n        error,\n        untransformedJSON,\n        body\n    };\n}\n/**\n* Check if a value is a stream-like object\n* - if it's an async iterable\n* - if it's an object with async iterables or promises\n*/ function isDataStream(v) {\n    if (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(v)) return false;\n    if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(v)) return true;\n    return Object.values(v).some(isPromise) || Object.values(v).some(_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable);\n}\nasync function resolveResponse(opts) {\n    var _ref, _opts$allowBatching, _opts$batching, _opts$allowMethodOver, _config$sse$enabled, _config$sse;\n    const { router, req } = opts;\n    const headers = new Headers([\n        [\n            \"vary\",\n            \"trpc-accept\"\n        ]\n    ]);\n    const config = router._def._config;\n    const url = new URL(req.url);\n    if (req.method === \"HEAD\") return new Response(null, {\n        status: 204\n    });\n    const allowBatching = (_ref = (_opts$allowBatching = opts.allowBatching) !== null && _opts$allowBatching !== void 0 ? _opts$allowBatching : (_opts$batching = opts.batching) === null || _opts$batching === void 0 ? void 0 : _opts$batching.enabled) !== null && _ref !== void 0 ? _ref : true;\n    const allowMethodOverride = ((_opts$allowMethodOver = opts.allowMethodOverride) !== null && _opts$allowMethodOver !== void 0 ? _opts$allowMethodOver : false) && req.method === \"POST\";\n    const infoTuple = await (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async ()=>{\n        try {\n            return [\n                void 0,\n                await getRequestInfo({\n                    req,\n                    path: decodeURIComponent(opts.path),\n                    router,\n                    searchParams: url.searchParams,\n                    headers: opts.req.headers,\n                    url\n                })\n            ];\n        } catch (cause) {\n            return [\n                (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                void 0\n            ];\n        }\n    });\n    const ctxManager = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(()=>{\n        let result = void 0;\n        return {\n            valueOrUndefined: ()=>{\n                if (!result) return void 0;\n                return result[1];\n            },\n            value: ()=>{\n                const [err, ctx] = result;\n                if (err) throw err;\n                return ctx;\n            },\n            create: async (info)=>{\n                if (result) throw new Error(\"This should only be called once - report a bug in tRPC\");\n                try {\n                    const ctx = await opts.createContext({\n                        info\n                    });\n                    result = [\n                        void 0,\n                        ctx\n                    ];\n                } catch (cause) {\n                    result = [\n                        (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                        void 0\n                    ];\n                }\n            }\n        };\n    });\n    const methodMapper = allowMethodOverride ? TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE : TYPE_ACCEPTED_METHOD_MAP;\n    /**\n\t* @deprecated\n\t*/ const isStreamCall = req.headers.get(\"trpc-accept\") === \"application/jsonl\";\n    const experimentalSSE = (_config$sse$enabled = (_config$sse = config.sse) === null || _config$sse === void 0 ? void 0 : _config$sse.enabled) !== null && _config$sse$enabled !== void 0 ? _config$sse$enabled : true;\n    try {\n        const [infoError, info] = infoTuple;\n        if (infoError) throw infoError;\n        if (info.isBatchCall && !allowBatching) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"BAD_REQUEST\",\n            message: `Batching is not enabled on the server`\n        });\n        /* istanbul ignore if -- @preserve */ if (isStreamCall && !info.isBatchCall) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            message: `Streaming requests must be batched (you can do a batch of 1)`,\n            code: \"BAD_REQUEST\"\n        });\n        await ctxManager.create(info);\n        const rpcCalls = info.calls.map(async (call)=>{\n            const proc = call.procedure;\n            try {\n                if (opts.error) throw opts.error;\n                if (!proc) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"NOT_FOUND\",\n                    message: `No procedure found on path \"${call.path}\"`\n                });\n                if (!methodMapper[proc._def.type].includes(req.method)) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"METHOD_NOT_SUPPORTED\",\n                    message: `Unsupported ${req.method}-request to ${proc._def.type} procedure at path \"${call.path}\"`\n                });\n                if (proc._def.type === \"subscription\") {\n                    /* istanbul ignore if -- @preserve */ if (info.isBatchCall) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                        code: \"BAD_REQUEST\",\n                        message: `Cannot batch subscription calls`\n                    });\n                }\n                const data = await proc({\n                    path: call.path,\n                    getRawInput: call.getRawInput,\n                    ctx: ctxManager.value(),\n                    type: proc._def.type,\n                    signal: opts.req.signal\n                });\n                return [\n                    void 0,\n                    {\n                        data\n                    }\n                ];\n            } catch (cause) {\n                var _opts$onError, _call$procedure$_def$, _call$procedure2;\n                const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n                const input = call.result();\n                (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, {\n                    error,\n                    path: call.path,\n                    input,\n                    ctx: ctxManager.valueOrUndefined(),\n                    type: (_call$procedure$_def$ = (_call$procedure2 = call.procedure) === null || _call$procedure2 === void 0 ? void 0 : _call$procedure2._def.type) !== null && _call$procedure$_def$ !== void 0 ? _call$procedure$_def$ : \"unknown\",\n                    req: opts.req\n                });\n                return [\n                    error,\n                    void 0\n                ];\n            }\n        });\n        if (!info.isBatchCall) {\n            const [call] = info.calls;\n            const [error, result] = await rpcCalls[0];\n            switch(info.type){\n                case \"unknown\":\n                case \"mutation\":\n                case \"query\":\n                    {\n                        headers.set(\"content-type\", \"application/json\");\n                        if (isDataStream(result === null || result === void 0 ? void 0 : result.data)) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                            code: \"UNSUPPORTED_MEDIA_TYPE\",\n                            message: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n                        });\n                        const res = error ? {\n                            error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                config,\n                                ctx: ctxManager.valueOrUndefined(),\n                                error,\n                                input: call.result(),\n                                path: call.path,\n                                type: info.type\n                            })\n                        } : {\n                            result: {\n                                data: result.data\n                            }\n                        };\n                        const headResponse$1 = initResponse({\n                            ctx: ctxManager.valueOrUndefined(),\n                            info,\n                            responseMeta: opts.responseMeta,\n                            errors: error ? [\n                                error\n                            ] : [],\n                            headers,\n                            untransformedJSON: [\n                                res\n                            ]\n                        });\n                        return new Response(JSON.stringify((0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, res)), {\n                            status: headResponse$1.status,\n                            headers\n                        });\n                    }\n                case \"subscription\":\n                    {\n                        const iterable = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(()=>{\n                            if (error) return errorToAsyncIterable(error);\n                            if (!experimentalSSE) return errorToAsyncIterable(new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                                code: \"METHOD_NOT_SUPPORTED\",\n                                message: \"Missing experimental flag \\\"sseSubscriptions\\\"\"\n                            }));\n                            if (!(0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) && !(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result.data)) return errorToAsyncIterable(new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                                message: `Subscription ${call.path} did not return an observable or a AsyncGenerator`,\n                                code: \"INTERNAL_SERVER_ERROR\"\n                            }));\n                            const dataAsIterable = (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : result.data;\n                            return dataAsIterable;\n                        });\n                        const stream = sseStreamProducer((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, config.sse), {}, {\n                            data: iterable,\n                            serialize: (v)=>config.transformer.output.serialize(v),\n                            formatError (errorOpts) {\n                                var _call$procedure$_def$2, _call$procedure3, _opts$onError2;\n                                const error$1 = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n                                const input = call === null || call === void 0 ? void 0 : call.result();\n                                const path = call === null || call === void 0 ? void 0 : call.path;\n                                const type = (_call$procedure$_def$2 = call === null || call === void 0 || (_call$procedure3 = call.procedure) === null || _call$procedure3 === void 0 ? void 0 : _call$procedure3._def.type) !== null && _call$procedure$_def$2 !== void 0 ? _call$procedure$_def$2 : \"unknown\";\n                                (_opts$onError2 = opts.onError) === null || _opts$onError2 === void 0 || _opts$onError2.call(opts, {\n                                    error: error$1,\n                                    path,\n                                    input,\n                                    ctx: ctxManager.valueOrUndefined(),\n                                    req: opts.req,\n                                    type\n                                });\n                                const shape = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                    config,\n                                    ctx: ctxManager.valueOrUndefined(),\n                                    error: error$1,\n                                    input,\n                                    path,\n                                    type\n                                });\n                                return shape;\n                            }\n                        }));\n                        for (const [key, value] of Object.entries(sseHeaders))headers.set(key, value);\n                        const headResponse$1 = initResponse({\n                            ctx: ctxManager.valueOrUndefined(),\n                            info,\n                            responseMeta: opts.responseMeta,\n                            errors: [],\n                            headers,\n                            untransformedJSON: null\n                        });\n                        return new Response(stream, {\n                            headers,\n                            status: headResponse$1.status\n                        });\n                    }\n            }\n        }\n        if (info.accept === \"application/jsonl\") {\n            headers.set(\"content-type\", \"application/json\");\n            headers.set(\"transfer-encoding\", \"chunked\");\n            const headResponse$1 = initResponse({\n                ctx: ctxManager.valueOrUndefined(),\n                info,\n                responseMeta: opts.responseMeta,\n                errors: [],\n                headers,\n                untransformedJSON: null\n            });\n            const stream = jsonlStreamProducer((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, config.jsonl), {}, {\n                maxDepth: Infinity,\n                data: rpcCalls.map(async (res)=>{\n                    const [error, result] = await res;\n                    const call = info.calls[0];\n                    if (error) {\n                        var _procedure$_def$type, _procedure;\n                        return {\n                            error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                config,\n                                ctx: ctxManager.valueOrUndefined(),\n                                error,\n                                input: call.result(),\n                                path: call.path,\n                                type: (_procedure$_def$type = (_procedure = call.procedure) === null || _procedure === void 0 ? void 0 : _procedure._def.type) !== null && _procedure$_def$type !== void 0 ? _procedure$_def$type : \"unknown\"\n                            })\n                        };\n                    }\n                    /**\n\t\t\t\t\t* Not very pretty, but we need to wrap nested data in promises\n\t\t\t\t\t* Our stream producer will only resolve top-level async values or async values that are directly nested in another async value\n\t\t\t\t\t*/ const iterable = (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : Promise.resolve(result.data);\n                    return {\n                        result: Promise.resolve({\n                            data: iterable\n                        })\n                    };\n                }),\n                serialize: config.transformer.output.serialize,\n                onError: (cause)=>{\n                    var _opts$onError3, _info$type;\n                    (_opts$onError3 = opts.onError) === null || _opts$onError3 === void 0 || _opts$onError3.call(opts, {\n                        error: (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                        path: void 0,\n                        input: void 0,\n                        ctx: ctxManager.valueOrUndefined(),\n                        req: opts.req,\n                        type: (_info$type = info === null || info === void 0 ? void 0 : info.type) !== null && _info$type !== void 0 ? _info$type : \"unknown\"\n                    });\n                },\n                formatError (errorOpts) {\n                    var _call$procedure$_def$3, _call$procedure4;\n                    const call = info === null || info === void 0 ? void 0 : info.calls[errorOpts.path[0]];\n                    const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n                    const input = call === null || call === void 0 ? void 0 : call.result();\n                    const path = call === null || call === void 0 ? void 0 : call.path;\n                    const type = (_call$procedure$_def$3 = call === null || call === void 0 || (_call$procedure4 = call.procedure) === null || _call$procedure4 === void 0 ? void 0 : _call$procedure4._def.type) !== null && _call$procedure$_def$3 !== void 0 ? _call$procedure$_def$3 : \"unknown\";\n                    const shape = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                        config,\n                        ctx: ctxManager.valueOrUndefined(),\n                        error,\n                        input,\n                        path,\n                        type\n                    });\n                    return shape;\n                }\n            }));\n            return new Response(stream, {\n                headers,\n                status: headResponse$1.status\n            });\n        }\n        /**\n\t\t* Non-streaming response:\n\t\t* - await all responses in parallel, blocking on the slowest one\n\t\t* - create headers with known response body\n\t\t* - return a complete HTTPResponse\n\t\t*/ headers.set(\"content-type\", \"application/json\");\n        const results = (await Promise.all(rpcCalls)).map((res)=>{\n            const [error, result] = res;\n            if (error) return res;\n            if (isDataStream(result.data)) return [\n                new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"UNSUPPORTED_MEDIA_TYPE\",\n                    message: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n                }),\n                void 0\n            ];\n            return res;\n        });\n        const resultAsRPCResponse = results.map(([error, result], index)=>{\n            const call = info.calls[index];\n            if (error) {\n                var _call$procedure$_def$4, _call$procedure5;\n                return {\n                    error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                        config,\n                        ctx: ctxManager.valueOrUndefined(),\n                        error,\n                        input: call.result(),\n                        path: call.path,\n                        type: (_call$procedure$_def$4 = (_call$procedure5 = call.procedure) === null || _call$procedure5 === void 0 ? void 0 : _call$procedure5._def.type) !== null && _call$procedure$_def$4 !== void 0 ? _call$procedure$_def$4 : \"unknown\"\n                    })\n                };\n            }\n            return {\n                result: {\n                    data: result.data\n                }\n            };\n        });\n        const errors = results.map(([error])=>error).filter(Boolean);\n        const headResponse = initResponse({\n            ctx: ctxManager.valueOrUndefined(),\n            info,\n            responseMeta: opts.responseMeta,\n            untransformedJSON: resultAsRPCResponse,\n            errors,\n            headers\n        });\n        return new Response(JSON.stringify((0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, resultAsRPCResponse)), {\n            status: headResponse.status,\n            headers\n        });\n    } catch (cause) {\n        var _info$type2;\n        const [_infoError, info] = infoTuple;\n        const ctx = ctxManager.valueOrUndefined();\n        const { error, untransformedJSON, body } = caughtErrorToData(cause, {\n            opts,\n            ctx: ctxManager.valueOrUndefined(),\n            type: (_info$type2 = info === null || info === void 0 ? void 0 : info.type) !== null && _info$type2 !== void 0 ? _info$type2 : \"unknown\"\n        });\n        const headResponse = initResponse({\n            ctx,\n            info,\n            responseMeta: opts.responseMeta,\n            untransformedJSON,\n            errors: [\n                error\n            ],\n            headers\n        });\n        return new Response(body, {\n            status: headResponse.status,\n            headers\n        });\n    }\n}\n//#endregion\n //# sourceMappingURL=resolveResponse-CzlbRpCI.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* binding */ TRPCError),\n/* harmony export */   callProcedure: () => (/* binding */ callProcedure),\n/* harmony export */   createCallerFactory: () => (/* binding */ createCallerFactory),\n/* harmony export */   createRouterFactory: () => (/* binding */ createRouterFactory),\n/* harmony export */   defaultFormatter: () => (/* binding */ defaultFormatter),\n/* harmony export */   defaultTransformer: () => (/* binding */ defaultTransformer),\n/* harmony export */   getCauseFromUnknown: () => (/* binding */ getCauseFromUnknown),\n/* harmony export */   getDataTransformer: () => (/* binding */ getDataTransformer),\n/* harmony export */   getProcedureAtPath: () => (/* binding */ getProcedureAtPath),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* binding */ getTRPCErrorFromUnknown),\n/* harmony export */   isTrackedEnvelope: () => (/* binding */ isTrackedEnvelope),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   mergeRouters: () => (/* binding */ mergeRouters),\n/* harmony export */   sse: () => (/* binding */ sse),\n/* harmony export */   tracked: () => (/* binding */ tracked),\n/* harmony export */   transformResult: () => (/* binding */ transformResult),\n/* harmony export */   transformTRPCResponse: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getErrorShape-Uhlrl4Bk.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-DdbbrDku.mjs */ \"(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n\n//#region src/unstable-core-do-not-import/error/formatter.ts\nconst defaultFormatter = ({ shape })=>{\n    return shape;\n};\n//#endregion\n//#region src/unstable-core-do-not-import/error/TRPCError.ts\nvar import_defineProperty = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\nvar UnknownCauseError = class extends Error {\n};\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) return cause;\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) return void 0;\n    if (type !== \"object\") return new Error(String(cause));\n    if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(cause)) return Object.assign(new UnknownCauseError(), cause);\n    return void 0;\n}\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) return cause;\n    if (cause instanceof Error && cause.name === \"TRPCError\") return cause;\n    const trpcError = new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause\n    });\n    if (cause instanceof Error && cause.stack) trpcError.stack = cause.stack;\n    return trpcError;\n}\nvar TRPCError = class extends Error {\n    constructor(opts){\n        var _ref, _opts$message, _this$cause;\n        const cause = getCauseFromUnknown(opts.cause);\n        const message = (_ref = (_opts$message = opts.message) !== null && _opts$message !== void 0 ? _opts$message : cause === null || cause === void 0 ? void 0 : cause.message) !== null && _ref !== void 0 ? _ref : opts.code;\n        super(message, {\n            cause\n        });\n        (0, import_defineProperty.default)(this, \"cause\", void 0);\n        (0, import_defineProperty.default)(this, \"code\", void 0);\n        this.code = opts.code;\n        this.name = \"TRPCError\";\n        (_this$cause = this.cause) !== null && _this$cause !== void 0 || (this.cause = cause);\n    }\n};\n//#endregion\n//#region src/unstable-core-do-not-import/transformer.ts\nvar import_objectSpread2$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* @internal\n*/ function getDataTransformer(transformer) {\n    if (\"input\" in transformer) return transformer;\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\n/**\n* @internal\n*/ const defaultTransformer = {\n    input: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    },\n    output: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    }\n};\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) return (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, item), {}, {\n        error: config.transformer.output.serialize(item.error)\n    });\n    if (\"data\" in item.result) return (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, item), {}, {\n        result: (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, item.result), {}, {\n            data: config.transformer.output.serialize(item.result.data)\n        })\n    });\n    return item;\n}\n/**\n* Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n**/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n/** @internal */ function transformResultInner(response, transformer) {\n    if (\"error\" in response) {\n        const error = transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, response), {}, {\n                error\n            })\n        };\n    }\n    const result = (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, response.result), (!response.result.type || response.result.type === \"data\") && {\n        type: \"data\",\n        data: transformer.deserialize(response.result.data)\n    });\n    return {\n        ok: true,\n        result\n    };\n}\nvar TransformResultError = class extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n};\n/**\n* Transforms and validates that the result is a valid TRPCResponse\n* @internal\n*/ function transformResult(response, transformer) {\n    let result;\n    try {\n        result = transformResultInner(response, transformer);\n    } catch (_unused) {\n        throw new TransformResultError();\n    }\n    if (!result.ok && (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(result.error.error) || typeof result.error.error[\"code\"] !== \"number\")) throw new TransformResultError();\n    if (result.ok && !(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(result.result)) throw new TransformResultError();\n    return result;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/router.ts\nvar import_objectSpread2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nconst lazySymbol = Symbol(\"lazy\");\nfunction once(fn) {\n    const uncalled = Symbol();\n    let result = uncalled;\n    return ()=>{\n        if (result === uncalled) result = fn();\n        return result;\n    };\n}\n/**\n* Lazy load a router\n* @see https://trpc.io/docs/server/merging-routers#lazy-load\n*/ function lazy(importRouter) {\n    async function resolve() {\n        const mod = await importRouter();\n        if (isRouter(mod)) return mod;\n        const routers = Object.values(mod);\n        if (routers.length !== 1 || !isRouter(routers[0])) throw new Error(\"Invalid router module - either define exactly 1 export or return the router directly.\\nExample: `lazy(() => import('./slow.js').then((m) => m.slowRouter))`\");\n        return routers[0];\n    }\n    resolve[lazySymbol] = true;\n    return resolve;\n}\nfunction isLazy(input) {\n    return typeof input === \"function\" && lazySymbol in input;\n}\nfunction isRouter(value) {\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(value) && (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(value[\"_def\"]) && \"router\" in value[\"_def\"];\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: defaultFormatter,\n    transformer: defaultTransformer\n};\n/**\n* Reserved words that can't be used as router or procedure names\n*/ const reservedWords = [\n    \"then\",\n    \"call\",\n    \"apply\"\n];\n/**\n* @internal\n*/ function createRouterFactory(config) {\n    function createRouterInner(input) {\n        const reservedWordsUsed = new Set(Object.keys(input).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n        const procedures = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.omitPrototype)({});\n        const lazy$1 = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.omitPrototype)({});\n        function createLazyLoader(opts) {\n            return {\n                ref: opts.ref,\n                load: once(async ()=>{\n                    const router$1 = await opts.ref();\n                    const lazyPath = [\n                        ...opts.path,\n                        opts.key\n                    ];\n                    const lazyKey = lazyPath.join(\".\");\n                    opts.aggregate[opts.key] = step(router$1._def.record, lazyPath);\n                    delete lazy$1[lazyKey];\n                    for (const [nestedKey, nestedItem] of Object.entries(router$1._def.lazy)){\n                        const nestedRouterKey = [\n                            ...lazyPath,\n                            nestedKey\n                        ].join(\".\");\n                        lazy$1[nestedRouterKey] = createLazyLoader({\n                            ref: nestedItem.ref,\n                            path: lazyPath,\n                            key: nestedKey,\n                            aggregate: opts.aggregate[opts.key]\n                        });\n                    }\n                })\n            };\n        }\n        function step(from, path = []) {\n            const aggregate = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.omitPrototype)({});\n            for (const [key, item] of Object.entries(from !== null && from !== void 0 ? from : {})){\n                if (isLazy(item)) {\n                    lazy$1[[\n                        ...path,\n                        key\n                    ].join(\".\")] = createLazyLoader({\n                        path,\n                        ref: item,\n                        key,\n                        aggregate\n                    });\n                    continue;\n                }\n                if (isRouter(item)) {\n                    aggregate[key] = step(item._def.record, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                if (!isProcedure(item)) {\n                    aggregate[key] = step(item, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                const newPath = [\n                    ...path,\n                    key\n                ].join(\".\");\n                if (procedures[newPath]) throw new Error(`Duplicate key: ${newPath}`);\n                procedures[newPath] = item;\n                aggregate[key] = item;\n            }\n            return aggregate;\n        }\n        const record = step(input);\n        const _def = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({\n            _config: config,\n            router: true,\n            procedures,\n            lazy: lazy$1\n        }, emptyRouter), {}, {\n            record\n        });\n        const router = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, record), {}, {\n            _def,\n            createCaller: createCallerFactory()({\n                _def\n            })\n        });\n        return router;\n    }\n    return createRouterInner;\n}\nfunction isProcedure(procedureOrRouter) {\n    return typeof procedureOrRouter === \"function\";\n}\n/**\n* @internal\n*/ async function getProcedureAtPath(router, path) {\n    const { _def } = router;\n    let procedure = _def.procedures[path];\n    while(!procedure){\n        const key = Object.keys(_def.lazy).find((key$1)=>path.startsWith(key$1));\n        if (!key) return null;\n        const lazyRouter = _def.lazy[key];\n        await lazyRouter.load();\n        procedure = _def.procedures[path];\n    }\n    return procedure;\n}\n/**\n* @internal\n*/ async function callProcedure(opts) {\n    const { type, path } = opts;\n    const proc = await getProcedureAtPath(opts.router, path);\n    if (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) throw new TRPCError({\n        code: \"NOT_FOUND\",\n        message: `No \"${type}\"-procedure on path \"${path}\"`\n    });\n    /* istanbul ignore if -- @preserve */ if (proc._def.type !== type && opts.allowMethodOverride && proc._def.type === \"subscription\") throw new TRPCError({\n        code: \"METHOD_NOT_SUPPORTED\",\n        message: `Method override is not supported for subscriptions`\n    });\n    return proc(opts);\n}\nfunction createCallerFactory() {\n    return function createCallerInner(router) {\n        const { _def } = router;\n        return function createCaller(ctxOrCallback, opts) {\n            return (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)(async ({ path, args })=>{\n                const fullPath = path.join(\".\");\n                if (path.length === 1 && path[0] === \"_def\") return _def;\n                const procedure = await getProcedureAtPath(router, fullPath);\n                let ctx = void 0;\n                try {\n                    if (!procedure) throw new TRPCError({\n                        code: \"NOT_FOUND\",\n                        message: `No procedure found on path \"${path}\"`\n                    });\n                    ctx = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunction)(ctxOrCallback) ? await Promise.resolve(ctxOrCallback()) : ctxOrCallback;\n                    return await procedure({\n                        path: fullPath,\n                        getRawInput: async ()=>args[0],\n                        ctx,\n                        type: procedure._def.type,\n                        signal: opts === null || opts === void 0 ? void 0 : opts.signal\n                    });\n                } catch (cause) {\n                    var _opts$onError, _procedure$_def$type;\n                    opts === null || opts === void 0 || (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, {\n                        ctx,\n                        error: getTRPCErrorFromUnknown(cause),\n                        input: args[0],\n                        path: fullPath,\n                        type: (_procedure$_def$type = procedure === null || procedure === void 0 ? void 0 : procedure._def.type) !== null && _procedure$_def$type !== void 0 ? _procedure$_def$type : \"unknown\"\n                    });\n                    throw cause;\n                }\n            });\n        };\n    };\n}\nfunction mergeRouters(...routerList) {\n    var _routerList$;\n    const record = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.mergeWithoutOverrides)({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== defaultFormatter) {\n            if (currentErrorFormatter !== defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) throw new Error(\"You seem to have several error formatters\");\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, defaultFormatter);\n    const transformer = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== defaultTransformer) {\n            if (prev !== defaultTransformer && prev !== current._def._config.transformer) throw new Error(\"You seem to have several transformers\");\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, defaultTransformer);\n    const router = createRouterFactory({\n        errorFormatter,\n        transformer,\n        isDev: routerList.every((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.every((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.every((r)=>r._def._config.isServer),\n        $types: (_routerList$ = routerList[0]) === null || _routerList$ === void 0 ? void 0 : _routerList$._def._config.$types\n    })(record);\n    return router;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/tracked.ts\nconst trackedSymbol = Symbol();\n/**\n* Produce a typed server-sent event message\n* @deprecated use `tracked(id, data)` instead\n*/ function sse(event) {\n    return tracked(event.id, event.data);\n}\nfunction isTrackedEnvelope(value) {\n    return Array.isArray(value) && value[2] === trackedSymbol;\n}\n/**\n* Automatically track an event so that it can be resumed from a given id if the connection is lost\n*/ function tracked(id, data) {\n    if (id === \"\") throw new Error(\"`id` must not be an empty string as empty string is the same as not setting the id at all\");\n    return [\n        id,\n        data,\n        trackedSymbol\n    ];\n}\n//#endregion\n //# sourceMappingURL=tracked-gU3ttYjg.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\n");

/***/ }),

/***/ "(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPC_ERROR_CODES_BY_KEY: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   TRPC_ERROR_CODES_BY_NUMBER: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   abortSignalsAnyPonyfill: () => (/* binding */ abortSignalsAnyPonyfill),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   mergeWithoutOverrides: () => (/* binding */ mergeWithoutOverrides),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   omitPrototype: () => (/* binding */ omitPrototype),\n/* harmony export */   retryableRpcCodes: () => (/* binding */ retryableRpcCodes),\n/* harmony export */   run: () => (/* binding */ run),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n//#region src/unstable-core-do-not-import/rpc/codes.ts\n/**\n* JSON-RPC 2.0 Error codes\n*\n* `-32000` to `-32099` are reserved for implementation-defined server-errors.\n* For tRPC we're copying the last digits of HTTP 4XX errors.\n*/ const TRPC_ERROR_CODES_BY_KEY = {\n    PARSE_ERROR: -32700,\n    BAD_REQUEST: -32600,\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    BAD_GATEWAY: -32603,\n    SERVICE_UNAVAILABLE: -32603,\n    GATEWAY_TIMEOUT: -32603,\n    UNAUTHORIZED: -32001,\n    PAYMENT_REQUIRED: -32002,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNSUPPORTED_MEDIA_TYPE: -32015,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = {\n    [-32700]: \"PARSE_ERROR\",\n    [-32600]: \"BAD_REQUEST\",\n    [-32603]: \"INTERNAL_SERVER_ERROR\",\n    [-32001]: \"UNAUTHORIZED\",\n    [-32002]: \"PAYMENT_REQUIRED\",\n    [-32003]: \"FORBIDDEN\",\n    [-32004]: \"NOT_FOUND\",\n    [-32005]: \"METHOD_NOT_SUPPORTED\",\n    [-32008]: \"TIMEOUT\",\n    [-32009]: \"CONFLICT\",\n    [-32012]: \"PRECONDITION_FAILED\",\n    [-32013]: \"PAYLOAD_TOO_LARGE\",\n    [-32015]: \"UNSUPPORTED_MEDIA_TYPE\",\n    [-32022]: \"UNPROCESSABLE_CONTENT\",\n    [-32029]: \"TOO_MANY_REQUESTS\",\n    [-32099]: \"CLIENT_CLOSED_REQUEST\"\n};\n/**\n* tRPC error codes that are considered retryable\n* With out of the box SSE, the client will reconnect when these errors are encountered\n*/ const retryableRpcCodes = [\n    TRPC_ERROR_CODES_BY_KEY.BAD_GATEWAY,\n    TRPC_ERROR_CODES_BY_KEY.SERVICE_UNAVAILABLE,\n    TRPC_ERROR_CODES_BY_KEY.GATEWAY_TIMEOUT,\n    TRPC_ERROR_CODES_BY_KEY.INTERNAL_SERVER_ERROR\n];\n//#endregion\n//#region src/unstable-core-do-not-import/utils.ts\n/**\n* Ensures there are no duplicate keys when building a procedure.\n* @internal\n*/ function mergeWithoutOverrides(obj1, ...objs) {\n    const newObj = Object.assign(Object.create(null), obj1);\n    for (const overrides of objs)for(const key in overrides){\n        if (key in newObj && newObj[key] !== overrides[key]) throw new Error(`Duplicate key ${key}`);\n        newObj[key] = overrides[key];\n    }\n    return newObj;\n}\n/**\n* Check that value is object\n* @internal\n*/ function isObject(value) {\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nfunction isFunction(fn) {\n    return typeof fn === \"function\";\n}\n/**\n* Create an object without inheriting anything from `Object.prototype`\n* @internal\n*/ function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n}\nconst asyncIteratorsSupported = typeof Symbol === \"function\" && !!Symbol.asyncIterator;\nfunction isAsyncIterable(value) {\n    return asyncIteratorsSupported && isObject(value) && Symbol.asyncIterator in value;\n}\n/**\n* Run an IIFE\n*/ const run = (fn)=>fn();\nfunction noop() {}\nfunction identity(it) {\n    return it;\n}\n/**\n* Generic runtime assertion function. Throws, if the condition is not `true`.\n*\n* Can be used as a slightly less dangerous variant of type assertions. Code\n* mistakes would be revealed at runtime then (hopefully during testing).\n*/ function assert(condition, msg = \"no additional info\") {\n    if (!condition) throw new Error(`AssertionError: ${msg}`);\n}\nfunction sleep(ms = 0) {\n    return new Promise((res)=>setTimeout(res, ms));\n}\n/**\n* Ponyfill for\n* [`AbortSignal.any`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static).\n*/ function abortSignalsAnyPonyfill(signals) {\n    if (typeof AbortSignal.any === \"function\") return AbortSignal.any(signals);\n    const ac = new AbortController();\n    for (const signal of signals){\n        if (signal.aborted) {\n            trigger();\n            break;\n        }\n        signal.addEventListener(\"abort\", trigger, {\n            once: true\n        });\n    }\n    return ac.signal;\n    function trigger() {\n        ac.abort();\n        for (const signal of signals)signal.removeEventListener(\"abort\", trigger);\n    }\n}\n//#endregion\n //# sourceMappingURL=utils-DdbbrDku.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(rsc)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs":
/*!*******************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs ***!
  \*******************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   HTTP_CODE_TO_JSONRPC2: () => (/* binding */ HTTP_CODE_TO_JSONRPC2),\n/* harmony export */   JSONRPC2_TO_HTTP_CODE: () => (/* binding */ JSONRPC2_TO_HTTP_CODE),\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __toESM: () => (/* binding */ __toESM),\n/* harmony export */   createFlatProxy: () => (/* binding */ createFlatProxy),\n/* harmony export */   createRecursiveProxy: () => (/* binding */ createRecursiveProxy),\n/* harmony export */   getErrorShape: () => (/* binding */ getErrorShape),\n/* harmony export */   getHTTPStatusCode: () => (/* binding */ getHTTPStatusCode),\n/* harmony export */   getHTTPStatusCodeFromError: () => (/* binding */ getHTTPStatusCodeFromError),\n/* harmony export */   getStatusCodeFromKey: () => (/* binding */ getStatusCodeFromKey),\n/* harmony export */   getStatusKeyFromCode: () => (/* binding */ getStatusKeyFromCode),\n/* harmony export */   require_defineProperty: () => (/* binding */ require_defineProperty),\n/* harmony export */   require_objectSpread2: () => (/* binding */ require_objectSpread2)\n/* harmony export */ });\n/* harmony import */ var _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-DdbbrDku.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n//#region rolldown:runtime\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") for(var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++){\n        key = keys[i];\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ((k)=>from[k]).bind(null, key),\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n//#endregion\n//#region src/unstable-core-do-not-import/createProxy.ts\nconst noop = ()=>{};\nconst freezeIfAvailable = (obj)=>{\n    if (Object.freeze) Object.freeze(obj);\n};\nfunction createInnerProxy(callback, path, memo) {\n    var _memo$cacheKey;\n    const cacheKey = path.join(\".\");\n    (_memo$cacheKey = memo[cacheKey]) !== null && _memo$cacheKey !== void 0 || (memo[cacheKey] = new Proxy(noop, {\n        get (_obj, key) {\n            if (typeof key !== \"string\" || key === \"then\") return void 0;\n            return createInnerProxy(callback, [\n                ...path,\n                key\n            ], memo);\n        },\n        apply (_1, _2, args) {\n            const lastOfPath = path[path.length - 1];\n            let opts = {\n                args,\n                path\n            };\n            if (lastOfPath === \"call\") opts = {\n                args: args.length >= 2 ? [\n                    args[1]\n                ] : [],\n                path: path.slice(0, -1)\n            };\n            else if (lastOfPath === \"apply\") opts = {\n                args: args.length >= 2 ? args[1] : [],\n                path: path.slice(0, -1)\n            };\n            freezeIfAvailable(opts.args);\n            freezeIfAvailable(opts.path);\n            return callback(opts);\n        }\n    }));\n    return memo[cacheKey];\n}\n/**\n* Creates a proxy that calls the callback with the path and arguments\n*\n* @internal\n*/ const createRecursiveProxy = (callback)=>createInnerProxy(callback, [], Object.create(null));\n/**\n* Used in place of `new Proxy` where each handler will map 1 level deep to another value.\n*\n* @internal\n*/ const createFlatProxy = (callback)=>{\n    return new Proxy(noop, {\n        get (_obj, name) {\n            if (name === \"then\") return void 0;\n            return callback(name);\n        }\n    });\n};\n//#endregion\n//#region src/unstable-core-do-not-import/http/getHTTPStatusCode.ts\nconst JSONRPC2_TO_HTTP_CODE = {\n    PARSE_ERROR: 400,\n    BAD_REQUEST: 400,\n    UNAUTHORIZED: 401,\n    PAYMENT_REQUIRED: 402,\n    FORBIDDEN: 403,\n    NOT_FOUND: 404,\n    METHOD_NOT_SUPPORTED: 405,\n    TIMEOUT: 408,\n    CONFLICT: 409,\n    PRECONDITION_FAILED: 412,\n    PAYLOAD_TOO_LARGE: 413,\n    UNSUPPORTED_MEDIA_TYPE: 415,\n    UNPROCESSABLE_CONTENT: 422,\n    TOO_MANY_REQUESTS: 429,\n    CLIENT_CLOSED_REQUEST: 499,\n    INTERNAL_SERVER_ERROR: 500,\n    NOT_IMPLEMENTED: 501,\n    BAD_GATEWAY: 502,\n    SERVICE_UNAVAILABLE: 503,\n    GATEWAY_TIMEOUT: 504\n};\nconst HTTP_CODE_TO_JSONRPC2 = {\n    400: \"BAD_REQUEST\",\n    401: \"UNAUTHORIZED\",\n    402: \"PAYMENT_REQUIRED\",\n    403: \"FORBIDDEN\",\n    404: \"NOT_FOUND\",\n    405: \"METHOD_NOT_SUPPORTED\",\n    408: \"TIMEOUT\",\n    409: \"CONFLICT\",\n    412: \"PRECONDITION_FAILED\",\n    413: \"PAYLOAD_TOO_LARGE\",\n    415: \"UNSUPPORTED_MEDIA_TYPE\",\n    422: \"UNPROCESSABLE_CONTENT\",\n    429: \"TOO_MANY_REQUESTS\",\n    499: \"CLIENT_CLOSED_REQUEST\",\n    500: \"INTERNAL_SERVER_ERROR\",\n    501: \"NOT_IMPLEMENTED\",\n    502: \"BAD_GATEWAY\",\n    503: \"SERVICE_UNAVAILABLE\",\n    504: \"GATEWAY_TIMEOUT\"\n};\nfunction getStatusCodeFromKey(code) {\n    var _JSONRPC2_TO_HTTP_COD;\n    return (_JSONRPC2_TO_HTTP_COD = JSONRPC2_TO_HTTP_CODE[code]) !== null && _JSONRPC2_TO_HTTP_COD !== void 0 ? _JSONRPC2_TO_HTTP_COD : 500;\n}\nfunction getStatusKeyFromCode(code) {\n    var _HTTP_CODE_TO_JSONRPC;\n    return (_HTTP_CODE_TO_JSONRPC = HTTP_CODE_TO_JSONRPC2[code]) !== null && _HTTP_CODE_TO_JSONRPC !== void 0 ? _HTTP_CODE_TO_JSONRPC : \"INTERNAL_SERVER_ERROR\";\n}\nfunction getHTTPStatusCode(json) {\n    const arr = Array.isArray(json) ? json : [\n        json\n    ];\n    const httpStatuses = new Set(arr.map((res)=>{\n        if (\"error\" in res && (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(res.error.data)) {\n            var _res$error$data;\n            if (typeof ((_res$error$data = res.error.data) === null || _res$error$data === void 0 ? void 0 : _res$error$data[\"httpStatus\"]) === \"number\") return res.error.data[\"httpStatus\"];\n            const code = _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_NUMBER[res.error.code];\n            return getStatusCodeFromKey(code);\n        }\n        return 200;\n    }));\n    if (httpStatuses.size !== 1) return 207;\n    const httpStatus = httpStatuses.values().next().value;\n    return httpStatus;\n}\nfunction getHTTPStatusCodeFromError(error) {\n    return getStatusCodeFromKey(error.code);\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\nvar require_typeof = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\" (exports, module) {\n        function _typeof$2(o) {\n            \"@babel/helpers - typeof\";\n            return module.exports = _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o$1) {\n                return typeof o$1;\n            } : function(o$1) {\n                return o$1 && \"function\" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? \"symbol\" : typeof o$1;\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof$2(o);\n        }\n        module.exports = _typeof$2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\nvar require_toPrimitive = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\" (exports, module) {\n        var _typeof$1 = require_typeof()[\"default\"];\n        function toPrimitive$1(t, r) {\n            if (\"object\" != _typeof$1(t) || !t) return t;\n            var e = t[Symbol.toPrimitive];\n            if (void 0 !== e) {\n                var i = e.call(t, r || \"default\");\n                if (\"object\" != _typeof$1(i)) return i;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (\"string\" === r ? String : Number)(t);\n        }\n        module.exports = toPrimitive$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\nvar require_toPropertyKey = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\" (exports, module) {\n        var _typeof = require_typeof()[\"default\"];\n        var toPrimitive = require_toPrimitive();\n        function toPropertyKey$1(t) {\n            var i = toPrimitive(t, \"string\");\n            return \"symbol\" == _typeof(i) ? i : i + \"\";\n        }\n        module.exports = toPropertyKey$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\nvar require_defineProperty = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\" (exports, module) {\n        var toPropertyKey = require_toPropertyKey();\n        function _defineProperty(e, r, t) {\n            return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n                value: t,\n                enumerable: !0,\n                configurable: !0,\n                writable: !0\n            }) : e[r] = t, e;\n        }\n        module.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\nvar require_objectSpread2 = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\" (exports, module) {\n        var defineProperty = require_defineProperty();\n        function ownKeys(e, r) {\n            var t = Object.keys(e);\n            if (Object.getOwnPropertySymbols) {\n                var o = Object.getOwnPropertySymbols(e);\n                r && (o = o.filter(function(r$1) {\n                    return Object.getOwnPropertyDescriptor(e, r$1).enumerable;\n                })), t.push.apply(t, o);\n            }\n            return t;\n        }\n        function _objectSpread2(e) {\n            for(var r = 1; r < arguments.length; r++){\n                var t = null != arguments[r] ? arguments[r] : {};\n                r % 2 ? ownKeys(Object(t), !0).forEach(function(r$1) {\n                    defineProperty(e, r$1, t[r$1]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r$1) {\n                    Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));\n                });\n            }\n            return e;\n        }\n        module.exports = _objectSpread2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/error/getErrorShape.ts\nvar import_objectSpread2 = __toESM(require_objectSpread2(), 1);\n/**\n* @internal\n*/ function getErrorShape(opts) {\n    const { path, error, config } = opts;\n    const { code } = opts.error;\n    const shape = {\n        message: error.message,\n        code: _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.TRPC_ERROR_CODES_BY_KEY[code],\n        data: {\n            code,\n            httpStatus: getHTTPStatusCodeFromError(error)\n        }\n    };\n    if (config.isDev && typeof opts.error.stack === \"string\") shape.data.stack = opts.error.stack;\n    if (typeof path === \"string\") shape.data.path = path;\n    return config.errorFormatter((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n        shape\n    }));\n}\n//#endregion\n //# sourceMappingURL=getErrorShape-Uhlrl4Bk.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CUiPknO-.mjs":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CUiPknO-.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   behaviorSubject: () => (/* binding */ behaviorSubject),\n/* harmony export */   distinctUntilChanged: () => (/* binding */ distinctUntilChanged),\n/* harmony export */   distinctUntilDeepChanged: () => (/* binding */ distinctUntilDeepChanged),\n/* harmony export */   map: () => (/* binding */ map),\n/* harmony export */   share: () => (/* binding */ share),\n/* harmony export */   tap: () => (/* binding */ tap)\n/* harmony export */ });\n/* harmony import */ var _observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./observable-UMO3vUa_.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n\n//#region src/observable/operators.ts\nfunction map(project) {\n    return (source)=>{\n        return (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((destination)=>{\n            let index = 0;\n            const subscription = source.subscribe({\n                next (value) {\n                    destination.next(project(value, index++));\n                },\n                error (error) {\n                    destination.error(error);\n                },\n                complete () {\n                    destination.complete();\n                }\n            });\n            return subscription;\n        });\n    };\n}\nfunction share(_opts) {\n    return (source)=>{\n        let refCount = 0;\n        let subscription = null;\n        const observers = [];\n        function startIfNeeded() {\n            if (subscription) return;\n            subscription = source.subscribe({\n                next (value) {\n                    for (const observer of observers){\n                        var _observer$next;\n                        (_observer$next = observer.next) === null || _observer$next === void 0 || _observer$next.call(observer, value);\n                    }\n                },\n                error (error) {\n                    for (const observer of observers){\n                        var _observer$error;\n                        (_observer$error = observer.error) === null || _observer$error === void 0 || _observer$error.call(observer, error);\n                    }\n                },\n                complete () {\n                    for (const observer of observers){\n                        var _observer$complete;\n                        (_observer$complete = observer.complete) === null || _observer$complete === void 0 || _observer$complete.call(observer);\n                    }\n                }\n            });\n        }\n        function resetIfNeeded() {\n            if (refCount === 0 && subscription) {\n                const _sub = subscription;\n                subscription = null;\n                _sub.unsubscribe();\n            }\n        }\n        return (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((subscriber)=>{\n            refCount++;\n            observers.push(subscriber);\n            startIfNeeded();\n            return {\n                unsubscribe () {\n                    refCount--;\n                    resetIfNeeded();\n                    const index = observers.findIndex((v)=>v === subscriber);\n                    if (index > -1) observers.splice(index, 1);\n                }\n            };\n        });\n    };\n}\nfunction tap(observer) {\n    return (source)=>{\n        return (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((destination)=>{\n            return source.subscribe({\n                next (value) {\n                    var _observer$next2;\n                    (_observer$next2 = observer.next) === null || _observer$next2 === void 0 || _observer$next2.call(observer, value);\n                    destination.next(value);\n                },\n                error (error) {\n                    var _observer$error2;\n                    (_observer$error2 = observer.error) === null || _observer$error2 === void 0 || _observer$error2.call(observer, error);\n                    destination.error(error);\n                },\n                complete () {\n                    var _observer$complete2;\n                    (_observer$complete2 = observer.complete) === null || _observer$complete2 === void 0 || _observer$complete2.call(observer);\n                    destination.complete();\n                }\n            });\n        });\n    };\n}\nconst distinctUnsetMarker = Symbol();\nfunction distinctUntilChanged(compare = (a, b)=>a === b) {\n    return (source)=>{\n        return (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((destination)=>{\n            let lastValue = distinctUnsetMarker;\n            return source.subscribe({\n                next (value) {\n                    if (lastValue !== distinctUnsetMarker && compare(lastValue, value)) return;\n                    lastValue = value;\n                    destination.next(value);\n                },\n                error (error) {\n                    destination.error(error);\n                },\n                complete () {\n                    destination.complete();\n                }\n            });\n        });\n    };\n}\nconst isDeepEqual = (a, b)=>{\n    if (a === b) return true;\n    const bothAreObjects = a && b && typeof a === \"object\" && typeof b === \"object\";\n    return !!bothAreObjects && Object.keys(a).length === Object.keys(b).length && Object.entries(a).every(([k, v])=>isDeepEqual(v, b[k]));\n};\nfunction distinctUntilDeepChanged() {\n    return distinctUntilChanged(isDeepEqual);\n}\n//#endregion\n//#region src/observable/behaviorSubject.ts\n/**\n* @internal\n* An observable that maintains and provides a \"current value\" to subscribers\n* @see https://www.learnrxjs.io/learn-rxjs/subjects/behaviorsubject\n*/ function behaviorSubject(initialValue) {\n    let value = initialValue;\n    const observerList = [];\n    const addObserver = (observer)=>{\n        if (value !== void 0) observer.next(value);\n        observerList.push(observer);\n    };\n    const removeObserver = (observer)=>{\n        observerList.splice(observerList.indexOf(observer), 1);\n    };\n    const obs = (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        addObserver(observer);\n        return ()=>{\n            removeObserver(observer);\n        };\n    });\n    obs.next = (nextValue)=>{\n        if (value === nextValue) return;\n        value = nextValue;\n        for (const observer of observerList)observer.next(nextValue);\n    };\n    obs.get = ()=>value;\n    return obs;\n}\n//#endregion\n //# sourceMappingURL=observable-CUiPknO-.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CUiPknO-.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs":
/*!****************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs ***!
  \****************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   isObservable: () => (/* binding */ isObservable),\n/* harmony export */   observable: () => (/* binding */ observable),\n/* harmony export */   observableToAsyncIterable: () => (/* binding */ observableToAsyncIterable),\n/* harmony export */   observableToPromise: () => (/* binding */ observableToPromise)\n/* harmony export */ });\n//#region src/observable/observable.ts\n/** @public */ function isObservable(x) {\n    return typeof x === \"object\" && x !== null && \"subscribe\" in x;\n}\n/** @public */ function observable(subscribe) {\n    const self = {\n        subscribe (observer) {\n            let teardownRef = null;\n            let isDone = false;\n            let unsubscribed = false;\n            let teardownImmediately = false;\n            function unsubscribe() {\n                if (teardownRef === null) {\n                    teardownImmediately = true;\n                    return;\n                }\n                if (unsubscribed) return;\n                unsubscribed = true;\n                if (typeof teardownRef === \"function\") teardownRef();\n                else if (teardownRef) teardownRef.unsubscribe();\n            }\n            teardownRef = subscribe({\n                next (value) {\n                    var _observer$next;\n                    if (isDone) return;\n                    (_observer$next = observer.next) === null || _observer$next === void 0 || _observer$next.call(observer, value);\n                },\n                error (err) {\n                    var _observer$error;\n                    if (isDone) return;\n                    isDone = true;\n                    (_observer$error = observer.error) === null || _observer$error === void 0 || _observer$error.call(observer, err);\n                    unsubscribe();\n                },\n                complete () {\n                    var _observer$complete;\n                    if (isDone) return;\n                    isDone = true;\n                    (_observer$complete = observer.complete) === null || _observer$complete === void 0 || _observer$complete.call(observer);\n                    unsubscribe();\n                }\n            });\n            if (teardownImmediately) unsubscribe();\n            return {\n                unsubscribe\n            };\n        },\n        pipe (...operations) {\n            return operations.reduce(pipeReducer, self);\n        }\n    };\n    return self;\n}\nfunction pipeReducer(prev, fn) {\n    return fn(prev);\n}\n/** @internal */ function observableToPromise(observable$1) {\n    const ac = new AbortController();\n    const promise = new Promise((resolve, reject)=>{\n        let isDone = false;\n        function onDone() {\n            if (isDone) return;\n            isDone = true;\n            obs$.unsubscribe();\n        }\n        ac.signal.addEventListener(\"abort\", ()=>{\n            reject(ac.signal.reason);\n        });\n        const obs$ = observable$1.subscribe({\n            next (data) {\n                isDone = true;\n                resolve(data);\n                onDone();\n            },\n            error (data) {\n                reject(data);\n            },\n            complete () {\n                ac.abort();\n                onDone();\n            }\n        });\n    });\n    return promise;\n}\n/**\n* @internal\n*/ function observableToReadableStream(observable$1, signal) {\n    let unsub = null;\n    const onAbort = ()=>{\n        unsub === null || unsub === void 0 || unsub.unsubscribe();\n        unsub = null;\n        signal.removeEventListener(\"abort\", onAbort);\n    };\n    return new ReadableStream({\n        start (controller) {\n            unsub = observable$1.subscribe({\n                next (data) {\n                    controller.enqueue({\n                        ok: true,\n                        value: data\n                    });\n                },\n                error (error) {\n                    controller.enqueue({\n                        ok: false,\n                        error\n                    });\n                    controller.close();\n                },\n                complete () {\n                    controller.close();\n                }\n            });\n            if (signal.aborted) onAbort();\n            else signal.addEventListener(\"abort\", onAbort, {\n                once: true\n            });\n        },\n        cancel () {\n            onAbort();\n        }\n    });\n}\n/** @internal */ function observableToAsyncIterable(observable$1, signal) {\n    const stream = observableToReadableStream(observable$1, signal);\n    const reader = stream.getReader();\n    const iterator = {\n        async next () {\n            const value = await reader.read();\n            if (value.done) return {\n                value: void 0,\n                done: true\n            };\n            const { value: result } = value;\n            if (!result.ok) throw result.error;\n            return {\n                value: result.value,\n                done: false\n            };\n        },\n        async return () {\n            await reader.cancel();\n            return {\n                value: void 0,\n                done: true\n            };\n        }\n    };\n    return {\n        [Symbol.asyncIterator] () {\n            return iterator;\n        }\n    };\n}\n//#endregion\n //# sourceMappingURL=observable-UMO3vUa_.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs":
/*!*********************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs ***!
  \*********************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   Unpromise: () => (/* binding */ Unpromise),\n/* harmony export */   createDeferred: () => (/* binding */ createDeferred),\n/* harmony export */   getRequestInfo: () => (/* binding */ getRequestInfo),\n/* harmony export */   isAbortError: () => (/* binding */ isAbortError),\n/* harmony export */   isPromise: () => (/* binding */ isPromise),\n/* harmony export */   iteratorResource: () => (/* binding */ iteratorResource),\n/* harmony export */   jsonlStreamConsumer: () => (/* binding */ jsonlStreamConsumer),\n/* harmony export */   jsonlStreamProducer: () => (/* binding */ jsonlStreamProducer),\n/* harmony export */   makeAsyncResource: () => (/* binding */ makeAsyncResource),\n/* harmony export */   makeResource: () => (/* binding */ makeResource),\n/* harmony export */   parseConnectionParamsFromString: () => (/* binding */ parseConnectionParamsFromString),\n/* harmony export */   parseConnectionParamsFromUnknown: () => (/* binding */ parseConnectionParamsFromUnknown),\n/* harmony export */   require_usingCtx: () => (/* binding */ require_usingCtx),\n/* harmony export */   resolveResponse: () => (/* binding */ resolveResponse),\n/* harmony export */   sseHeaders: () => (/* binding */ sseHeaders),\n/* harmony export */   sseStreamConsumer: () => (/* binding */ sseStreamConsumer),\n/* harmony export */   sseStreamProducer: () => (/* binding */ sseStreamProducer),\n/* harmony export */   takeWithGrace: () => (/* binding */ takeWithGrace),\n/* harmony export */   throwAbortError: () => (/* binding */ throwAbortError),\n/* harmony export */   withMaxDuration: () => (/* binding */ withMaxDuration)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./getErrorShape-Uhlrl4Bk.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./tracked-gU3ttYjg.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\");\n/* harmony import */ var _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils-DdbbrDku.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n/* harmony import */ var _observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./observable-UMO3vUa_.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n\n\n\n\n//#region src/unstable-core-do-not-import/http/parseConnectionParams.ts\nfunction parseConnectionParamsFromUnknown(parsed) {\n    try {\n        if (parsed === null) return null;\n        if (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(parsed)) throw new Error(\"Expected object\");\n        const nonStringValues = Object.entries(parsed).filter(([_key, value])=>typeof value !== \"string\");\n        if (nonStringValues.length > 0) throw new Error(`Expected connectionParams to be string values. Got ${nonStringValues.map(([key, value])=>`${key}: ${typeof value}`).join(\", \")}`);\n        return parsed;\n    } catch (cause) {\n        throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"PARSE_ERROR\",\n            message: \"Invalid connection params shape\",\n            cause\n        });\n    }\n}\nfunction parseConnectionParamsFromString(str) {\n    let parsed;\n    try {\n        parsed = JSON.parse(str);\n    } catch (cause) {\n        throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"PARSE_ERROR\",\n            message: \"Not JSON-parsable query params\",\n            cause\n        });\n    }\n    return parseConnectionParamsFromUnknown(parsed);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/http/contentType.ts\nvar import_objectSpread2$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.require_objectSpread2)(), 1);\n/**\n* Memoize a function that takes no arguments\n* @internal\n*/ function memo(fn) {\n    let promise = null;\n    const sym = Symbol.for(\"@trpc/server/http/memo\");\n    let value = sym;\n    return {\n        read: async ()=>{\n            var _promise;\n            if (value !== sym) return value;\n            (_promise = promise) !== null && _promise !== void 0 || (promise = fn().catch((cause)=>{\n                if (cause instanceof _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError) throw cause;\n                throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"BAD_REQUEST\",\n                    message: cause instanceof Error ? cause.message : \"Invalid input\",\n                    cause\n                });\n            }));\n            value = await promise;\n            promise = null;\n            return value;\n        },\n        result: ()=>{\n            return value !== sym ? value : void 0;\n        }\n    };\n}\nconst jsonContentTypeHandler = {\n    isMatch (req) {\n        var _req$headers$get;\n        return !!((_req$headers$get = req.headers.get(\"content-type\")) === null || _req$headers$get === void 0 ? void 0 : _req$headers$get.startsWith(\"application/json\"));\n    },\n    async parse (opts) {\n        var _types$values$next$va;\n        const { req } = opts;\n        const isBatchCall = opts.searchParams.get(\"batch\") === \"1\";\n        const paths = isBatchCall ? opts.path.split(\",\") : [\n            opts.path\n        ];\n        const getInputs = memo(async ()=>{\n            let inputs = void 0;\n            if (req.method === \"GET\") {\n                const queryInput = opts.searchParams.get(\"input\");\n                if (queryInput) inputs = JSON.parse(queryInput);\n            } else inputs = await req.json();\n            if (inputs === void 0) return {};\n            if (!isBatchCall) return {\n                0: opts.router._def._config.transformer.input.deserialize(inputs)\n            };\n            if (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(inputs)) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                code: \"BAD_REQUEST\",\n                message: \"\\\"input\\\" needs to be an object when doing a batch call\"\n            });\n            const acc = {};\n            for (const index of paths.keys()){\n                const input = inputs[index];\n                if (input !== void 0) acc[index] = opts.router._def._config.transformer.input.deserialize(input);\n            }\n            return acc;\n        });\n        const calls = await Promise.all(paths.map(async (path, index)=>{\n            const procedure = await (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, path);\n            return {\n                path,\n                procedure,\n                getRawInput: async ()=>{\n                    const inputs = await getInputs.read();\n                    let input = inputs[index];\n                    if ((procedure === null || procedure === void 0 ? void 0 : procedure._def.type) === \"subscription\") {\n                        var _ref, _opts$headers$get;\n                        const lastEventId = (_ref = (_opts$headers$get = opts.headers.get(\"last-event-id\")) !== null && _opts$headers$get !== void 0 ? _opts$headers$get : opts.searchParams.get(\"lastEventId\")) !== null && _ref !== void 0 ? _ref : opts.searchParams.get(\"Last-Event-Id\");\n                        if (lastEventId) if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(input)) input = (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, input), {}, {\n                            lastEventId\n                        });\n                        else {\n                            var _input;\n                            (_input = input) !== null && _input !== void 0 || (input = {\n                                lastEventId\n                            });\n                        }\n                    }\n                    return input;\n                },\n                result: ()=>{\n                    var _getInputs$result;\n                    return (_getInputs$result = getInputs.result()) === null || _getInputs$result === void 0 ? void 0 : _getInputs$result[index];\n                }\n            };\n        }));\n        const types = new Set(calls.map((call)=>{\n            var _call$procedure;\n            return (_call$procedure = call.procedure) === null || _call$procedure === void 0 ? void 0 : _call$procedure._def.type;\n        }).filter(Boolean));\n        /* istanbul ignore if -- @preserve */ if (types.size > 1) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"BAD_REQUEST\",\n            message: `Cannot mix procedure types in call: ${Array.from(types).join(\", \")}`\n        });\n        const type = (_types$values$next$va = types.values().next().value) !== null && _types$values$next$va !== void 0 ? _types$values$next$va : \"unknown\";\n        const connectionParamsStr = opts.searchParams.get(\"connectionParams\");\n        const info = {\n            isBatchCall,\n            accept: req.headers.get(\"trpc-accept\"),\n            calls,\n            type,\n            connectionParams: connectionParamsStr === null ? null : parseConnectionParamsFromString(connectionParamsStr),\n            signal: req.signal,\n            url: opts.url\n        };\n        return info;\n    }\n};\nconst formDataContentTypeHandler = {\n    isMatch (req) {\n        var _req$headers$get2;\n        return !!((_req$headers$get2 = req.headers.get(\"content-type\")) === null || _req$headers$get2 === void 0 ? void 0 : _req$headers$get2.startsWith(\"multipart/form-data\"));\n    },\n    async parse (opts) {\n        const { req } = opts;\n        if (req.method !== \"POST\") throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"METHOD_NOT_SUPPORTED\",\n            message: \"Only POST requests are supported for multipart/form-data requests\"\n        });\n        const getInputs = memo(async ()=>{\n            const fd = await req.formData();\n            return fd;\n        });\n        const procedure = await (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path);\n        return {\n            accept: null,\n            calls: [\n                {\n                    path: opts.path,\n                    getRawInput: getInputs.read,\n                    result: getInputs.result,\n                    procedure\n                }\n            ],\n            isBatchCall: false,\n            type: \"mutation\",\n            connectionParams: null,\n            signal: req.signal,\n            url: opts.url\n        };\n    }\n};\nconst octetStreamContentTypeHandler = {\n    isMatch (req) {\n        var _req$headers$get3;\n        return !!((_req$headers$get3 = req.headers.get(\"content-type\")) === null || _req$headers$get3 === void 0 ? void 0 : _req$headers$get3.startsWith(\"application/octet-stream\"));\n    },\n    async parse (opts) {\n        const { req } = opts;\n        if (req.method !== \"POST\") throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"METHOD_NOT_SUPPORTED\",\n            message: \"Only POST requests are supported for application/octet-stream requests\"\n        });\n        const getInputs = memo(async ()=>{\n            return req.body;\n        });\n        return {\n            calls: [\n                {\n                    path: opts.path,\n                    getRawInput: getInputs.read,\n                    result: getInputs.result,\n                    procedure: await (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getProcedureAtPath)(opts.router, opts.path)\n                }\n            ],\n            isBatchCall: false,\n            accept: null,\n            type: \"mutation\",\n            connectionParams: null,\n            signal: req.signal,\n            url: opts.url\n        };\n    }\n};\nconst handlers = [\n    jsonContentTypeHandler,\n    formDataContentTypeHandler,\n    octetStreamContentTypeHandler\n];\nfunction getContentTypeHandler(req) {\n    const handler = handlers.find((handler$1)=>handler$1.isMatch(req));\n    if (handler) return handler;\n    if (!handler && req.method === \"GET\") return jsonContentTypeHandler;\n    throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n        code: \"UNSUPPORTED_MEDIA_TYPE\",\n        message: req.headers.has(\"content-type\") ? `Unsupported content-type \"${req.headers.get(\"content-type\")}` : \"Missing content-type header\"\n    });\n}\nasync function getRequestInfo(opts) {\n    const handler = getContentTypeHandler(opts.req);\n    return await handler.parse(opts);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/http/abortError.ts\nfunction isAbortError(error) {\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(error) && error[\"name\"] === \"AbortError\";\n}\nfunction throwAbortError(message = \"AbortError\") {\n    throw new DOMException(message, \"AbortError\");\n}\n//#endregion\n//#region src/vendor/unpromise/unpromise.ts\nvar import_defineProperty = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.require_defineProperty)(), 1);\nlet _Symbol$toStringTag;\n/** Memory safe (weakmapped) cache of the ProxyPromise for each Promise,\n* which is retained for the lifetime of the original Promise.\n*/ const subscribableCache = /* @__PURE__ */ new WeakMap();\n/** A NOOP function allowing a consistent interface for settled\n* SubscribedPromises (settled promises are not subscribed - they resolve\n* immediately). */ const NOOP = ()=>{};\n_Symbol$toStringTag = Symbol.toStringTag;\n/**\n* Every `Promise<T>` can be shadowed by a single `ProxyPromise<T>`. It is\n* created once, cached and reused throughout the lifetime of the Promise. Get a\n* Promise's ProxyPromise using `Unpromise.proxy(promise)`.\n*\n* The `ProxyPromise<T>` attaches handlers to the original `Promise<T>`\n* `.then()` and `.catch()` just once. Promises derived from it use a\n* subscription- (and unsubscription-) based mechanism that monitors these\n* handlers.\n*\n* Every time you call `.subscribe()`, `.then()` `.catch()` or `.finally()` on a\n* `ProxyPromise<T>` it returns a `SubscribedPromise<T>` having an additional\n* `unsubscribe()` method. Calling `unsubscribe()` detaches reference chains\n* from the original, potentially long-lived Promise, eliminating memory leaks.\n*\n* This approach can eliminate the memory leaks that otherwise come about from\n* repeated `race()` or `any()` calls invoking `.then()` and `.catch()` multiple\n* times on the same long-lived native Promise (subscriptions which can never be\n* cleaned up).\n*\n* `Unpromise.race(promises)` is a reference implementation of `Promise.race`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.any(promises)` is a reference implementation of `Promise.any`\n* avoiding memory leaks when using long-lived unsettled Promises.\n*\n* `Unpromise.resolve(promise)` returns an ephemeral `SubscribedPromise<T>` for\n* any given `Promise<T>` facilitating arbitrary async/await patterns. Behind\n* the scenes, `resolve` is implemented simply as\n* `Unpromise.proxy(promise).subscribe()`. Don't forget to call `.unsubscribe()`\n* to tidy up!\n*\n*/ var Unpromise = class Unpromise {\n    constructor(arg){\n        (0, import_defineProperty.default)(this, \"promise\", void 0);\n        (0, import_defineProperty.default)(this, \"subscribers\", []);\n        (0, import_defineProperty.default)(this, \"settlement\", null);\n        (0, import_defineProperty.default)(this, _Symbol$toStringTag, \"Unpromise\");\n        if (typeof arg === \"function\") this.promise = new Promise(arg);\n        else this.promise = arg;\n        const thenReturn = this.promise.then((value)=>{\n            const { subscribers } = this;\n            this.subscribers = null;\n            this.settlement = {\n                status: \"fulfilled\",\n                value\n            };\n            subscribers === null || subscribers === void 0 || subscribers.forEach(({ resolve })=>{\n                resolve(value);\n            });\n        });\n        if (\"catch\" in thenReturn) thenReturn.catch((reason)=>{\n            const { subscribers } = this;\n            this.subscribers = null;\n            this.settlement = {\n                status: \"rejected\",\n                reason\n            };\n            subscribers === null || subscribers === void 0 || subscribers.forEach(({ reject })=>{\n                reject(reason);\n            });\n        });\n    }\n    /** Create a promise that mitigates uncontrolled subscription to a long-lived\n\t* Promise via .then() and .catch() - otherwise a source of memory leaks.\n\t*\n\t* The returned promise has an `unsubscribe()` method which can be called when\n\t* the Promise is no longer being tracked by application logic, and which\n\t* ensures that there is no reference chain from the original promise to the\n\t* new one, and therefore no memory leak.\n\t*\n\t* If original promise has not yet settled, this adds a new unique promise\n\t* that listens to then/catch events, along with an `unsubscribe()` method to\n\t* detach it.\n\t*\n\t* If original promise has settled, then creates a new Promise.resolve() or\n\t* Promise.reject() and provided unsubscribe is a noop.\n\t*\n\t* If you call `unsubscribe()` before the returned Promise has settled, it\n\t* will never settle.\n\t*/ subscribe() {\n        let promise;\n        let unsubscribe;\n        const { settlement } = this;\n        if (settlement === null) {\n            if (this.subscribers === null) throw new Error(\"Unpromise settled but still has subscribers\");\n            const subscriber = withResolvers();\n            this.subscribers = listWithMember(this.subscribers, subscriber);\n            promise = subscriber.promise;\n            unsubscribe = ()=>{\n                if (this.subscribers !== null) this.subscribers = listWithoutMember(this.subscribers, subscriber);\n            };\n        } else {\n            const { status } = settlement;\n            if (status === \"fulfilled\") promise = Promise.resolve(settlement.value);\n            else promise = Promise.reject(settlement.reason);\n            unsubscribe = NOOP;\n        }\n        return Object.assign(promise, {\n            unsubscribe\n        });\n    }\n    /** STANDARD PROMISE METHODS (but returning a SubscribedPromise) */ then(onfulfilled, onrejected) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.then(onfulfilled, onrejected), {\n            unsubscribe\n        });\n    }\n    catch(onrejected) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.catch(onrejected), {\n            unsubscribe\n        });\n    }\n    finally(onfinally) {\n        const subscribed = this.subscribe();\n        const { unsubscribe } = subscribed;\n        return Object.assign(subscribed.finally(onfinally), {\n            unsubscribe\n        });\n    }\n    /** Unpromise STATIC METHODS */ /** Create or Retrieve the proxy Unpromise (a re-used Unpromise for the VM lifetime\n\t* of the provided Promise reference) */ static proxy(promise) {\n        const cached = Unpromise.getSubscribablePromise(promise);\n        return typeof cached !== \"undefined\" ? cached : Unpromise.createSubscribablePromise(promise);\n    }\n    /** Create and store an Unpromise keyed by an original Promise. */ static createSubscribablePromise(promise) {\n        const created = new Unpromise(promise);\n        subscribableCache.set(promise, created);\n        subscribableCache.set(created, created);\n        return created;\n    }\n    /** Retrieve a previously-created Unpromise keyed by an original Promise. */ static getSubscribablePromise(promise) {\n        return subscribableCache.get(promise);\n    }\n    /** Promise STATIC METHODS */ /** Lookup the Unpromise for this promise, and derive a SubscribedPromise from\n\t* it (that can be later unsubscribed to eliminate Memory leaks) */ static resolve(value) {\n        const promise = typeof value === \"object\" && value !== null && \"then\" in value && typeof value.then === \"function\" ? value : Promise.resolve(value);\n        return Unpromise.proxy(promise).subscribe();\n    }\n    static async any(values) {\n        const valuesArray = Array.isArray(values) ? values : [\n            ...values\n        ];\n        const subscribedPromises = valuesArray.map(Unpromise.resolve);\n        try {\n            return await Promise.any(subscribedPromises);\n        } finally{\n            subscribedPromises.forEach(({ unsubscribe })=>{\n                unsubscribe();\n            });\n        }\n    }\n    static async race(values) {\n        const valuesArray = Array.isArray(values) ? values : [\n            ...values\n        ];\n        const subscribedPromises = valuesArray.map(Unpromise.resolve);\n        try {\n            return await Promise.race(subscribedPromises);\n        } finally{\n            subscribedPromises.forEach(({ unsubscribe })=>{\n                unsubscribe();\n            });\n        }\n    }\n    /** Create a race of SubscribedPromises that will fulfil to a single winning\n\t* Promise (in a 1-Tuple). Eliminates memory leaks from long-lived promises\n\t* accumulating .then() and .catch() subscribers. Allows simple logic to\n\t* consume the result, like...\n\t* ```ts\n\t* const [ winner ] = await Unpromise.race([ promiseA, promiseB ]);\n\t* if(winner === promiseB){\n\t*   const result = await promiseB;\n\t*   // do the thing\n\t* }\n\t* ```\n\t* */ static async raceReferences(promises) {\n        const selfPromises = promises.map(resolveSelfTuple);\n        try {\n            return await Promise.race(selfPromises);\n        } finally{\n            for (const promise of selfPromises)promise.unsubscribe();\n        }\n    }\n};\n/** Promises a 1-tuple containing the original promise when it resolves. Allows\n* awaiting the eventual Promise ***reference*** (easy to destructure and\n* exactly compare with ===). Avoids resolving to the Promise ***value*** (which\n* may be ambiguous and therefore hard to identify as the winner of a race).\n* You can call unsubscribe on the Promise to mitigate memory leaks.\n* */ function resolveSelfTuple(promise) {\n    return Unpromise.proxy(promise).then(()=>[\n            promise\n        ]);\n}\n/** VENDORED (Future) PROMISE UTILITIES */ /** Reference implementation of https://github.com/tc39/proposal-promise-with-resolvers */ function withResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise((_resolve, _reject)=>{\n        resolve = _resolve;\n        reject = _reject;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n/** IMMUTABLE LIST OPERATIONS */ function listWithMember(arr, member) {\n    return [\n        ...arr,\n        member\n    ];\n}\nfunction listWithoutIndex(arr, index) {\n    return [\n        ...arr.slice(0, index),\n        ...arr.slice(index + 1)\n    ];\n}\nfunction listWithoutMember(arr, member) {\n    const index = arr.indexOf(member);\n    if (index !== -1) return listWithoutIndex(arr, index);\n    return arr;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/disposable.ts\nvar _Symbol, _Symbol$dispose, _Symbol2, _Symbol2$asyncDispose;\n(_Symbol$dispose = (_Symbol = Symbol).dispose) !== null && _Symbol$dispose !== void 0 || (_Symbol.dispose = Symbol());\n(_Symbol2$asyncDispose = (_Symbol2 = Symbol).asyncDispose) !== null && _Symbol2$asyncDispose !== void 0 || (_Symbol2.asyncDispose = Symbol());\n/**\n* Takes a value and a dispose function and returns a new object that implements the Disposable interface.\n* The returned object is the original value augmented with a Symbol.dispose method.\n* @param thing The value to make disposable\n* @param dispose Function to call when disposing the resource\n* @returns The original value with Symbol.dispose method added\n*/ function makeResource(thing, dispose) {\n    const it = thing;\n    const existing = it[Symbol.dispose];\n    it[Symbol.dispose] = ()=>{\n        dispose();\n        existing === null || existing === void 0 || existing();\n    };\n    return it;\n}\n/**\n* Takes a value and an async dispose function and returns a new object that implements the AsyncDisposable interface.\n* The returned object is the original value augmented with a Symbol.asyncDispose method.\n* @param thing The value to make async disposable\n* @param dispose Async function to call when disposing the resource\n* @returns The original value with Symbol.asyncDispose method added\n*/ function makeAsyncResource(thing, dispose) {\n    const it = thing;\n    const existing = it[Symbol.asyncDispose];\n    it[Symbol.asyncDispose] = async ()=>{\n        await dispose();\n        await (existing === null || existing === void 0 ? void 0 : existing());\n    };\n    return it;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/timerResource.ts\nconst disposablePromiseTimerResult = Symbol();\nfunction timerResource(ms) {\n    let timer = null;\n    return makeResource({\n        start () {\n            if (timer) throw new Error(\"Timer already started\");\n            const promise = new Promise((resolve)=>{\n                timer = setTimeout(()=>resolve(disposablePromiseTimerResult), ms);\n            });\n            return promise;\n        }\n    }, ()=>{\n        if (timer) clearTimeout(timer);\n    });\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\nvar require_usingCtx = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\" (exports, module) {\n        function _usingCtx() {\n            var r = \"function\" == typeof SuppressedError ? SuppressedError : function(r$1, e$1) {\n                var n$1 = Error();\n                return n$1.name = \"SuppressedError\", n$1.error = r$1, n$1.suppressed = e$1, n$1;\n            }, e = {}, n = [];\n            function using(r$1, e$1) {\n                if (null != e$1) {\n                    if (Object(e$1) !== e$1) throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");\n                    if (r$1) var o = e$1[Symbol.asyncDispose || Symbol[\"for\"](\"Symbol.asyncDispose\")];\n                    if (void 0 === o && (o = e$1[Symbol.dispose || Symbol[\"for\"](\"Symbol.dispose\")], r$1)) var t = o;\n                    if (\"function\" != typeof o) throw new TypeError(\"Object is not disposable.\");\n                    t && (o = function o$1() {\n                        try {\n                            t.call(e$1);\n                        } catch (r$2) {\n                            return Promise.reject(r$2);\n                        }\n                    }), n.push({\n                        v: e$1,\n                        d: o,\n                        a: r$1\n                    });\n                } else r$1 && n.push({\n                    d: e$1,\n                    a: r$1\n                });\n                return e$1;\n            }\n            return {\n                e,\n                u: using.bind(null, !1),\n                a: using.bind(null, !0),\n                d: function d() {\n                    var o, t = this.e, s = 0;\n                    function next() {\n                        for(; o = n.pop();)try {\n                            if (!o.a && 1 === s) return s = 0, n.push(o), Promise.resolve().then(next);\n                            if (o.d) {\n                                var r$1 = o.d.call(o.v);\n                                if (o.a) return s |= 2, Promise.resolve(r$1).then(next, err);\n                            } else s |= 1;\n                        } catch (r$2) {\n                            return err(r$2);\n                        }\n                        if (1 === s) return t !== e ? Promise.reject(t) : Promise.resolve();\n                        if (t !== e) throw t;\n                    }\n                    function err(n$1) {\n                        return t = t !== e ? new r(n$1, t) : n$1, next();\n                    }\n                    return next();\n                }\n            };\n        }\n        module.exports = _usingCtx, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/OverloadYield.js\nvar require_OverloadYield = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/OverloadYield.js\" (exports, module) {\n        function _OverloadYield(e, d) {\n            this.v = e, this.k = d;\n        }\n        module.exports = _OverloadYield, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/awaitAsyncGenerator.js\nvar require_awaitAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/awaitAsyncGenerator.js\" (exports, module) {\n        var OverloadYield$2 = require_OverloadYield();\n        function _awaitAsyncGenerator$5(e) {\n            return new OverloadYield$2(e, 0);\n        }\n        module.exports = _awaitAsyncGenerator$5, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/wrapAsyncGenerator.js\nvar require_wrapAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/wrapAsyncGenerator.js\" (exports, module) {\n        var OverloadYield$1 = require_OverloadYield();\n        function _wrapAsyncGenerator$6(e) {\n            return function() {\n                return new AsyncGenerator(e.apply(this, arguments));\n            };\n        }\n        function AsyncGenerator(e) {\n            var r, t;\n            function resume(r$1, t$1) {\n                try {\n                    var n = e[r$1](t$1), o = n.value, u = o instanceof OverloadYield$1;\n                    Promise.resolve(u ? o.v : o).then(function(t$2) {\n                        if (u) {\n                            var i = \"return\" === r$1 ? \"return\" : \"next\";\n                            if (!o.k || t$2.done) return resume(i, t$2);\n                            t$2 = e[i](t$2).value;\n                        }\n                        settle(n.done ? \"return\" : \"normal\", t$2);\n                    }, function(e$1) {\n                        resume(\"throw\", e$1);\n                    });\n                } catch (e$1) {\n                    settle(\"throw\", e$1);\n                }\n            }\n            function settle(e$1, n) {\n                switch(e$1){\n                    case \"return\":\n                        r.resolve({\n                            value: n,\n                            done: !0\n                        });\n                        break;\n                    case \"throw\":\n                        r.reject(n);\n                        break;\n                    default:\n                        r.resolve({\n                            value: n,\n                            done: !1\n                        });\n                }\n                (r = r.next) ? resume(r.key, r.arg) : t = null;\n            }\n            this._invoke = function(e$1, n) {\n                return new Promise(function(o, u) {\n                    var i = {\n                        key: e$1,\n                        arg: n,\n                        resolve: o,\n                        reject: u,\n                        next: null\n                    };\n                    t ? t = t.next = i : (r = t = i, resume(e$1, n));\n                });\n            }, \"function\" != typeof e[\"return\"] && (this[\"return\"] = void 0);\n        }\n        AsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function() {\n            return this;\n        }, AsyncGenerator.prototype.next = function(e) {\n            return this._invoke(\"next\", e);\n        }, AsyncGenerator.prototype[\"throw\"] = function(e) {\n            return this._invoke(\"throw\", e);\n        }, AsyncGenerator.prototype[\"return\"] = function(e) {\n            return this._invoke(\"return\", e);\n        };\n        module.exports = _wrapAsyncGenerator$6, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/asyncIterable.ts\nvar import_usingCtx$4 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_awaitAsyncGenerator$4 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$5 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nfunction iteratorResource(iterable) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    if (iterator[Symbol.asyncDispose]) return iterator;\n    return makeAsyncResource(iterator, async ()=>{\n        var _iterator$return;\n        await ((_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n    });\n}\n/**\n* Derives a new {@link AsyncGenerator} based on {@link iterable}, that automatically aborts after the specified duration.\n*/ function withMaxDuration(_x, _x2) {\n    return _withMaxDuration.apply(this, arguments);\n}\nfunction _withMaxDuration() {\n    _withMaxDuration = (0, import_wrapAsyncGenerator$5.default)(function*(iterable, opts) {\n        try {\n            var _usingCtx$1 = (0, import_usingCtx$4.default)();\n            const iterator = _usingCtx$1.a(iteratorResource(iterable));\n            const timer = _usingCtx$1.u(timerResource(opts.maxDurationMs));\n            const timerPromise = timer.start();\n            let result;\n            while(true){\n                result = yield (0, import_awaitAsyncGenerator$4.default)(Unpromise.race([\n                    iterator.next(),\n                    timerPromise\n                ]));\n                if (result === disposablePromiseTimerResult) throwAbortError();\n                if (result.done) return result;\n                yield result.value;\n                result = null;\n            }\n        } catch (_) {\n            _usingCtx$1.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator$4.default)(_usingCtx$1.d());\n        }\n    });\n    return _withMaxDuration.apply(this, arguments);\n}\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields its first\n* {@link count} values. Then, a grace period of {@link gracePeriodMs} is started in which further\n* values may still come through. After this period, the generator aborts.\n*/ function takeWithGrace(_x3, _x4) {\n    return _takeWithGrace.apply(this, arguments);\n}\nfunction _takeWithGrace() {\n    _takeWithGrace = (0, import_wrapAsyncGenerator$5.default)(function*(iterable, opts) {\n        try {\n            var _usingCtx3 = (0, import_usingCtx$4.default)();\n            const iterator = _usingCtx3.a(iteratorResource(iterable));\n            let result;\n            const timer = _usingCtx3.u(timerResource(opts.gracePeriodMs));\n            let count = opts.count;\n            let timerPromise = new Promise(()=>{});\n            while(true){\n                result = yield (0, import_awaitAsyncGenerator$4.default)(Unpromise.race([\n                    iterator.next(),\n                    timerPromise\n                ]));\n                if (result === disposablePromiseTimerResult) throwAbortError();\n                if (result.done) return result.value;\n                yield result.value;\n                if (--count === 0) timerPromise = timer.start();\n                result = null;\n            }\n        } catch (_) {\n            _usingCtx3.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator$4.default)(_usingCtx3.d());\n        }\n    });\n    return _takeWithGrace.apply(this, arguments);\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/createDeferred.ts\nfunction createDeferred() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/mergeAsyncIterables.ts\nvar import_usingCtx$3 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_awaitAsyncGenerator$3 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$4 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nfunction createManagedIterator(iterable, onResult) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    let state = \"idle\";\n    function cleanup() {\n        state = \"done\";\n        onResult = ()=>{};\n    }\n    function pull() {\n        if (state !== \"idle\") return;\n        state = \"pending\";\n        const next = iterator.next();\n        next.then((result)=>{\n            if (result.done) {\n                state = \"done\";\n                onResult({\n                    status: \"return\",\n                    value: result.value\n                });\n                cleanup();\n                return;\n            }\n            state = \"idle\";\n            onResult({\n                status: \"yield\",\n                value: result.value\n            });\n        }).catch((cause)=>{\n            onResult({\n                status: \"error\",\n                error: cause\n            });\n            cleanup();\n        });\n    }\n    return {\n        pull,\n        destroy: async ()=>{\n            var _iterator$return;\n            cleanup();\n            await ((_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n        }\n    };\n}\n/**\n* Creates a new async iterable that merges multiple async iterables into a single stream.\n* Values from the input iterables are yielded in the order they resolve, similar to Promise.race().\n*\n* New iterables can be added dynamically using the returned {@link MergedAsyncIterables.add} method, even after iteration has started.\n*\n* If any of the input iterables throws an error, that error will be propagated through the merged stream.\n* Other iterables will not continue to be processed.\n*\n* @template TYield The type of values yielded by the input iterables\n*/ function mergeAsyncIterables() {\n    let state = \"idle\";\n    let flushSignal = createDeferred();\n    /**\n\t* used while {@link state} is `idle`\n\t*/ const iterables = [];\n    /**\n\t* used while {@link state} is `pending`\n\t*/ const iterators = /* @__PURE__ */ new Set();\n    const buffer = [];\n    function initIterable(iterable) {\n        if (state !== \"pending\") return;\n        const iterator = createManagedIterator(iterable, (result)=>{\n            if (state !== \"pending\") return;\n            switch(result.status){\n                case \"yield\":\n                    buffer.push([\n                        iterator,\n                        result\n                    ]);\n                    break;\n                case \"return\":\n                    iterators.delete(iterator);\n                    break;\n                case \"error\":\n                    buffer.push([\n                        iterator,\n                        result\n                    ]);\n                    iterators.delete(iterator);\n                    break;\n            }\n            flushSignal.resolve();\n        });\n        iterators.add(iterator);\n        iterator.pull();\n    }\n    return {\n        add (iterable) {\n            switch(state){\n                case \"idle\":\n                    iterables.push(iterable);\n                    break;\n                case \"pending\":\n                    initIterable(iterable);\n                    break;\n                case \"done\":\n                    break;\n            }\n        },\n        [Symbol.asyncIterator] () {\n            return (0, import_wrapAsyncGenerator$4.default)(function*() {\n                try {\n                    var _usingCtx$1 = (0, import_usingCtx$3.default)();\n                    if (state !== \"idle\") throw new Error(\"Cannot iterate twice\");\n                    state = \"pending\";\n                    const _finally = _usingCtx$1.a(makeAsyncResource({}, async ()=>{\n                        state = \"done\";\n                        const errors = [];\n                        await Promise.all(Array.from(iterators.values()).map(async (it)=>{\n                            try {\n                                await it.destroy();\n                            } catch (cause) {\n                                errors.push(cause);\n                            }\n                        }));\n                        buffer.length = 0;\n                        iterators.clear();\n                        flushSignal.resolve();\n                        if (errors.length > 0) throw new AggregateError(errors);\n                    }));\n                    while(iterables.length > 0)initIterable(iterables.shift());\n                    while(iterators.size > 0){\n                        yield (0, import_awaitAsyncGenerator$3.default)(flushSignal.promise);\n                        while(buffer.length > 0){\n                            const [iterator, result] = buffer.shift();\n                            switch(result.status){\n                                case \"yield\":\n                                    yield result.value;\n                                    iterator.pull();\n                                    break;\n                                case \"error\":\n                                    throw result.error;\n                            }\n                        }\n                        flushSignal = createDeferred();\n                    }\n                } catch (_) {\n                    _usingCtx$1.e = _;\n                } finally{\n                    yield (0, import_awaitAsyncGenerator$3.default)(_usingCtx$1.d());\n                }\n            })();\n        }\n    };\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/readableStreamFrom.ts\n/**\n* Creates a ReadableStream from an AsyncIterable.\n*\n* @param iterable - The source AsyncIterable to stream from\n* @returns A ReadableStream that yields values from the AsyncIterable\n*/ function readableStreamFrom(iterable) {\n    const iterator = iterable[Symbol.asyncIterator]();\n    return new ReadableStream({\n        async cancel () {\n            var _iterator$return;\n            await ((_iterator$return = iterator.return) === null || _iterator$return === void 0 ? void 0 : _iterator$return.call(iterator));\n        },\n        async pull (controller) {\n            const result = await iterator.next();\n            if (result.done) {\n                controller.close();\n                return;\n            }\n            controller.enqueue(result.value);\n        }\n    });\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/utils/withPing.ts\nvar import_usingCtx$2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_awaitAsyncGenerator$2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$3 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nconst PING_SYM = Symbol(\"ping\");\n/**\n* Derives a new {@link AsyncGenerator} based of {@link iterable}, that yields {@link PING_SYM}\n* whenever no value has been yielded for {@link pingIntervalMs}.\n*/ function withPing(_x, _x2) {\n    return _withPing.apply(this, arguments);\n}\nfunction _withPing() {\n    _withPing = (0, import_wrapAsyncGenerator$3.default)(function*(iterable, pingIntervalMs) {\n        try {\n            var _usingCtx$1 = (0, import_usingCtx$2.default)();\n            const iterator = _usingCtx$1.a(iteratorResource(iterable));\n            let result;\n            let nextPromise = iterator.next();\n            while(true)try {\n                var _usingCtx3 = (0, import_usingCtx$2.default)();\n                const pingPromise = _usingCtx3.u(timerResource(pingIntervalMs));\n                result = yield (0, import_awaitAsyncGenerator$2.default)(Unpromise.race([\n                    nextPromise,\n                    pingPromise.start()\n                ]));\n                if (result === disposablePromiseTimerResult) {\n                    yield PING_SYM;\n                    continue;\n                }\n                if (result.done) return result.value;\n                nextPromise = iterator.next();\n                yield result.value;\n                result = null;\n            } catch (_) {\n                _usingCtx3.e = _;\n            } finally{\n                _usingCtx3.d();\n            }\n        } catch (_) {\n            _usingCtx$1.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator$2.default)(_usingCtx$1.d());\n        }\n    });\n    return _withPing.apply(this, arguments);\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\nvar require_asyncIterator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\" (exports, module) {\n        function _asyncIterator$2(r) {\n            var n, t, o, e = 2;\n            for(\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;){\n                if (t && null != (n = r[t])) return n.call(r);\n                if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));\n                t = \"@@asyncIterator\", o = \"@@iterator\";\n            }\n            throw new TypeError(\"Object is not async iterable\");\n        }\n        function AsyncFromSyncIterator(r) {\n            function AsyncFromSyncIteratorContinuation(r$1) {\n                if (Object(r$1) !== r$1) return Promise.reject(new TypeError(r$1 + \" is not an object.\"));\n                var n = r$1.done;\n                return Promise.resolve(r$1.value).then(function(r$2) {\n                    return {\n                        value: r$2,\n                        done: n\n                    };\n                });\n            }\n            return AsyncFromSyncIterator = function AsyncFromSyncIterator$1(r$1) {\n                this.s = r$1, this.n = r$1.next;\n            }, AsyncFromSyncIterator.prototype = {\n                s: null,\n                n: null,\n                next: function next() {\n                    return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n                },\n                \"return\": function _return(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.resolve({\n                        value: r$1,\n                        done: !0\n                    }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                },\n                \"throw\": function _throw(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.reject(r$1) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                }\n            }, new AsyncFromSyncIterator(r);\n        }\n        module.exports = _asyncIterator$2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/stream/jsonl.ts\nvar import_awaitAsyncGenerator$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nvar import_usingCtx$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nvar import_asyncIterator$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_asyncIterator(), 1);\nfunction isPlainObject(value) {\n    return Object.prototype.toString.call(value) === \"[object Object]\";\n}\nconst CHUNK_VALUE_TYPE_PROMISE = 0;\nconst CHUNK_VALUE_TYPE_ASYNC_ITERABLE = 1;\nconst PROMISE_STATUS_FULFILLED = 0;\nconst PROMISE_STATUS_REJECTED = 1;\nconst ASYNC_ITERABLE_STATUS_RETURN = 0;\nconst ASYNC_ITERABLE_STATUS_YIELD = 1;\nconst ASYNC_ITERABLE_STATUS_ERROR = 2;\nfunction isPromise(value) {\n    return ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(value) || (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isFunction)(value)) && typeof (value === null || value === void 0 ? void 0 : value[\"then\"]) === \"function\" && typeof (value === null || value === void 0 ? void 0 : value[\"catch\"]) === \"function\";\n}\nvar MaxDepthError = class extends Error {\n    constructor(path){\n        super(\"Max depth reached at path: \" + path.join(\".\"));\n        this.path = path;\n    }\n};\nfunction createBatchStreamProducer(_x3) {\n    return _createBatchStreamProducer.apply(this, arguments);\n}\nfunction _createBatchStreamProducer() {\n    _createBatchStreamProducer = (0, import_wrapAsyncGenerator$2.default)(function*(opts) {\n        const { data } = opts;\n        let counter = 0;\n        const placeholder = 0;\n        const mergedIterables = mergeAsyncIterables();\n        function registerAsync(callback) {\n            const idx = counter++;\n            const iterable$1 = callback(idx);\n            mergedIterables.add(iterable$1);\n            return idx;\n        }\n        function encodePromise(promise, path) {\n            return registerAsync(/* @__PURE__ */ function() {\n                var _ref = (0, import_wrapAsyncGenerator$2.default)(function*(idx) {\n                    const error = checkMaxDepth(path);\n                    if (error) {\n                        promise.catch((cause)=>{\n                            var _opts$onError;\n                            (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, {\n                                error: cause,\n                                path\n                            });\n                        });\n                        promise = Promise.reject(error);\n                    }\n                    try {\n                        const next = yield (0, import_awaitAsyncGenerator$1.default)(promise);\n                        yield [\n                            idx,\n                            PROMISE_STATUS_FULFILLED,\n                            encode(next, path)\n                        ];\n                    } catch (cause) {\n                        var _opts$onError2, _opts$formatError;\n                        (_opts$onError2 = opts.onError) === null || _opts$onError2 === void 0 || _opts$onError2.call(opts, {\n                            error: cause,\n                            path\n                        });\n                        yield [\n                            idx,\n                            PROMISE_STATUS_REJECTED,\n                            (_opts$formatError = opts.formatError) === null || _opts$formatError === void 0 ? void 0 : _opts$formatError.call(opts, {\n                                error: cause,\n                                path\n                            })\n                        ];\n                    }\n                });\n                return function(_x) {\n                    return _ref.apply(this, arguments);\n                };\n            }());\n        }\n        function encodeAsyncIterable(iterable$1, path) {\n            return registerAsync(/* @__PURE__ */ function() {\n                var _ref2 = (0, import_wrapAsyncGenerator$2.default)(function*(idx) {\n                    try {\n                        var _usingCtx$1 = (0, import_usingCtx$1.default)();\n                        const error = checkMaxDepth(path);\n                        if (error) throw error;\n                        const iterator = _usingCtx$1.a(iteratorResource(iterable$1));\n                        try {\n                            while(true){\n                                const next = yield (0, import_awaitAsyncGenerator$1.default)(iterator.next());\n                                if (next.done) {\n                                    yield [\n                                        idx,\n                                        ASYNC_ITERABLE_STATUS_RETURN,\n                                        encode(next.value, path)\n                                    ];\n                                    break;\n                                }\n                                yield [\n                                    idx,\n                                    ASYNC_ITERABLE_STATUS_YIELD,\n                                    encode(next.value, path)\n                                ];\n                            }\n                        } catch (cause) {\n                            var _opts$onError3, _opts$formatError2;\n                            (_opts$onError3 = opts.onError) === null || _opts$onError3 === void 0 || _opts$onError3.call(opts, {\n                                error: cause,\n                                path\n                            });\n                            yield [\n                                idx,\n                                ASYNC_ITERABLE_STATUS_ERROR,\n                                (_opts$formatError2 = opts.formatError) === null || _opts$formatError2 === void 0 ? void 0 : _opts$formatError2.call(opts, {\n                                    error: cause,\n                                    path\n                                })\n                            ];\n                        }\n                    } catch (_) {\n                        _usingCtx$1.e = _;\n                    } finally{\n                        yield (0, import_awaitAsyncGenerator$1.default)(_usingCtx$1.d());\n                    }\n                });\n                return function(_x2) {\n                    return _ref2.apply(this, arguments);\n                };\n            }());\n        }\n        function checkMaxDepth(path) {\n            if (opts.maxDepth && path.length > opts.maxDepth) return new MaxDepthError(path);\n            return null;\n        }\n        function encodeAsync(value, path) {\n            if (isPromise(value)) return [\n                CHUNK_VALUE_TYPE_PROMISE,\n                encodePromise(value, path)\n            ];\n            if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(value)) {\n                if (opts.maxDepth && path.length >= opts.maxDepth) throw new Error(\"Max depth reached\");\n                return [\n                    CHUNK_VALUE_TYPE_ASYNC_ITERABLE,\n                    encodeAsyncIterable(value, path)\n                ];\n            }\n            return null;\n        }\n        function encode(value, path) {\n            if (value === void 0) return [\n                []\n            ];\n            const reg = encodeAsync(value, path);\n            if (reg) return [\n                [\n                    placeholder\n                ],\n                [\n                    null,\n                    ...reg\n                ]\n            ];\n            if (!isPlainObject(value)) return [\n                [\n                    value\n                ]\n            ];\n            const newObj = {};\n            const asyncValues = [];\n            for (const [key, item] of Object.entries(value)){\n                const transformed = encodeAsync(item, [\n                    ...path,\n                    key\n                ]);\n                if (!transformed) {\n                    newObj[key] = item;\n                    continue;\n                }\n                newObj[key] = placeholder;\n                asyncValues.push([\n                    key,\n                    ...transformed\n                ]);\n            }\n            return [\n                [\n                    newObj\n                ],\n                ...asyncValues\n            ];\n        }\n        const newHead = {};\n        for (const [key, item] of Object.entries(data))newHead[key] = encode(item, [\n            key\n        ]);\n        yield newHead;\n        let iterable = mergedIterables;\n        if (opts.pingMs) iterable = withPing(mergedIterables, opts.pingMs);\n        var _iteratorAbruptCompletion = false;\n        var _didIteratorError = false;\n        var _iteratorError;\n        try {\n            for(var _iterator = (0, import_asyncIterator$1.default)(iterable), _step; _iteratorAbruptCompletion = !(_step = yield (0, import_awaitAsyncGenerator$1.default)(_iterator.next())).done; _iteratorAbruptCompletion = false){\n                const value = _step.value;\n                yield value;\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (_iteratorAbruptCompletion && _iterator.return != null) yield (0, import_awaitAsyncGenerator$1.default)(_iterator.return());\n            } finally{\n                if (_didIteratorError) throw _iteratorError;\n            }\n        }\n    });\n    return _createBatchStreamProducer.apply(this, arguments);\n}\n/**\n* JSON Lines stream producer\n* @see https://jsonlines.org/\n*/ function jsonlStreamProducer(opts) {\n    let stream = readableStreamFrom(createBatchStreamProducer(opts));\n    const { serialize } = opts;\n    if (serialize) stream = stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (chunk === PING_SYM) controller.enqueue(PING_SYM);\n            else controller.enqueue(serialize(chunk));\n        }\n    }));\n    return stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (chunk === PING_SYM) controller.enqueue(\" \");\n            else controller.enqueue(JSON.stringify(chunk) + \"\\n\");\n        }\n    })).pipeThrough(new TextEncoderStream());\n}\nvar AsyncError = class extends Error {\n    constructor(data){\n        super(\"Received error from server\");\n        this.data = data;\n    }\n};\nconst nodeJsStreamToReaderEsque = (source)=>{\n    return {\n        getReader () {\n            const stream = new ReadableStream({\n                start (controller) {\n                    source.on(\"data\", (chunk)=>{\n                        controller.enqueue(chunk);\n                    });\n                    source.on(\"end\", ()=>{\n                        controller.close();\n                    });\n                    source.on(\"error\", (error)=>{\n                        controller.error(error);\n                    });\n                }\n            });\n            return stream.getReader();\n        }\n    };\n};\nfunction createLineAccumulator(from) {\n    const reader = \"getReader\" in from ? from.getReader() : nodeJsStreamToReaderEsque(from).getReader();\n    let lineAggregate = \"\";\n    return new ReadableStream({\n        async pull (controller) {\n            const { done, value } = await reader.read();\n            if (done) controller.close();\n            else controller.enqueue(value);\n        },\n        cancel () {\n            return reader.cancel();\n        }\n    }).pipeThrough(new TextDecoderStream()).pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            var _parts$pop;\n            lineAggregate += chunk;\n            const parts = lineAggregate.split(\"\\n\");\n            lineAggregate = (_parts$pop = parts.pop()) !== null && _parts$pop !== void 0 ? _parts$pop : \"\";\n            for (const part of parts)controller.enqueue(part);\n        }\n    }));\n}\nfunction createConsumerStream(from) {\n    const stream = createLineAccumulator(from);\n    let sentHead = false;\n    return stream.pipeThrough(new TransformStream({\n        transform (line, controller) {\n            if (!sentHead) {\n                const head = JSON.parse(line);\n                controller.enqueue(head);\n                sentHead = true;\n            } else {\n                const chunk = JSON.parse(line);\n                controller.enqueue(chunk);\n            }\n        }\n    }));\n}\n/**\n* Creates a handler for managing stream controllers and their lifecycle\n*/ function createStreamsManager(abortController) {\n    const controllerMap = /* @__PURE__ */ new Map();\n    /**\n\t* Checks if there are no pending controllers or deferred promises\n\t*/ function isEmpty() {\n        return Array.from(controllerMap.values()).every((c)=>c.closed);\n    }\n    /**\n\t* Creates a stream controller\n\t*/ function createStreamController() {\n        let originalController;\n        const stream = new ReadableStream({\n            start (controller) {\n                originalController = controller;\n            }\n        });\n        const streamController = {\n            enqueue: (v)=>originalController.enqueue(v),\n            close: ()=>{\n                originalController.close();\n                clear();\n                if (isEmpty()) abortController.abort();\n            },\n            closed: false,\n            getReaderResource: ()=>{\n                const reader = stream.getReader();\n                return makeResource(reader, ()=>{\n                    reader.releaseLock();\n                    streamController.close();\n                });\n            },\n            error: (reason)=>{\n                originalController.error(reason);\n                clear();\n            }\n        };\n        function clear() {\n            Object.assign(streamController, {\n                closed: true,\n                close: ()=>{},\n                enqueue: ()=>{},\n                getReaderResource: null,\n                error: ()=>{}\n            });\n        }\n        return streamController;\n    }\n    /**\n\t* Gets or creates a stream controller\n\t*/ function getOrCreate(chunkId) {\n        let c = controllerMap.get(chunkId);\n        if (!c) {\n            c = createStreamController();\n            controllerMap.set(chunkId, c);\n        }\n        return c;\n    }\n    /**\n\t* Cancels all pending controllers and rejects deferred promises\n\t*/ function cancelAll(reason) {\n        for (const controller of controllerMap.values())controller.error(reason);\n    }\n    return {\n        getOrCreate,\n        isEmpty,\n        cancelAll\n    };\n}\n/**\n* JSON Lines stream consumer\n* @see https://jsonlines.org/\n*/ async function jsonlStreamConsumer(opts) {\n    const { deserialize = (v)=>v } = opts;\n    let source = createConsumerStream(opts.from);\n    if (deserialize) source = source.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            controller.enqueue(deserialize(chunk));\n        }\n    }));\n    let headDeferred = createDeferred();\n    const streamManager = createStreamsManager(opts.abortController);\n    function decodeChunkDefinition(value) {\n        const [_path, type, chunkId] = value;\n        const controller = streamManager.getOrCreate(chunkId);\n        switch(type){\n            case CHUNK_VALUE_TYPE_PROMISE:\n                return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async ()=>{\n                    try {\n                        var _usingCtx3 = (0, import_usingCtx$1.default)();\n                        const reader = _usingCtx3.u(controller.getReaderResource());\n                        const { value: value$1 } = await reader.read();\n                        const [_chunkId, status, data] = value$1;\n                        switch(status){\n                            case PROMISE_STATUS_FULFILLED:\n                                return decode(data);\n                            case PROMISE_STATUS_REJECTED:\n                                var _opts$formatError3, _opts$formatError4;\n                                throw (_opts$formatError3 = (_opts$formatError4 = opts.formatError) === null || _opts$formatError4 === void 0 ? void 0 : _opts$formatError4.call(opts, {\n                                    error: data\n                                })) !== null && _opts$formatError3 !== void 0 ? _opts$formatError3 : new AsyncError(data);\n                        }\n                    } catch (_) {\n                        _usingCtx3.e = _;\n                    } finally{\n                        _usingCtx3.d();\n                    }\n                });\n            case CHUNK_VALUE_TYPE_ASYNC_ITERABLE:\n                return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)((0, import_wrapAsyncGenerator$2.default)(function*() {\n                    try {\n                        var _usingCtx4 = (0, import_usingCtx$1.default)();\n                        const reader = _usingCtx4.u(controller.getReaderResource());\n                        while(true){\n                            const { value: value$1 } = yield (0, import_awaitAsyncGenerator$1.default)(reader.read());\n                            const [_chunkId, status, data] = value$1;\n                            switch(status){\n                                case ASYNC_ITERABLE_STATUS_YIELD:\n                                    yield decode(data);\n                                    break;\n                                case ASYNC_ITERABLE_STATUS_RETURN:\n                                    return decode(data);\n                                case ASYNC_ITERABLE_STATUS_ERROR:\n                                    var _opts$formatError5, _opts$formatError6;\n                                    throw (_opts$formatError5 = (_opts$formatError6 = opts.formatError) === null || _opts$formatError6 === void 0 ? void 0 : _opts$formatError6.call(opts, {\n                                        error: data\n                                    })) !== null && _opts$formatError5 !== void 0 ? _opts$formatError5 : new AsyncError(data);\n                            }\n                        }\n                    } catch (_) {\n                        _usingCtx4.e = _;\n                    } finally{\n                        _usingCtx4.d();\n                    }\n                }));\n        }\n    }\n    function decode(value) {\n        const [[data], ...asyncProps] = value;\n        for (const value$1 of asyncProps){\n            const [key] = value$1;\n            const decoded = decodeChunkDefinition(value$1);\n            if (key === null) return decoded;\n            data[key] = decoded;\n        }\n        return data;\n    }\n    const closeOrAbort = (reason)=>{\n        headDeferred === null || headDeferred === void 0 || headDeferred.reject(reason);\n        streamManager.cancelAll(reason);\n    };\n    source.pipeTo(new WritableStream({\n        write (chunkOrHead) {\n            if (headDeferred) {\n                const head = chunkOrHead;\n                for (const [key, value] of Object.entries(chunkOrHead)){\n                    const parsed = decode(value);\n                    head[key] = parsed;\n                }\n                headDeferred.resolve(head);\n                headDeferred = null;\n                return;\n            }\n            const chunk = chunkOrHead;\n            const [idx] = chunk;\n            const controller = streamManager.getOrCreate(idx);\n            controller.enqueue(chunk);\n        },\n        close: ()=>closeOrAbort(new Error(\"Stream closed\")),\n        abort: closeOrAbort\n    }), {\n        signal: opts.abortController.signal\n    }).catch((error)=>{\n        var _opts$onError4;\n        (_opts$onError4 = opts.onError) === null || _opts$onError4 === void 0 || _opts$onError4.call(opts, {\n            error\n        });\n        closeOrAbort(error);\n    });\n    return [\n        await headDeferred.promise,\n        streamManager\n    ];\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncGeneratorDelegate.js\nvar require_asyncGeneratorDelegate = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncGeneratorDelegate.js\" (exports, module) {\n        var OverloadYield = require_OverloadYield();\n        function _asyncGeneratorDelegate$1(t) {\n            var e = {}, n = !1;\n            function pump(e$1, r) {\n                return n = !0, r = new Promise(function(n$1) {\n                    n$1(t[e$1](r));\n                }), {\n                    done: !1,\n                    value: new OverloadYield(r, 1)\n                };\n            }\n            return e[\"undefined\" != typeof Symbol && Symbol.iterator || \"@@iterator\"] = function() {\n                return this;\n            }, e.next = function(t$1) {\n                return n ? (n = !1, t$1) : pump(\"next\", t$1);\n            }, \"function\" == typeof t[\"throw\"] && (e[\"throw\"] = function(t$1) {\n                if (n) throw n = !1, t$1;\n                return pump(\"throw\", t$1);\n            }), \"function\" == typeof t[\"return\"] && (e[\"return\"] = function(t$1) {\n                return n ? (n = !1, t$1) : pump(\"return\", t$1);\n            }), e;\n        }\n        module.exports = _asyncGeneratorDelegate$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/unstable-core-do-not-import/stream/sse.ts\nvar import_asyncIterator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_asyncIterator(), 1);\nvar import_awaitAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nvar import_asyncGeneratorDelegate = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_asyncGeneratorDelegate(), 1);\nvar import_usingCtx = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_usingCtx(), 1);\nconst PING_EVENT = \"ping\";\nconst SERIALIZED_ERROR_EVENT = \"serialized-error\";\nconst CONNECTED_EVENT = \"connected\";\nconst RETURN_EVENT = \"return\";\n/**\n*\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/ function sseStreamProducer(opts) {\n    var _opts$ping$enabled, _opts$ping, _opts$ping$intervalMs, _opts$ping2, _opts$client;\n    const { serialize = _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.identity } = opts;\n    const ping = {\n        enabled: (_opts$ping$enabled = (_opts$ping = opts.ping) === null || _opts$ping === void 0 ? void 0 : _opts$ping.enabled) !== null && _opts$ping$enabled !== void 0 ? _opts$ping$enabled : false,\n        intervalMs: (_opts$ping$intervalMs = (_opts$ping2 = opts.ping) === null || _opts$ping2 === void 0 ? void 0 : _opts$ping2.intervalMs) !== null && _opts$ping$intervalMs !== void 0 ? _opts$ping$intervalMs : 1e3\n    };\n    const client = (_opts$client = opts.client) !== null && _opts$client !== void 0 ? _opts$client : {};\n    if (ping.enabled && client.reconnectAfterInactivityMs && ping.intervalMs > client.reconnectAfterInactivityMs) throw new Error(`Ping interval must be less than client reconnect interval to prevent unnecessary reconnection - ping.intervalMs: ${ping.intervalMs} client.reconnectAfterInactivityMs: ${client.reconnectAfterInactivityMs}`);\n    function generator() {\n        return _generator.apply(this, arguments);\n    }\n    function _generator() {\n        _generator = (0, import_wrapAsyncGenerator$1.default)(function*() {\n            yield {\n                event: CONNECTED_EVENT,\n                data: JSON.stringify(client)\n            };\n            let iterable = opts.data;\n            if (opts.emitAndEndImmediately) iterable = takeWithGrace(iterable, {\n                count: 1,\n                gracePeriodMs: 1\n            });\n            if (opts.maxDurationMs && opts.maxDurationMs > 0 && opts.maxDurationMs !== Infinity) iterable = withMaxDuration(iterable, {\n                maxDurationMs: opts.maxDurationMs\n            });\n            if (ping.enabled && ping.intervalMs !== Infinity && ping.intervalMs > 0) iterable = withPing(iterable, ping.intervalMs);\n            let value;\n            let chunk;\n            var _iteratorAbruptCompletion = false;\n            var _didIteratorError = false;\n            var _iteratorError;\n            try {\n                for(var _iterator = (0, import_asyncIterator.default)(iterable), _step; _iteratorAbruptCompletion = !(_step = yield (0, import_awaitAsyncGenerator.default)(_iterator.next())).done; _iteratorAbruptCompletion = false){\n                    value = _step.value;\n                    {\n                        if (value === PING_SYM) {\n                            yield {\n                                event: PING_EVENT,\n                                data: \"\"\n                            };\n                            continue;\n                        }\n                        chunk = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.isTrackedEnvelope)(value) ? {\n                            id: value[0],\n                            data: value[1]\n                        } : {\n                            data: value\n                        };\n                        chunk.data = JSON.stringify(serialize(chunk.data));\n                        yield chunk;\n                        value = null;\n                        chunk = null;\n                    }\n                }\n            } catch (err) {\n                _didIteratorError = true;\n                _iteratorError = err;\n            } finally{\n                try {\n                    if (_iteratorAbruptCompletion && _iterator.return != null) yield (0, import_awaitAsyncGenerator.default)(_iterator.return());\n                } finally{\n                    if (_didIteratorError) throw _iteratorError;\n                }\n            }\n        });\n        return _generator.apply(this, arguments);\n    }\n    function generatorWithErrorHandling() {\n        return _generatorWithErrorHandling.apply(this, arguments);\n    }\n    function _generatorWithErrorHandling() {\n        _generatorWithErrorHandling = (0, import_wrapAsyncGenerator$1.default)(function*() {\n            try {\n                yield* (0, import_asyncGeneratorDelegate.default)((0, import_asyncIterator.default)(generator()));\n                yield {\n                    event: RETURN_EVENT,\n                    data: \"\"\n                };\n            } catch (cause) {\n                var _opts$formatError, _opts$formatError2;\n                if (isAbortError(cause)) return;\n                const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n                const data = (_opts$formatError = (_opts$formatError2 = opts.formatError) === null || _opts$formatError2 === void 0 ? void 0 : _opts$formatError2.call(opts, {\n                    error\n                })) !== null && _opts$formatError !== void 0 ? _opts$formatError : null;\n                yield {\n                    event: SERIALIZED_ERROR_EVENT,\n                    data: JSON.stringify(serialize(data))\n                };\n            }\n        });\n        return _generatorWithErrorHandling.apply(this, arguments);\n    }\n    const stream = readableStreamFrom(generatorWithErrorHandling());\n    return stream.pipeThrough(new TransformStream({\n        transform (chunk, controller) {\n            if (\"event\" in chunk) controller.enqueue(`event: ${chunk.event}\\n`);\n            if (\"data\" in chunk) controller.enqueue(`data: ${chunk.data}\\n`);\n            if (\"id\" in chunk) controller.enqueue(`id: ${chunk.id}\\n`);\n            if (\"comment\" in chunk) controller.enqueue(`: ${chunk.comment}\\n`);\n            controller.enqueue(\"\\n\\n\");\n        }\n    })).pipeThrough(new TextEncoderStream());\n}\nasync function withTimeout(opts) {\n    try {\n        var _usingCtx$1 = (0, import_usingCtx.default)();\n        const timeoutPromise = _usingCtx$1.u(timerResource(opts.timeoutMs));\n        const res = await Unpromise.race([\n            opts.promise,\n            timeoutPromise.start()\n        ]);\n        if (res === disposablePromiseTimerResult) return await opts.onTimeout();\n        return res;\n    } catch (_) {\n        _usingCtx$1.e = _;\n    } finally{\n        _usingCtx$1.d();\n    }\n}\n/**\n* @see https://html.spec.whatwg.org/multipage/server-sent-events.html\n*/ function sseStreamConsumer(opts) {\n    const { deserialize = (v)=>v } = opts;\n    let clientOptions = {};\n    const signal = opts.signal;\n    let _es = null;\n    const createStream = ()=>new ReadableStream({\n            async start (controller) {\n                const [url, init] = await Promise.all([\n                    opts.url(),\n                    opts.init()\n                ]);\n                const eventSource = _es = new opts.EventSource(url, init);\n                controller.enqueue({\n                    type: \"connecting\",\n                    eventSource: _es,\n                    event: null\n                });\n                eventSource.addEventListener(CONNECTED_EVENT, (_msg)=>{\n                    const msg = _msg;\n                    const options = JSON.parse(msg.data);\n                    clientOptions = options;\n                    controller.enqueue({\n                        type: \"connected\",\n                        options,\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(SERIALIZED_ERROR_EVENT, (_msg)=>{\n                    const msg = _msg;\n                    controller.enqueue({\n                        type: \"serialized-error\",\n                        error: deserialize(JSON.parse(msg.data)),\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(PING_EVENT, ()=>{\n                    controller.enqueue({\n                        type: \"ping\",\n                        eventSource\n                    });\n                });\n                eventSource.addEventListener(RETURN_EVENT, ()=>{\n                    eventSource.close();\n                    controller.close();\n                    _es = null;\n                });\n                eventSource.addEventListener(\"error\", (event)=>{\n                    if (eventSource.readyState === eventSource.CLOSED) controller.error(event);\n                    else controller.enqueue({\n                        type: \"connecting\",\n                        eventSource,\n                        event\n                    });\n                });\n                eventSource.addEventListener(\"message\", (_msg)=>{\n                    const msg = _msg;\n                    const chunk = deserialize(JSON.parse(msg.data));\n                    const def = {\n                        data: chunk\n                    };\n                    if (msg.lastEventId) def.id = msg.lastEventId;\n                    controller.enqueue({\n                        type: \"data\",\n                        data: def,\n                        eventSource\n                    });\n                });\n                const onAbort = ()=>{\n                    try {\n                        eventSource.close();\n                        controller.close();\n                    } catch (_unused) {}\n                };\n                if (signal.aborted) onAbort();\n                else signal.addEventListener(\"abort\", onAbort);\n            },\n            cancel () {\n                _es === null || _es === void 0 || _es.close();\n            }\n        });\n    const getStreamResource = ()=>{\n        let stream = createStream();\n        let reader = stream.getReader();\n        async function dispose() {\n            await reader.cancel();\n            _es = null;\n        }\n        return makeAsyncResource({\n            read () {\n                return reader.read();\n            },\n            async recreate () {\n                await dispose();\n                stream = createStream();\n                reader = stream.getReader();\n            }\n        }, dispose);\n    };\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)((0, import_wrapAsyncGenerator$1.default)(function*() {\n        try {\n            var _usingCtx3 = (0, import_usingCtx.default)();\n            const stream = _usingCtx3.a(getStreamResource());\n            while(true){\n                let promise = stream.read();\n                const timeoutMs = clientOptions.reconnectAfterInactivityMs;\n                if (timeoutMs) promise = withTimeout({\n                    promise,\n                    timeoutMs,\n                    onTimeout: async ()=>{\n                        const res = {\n                            value: {\n                                type: \"timeout\",\n                                ms: timeoutMs,\n                                eventSource: _es\n                            },\n                            done: false\n                        };\n                        await stream.recreate();\n                        return res;\n                    }\n                });\n                const result = yield (0, import_awaitAsyncGenerator.default)(promise);\n                if (result.done) return result.value;\n                yield result.value;\n            }\n        } catch (_) {\n            _usingCtx3.e = _;\n        } finally{\n            yield (0, import_awaitAsyncGenerator.default)(_usingCtx3.d());\n        }\n    }));\n}\nconst sseHeaders = {\n    \"Content-Type\": \"text/event-stream\",\n    \"Cache-Control\": \"no-cache, no-transform\",\n    \"X-Accel-Buffering\": \"no\",\n    Connection: \"keep-alive\"\n};\n//#endregion\n//#region src/unstable-core-do-not-import/http/resolveResponse.ts\nvar import_wrapAsyncGenerator = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)(require_wrapAsyncGenerator(), 1);\nvar import_objectSpread2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.require_objectSpread2)(), 1);\nfunction errorToAsyncIterable(err) {\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)((0, import_wrapAsyncGenerator.default)(function*() {\n        throw err;\n    }));\n}\nconst TYPE_ACCEPTED_METHOD_MAP = {\n    mutation: [\n        \"POST\"\n    ],\n    query: [\n        \"GET\"\n    ],\n    subscription: [\n        \"GET\"\n    ]\n};\nconst TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE = {\n    mutation: [\n        \"POST\"\n    ],\n    query: [\n        \"GET\",\n        \"POST\"\n    ],\n    subscription: [\n        \"GET\",\n        \"POST\"\n    ]\n};\nfunction initResponse(initOpts) {\n    var _responseMeta, _info$calls$find$proc, _info$calls$find;\n    const { ctx, info, responseMeta, untransformedJSON, errors = [], headers } = initOpts;\n    let status = untransformedJSON ? (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getHTTPStatusCode)(untransformedJSON) : 200;\n    const eagerGeneration = !untransformedJSON;\n    const data = eagerGeneration ? [] : Array.isArray(untransformedJSON) ? untransformedJSON : [\n        untransformedJSON\n    ];\n    const meta = (_responseMeta = responseMeta === null || responseMeta === void 0 ? void 0 : responseMeta({\n        ctx,\n        info,\n        paths: info === null || info === void 0 ? void 0 : info.calls.map((call)=>call.path),\n        data,\n        errors,\n        eagerGeneration,\n        type: (_info$calls$find$proc = info === null || info === void 0 || (_info$calls$find = info.calls.find((call)=>{\n            var _call$procedure;\n            return (_call$procedure = call.procedure) === null || _call$procedure === void 0 ? void 0 : _call$procedure._def.type;\n        })) === null || _info$calls$find === void 0 || (_info$calls$find = _info$calls$find.procedure) === null || _info$calls$find === void 0 ? void 0 : _info$calls$find._def.type) !== null && _info$calls$find$proc !== void 0 ? _info$calls$find$proc : \"unknown\"\n    })) !== null && _responseMeta !== void 0 ? _responseMeta : {};\n    if (meta.headers) {\n        if (meta.headers instanceof Headers) for (const [key, value] of meta.headers.entries())headers.append(key, value);\n        else /**\n\t\t* @deprecated, delete in v12\n\t\t*/ for (const [key, value] of Object.entries(meta.headers))if (Array.isArray(value)) for (const v of value)headers.append(key, v);\n        else if (typeof value === \"string\") headers.set(key, value);\n    }\n    if (meta.status) status = meta.status;\n    return {\n        status\n    };\n}\nfunction caughtErrorToData(cause, errorOpts) {\n    const { router, req, onError } = errorOpts.opts;\n    const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n    onError === null || onError === void 0 || onError({\n        error,\n        path: errorOpts.path,\n        input: errorOpts.input,\n        ctx: errorOpts.ctx,\n        type: errorOpts.type,\n        req\n    });\n    const untransformedJSON = {\n        error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n            config: router._def._config,\n            error,\n            type: errorOpts.type,\n            path: errorOpts.path,\n            input: errorOpts.input,\n            ctx: errorOpts.ctx\n        })\n    };\n    const transformedJSON = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(router._def._config, untransformedJSON);\n    const body = JSON.stringify(transformedJSON);\n    return {\n        error,\n        untransformedJSON,\n        body\n    };\n}\n/**\n* Check if a value is a stream-like object\n* - if it's an async iterable\n* - if it's an object with async iterables or promises\n*/ function isDataStream(v) {\n    if (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isObject)(v)) return false;\n    if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(v)) return true;\n    return Object.values(v).some(isPromise) || Object.values(v).some(_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable);\n}\nasync function resolveResponse(opts) {\n    var _ref, _opts$allowBatching, _opts$batching, _opts$allowMethodOver, _config$sse$enabled, _config$sse;\n    const { router, req } = opts;\n    const headers = new Headers([\n        [\n            \"vary\",\n            \"trpc-accept\"\n        ]\n    ]);\n    const config = router._def._config;\n    const url = new URL(req.url);\n    if (req.method === \"HEAD\") return new Response(null, {\n        status: 204\n    });\n    const allowBatching = (_ref = (_opts$allowBatching = opts.allowBatching) !== null && _opts$allowBatching !== void 0 ? _opts$allowBatching : (_opts$batching = opts.batching) === null || _opts$batching === void 0 ? void 0 : _opts$batching.enabled) !== null && _ref !== void 0 ? _ref : true;\n    const allowMethodOverride = ((_opts$allowMethodOver = opts.allowMethodOverride) !== null && _opts$allowMethodOver !== void 0 ? _opts$allowMethodOver : false) && req.method === \"POST\";\n    const infoTuple = await (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(async ()=>{\n        try {\n            return [\n                void 0,\n                await getRequestInfo({\n                    req,\n                    path: decodeURIComponent(opts.path),\n                    router,\n                    searchParams: url.searchParams,\n                    headers: opts.req.headers,\n                    url\n                })\n            ];\n        } catch (cause) {\n            return [\n                (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                void 0\n            ];\n        }\n    });\n    const ctxManager = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(()=>{\n        let result = void 0;\n        return {\n            valueOrUndefined: ()=>{\n                if (!result) return void 0;\n                return result[1];\n            },\n            value: ()=>{\n                const [err, ctx] = result;\n                if (err) throw err;\n                return ctx;\n            },\n            create: async (info)=>{\n                if (result) throw new Error(\"This should only be called once - report a bug in tRPC\");\n                try {\n                    const ctx = await opts.createContext({\n                        info\n                    });\n                    result = [\n                        void 0,\n                        ctx\n                    ];\n                } catch (cause) {\n                    result = [\n                        (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                        void 0\n                    ];\n                }\n            }\n        };\n    });\n    const methodMapper = allowMethodOverride ? TYPE_ACCEPTED_METHOD_MAP_WITH_METHOD_OVERRIDE : TYPE_ACCEPTED_METHOD_MAP;\n    /**\n\t* @deprecated\n\t*/ const isStreamCall = req.headers.get(\"trpc-accept\") === \"application/jsonl\";\n    const experimentalSSE = (_config$sse$enabled = (_config$sse = config.sse) === null || _config$sse === void 0 ? void 0 : _config$sse.enabled) !== null && _config$sse$enabled !== void 0 ? _config$sse$enabled : true;\n    try {\n        const [infoError, info] = infoTuple;\n        if (infoError) throw infoError;\n        if (info.isBatchCall && !allowBatching) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            code: \"BAD_REQUEST\",\n            message: `Batching is not enabled on the server`\n        });\n        /* istanbul ignore if -- @preserve */ if (isStreamCall && !info.isBatchCall) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n            message: `Streaming requests must be batched (you can do a batch of 1)`,\n            code: \"BAD_REQUEST\"\n        });\n        await ctxManager.create(info);\n        const rpcCalls = info.calls.map(async (call)=>{\n            const proc = call.procedure;\n            try {\n                if (opts.error) throw opts.error;\n                if (!proc) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"NOT_FOUND\",\n                    message: `No procedure found on path \"${call.path}\"`\n                });\n                if (!methodMapper[proc._def.type].includes(req.method)) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"METHOD_NOT_SUPPORTED\",\n                    message: `Unsupported ${req.method}-request to ${proc._def.type} procedure at path \"${call.path}\"`\n                });\n                if (proc._def.type === \"subscription\") {\n                    /* istanbul ignore if -- @preserve */ if (info.isBatchCall) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                        code: \"BAD_REQUEST\",\n                        message: `Cannot batch subscription calls`\n                    });\n                }\n                const data = await proc({\n                    path: call.path,\n                    getRawInput: call.getRawInput,\n                    ctx: ctxManager.value(),\n                    type: proc._def.type,\n                    signal: opts.req.signal\n                });\n                return [\n                    void 0,\n                    {\n                        data\n                    }\n                ];\n            } catch (cause) {\n                var _opts$onError, _call$procedure$_def$, _call$procedure2;\n                const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause);\n                const input = call.result();\n                (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, {\n                    error,\n                    path: call.path,\n                    input,\n                    ctx: ctxManager.valueOrUndefined(),\n                    type: (_call$procedure$_def$ = (_call$procedure2 = call.procedure) === null || _call$procedure2 === void 0 ? void 0 : _call$procedure2._def.type) !== null && _call$procedure$_def$ !== void 0 ? _call$procedure$_def$ : \"unknown\",\n                    req: opts.req\n                });\n                return [\n                    error,\n                    void 0\n                ];\n            }\n        });\n        if (!info.isBatchCall) {\n            const [call] = info.calls;\n            const [error, result] = await rpcCalls[0];\n            switch(info.type){\n                case \"unknown\":\n                case \"mutation\":\n                case \"query\":\n                    {\n                        headers.set(\"content-type\", \"application/json\");\n                        if (isDataStream(result === null || result === void 0 ? void 0 : result.data)) throw new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                            code: \"UNSUPPORTED_MEDIA_TYPE\",\n                            message: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n                        });\n                        const res = error ? {\n                            error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                config,\n                                ctx: ctxManager.valueOrUndefined(),\n                                error,\n                                input: call.result(),\n                                path: call.path,\n                                type: info.type\n                            })\n                        } : {\n                            result: {\n                                data: result.data\n                            }\n                        };\n                        const headResponse$1 = initResponse({\n                            ctx: ctxManager.valueOrUndefined(),\n                            info,\n                            responseMeta: opts.responseMeta,\n                            errors: error ? [\n                                error\n                            ] : [],\n                            headers,\n                            untransformedJSON: [\n                                res\n                            ]\n                        });\n                        return new Response(JSON.stringify((0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, res)), {\n                            status: headResponse$1.status,\n                            headers\n                        });\n                    }\n                case \"subscription\":\n                    {\n                        const iterable = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.run)(()=>{\n                            if (error) return errorToAsyncIterable(error);\n                            if (!experimentalSSE) return errorToAsyncIterable(new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                                code: \"METHOD_NOT_SUPPORTED\",\n                                message: \"Missing experimental flag \\\"sseSubscriptions\\\"\"\n                            }));\n                            if (!(0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) && !(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_0__.isAsyncIterable)(result.data)) return errorToAsyncIterable(new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                                message: `Subscription ${call.path} did not return an observable or a AsyncGenerator`,\n                                code: \"INTERNAL_SERVER_ERROR\"\n                            }));\n                            const dataAsIterable = (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : result.data;\n                            return dataAsIterable;\n                        });\n                        const stream = sseStreamProducer((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, config.sse), {}, {\n                            data: iterable,\n                            serialize: (v)=>config.transformer.output.serialize(v),\n                            formatError (errorOpts) {\n                                var _call$procedure$_def$2, _call$procedure3, _opts$onError2;\n                                const error$1 = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n                                const input = call === null || call === void 0 ? void 0 : call.result();\n                                const path = call === null || call === void 0 ? void 0 : call.path;\n                                const type = (_call$procedure$_def$2 = call === null || call === void 0 || (_call$procedure3 = call.procedure) === null || _call$procedure3 === void 0 ? void 0 : _call$procedure3._def.type) !== null && _call$procedure$_def$2 !== void 0 ? _call$procedure$_def$2 : \"unknown\";\n                                (_opts$onError2 = opts.onError) === null || _opts$onError2 === void 0 || _opts$onError2.call(opts, {\n                                    error: error$1,\n                                    path,\n                                    input,\n                                    ctx: ctxManager.valueOrUndefined(),\n                                    req: opts.req,\n                                    type\n                                });\n                                const shape = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                    config,\n                                    ctx: ctxManager.valueOrUndefined(),\n                                    error: error$1,\n                                    input,\n                                    path,\n                                    type\n                                });\n                                return shape;\n                            }\n                        }));\n                        for (const [key, value] of Object.entries(sseHeaders))headers.set(key, value);\n                        const headResponse$1 = initResponse({\n                            ctx: ctxManager.valueOrUndefined(),\n                            info,\n                            responseMeta: opts.responseMeta,\n                            errors: [],\n                            headers,\n                            untransformedJSON: null\n                        });\n                        return new Response(stream, {\n                            headers,\n                            status: headResponse$1.status\n                        });\n                    }\n            }\n        }\n        if (info.accept === \"application/jsonl\") {\n            headers.set(\"content-type\", \"application/json\");\n            headers.set(\"transfer-encoding\", \"chunked\");\n            const headResponse$1 = initResponse({\n                ctx: ctxManager.valueOrUndefined(),\n                info,\n                responseMeta: opts.responseMeta,\n                errors: [],\n                headers,\n                untransformedJSON: null\n            });\n            const stream = jsonlStreamProducer((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, config.jsonl), {}, {\n                maxDepth: Infinity,\n                data: rpcCalls.map(async (res)=>{\n                    const [error, result] = await res;\n                    const call = info.calls[0];\n                    if (error) {\n                        var _procedure$_def$type, _procedure;\n                        return {\n                            error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                                config,\n                                ctx: ctxManager.valueOrUndefined(),\n                                error,\n                                input: call.result(),\n                                path: call.path,\n                                type: (_procedure$_def$type = (_procedure = call.procedure) === null || _procedure === void 0 ? void 0 : _procedure._def.type) !== null && _procedure$_def$type !== void 0 ? _procedure$_def$type : \"unknown\"\n                            })\n                        };\n                    }\n                    /**\n\t\t\t\t\t* Not very pretty, but we need to wrap nested data in promises\n\t\t\t\t\t* Our stream producer will only resolve top-level async values or async values that are directly nested in another async value\n\t\t\t\t\t*/ const iterable = (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.isObservable)(result.data) ? (0,_observable_UMO3vUa_mjs__WEBPACK_IMPORTED_MODULE_3__.observableToAsyncIterable)(result.data, opts.req.signal) : Promise.resolve(result.data);\n                    return {\n                        result: Promise.resolve({\n                            data: iterable\n                        })\n                    };\n                }),\n                serialize: config.transformer.output.serialize,\n                onError: (cause)=>{\n                    var _opts$onError3, _info$type;\n                    (_opts$onError3 = opts.onError) === null || _opts$onError3 === void 0 || _opts$onError3.call(opts, {\n                        error: (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(cause),\n                        path: void 0,\n                        input: void 0,\n                        ctx: ctxManager.valueOrUndefined(),\n                        req: opts.req,\n                        type: (_info$type = info === null || info === void 0 ? void 0 : info.type) !== null && _info$type !== void 0 ? _info$type : \"unknown\"\n                    });\n                },\n                formatError (errorOpts) {\n                    var _call$procedure$_def$3, _call$procedure4;\n                    const call = info === null || info === void 0 ? void 0 : info.calls[errorOpts.path[0]];\n                    const error = (0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.getTRPCErrorFromUnknown)(errorOpts.error);\n                    const input = call === null || call === void 0 ? void 0 : call.result();\n                    const path = call === null || call === void 0 ? void 0 : call.path;\n                    const type = (_call$procedure$_def$3 = call === null || call === void 0 || (_call$procedure4 = call.procedure) === null || _call$procedure4 === void 0 ? void 0 : _call$procedure4._def.type) !== null && _call$procedure$_def$3 !== void 0 ? _call$procedure$_def$3 : \"unknown\";\n                    const shape = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                        config,\n                        ctx: ctxManager.valueOrUndefined(),\n                        error,\n                        input,\n                        path,\n                        type\n                    });\n                    return shape;\n                }\n            }));\n            return new Response(stream, {\n                headers,\n                status: headResponse$1.status\n            });\n        }\n        /**\n\t\t* Non-streaming response:\n\t\t* - await all responses in parallel, blocking on the slowest one\n\t\t* - create headers with known response body\n\t\t* - return a complete HTTPResponse\n\t\t*/ headers.set(\"content-type\", \"application/json\");\n        const results = (await Promise.all(rpcCalls)).map((res)=>{\n            const [error, result] = res;\n            if (error) return res;\n            if (isDataStream(result.data)) return [\n                new _tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCError({\n                    code: \"UNSUPPORTED_MEDIA_TYPE\",\n                    message: \"Cannot use stream-like response in non-streaming request - use httpBatchStreamLink\"\n                }),\n                void 0\n            ];\n            return res;\n        });\n        const resultAsRPCResponse = results.map(([error, result], index)=>{\n            const call = info.calls[index];\n            if (error) {\n                var _call$procedure$_def$4, _call$procedure5;\n                return {\n                    error: (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_2__.getErrorShape)({\n                        config,\n                        ctx: ctxManager.valueOrUndefined(),\n                        error,\n                        input: call.result(),\n                        path: call.path,\n                        type: (_call$procedure$_def$4 = (_call$procedure5 = call.procedure) === null || _call$procedure5 === void 0 ? void 0 : _call$procedure5._def.type) !== null && _call$procedure$_def$4 !== void 0 ? _call$procedure$_def$4 : \"unknown\"\n                    })\n                };\n            }\n            return {\n                result: {\n                    data: result.data\n                }\n            };\n        });\n        const errors = results.map(([error])=>error).filter(Boolean);\n        const headResponse = initResponse({\n            ctx: ctxManager.valueOrUndefined(),\n            info,\n            responseMeta: opts.responseMeta,\n            untransformedJSON: resultAsRPCResponse,\n            errors,\n            headers\n        });\n        return new Response(JSON.stringify((0,_tracked_gU3ttYjg_mjs__WEBPACK_IMPORTED_MODULE_1__.transformTRPCResponse)(config, resultAsRPCResponse)), {\n            status: headResponse.status,\n            headers\n        });\n    } catch (cause) {\n        var _info$type2;\n        const [_infoError, info] = infoTuple;\n        const ctx = ctxManager.valueOrUndefined();\n        const { error, untransformedJSON, body } = caughtErrorToData(cause, {\n            opts,\n            ctx: ctxManager.valueOrUndefined(),\n            type: (_info$type2 = info === null || info === void 0 ? void 0 : info.type) !== null && _info$type2 !== void 0 ? _info$type2 : \"unknown\"\n        });\n        const headResponse = initResponse({\n            ctx,\n            info,\n            responseMeta: opts.responseMeta,\n            untransformedJSON,\n            errors: [\n                error\n            ],\n            headers\n        });\n        return new Response(body, {\n            status: headResponse.status,\n            headers\n        });\n    }\n}\n//#endregion\n //# sourceMappingURL=resolveResponse-CzlbRpCI.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs":
/*!*************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs ***!
  \*************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCError: () => (/* binding */ TRPCError),\n/* harmony export */   callProcedure: () => (/* binding */ callProcedure),\n/* harmony export */   createCallerFactory: () => (/* binding */ createCallerFactory),\n/* harmony export */   createRouterFactory: () => (/* binding */ createRouterFactory),\n/* harmony export */   defaultFormatter: () => (/* binding */ defaultFormatter),\n/* harmony export */   defaultTransformer: () => (/* binding */ defaultTransformer),\n/* harmony export */   getCauseFromUnknown: () => (/* binding */ getCauseFromUnknown),\n/* harmony export */   getDataTransformer: () => (/* binding */ getDataTransformer),\n/* harmony export */   getProcedureAtPath: () => (/* binding */ getProcedureAtPath),\n/* harmony export */   getTRPCErrorFromUnknown: () => (/* binding */ getTRPCErrorFromUnknown),\n/* harmony export */   isTrackedEnvelope: () => (/* binding */ isTrackedEnvelope),\n/* harmony export */   lazy: () => (/* binding */ lazy),\n/* harmony export */   mergeRouters: () => (/* binding */ mergeRouters),\n/* harmony export */   sse: () => (/* binding */ sse),\n/* harmony export */   tracked: () => (/* binding */ tracked),\n/* harmony export */   transformResult: () => (/* binding */ transformResult),\n/* harmony export */   transformTRPCResponse: () => (/* binding */ transformTRPCResponse)\n/* harmony export */ });\n/* harmony import */ var _getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getErrorShape-Uhlrl4Bk.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./utils-DdbbrDku.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n\n//#region src/unstable-core-do-not-import/error/formatter.ts\nconst defaultFormatter = ({ shape })=>{\n    return shape;\n};\n//#endregion\n//#region src/unstable-core-do-not-import/error/TRPCError.ts\nvar import_defineProperty = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\nvar UnknownCauseError = class extends Error {\n};\nfunction getCauseFromUnknown(cause) {\n    if (cause instanceof Error) return cause;\n    const type = typeof cause;\n    if (type === \"undefined\" || type === \"function\" || cause === null) return void 0;\n    if (type !== \"object\") return new Error(String(cause));\n    if ((0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(cause)) return Object.assign(new UnknownCauseError(), cause);\n    return void 0;\n}\nfunction getTRPCErrorFromUnknown(cause) {\n    if (cause instanceof TRPCError) return cause;\n    if (cause instanceof Error && cause.name === \"TRPCError\") return cause;\n    const trpcError = new TRPCError({\n        code: \"INTERNAL_SERVER_ERROR\",\n        cause\n    });\n    if (cause instanceof Error && cause.stack) trpcError.stack = cause.stack;\n    return trpcError;\n}\nvar TRPCError = class extends Error {\n    constructor(opts){\n        var _ref, _opts$message, _this$cause;\n        const cause = getCauseFromUnknown(opts.cause);\n        const message = (_ref = (_opts$message = opts.message) !== null && _opts$message !== void 0 ? _opts$message : cause === null || cause === void 0 ? void 0 : cause.message) !== null && _ref !== void 0 ? _ref : opts.code;\n        super(message, {\n            cause\n        });\n        (0, import_defineProperty.default)(this, \"cause\", void 0);\n        (0, import_defineProperty.default)(this, \"code\", void 0);\n        this.code = opts.code;\n        this.name = \"TRPCError\";\n        (_this$cause = this.cause) !== null && _this$cause !== void 0 || (this.cause = cause);\n    }\n};\n//#endregion\n//#region src/unstable-core-do-not-import/transformer.ts\nvar import_objectSpread2$1 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* @internal\n*/ function getDataTransformer(transformer) {\n    if (\"input\" in transformer) return transformer;\n    return {\n        input: transformer,\n        output: transformer\n    };\n}\n/**\n* @internal\n*/ const defaultTransformer = {\n    input: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    },\n    output: {\n        serialize: (obj)=>obj,\n        deserialize: (obj)=>obj\n    }\n};\nfunction transformTRPCResponseItem(config, item) {\n    if (\"error\" in item) return (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, item), {}, {\n        error: config.transformer.output.serialize(item.error)\n    });\n    if (\"data\" in item.result) return (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, item), {}, {\n        result: (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, item.result), {}, {\n            data: config.transformer.output.serialize(item.result.data)\n        })\n    });\n    return item;\n}\n/**\n* Takes a unserialized `TRPCResponse` and serializes it with the router's transformers\n**/ function transformTRPCResponse(config, itemOrItems) {\n    return Array.isArray(itemOrItems) ? itemOrItems.map((item)=>transformTRPCResponseItem(config, item)) : transformTRPCResponseItem(config, itemOrItems);\n}\n/** @internal */ function transformResultInner(response, transformer) {\n    if (\"error\" in response) {\n        const error = transformer.deserialize(response.error);\n        return {\n            ok: false,\n            error: (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, response), {}, {\n                error\n            })\n        };\n    }\n    const result = (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, response.result), (!response.result.type || response.result.type === \"data\") && {\n        type: \"data\",\n        data: transformer.deserialize(response.result.data)\n    });\n    return {\n        ok: true,\n        result\n    };\n}\nvar TransformResultError = class extends Error {\n    constructor(){\n        super(\"Unable to transform response from server\");\n    }\n};\n/**\n* Transforms and validates that the result is a valid TRPCResponse\n* @internal\n*/ function transformResult(response, transformer) {\n    let result;\n    try {\n        result = transformResultInner(response, transformer);\n    } catch (_unused) {\n        throw new TransformResultError();\n    }\n    if (!result.ok && (!(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(result.error.error) || typeof result.error.error[\"code\"] !== \"number\")) throw new TransformResultError();\n    if (result.ok && !(0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(result.result)) throw new TransformResultError();\n    return result;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/router.ts\nvar import_objectSpread2 = (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nconst lazySymbol = Symbol(\"lazy\");\nfunction once(fn) {\n    const uncalled = Symbol();\n    let result = uncalled;\n    return ()=>{\n        if (result === uncalled) result = fn();\n        return result;\n    };\n}\n/**\n* Lazy load a router\n* @see https://trpc.io/docs/server/merging-routers#lazy-load\n*/ function lazy(importRouter) {\n    async function resolve() {\n        const mod = await importRouter();\n        if (isRouter(mod)) return mod;\n        const routers = Object.values(mod);\n        if (routers.length !== 1 || !isRouter(routers[0])) throw new Error(\"Invalid router module - either define exactly 1 export or return the router directly.\\nExample: `lazy(() => import('./slow.js').then((m) => m.slowRouter))`\");\n        return routers[0];\n    }\n    resolve[lazySymbol] = true;\n    return resolve;\n}\nfunction isLazy(input) {\n    return typeof input === \"function\" && lazySymbol in input;\n}\nfunction isRouter(value) {\n    return (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(value) && (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isObject)(value[\"_def\"]) && \"router\" in value[\"_def\"];\n}\nconst emptyRouter = {\n    _ctx: null,\n    _errorShape: null,\n    _meta: null,\n    queries: {},\n    mutations: {},\n    subscriptions: {},\n    errorFormatter: defaultFormatter,\n    transformer: defaultTransformer\n};\n/**\n* Reserved words that can't be used as router or procedure names\n*/ const reservedWords = [\n    \"then\",\n    \"call\",\n    \"apply\"\n];\n/**\n* @internal\n*/ function createRouterFactory(config) {\n    function createRouterInner(input) {\n        const reservedWordsUsed = new Set(Object.keys(input).filter((v)=>reservedWords.includes(v)));\n        if (reservedWordsUsed.size > 0) throw new Error(\"Reserved words used in `router({})` call: \" + Array.from(reservedWordsUsed).join(\", \"));\n        const procedures = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.omitPrototype)({});\n        const lazy$1 = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.omitPrototype)({});\n        function createLazyLoader(opts) {\n            return {\n                ref: opts.ref,\n                load: once(async ()=>{\n                    const router$1 = await opts.ref();\n                    const lazyPath = [\n                        ...opts.path,\n                        opts.key\n                    ];\n                    const lazyKey = lazyPath.join(\".\");\n                    opts.aggregate[opts.key] = step(router$1._def.record, lazyPath);\n                    delete lazy$1[lazyKey];\n                    for (const [nestedKey, nestedItem] of Object.entries(router$1._def.lazy)){\n                        const nestedRouterKey = [\n                            ...lazyPath,\n                            nestedKey\n                        ].join(\".\");\n                        lazy$1[nestedRouterKey] = createLazyLoader({\n                            ref: nestedItem.ref,\n                            path: lazyPath,\n                            key: nestedKey,\n                            aggregate: opts.aggregate[opts.key]\n                        });\n                    }\n                })\n            };\n        }\n        function step(from, path = []) {\n            const aggregate = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.omitPrototype)({});\n            for (const [key, item] of Object.entries(from !== null && from !== void 0 ? from : {})){\n                if (isLazy(item)) {\n                    lazy$1[[\n                        ...path,\n                        key\n                    ].join(\".\")] = createLazyLoader({\n                        path,\n                        ref: item,\n                        key,\n                        aggregate\n                    });\n                    continue;\n                }\n                if (isRouter(item)) {\n                    aggregate[key] = step(item._def.record, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                if (!isProcedure(item)) {\n                    aggregate[key] = step(item, [\n                        ...path,\n                        key\n                    ]);\n                    continue;\n                }\n                const newPath = [\n                    ...path,\n                    key\n                ].join(\".\");\n                if (procedures[newPath]) throw new Error(`Duplicate key: ${newPath}`);\n                procedures[newPath] = item;\n                aggregate[key] = item;\n            }\n            return aggregate;\n        }\n        const record = step(input);\n        const _def = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({\n            _config: config,\n            router: true,\n            procedures,\n            lazy: lazy$1\n        }, emptyRouter), {}, {\n            record\n        });\n        const router = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, record), {}, {\n            _def,\n            createCaller: createCallerFactory()({\n                _def\n            })\n        });\n        return router;\n    }\n    return createRouterInner;\n}\nfunction isProcedure(procedureOrRouter) {\n    return typeof procedureOrRouter === \"function\";\n}\n/**\n* @internal\n*/ async function getProcedureAtPath(router, path) {\n    const { _def } = router;\n    let procedure = _def.procedures[path];\n    while(!procedure){\n        const key = Object.keys(_def.lazy).find((key$1)=>path.startsWith(key$1));\n        if (!key) return null;\n        const lazyRouter = _def.lazy[key];\n        await lazyRouter.load();\n        procedure = _def.procedures[path];\n    }\n    return procedure;\n}\n/**\n* @internal\n*/ async function callProcedure(opts) {\n    const { type, path } = opts;\n    const proc = await getProcedureAtPath(opts.router, path);\n    if (!proc || !isProcedure(proc) || proc._def.type !== type && !opts.allowMethodOverride) throw new TRPCError({\n        code: \"NOT_FOUND\",\n        message: `No \"${type}\"-procedure on path \"${path}\"`\n    });\n    /* istanbul ignore if -- @preserve */ if (proc._def.type !== type && opts.allowMethodOverride && proc._def.type === \"subscription\") throw new TRPCError({\n        code: \"METHOD_NOT_SUPPORTED\",\n        message: `Method override is not supported for subscriptions`\n    });\n    return proc(opts);\n}\nfunction createCallerFactory() {\n    return function createCallerInner(router) {\n        const { _def } = router;\n        return function createCaller(ctxOrCallback, opts) {\n            return (0,_getErrorShape_Uhlrl4Bk_mjs__WEBPACK_IMPORTED_MODULE_0__.createRecursiveProxy)(async ({ path, args })=>{\n                const fullPath = path.join(\".\");\n                if (path.length === 1 && path[0] === \"_def\") return _def;\n                const procedure = await getProcedureAtPath(router, fullPath);\n                let ctx = void 0;\n                try {\n                    if (!procedure) throw new TRPCError({\n                        code: \"NOT_FOUND\",\n                        message: `No procedure found on path \"${path}\"`\n                    });\n                    ctx = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.isFunction)(ctxOrCallback) ? await Promise.resolve(ctxOrCallback()) : ctxOrCallback;\n                    return await procedure({\n                        path: fullPath,\n                        getRawInput: async ()=>args[0],\n                        ctx,\n                        type: procedure._def.type,\n                        signal: opts === null || opts === void 0 ? void 0 : opts.signal\n                    });\n                } catch (cause) {\n                    var _opts$onError, _procedure$_def$type;\n                    opts === null || opts === void 0 || (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, {\n                        ctx,\n                        error: getTRPCErrorFromUnknown(cause),\n                        input: args[0],\n                        path: fullPath,\n                        type: (_procedure$_def$type = procedure === null || procedure === void 0 ? void 0 : procedure._def.type) !== null && _procedure$_def$type !== void 0 ? _procedure$_def$type : \"unknown\"\n                    });\n                    throw cause;\n                }\n            });\n        };\n    };\n}\nfunction mergeRouters(...routerList) {\n    var _routerList$;\n    const record = (0,_utils_DdbbrDku_mjs__WEBPACK_IMPORTED_MODULE_1__.mergeWithoutOverrides)({}, ...routerList.map((r)=>r._def.record));\n    const errorFormatter = routerList.reduce((currentErrorFormatter, nextRouter)=>{\n        if (nextRouter._def._config.errorFormatter && nextRouter._def._config.errorFormatter !== defaultFormatter) {\n            if (currentErrorFormatter !== defaultFormatter && currentErrorFormatter !== nextRouter._def._config.errorFormatter) throw new Error(\"You seem to have several error formatters\");\n            return nextRouter._def._config.errorFormatter;\n        }\n        return currentErrorFormatter;\n    }, defaultFormatter);\n    const transformer = routerList.reduce((prev, current)=>{\n        if (current._def._config.transformer && current._def._config.transformer !== defaultTransformer) {\n            if (prev !== defaultTransformer && prev !== current._def._config.transformer) throw new Error(\"You seem to have several transformers\");\n            return current._def._config.transformer;\n        }\n        return prev;\n    }, defaultTransformer);\n    const router = createRouterFactory({\n        errorFormatter,\n        transformer,\n        isDev: routerList.every((r)=>r._def._config.isDev),\n        allowOutsideOfServer: routerList.every((r)=>r._def._config.allowOutsideOfServer),\n        isServer: routerList.every((r)=>r._def._config.isServer),\n        $types: (_routerList$ = routerList[0]) === null || _routerList$ === void 0 ? void 0 : _routerList$._def._config.$types\n    })(record);\n    return router;\n}\n//#endregion\n//#region src/unstable-core-do-not-import/stream/tracked.ts\nconst trackedSymbol = Symbol();\n/**\n* Produce a typed server-sent event message\n* @deprecated use `tracked(id, data)` instead\n*/ function sse(event) {\n    return tracked(event.id, event.data);\n}\nfunction isTrackedEnvelope(value) {\n    return Array.isArray(value) && value[2] === trackedSymbol;\n}\n/**\n* Automatically track an event so that it can be resumed from a given id if the connection is lost\n*/ function tracked(id, data) {\n    if (id === \"\") throw new Error(\"`id` must not be an empty string as empty string is the same as not setting the id at all\");\n    return [\n        id,\n        data,\n        trackedSymbol\n    ];\n}\n//#endregion\n //# sourceMappingURL=tracked-gU3ttYjg.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs":
/*!***********************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs ***!
  \***********************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPC_ERROR_CODES_BY_KEY: () => (/* binding */ TRPC_ERROR_CODES_BY_KEY),\n/* harmony export */   TRPC_ERROR_CODES_BY_NUMBER: () => (/* binding */ TRPC_ERROR_CODES_BY_NUMBER),\n/* harmony export */   abortSignalsAnyPonyfill: () => (/* binding */ abortSignalsAnyPonyfill),\n/* harmony export */   assert: () => (/* binding */ assert),\n/* harmony export */   identity: () => (/* binding */ identity),\n/* harmony export */   isAsyncIterable: () => (/* binding */ isAsyncIterable),\n/* harmony export */   isFunction: () => (/* binding */ isFunction),\n/* harmony export */   isObject: () => (/* binding */ isObject),\n/* harmony export */   mergeWithoutOverrides: () => (/* binding */ mergeWithoutOverrides),\n/* harmony export */   noop: () => (/* binding */ noop),\n/* harmony export */   omitPrototype: () => (/* binding */ omitPrototype),\n/* harmony export */   retryableRpcCodes: () => (/* binding */ retryableRpcCodes),\n/* harmony export */   run: () => (/* binding */ run),\n/* harmony export */   sleep: () => (/* binding */ sleep)\n/* harmony export */ });\n//#region src/unstable-core-do-not-import/rpc/codes.ts\n/**\n* JSON-RPC 2.0 Error codes\n*\n* `-32000` to `-32099` are reserved for implementation-defined server-errors.\n* For tRPC we're copying the last digits of HTTP 4XX errors.\n*/ const TRPC_ERROR_CODES_BY_KEY = {\n    PARSE_ERROR: -32700,\n    BAD_REQUEST: -32600,\n    INTERNAL_SERVER_ERROR: -32603,\n    NOT_IMPLEMENTED: -32603,\n    BAD_GATEWAY: -32603,\n    SERVICE_UNAVAILABLE: -32603,\n    GATEWAY_TIMEOUT: -32603,\n    UNAUTHORIZED: -32001,\n    PAYMENT_REQUIRED: -32002,\n    FORBIDDEN: -32003,\n    NOT_FOUND: -32004,\n    METHOD_NOT_SUPPORTED: -32005,\n    TIMEOUT: -32008,\n    CONFLICT: -32009,\n    PRECONDITION_FAILED: -32012,\n    PAYLOAD_TOO_LARGE: -32013,\n    UNSUPPORTED_MEDIA_TYPE: -32015,\n    UNPROCESSABLE_CONTENT: -32022,\n    TOO_MANY_REQUESTS: -32029,\n    CLIENT_CLOSED_REQUEST: -32099\n};\nconst TRPC_ERROR_CODES_BY_NUMBER = {\n    [-32700]: \"PARSE_ERROR\",\n    [-32600]: \"BAD_REQUEST\",\n    [-32603]: \"INTERNAL_SERVER_ERROR\",\n    [-32001]: \"UNAUTHORIZED\",\n    [-32002]: \"PAYMENT_REQUIRED\",\n    [-32003]: \"FORBIDDEN\",\n    [-32004]: \"NOT_FOUND\",\n    [-32005]: \"METHOD_NOT_SUPPORTED\",\n    [-32008]: \"TIMEOUT\",\n    [-32009]: \"CONFLICT\",\n    [-32012]: \"PRECONDITION_FAILED\",\n    [-32013]: \"PAYLOAD_TOO_LARGE\",\n    [-32015]: \"UNSUPPORTED_MEDIA_TYPE\",\n    [-32022]: \"UNPROCESSABLE_CONTENT\",\n    [-32029]: \"TOO_MANY_REQUESTS\",\n    [-32099]: \"CLIENT_CLOSED_REQUEST\"\n};\n/**\n* tRPC error codes that are considered retryable\n* With out of the box SSE, the client will reconnect when these errors are encountered\n*/ const retryableRpcCodes = [\n    TRPC_ERROR_CODES_BY_KEY.BAD_GATEWAY,\n    TRPC_ERROR_CODES_BY_KEY.SERVICE_UNAVAILABLE,\n    TRPC_ERROR_CODES_BY_KEY.GATEWAY_TIMEOUT,\n    TRPC_ERROR_CODES_BY_KEY.INTERNAL_SERVER_ERROR\n];\n//#endregion\n//#region src/unstable-core-do-not-import/utils.ts\n/**\n* Ensures there are no duplicate keys when building a procedure.\n* @internal\n*/ function mergeWithoutOverrides(obj1, ...objs) {\n    const newObj = Object.assign(Object.create(null), obj1);\n    for (const overrides of objs)for(const key in overrides){\n        if (key in newObj && newObj[key] !== overrides[key]) throw new Error(`Duplicate key ${key}`);\n        newObj[key] = overrides[key];\n    }\n    return newObj;\n}\n/**\n* Check that value is object\n* @internal\n*/ function isObject(value) {\n    return !!value && !Array.isArray(value) && typeof value === \"object\";\n}\nfunction isFunction(fn) {\n    return typeof fn === \"function\";\n}\n/**\n* Create an object without inheriting anything from `Object.prototype`\n* @internal\n*/ function omitPrototype(obj) {\n    return Object.assign(Object.create(null), obj);\n}\nconst asyncIteratorsSupported = typeof Symbol === \"function\" && !!Symbol.asyncIterator;\nfunction isAsyncIterable(value) {\n    return asyncIteratorsSupported && isObject(value) && Symbol.asyncIterator in value;\n}\n/**\n* Run an IIFE\n*/ const run = (fn)=>fn();\nfunction noop() {}\nfunction identity(it) {\n    return it;\n}\n/**\n* Generic runtime assertion function. Throws, if the condition is not `true`.\n*\n* Can be used as a slightly less dangerous variant of type assertions. Code\n* mistakes would be revealed at runtime then (hopefully during testing).\n*/ function assert(condition, msg = \"no additional info\") {\n    if (!condition) throw new Error(`AssertionError: ${msg}`);\n}\nfunction sleep(ms = 0) {\n    return new Promise((res)=>setTimeout(res, ms));\n}\n/**\n* Ponyfill for\n* [`AbortSignal.any`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static).\n*/ function abortSignalsAnyPonyfill(signals) {\n    if (typeof AbortSignal.any === \"function\") return AbortSignal.any(signals);\n    const ac = new AbortController();\n    for (const signal of signals){\n        if (signal.aborted) {\n            trigger();\n            break;\n        }\n        signal.addEventListener(\"abort\", trigger, {\n            once: true\n        });\n    }\n    return ac.signal;\n    function trigger() {\n        ac.abort();\n        for (const signal of signals)signal.removeEventListener(\"abort\", trigger);\n    }\n}\n//#endregion\n //# sourceMappingURL=utils-DdbbrDku.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\n");

/***/ })

};
;