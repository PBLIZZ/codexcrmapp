[{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/.next/types/app/api/trpc/[trpc]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":2,"message":"Prefer using the primitive `object` as a type name, rather than the upper-cased `Object`.","line":7,"column":30,"nodeType":"Identifier","messageId":"bannedClassType","endLine":7,"endColumn":36,"fix":{"range":[329,335],"text":"object"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[338,341],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[338,341],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[370,373],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[370,373],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":13,"column":9,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":13,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":14,"column":10,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":14,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":15,"column":13,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":15,"endColumn":21},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":16,"column":10,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":16,"endColumn":18},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":17,"column":9,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":17,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":18,"column":12,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":18,"endColumn":20},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":19,"column":11,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":19,"endColumn":19},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":20,"column":12,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":20,"endColumn":14,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[667,669],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[667,669],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":21,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":21,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7189,7192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7189,7192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":310,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":310,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7205,7208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7205,7208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":315,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7419,7422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7419,7422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":325,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7608,7611],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7608,7611],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":328,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":40,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[7795,7804],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_M' is defined but never used.","line":328,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":328,"endColumn":44},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":329,"column":84,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":329,"endColumn":86,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[7906,7908],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[7906,7908],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":331,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":331,"column":25,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":331,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":331,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8014,8017],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8014,8017],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":331,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8023,8026],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8023,8026],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":331,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":331,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8049,8052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8049,8052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":332,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":332,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":332,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":332,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8123,8126],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8123,8126],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8141,8144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8141,8144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":332,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":332,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8167,8170],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8167,8170],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":333,"column":84,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":333,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":341,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":341,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":341,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":341,"endColumn":49,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[8428,8437],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]}],"suppressedMessages":[],"errorCount":32,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// File: /Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/trpc/[trpc]/route.ts\nimport * as entry from '../../../../../../app/api/trpc/[trpc]/route.js'\nimport type { NextRequest } from 'next/server.js'\n\ntype TEntry = typeof import('../../../../../../app/api/trpc/[trpc]/route.js')\n\ntype SegmentParams<T extends Object = any> = T extends Record<string, any>\n  ? { [K in keyof T]: T[K] extends string ? string | string[] | undefined : never }\n  : T\n\n// Check that the entry is a valid entry\ncheckFields<Diff<{\n  GET?: Function\n  HEAD?: Function\n  OPTIONS?: Function\n  POST?: Function\n  PUT?: Function\n  DELETE?: Function\n  PATCH?: Function\n  config?: {}\n  generateStaticParams?: Function\n  revalidate?: RevalidateRange<TEntry> | false\n  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'\n  dynamicParams?: boolean\n  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'\n  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]\n  runtime?: 'nodejs' | 'experimental-edge' | 'edge'\n  maxDuration?: number\n  \n}, TEntry, ''>>()\n\ntype RouteContext = { params: Promise<SegmentParams> }\n// Check the prop type of the entry function\nif ('GET' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'GET'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'GET'>>\n      },\n      'GET'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<RouteContext>,\n      {\n        __tag__: 'GET'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'GET'>>\n      },\n      'GET'\n    >\n  >()\n  \n  checkFields<\n    Diff<\n      {\n        __tag__: 'GET',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: 'GET',\n        __return_type__: ReturnType<MaybeField<TEntry, 'GET'>>\n      },\n      'GET'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('HEAD' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'HEAD'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'HEAD'>>\n      },\n      'HEAD'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<RouteContext>,\n      {\n        __tag__: 'HEAD'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'HEAD'>>\n      },\n      'HEAD'\n    >\n  >()\n  \n  checkFields<\n    Diff<\n      {\n        __tag__: 'HEAD',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: 'HEAD',\n        __return_type__: ReturnType<MaybeField<TEntry, 'HEAD'>>\n      },\n      'HEAD'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('OPTIONS' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'OPTIONS'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'OPTIONS'>>\n      },\n      'OPTIONS'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<RouteContext>,\n      {\n        __tag__: 'OPTIONS'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'OPTIONS'>>\n      },\n      'OPTIONS'\n    >\n  >()\n  \n  checkFields<\n    Diff<\n      {\n        __tag__: 'OPTIONS',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: 'OPTIONS',\n        __return_type__: ReturnType<MaybeField<TEntry, 'OPTIONS'>>\n      },\n      'OPTIONS'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('POST' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'POST'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'POST'>>\n      },\n      'POST'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<RouteContext>,\n      {\n        __tag__: 'POST'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'POST'>>\n      },\n      'POST'\n    >\n  >()\n  \n  checkFields<\n    Diff<\n      {\n        __tag__: 'POST',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: 'POST',\n        __return_type__: ReturnType<MaybeField<TEntry, 'POST'>>\n      },\n      'POST'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('PUT' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'PUT'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'PUT'>>\n      },\n      'PUT'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<RouteContext>,\n      {\n        __tag__: 'PUT'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'PUT'>>\n      },\n      'PUT'\n    >\n  >()\n  \n  checkFields<\n    Diff<\n      {\n        __tag__: 'PUT',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: 'PUT',\n        __return_type__: ReturnType<MaybeField<TEntry, 'PUT'>>\n      },\n      'PUT'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('DELETE' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'DELETE'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'DELETE'>>\n      },\n      'DELETE'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<RouteContext>,\n      {\n        __tag__: 'DELETE'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'DELETE'>>\n      },\n      'DELETE'\n    >\n  >()\n  \n  checkFields<\n    Diff<\n      {\n        __tag__: 'DELETE',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: 'DELETE',\n        __return_type__: ReturnType<MaybeField<TEntry, 'DELETE'>>\n      },\n      'DELETE'\n    >\n  >()\n}\n// Check the prop type of the entry function\nif ('PATCH' in entry) {\n  checkFields<\n    Diff<\n      ParamCheck<Request | NextRequest>,\n      {\n        __tag__: 'PATCH'\n        __param_position__: 'first'\n        __param_type__: FirstArg<MaybeField<TEntry, 'PATCH'>>\n      },\n      'PATCH'\n    >\n  >()\n  checkFields<\n    Diff<\n      ParamCheck<RouteContext>,\n      {\n        __tag__: 'PATCH'\n        __param_position__: 'second'\n        __param_type__: SecondArg<MaybeField<TEntry, 'PATCH'>>\n      },\n      'PATCH'\n    >\n  >()\n  \n  checkFields<\n    Diff<\n      {\n        __tag__: 'PATCH',\n        __return_type__: Response | void | never | Promise<Response | void | never>\n      },\n      {\n        __tag__: 'PATCH',\n        __return_type__: ReturnType<MaybeField<TEntry, 'PATCH'>>\n      },\n      'PATCH'\n    >\n  >()\n}\n\n// Check the arguments and return type of the generateStaticParams function\nif ('generateStaticParams' in entry) {\n  checkFields<Diff<{ params: SegmentParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()\n  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()\n}\n\nexport interface PageProps {\n  params?: Promise<SegmentParams>\n  searchParams?: Promise<any>\n}\nexport interface LayoutProps {\n  children?: React.ReactNode\n\n  params?: Promise<SegmentParams>\n}\n\n// =============\n// Utility types\ntype RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never\n\n// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.\ntype OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>\ntype Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>\n\ntype FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never\ntype SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never\ntype MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never\n\ntype ParamCheck<T> = {\n  __tag__: string\n  __param_position__: string\n  __param_type__: T\n}\n\nfunction checkFields<_ extends { [k in keyof any]: never }>() {}\n\n// https://github.com/sindresorhus/type-fest\ntype Numeric = number | bigint\ntype Zero = 0 | 0n\ntype Negative<T extends Numeric> = T extends Zero ? never : `${T}` extends `-${string}` ? T : never\ntype NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/.next/types/app/layout.ts","messages":[{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":2,"message":"Prefer using the primitive `object` as a type name, rather than the upper-cased `Object`.","line":7,"column":30,"nodeType":"Identifier","messageId":"bannedClassType","endLine":7,"endColumn":36,"fix":{"range":[328,334],"text":"object"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[337,340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[337,340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[369,372],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[369,372],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":13,"column":12,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":13,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":14,"column":12,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":14,"endColumn":14,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[556,558],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[556,558],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":15,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":15,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1017,1020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1017,1020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":25,"column":22,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":25,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1064,1067],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1064,1067],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":27,"column":22,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2236,2239],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2236,2239],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2252,2255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2252,2255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2466,2469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2466,2469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2655,2658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2655,2658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":40,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[2842,2851],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_M' is defined but never used.","line":69,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":44},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":70,"column":84,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":70,"endColumn":86,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[2953,2955],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[2953,2955],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":72,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":72,"column":25,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":72,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3061,3064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3061,3064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3070,3073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3070,3073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3096,3099],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3096,3099],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":73,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":73,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":73,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3170,3173],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3170,3173],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3188,3191],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3188,3191],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3214,3217],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3214,3217],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":74,"column":84,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":74,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":78,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":49,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[3384,3393],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// File: /Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/layout.tsx\nimport * as entry from '../../../app/layout.js'\nimport type { ResolvingMetadata, ResolvingViewport } from 'next/dist/lib/metadata/types/metadata-interface.js'\n\ntype TEntry = typeof import('../../../app/layout.js')\n\ntype SegmentParams<T extends Object = any> = T extends Record<string, any>\n  ? { [K in keyof T]: T[K] extends string ? string | string[] | undefined : never }\n  : T\n\n// Check that the entry is a valid entry\ncheckFields<Diff<{\n  default: Function\n  config?: {}\n  generateStaticParams?: Function\n  revalidate?: RevalidateRange<TEntry> | false\n  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'\n  dynamicParams?: boolean\n  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'\n  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]\n  runtime?: 'nodejs' | 'experimental-edge' | 'edge'\n  maxDuration?: number\n  \n  metadata?: any\n  generateMetadata?: Function\n  viewport?: any\n  generateViewport?: Function\n  experimental_ppr?: boolean\n  \n}, TEntry, ''>>()\n\n\n// Check the prop type of the entry function\ncheckFields<Diff<LayoutProps, FirstArg<TEntry['default']>, 'default'>>()\n\n// Check the arguments and return type of the generateMetadata function\nif ('generateMetadata' in entry) {\n  checkFields<Diff<LayoutProps, FirstArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n  checkFields<Diff<ResolvingMetadata, SecondArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n}\n\n// Check the arguments and return type of the generateViewport function\nif ('generateViewport' in entry) {\n  checkFields<Diff<LayoutProps, FirstArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n  checkFields<Diff<ResolvingViewport, SecondArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n}\n\n// Check the arguments and return type of the generateStaticParams function\nif ('generateStaticParams' in entry) {\n  checkFields<Diff<{ params: SegmentParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()\n  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()\n}\n\nexport interface PageProps {\n  params?: Promise<SegmentParams>\n  searchParams?: Promise<any>\n}\nexport interface LayoutProps {\n  children?: React.ReactNode\n\n  params?: Promise<SegmentParams>\n}\n\n// =============\n// Utility types\ntype RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never\n\n// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.\ntype OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>\ntype Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>\n\ntype FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never\ntype SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never\ntype MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never\n\n\n\nfunction checkFields<_ extends { [k in keyof any]: never }>() {}\n\n// https://github.com/sindresorhus/type-fest\ntype Numeric = number | bigint\ntype Zero = 0 | 0n\ntype Negative<T extends Numeric> = T extends Zero ? never : `${T}` extends `-${string}` ? T : never\ntype NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/.next/types/app/page.ts","messages":[{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":2,"message":"Prefer using the primitive `object` as a type name, rather than the upper-cased `Object`.","line":7,"column":30,"nodeType":"Identifier","messageId":"bannedClassType","endLine":7,"endColumn":36,"fix":{"range":[322,328],"text":"object"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[331,334],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[331,334],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[363,366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[363,366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":13,"column":12,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":13,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":14,"column":12,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":14,"endColumn":14,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[550,552],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[550,552],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":15,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":15,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1011,1014],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1011,1014],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":25,"column":22,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":25,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1058,1061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1058,1061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":27,"column":22,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2224,2227],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2224,2227],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2240,2243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2240,2243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2454,2457],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2454,2457],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2643,2646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2643,2646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":40,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[2830,2839],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_M' is defined but never used.","line":69,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":44},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":70,"column":84,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":70,"endColumn":86,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[2941,2943],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[2941,2943],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":72,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":72,"column":25,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":72,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3049,3052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3049,3052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3058,3061],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3058,3061],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3084,3087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3084,3087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":73,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":73,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":73,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3158,3161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3158,3161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3176,3179],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3176,3179],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3202,3205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3202,3205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":74,"column":84,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":74,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":78,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":49,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[3372,3381],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// File: /Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/page.tsx\nimport * as entry from '../../../app/page.js'\nimport type { ResolvingMetadata, ResolvingViewport } from 'next/dist/lib/metadata/types/metadata-interface.js'\n\ntype TEntry = typeof import('../../../app/page.js')\n\ntype SegmentParams<T extends Object = any> = T extends Record<string, any>\n  ? { [K in keyof T]: T[K] extends string ? string | string[] | undefined : never }\n  : T\n\n// Check that the entry is a valid entry\ncheckFields<Diff<{\n  default: Function\n  config?: {}\n  generateStaticParams?: Function\n  revalidate?: RevalidateRange<TEntry> | false\n  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'\n  dynamicParams?: boolean\n  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'\n  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]\n  runtime?: 'nodejs' | 'experimental-edge' | 'edge'\n  maxDuration?: number\n  \n  metadata?: any\n  generateMetadata?: Function\n  viewport?: any\n  generateViewport?: Function\n  experimental_ppr?: boolean\n  \n}, TEntry, ''>>()\n\n\n// Check the prop type of the entry function\ncheckFields<Diff<PageProps, FirstArg<TEntry['default']>, 'default'>>()\n\n// Check the arguments and return type of the generateMetadata function\nif ('generateMetadata' in entry) {\n  checkFields<Diff<PageProps, FirstArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n  checkFields<Diff<ResolvingMetadata, SecondArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n}\n\n// Check the arguments and return type of the generateViewport function\nif ('generateViewport' in entry) {\n  checkFields<Diff<PageProps, FirstArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n  checkFields<Diff<ResolvingViewport, SecondArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n}\n\n// Check the arguments and return type of the generateStaticParams function\nif ('generateStaticParams' in entry) {\n  checkFields<Diff<{ params: SegmentParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()\n  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()\n}\n\nexport interface PageProps {\n  params?: Promise<SegmentParams>\n  searchParams?: Promise<any>\n}\nexport interface LayoutProps {\n  children?: React.ReactNode\n\n  params?: Promise<SegmentParams>\n}\n\n// =============\n// Utility types\ntype RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never\n\n// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.\ntype OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>\ntype Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>\n\ntype FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never\ntype SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never\ntype MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never\n\n\n\nfunction checkFields<_ extends { [k in keyof any]: never }>() {}\n\n// https://github.com/sindresorhus/type-fest\ntype Numeric = number | bigint\ntype Zero = 0 | 0n\ntype Negative<T extends Numeric> = T extends Zero ? never : `${T}` extends `-${string}` ? T : never\ntype NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/.next/types/app/tasks/page.ts","messages":[{"ruleId":"@typescript-eslint/no-wrapper-object-types","severity":2,"message":"Prefer using the primitive `object` as a type name, rather than the upper-cased `Object`.","line":7,"column":30,"nodeType":"Identifier","messageId":"bannedClassType","endLine":7,"endColumn":36,"fix":{"range":[346,352],"text":"object"}},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[355,358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[355,358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":7,"column":71,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":7,"endColumn":74,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[387,390],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[387,390],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":13,"column":12,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":13,"endColumn":20},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":14,"column":12,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":14,"endColumn":14,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[574,576],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[574,576],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":15,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":15,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":24,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1035,1038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1035,1038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":25,"column":22,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":25,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":26,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1082,1085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1082,1085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":27,"column":22,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":27,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":72,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":75,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2248,2251],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2248,2251],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":51,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2264,2267],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2264,2267],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":56,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2478,2481],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2478,2481],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":66,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2667,2670],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2667,2670],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":69,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":69,"endColumn":40,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[2854,2863],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_M' is defined but never used.","line":69,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":69,"endColumn":44},{"ruleId":"@typescript-eslint/no-empty-object-type","severity":2,"message":"The `{}` (\"empty object\") type allows any non-nullish value, including literals like `0` and `\"\"`.\n- If that's what you want, disable this lint rule with an inline comment or configure the 'allowObjectTypes' rule option.\n- If you want a type meaning \"any object\", you probably want `object` instead.\n- If you want a type meaning \"any value\", you probably want `unknown` instead.","line":70,"column":84,"nodeType":"TSTypeLiteral","messageId":"noEmptyObject","endLine":70,"endColumn":86,"suggestions":[{"messageId":"replaceEmptyObjectType","data":{"replacement":"object"},"fix":{"range":[2965,2967],"text":"object"},"desc":"Replace `{}` with `object`."},{"messageId":"replaceEmptyObjectType","data":{"replacement":"unknown"},"fix":{"range":[2965,2967],"text":"unknown"},"desc":"Replace `{}` with `unknown`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":72,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":16},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":72,"column":25,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":72,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3073,3076],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3073,3076],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3082,3085],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3082,3085],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":102,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":105,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3108,3111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3108,3111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'T' is defined but never used.","line":73,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":17},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":73,"column":26,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":73,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3182,3185],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3182,3185],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":77,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":80,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3200,3203],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3200,3203],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":103,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":106,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3226,3229],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3226,3229],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unsafe-function-type","severity":2,"message":"The `Function` type accepts any function-like value.\nPrefer explicitly defining any function parameters and return type.","line":74,"column":84,"nodeType":"Identifier","messageId":"bannedFunctionType","endLine":74,"endColumn":92},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":78,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":49,"suggestions":[{"messageId":"suggestPropertyKey","fix":{"range":[3396,3405],"text":"PropertyKey"},"desc":"Use `PropertyKey` instead, this is more explicit than `keyof any`."}]}],"suppressedMessages":[],"errorCount":30,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":1,"fixableWarningCount":0,"source":"// File: /Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/page.tsx\nimport * as entry from '../../../../app/tasks/page.js'\nimport type { ResolvingMetadata, ResolvingViewport } from 'next/dist/lib/metadata/types/metadata-interface.js'\n\ntype TEntry = typeof import('../../../../app/tasks/page.js')\n\ntype SegmentParams<T extends Object = any> = T extends Record<string, any>\n  ? { [K in keyof T]: T[K] extends string ? string | string[] | undefined : never }\n  : T\n\n// Check that the entry is a valid entry\ncheckFields<Diff<{\n  default: Function\n  config?: {}\n  generateStaticParams?: Function\n  revalidate?: RevalidateRange<TEntry> | false\n  dynamic?: 'auto' | 'force-dynamic' | 'error' | 'force-static'\n  dynamicParams?: boolean\n  fetchCache?: 'auto' | 'force-no-store' | 'only-no-store' | 'default-no-store' | 'default-cache' | 'only-cache' | 'force-cache'\n  preferredRegion?: 'auto' | 'global' | 'home' | string | string[]\n  runtime?: 'nodejs' | 'experimental-edge' | 'edge'\n  maxDuration?: number\n  \n  metadata?: any\n  generateMetadata?: Function\n  viewport?: any\n  generateViewport?: Function\n  experimental_ppr?: boolean\n  \n}, TEntry, ''>>()\n\n\n// Check the prop type of the entry function\ncheckFields<Diff<PageProps, FirstArg<TEntry['default']>, 'default'>>()\n\n// Check the arguments and return type of the generateMetadata function\nif ('generateMetadata' in entry) {\n  checkFields<Diff<PageProps, FirstArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n  checkFields<Diff<ResolvingMetadata, SecondArg<MaybeField<TEntry, 'generateMetadata'>>, 'generateMetadata'>>()\n}\n\n// Check the arguments and return type of the generateViewport function\nif ('generateViewport' in entry) {\n  checkFields<Diff<PageProps, FirstArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n  checkFields<Diff<ResolvingViewport, SecondArg<MaybeField<TEntry, 'generateViewport'>>, 'generateViewport'>>()\n}\n\n// Check the arguments and return type of the generateStaticParams function\nif ('generateStaticParams' in entry) {\n  checkFields<Diff<{ params: SegmentParams }, FirstArg<MaybeField<TEntry, 'generateStaticParams'>>, 'generateStaticParams'>>()\n  checkFields<Diff<{ __tag__: 'generateStaticParams', __return_type__: any[] | Promise<any[]> }, { __tag__: 'generateStaticParams', __return_type__: ReturnType<MaybeField<TEntry, 'generateStaticParams'>> }>>()\n}\n\nexport interface PageProps {\n  params?: Promise<SegmentParams>\n  searchParams?: Promise<any>\n}\nexport interface LayoutProps {\n  children?: React.ReactNode\n\n  params?: Promise<SegmentParams>\n}\n\n// =============\n// Utility types\ntype RevalidateRange<T> = T extends { revalidate: any } ? NonNegative<T['revalidate']> : never\n\n// If T is unknown or any, it will be an empty {} type. Otherwise, it will be the same as Omit<T, keyof Base>.\ntype OmitWithTag<T, K extends keyof any, _M> = Omit<T, K>\ntype Diff<Base, T extends Base, Message extends string = ''> = 0 extends (1 & T) ? {} : OmitWithTag<T, keyof Base, Message>\n\ntype FirstArg<T extends Function> = T extends (...args: [infer T, any]) => any ? unknown extends T ? any : T : never\ntype SecondArg<T extends Function> = T extends (...args: [any, infer T]) => any ? unknown extends T ? any : T : never\ntype MaybeField<T, K extends string> = T extends { [k in K]: infer G } ? G extends Function ? G : never : never\n\n\n\nfunction checkFields<_ extends { [k in keyof any]: never }>() {}\n\n// https://github.com/sindresorhus/type-fest\ntype Numeric = number | bigint\ntype Zero = 0 | 0n\ntype Negative<T extends Numeric> = T extends Zero ? never : `${T}` extends `-${string}` ? T : never\ntype NonNegative<T extends Numeric> = T extends Zero ? T : Negative<T> extends never ? T : '__invalid_negative_number__'\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/.next/types/cache-life.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/.next/types/link.d.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":65,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Type definitions for Next.js routes\n\n/**\n * Internal types used by the Next.js router and Link component.\n * These types are not meant to be used directly.\n * @internal\n */\ndeclare namespace __next_route_internal_types__ {\n  type SearchOrHash = `?${string}` | `#${string}`\n  type WithProtocol = `${string}:${string}`\n\n  type Suffix = '' | SearchOrHash\n\n  type SafeSlug<S extends string> = S extends `${string}/${string}`\n    ? never\n    : S extends `${string}${SearchOrHash}`\n    ? never\n    : S extends ''\n    ? never\n    : S\n\n  type CatchAllSlug<S extends string> = S extends `${string}${SearchOrHash}`\n    ? never\n    : S extends ''\n    ? never\n    : S\n\n  type OptionalCatchAllSlug<S extends string> =\n    S extends `${string}${SearchOrHash}` ? never : S\n\n  type StaticRoutes = \n    | `/`\n    | `/forgot-password`\n    | `/log-in`\n    | `/reset-password`\n    | `/sign-up`\n    | `/sign-up/confirmation`\n    | `/account`\n    | `/api/docs/openapi`\n    | `/api/docs/swagger`\n    | `/api/sentry-example-api`\n    | `/api/auth/callback`\n    | `/api/auth/logout`\n    | `/contacts`\n    | `/contacts/groups`\n    | `/contacts/import`\n    | `/contacts/import/csv-upload-test`\n    | `/contacts/new`\n    | `/docs`\n    | `/marketing`\n    | `/tasks`\n  type DynamicRoutes<T extends string = string> = \n    | `/api/trpc/${SafeSlug<T>}`\n    | `/api/auth/${CatchAllSlug<T>}`\n    | `/contacts/${SafeSlug<T>}`\n    | `/contacts/${SafeSlug<T>}/edit`\n    | `/contacts/groups/${SafeSlug<T>}`\n    | `/api/trpc/${OptionalCatchAllSlug<T>}`\n\n  type RouteImpl<T> = \n    | StaticRoutes\n    | SearchOrHash\n    | WithProtocol\n    | `${StaticRoutes}${SearchOrHash}`\n    | (T extends `${DynamicRoutes<infer _>}${Suffix}` ? T : never)\n    \n}\n\ndeclare module 'next' {\n  export { default } from 'next/types.js'\n  export * from 'next/types.js'\n\n  export type Route<T extends string = string> =\n    __next_route_internal_types__.RouteImpl<T>\n}\n\ndeclare module 'next/link' {\n  import type { LinkProps as OriginalLinkProps } from 'next/dist/client/link.js'\n  import type { AnchorHTMLAttributes, DetailedHTMLProps } from 'react'\n  import type { UrlObject } from 'url'\n\n  type LinkRestProps = Omit<\n    Omit<\n      DetailedHTMLProps<\n        AnchorHTMLAttributes<HTMLAnchorElement>,\n        HTMLAnchorElement\n      >,\n      keyof OriginalLinkProps\n    > &\n      OriginalLinkProps,\n    'href'\n  >\n\n  export type LinkProps<RouteInferType> = LinkRestProps & {\n    /**\n     * The path or URL to navigate to. This is the only required prop. It can also be an object.\n     * @see https://nextjs.org/docs/api-reference/next/link\n     */\n    href: __next_route_internal_types__.RouteImpl<RouteInferType> | UrlObject\n  }\n\n  export default function Link<RouteType>(props: LinkProps<RouteType>): JSX.Element\n}\n\ndeclare module 'next/navigation' {\n  export * from 'next/dist/client/components/navigation.js'\n\n  import type { NavigateOptions, AppRouterInstance as OriginalAppRouterInstance } from 'next/dist/shared/lib/app-router-context.shared-runtime.js'\n  interface AppRouterInstance extends OriginalAppRouterInstance {\n    /**\n     * Navigate to the provided href.\n     * Pushes a new history entry.\n     */\n    push<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>, options?: NavigateOptions): void\n    /**\n     * Navigate to the provided href.\n     * Replaces the current history entry.\n     */\n    replace<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>, options?: NavigateOptions): void\n    /**\n     * Prefetch the provided href.\n     */\n    prefetch<RouteType>(href: __next_route_internal_types__.RouteImpl<RouteType>): void\n  }\n\n  export function useRouter(): AppRouterInstance;\n}\n\ndeclare module 'next/form' {\n  import type { FormProps as OriginalFormProps } from 'next/dist/client/form.js'\n\n  type FormRestProps = Omit<OriginalFormProps, 'action'>\n\n  export type FormProps<RouteInferType> = {\n    /**\n     * `action` can be either a `string` or a function.\n     * - If `action` is a string, it will be interpreted as a path or URL to navigate to when the form is submitted.\n     *   The path will be prefetched when the form becomes visible.\n     * - If `action` is a function, it will be called when the form is submitted. See the [React docs](https://react.dev/reference/react-dom/components/form#props) for more.\n     */\n    action: __next_route_internal_types__.RouteImpl<RouteInferType> | ((formData: FormData) => void)\n  } & FormRestProps\n\n  export default function Form<RouteType>(props: FormProps<RouteType>): JSX.Element\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/(auth)/forgot-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/(auth)/log-in/page.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":320,"column":16,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[12226,12261],"text":"\n            Don&apos;t have an account?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[12226,12261],"text":"\n            Don&lsquo;t have an account?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[12226,12261],"text":"\n            Don&#39;t have an account?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[12226,12261],"text":"\n            Don&rsquo;t have an account?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport Image from 'next/image';\nimport Link from 'next/link';\nimport { useState } from 'react';\nimport { z } from 'zod';\n\nimport OneTapComponent from '@/components/auth/OneTapComponent'; // Ensure this path is correct and component exists\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { createClient } from '@/lib/supabase/client';\n\nconst supabase = createClient();\n\n// Google Icon SVG Component\nconst EyeIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M2 12s3-7 10-7 10 7 10 7-3 7-10 7-10-7-10-7Z\" />\n    <circle cx=\"12\" cy=\"12\" r=\"3\" />\n  </svg>\n);\n\nconst EyeOffIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <path d=\"M9.88 9.88a3 3 0 1 0 4.24 4.24\" />\n    <path d=\"M10.73 5.08A10.43 10.43 0 0 1 12 5c7 0 10 7 10 7a13.16 13.16 0 0 1-1.67 2.68\" />\n    <path d=\"M6.61 6.61A13.526 13.526 0 0 0 2 12s3 7 10 7a9.74 9.74 0 0 0 5.39-1.61\" />\n    <line x1=\"2\" x2=\"22\" y1=\"2\" y2=\"22\" />\n  </svg>\n);\n\nconst CheckIcon = ({ className }: { className?: string }) => (\n  <svg\n    className={className}\n    xmlns=\"http://www.w3.org/2000/svg\"\n    width=\"24\"\n    height=\"24\"\n    viewBox=\"0 0 24 24\"\n    fill=\"none\"\n    stroke=\"currentColor\"\n    strokeWidth=\"2\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  >\n    <polyline points=\"20 6 9 17 4 12\"></polyline>\n  </svg>\n);\n\nexport default function LoginPage() {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [messageType, setMessageType] = useState<'error' | 'success'>('error');\n  const [isLoading, setIsLoading] = useState(false);\n  // const [isOauthLoading, setIsOauthLoading] = useState<'google' | null>(null); // Replaced by OneTapComponent\n  const [showPassword, setShowPassword] = useState(false);\n  const [emailBlurred, setEmailBlurred] = useState(false);\n  const [passwordBlurred, setPasswordBlurred] = useState(false);\n\n  // Zod schema for login form\n  const loginSchema = z.object({\n    email: z.string().email({ message: 'Invalid email address' }),\n    password: z.string().min(1, { message: 'Password is required' }), // Or a more specific minLength, e.g., .min(6, 'Password must be at least 6 characters')\n  });\n\n  const [emailError, setEmailError] = useState<string | null>(null);\n  const [passwordError, setPasswordError] = useState<string | null>(null);\n\n  const handlePasswordLogin = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsLoading(true);\n    setMessage('');\n    setEmailError(null); // Clear previous errors\n    setPasswordError(null);\n\n    // Validate form data\n    const validationResult = loginSchema.safeParse({ email, password });\n\n    if (!validationResult.success) {\n      const fieldErrors = validationResult.error.flatten().fieldErrors;\n      if (fieldErrors.email) setEmailError(fieldErrors.email[0]);\n      if (fieldErrors.password) setPasswordError(fieldErrors.password[0]);\n      setIsLoading(false);\n      return;\n    }\n\n    try {\n      const { error } = await supabase.auth.signInWithPassword({\n        email,\n        password,\n      });\n\n      if (error) {\n        setMessage(error.message);\n        setMessageType('error');\n      } else {\n        // Successful login - redirect to dashboard explicitly\n        // This ensures the login screen disappears\n        window.location.href = '/dashboard';\n      }\n      // Middleware will handle redirect, but we force it here too for better UX\n    } catch (error) {\n      setMessage(\n        error instanceof Error\n          ? error.message\n          : 'An error occurred during log in'\n      );\n      setMessageType('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n  // handleOAuthLogin function removed as OneTapComponent handles Google Sign-In\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-teal-50 p-4 sm:p-6 md:p-8\">\n      <Card className=\"w-full max-w-md shadow-lg\">\n        <CardHeader className=\"space-y-4 pt-6 pb-4 px-4 sm:px-6\">\n          <div className=\"flex items-center space-x-3 self-start\">\n            <Image\n              src=\"/images/logo.png\"\n              alt=\"CodexCRM Logo\"\n              width={40} \n              height={40}\n              className=\"h-8 w-8 sm:h-10 sm:w-10\"\n            />\n            <div>\n              <p className=\"text-xl font-semibold text-teal-700\">OmniCRM</p>\n              <p className=\"text-xs text-gray-500\">by Omnipotency AI</p>\n            </div>\n          </div>\n          <div className=\"text-center\">\n            <CardTitle className=\"text-xl sm:text-2xl font-bold text-teal-800\">\n              Log In\n            </CardTitle>\n            <CardDescription className=\"text-xs sm:text-sm text-gray-600\">\n              Welcome back! Log in to your account.\n            </CardDescription>\n          </div>\n        </CardHeader>\n\n        <CardContent className=\"space-y-6 px-4 sm:px-6 pb-4 sm:pb-6 pt-4\">\n          {/* Message Display */}\n          {message && (\n            <p\n              className={`text-sm text-center mb-4 ${messageType === 'error' ? 'text-red-600' : 'text-green-600'}`}\n            >\n              {message}\n            </p>\n          )}\n          {/* OneTapComponent will render Google Sign-In Button or Prompt */}\n          <OneTapComponent />\n\n          {/* Separator */}\n          <div className=\"relative my-6\">\n            <div className=\"absolute inset-0 flex items-center\">\n              <span className=\"w-full border-t border-gray-300\" />\n            </div>\n            <div className=\"relative flex justify-center text-xs uppercase\">\n              <span className=\"bg-white px-2 text-gray-500\">OR</span>\n            </div>\n          </div>\n          {/* Form */}\n          <form onSubmit={handlePasswordLogin} className=\"space-y-6\">\n            <div className=\"relative\">\n              <Input\n                id=\"email\"\n                name=\"email\"\n                type=\"email\"\n                autoComplete=\"email\"\n                required\n                placeholder=\"Email\"\n                value={email}\n                onChange={(e) => {\n                  setEmail(e.target.value);\n                  if (emailError) {\n                    setEmailError(null); // Clear error if user starts typing\n                  }\n                  if (emailBlurred) {\n                    // If already blurred once, validate on change\n                    const result = loginSchema.shape.email.safeParse(\n                      e.target.value\n                    );\n                    if (!result.success) {\n                      setEmailError(result.error.flatten().formErrors[0]);\n                    } else {\n                      setEmailError(null); // Clear error if now valid\n                    }\n                  }\n                }}\n                onBlur={() => {\n                  setEmailBlurred(true); // Mark as blurred\n                  const result = loginSchema.shape.email.safeParse(email);\n                  if (!result.success) {\n                    setEmailError(result.error.flatten().formErrors[0]);\n                  } else {\n                    setEmailError(null);\n                  }\n                }}\n                autoFocus\n                className={`block w-full appearance-none rounded-md border px-3 py-2 placeholder-gray-400 shadow-sm focus:border-teal-500 focus:outline-none focus:ring-teal-500 sm:text-sm pr-10 ${emailBlurred ? (emailError ? 'border-red-500' : 'border-green-500') : 'border-gray-300'}`}\n                autoCapitalize=\"none\"\n              />\n              {emailBlurred && !emailError && email.length > 0 && (\n                <CheckIcon className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-green-500 pointer-events-none h-5 w-5\" />\n              )}\n              {emailError && (\n                <p className=\"mt-1 text-xs text-red-600\">{emailError}</p>\n              )}\n            </div>\n\n            <div className=\"relative\">\n              <Input\n                id=\"password\"\n                name=\"password\"\n                type={showPassword ? 'text' : 'password'}\n                autoComplete=\"current-password\"\n                required\n                placeholder=\"Password\"\n                value={password}\n                onChange={(e) => {\n                  setPassword(e.target.value);\n                  if (passwordError) {\n                    setPasswordError(null);\n                  }\n                  if (passwordBlurred) {\n                    const result = loginSchema.shape.password.safeParse(\n                      e.target.value\n                    );\n                    if (!result.success) {\n                      setPasswordError(result.error.flatten().formErrors[0]);\n                    } else {\n                      setPasswordError(null);\n                    }\n                  }\n                }}\n                onBlur={() => {\n                  setPasswordBlurred(true);\n                  const result = loginSchema.shape.password.safeParse(password);\n                  if (!result.success) {\n                    setPasswordError(result.error.flatten().formErrors[0]);\n                  } else {\n                    setPasswordError(null);\n                  }\n                }}\n                className={`block w-full appearance-none rounded-md border px-3 py-2 placeholder-gray-400 shadow-sm focus:border-teal-500 focus:outline-none focus:ring-teal-500 sm:text-sm pr-10 ${passwordBlurred ? (passwordError ? 'border-red-500' : 'border-green-500') : 'border-gray-300'}`}\n              />\n              {passwordBlurred && !passwordError && password.length > 0 && (\n                <CheckIcon className=\"absolute inset-y-0 right-0 pr-10 flex items-center text-green-500 pointer-events-none h-5 w-5\" />\n              )}\n              <button\n                type=\"button\"\n                onClick={() => setShowPassword(!showPassword)}\n                className=\"absolute inset-y-0 right-0 pr-3 flex items-center text-sm leading-5 text-gray-500 hover:text-orange-500\"\n                aria-label={showPassword ? 'Hide password' : 'Show password'}\n              >\n                {showPassword ? (\n                  <EyeOffIcon className=\"h-5 w-5\" />\n                ) : (\n                  <EyeIcon className=\"h-5 w-5\" />\n                )}\n              </button>\n            </div>\n            {passwordError && (\n              <p className=\"mt-1 text-xs text-red-600\">{passwordError}</p>\n            )}\n\n            {/* Submit Button and Forgot Password Link Container */}\n            <div className=\"flex justify-between items-end mt-2\">\n              <Button\n                type=\"submit\"\n                className=\"flex justify-center disabled:opacity-50 bg-teal-800 hover:bg-teal-700 text-teal-200 px-8 py-2 text-sm font-semibold shadow-sm focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-teal-600\"\n                disabled={isLoading}\n              >\n                {isLoading ? 'Logging in...' : 'Log In with Email'}\n              </Button>\n              <Link\n                href=\"/forgot-password\" // Assuming this is the route\n                className=\"text-xs font-medium text-teal-600 hover:text-teal-500\"\n              >\n                Forgot your password?\n              </Link>\n            </div>\n          </form>\n          {/* Closing the form tag here */}\n        </CardContent>\n\n        {/* Optional Footer for Sign Up link etc. */}\n        <CardFooter className=\"flex flex-col items-center space-y-4 px-4 sm:px-6 pb-4 sm:pb-6 text-sm text-gray-600\">\n          <p className=\"text-center\">\n            Don't have an account?{' '}\n            <Link\n              href=\"/sign-up\"\n              className=\"font-medium text-teal-600 hover:text-teal-500\"\n            >\n              Sign Up\n            </Link>\n          </p>\n          <p className=\"mt-4 px-2 text-center text-xs text-gray-500\">\n            By logging in, you agree to our{' '}\n            <Link href=\"/terms\" className=\"underline hover:text-teal-700\">\n              Terms of Service\n            </Link>{' '}\n            and{' '}\n            <Link href=\"/privacy\" className=\"underline hover:text-teal-700\">\n              Privacy Policy\n            </Link>\n            .\n          </p>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/(auth)/reset-password/ResetPasswordContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_searchParams' is assigned a value but never used.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_accessToken' is assigned a value but never used.","line":113,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_data' is assigned a value but never used.","line":116,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":116,"endColumn":26}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useState, useEffect } from 'react';\n\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { createClient } from '@/lib/supabase/client';\n\nconst supabase = createClient();\n\nexport function ResetPasswordContent() {\n  const router = useRouter();\n  const _searchParams = useSearchParams();\n  const [password, setPassword] = useState('');\n  const [confirmPassword, setConfirmPassword] = useState('');\n  const [message, setMessage] = useState('');\n  const [isLoading, setIsLoading] = useState(false);\n  const [messageType, setMessageType] = useState<'error' | 'success'>('error');\n  const [tokenFound, setTokenFound] = useState(false);\n\n  // Supabase sends the recovery token in the URL hash like #access_token=TOKEN&type=recovery&...\n  // We need to parse it on the client side.\n  useEffect(() => {\n    const checkToken = async () => {\n      try {\n        const hash = window.location.hash;\n\n        if (!hash) {\n          setMessage('No password reset token found in URL.');\n          setMessageType('error');\n          setTokenFound(false);\n          return;\n        }\n\n        // Parse the URL fragment\n        const params = new URLSearchParams(hash.substring(1)); // remove #\n        const _accessToken = params.get('access_token');\n        const type = params.get('type');\n\n        if (!_accessToken) {\n          setMessage('Invalid or missing password reset token in URL.');\n          setMessageType('error');\n          setTokenFound(false);\n          return;\n        }\n\n        if (type !== 'recovery') {\n          setMessage('Invalid token type. Expected a password recovery token.');\n          setMessageType('error');\n          setTokenFound(false);\n          return;\n        }\n\n        // Check token validity with Supabase\n        const { error } = await supabase.auth.verifyOtp({\n          token_hash: _accessToken,\n          type: 'recovery',\n        });\n\n        if (error) {\n          console.error('Token verification failed:', error);\n          setMessage(`Invalid or expired token: ${error.message}`);\n          setMessageType('error');\n          setTokenFound(false);\n          return;\n        }\n\n        setTokenFound(true); // Token is valid, show password form\n      } catch (err) {\n        console.error('Error processing reset token:', err);\n        setMessage('Error processing password reset token. Please try again.');\n        setMessageType('error');\n        setTokenFound(false);\n      }\n    };\n\n    checkToken();\n  }, []);\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n\n    if (password !== confirmPassword) {\n      setMessage('Passwords do not match.');\n      setMessageType('error');\n      return;\n    }\n\n    if (password.length < 8) {\n      setMessage('Password should be at least 8 characters long.');\n      setMessageType('error');\n      return;\n    }\n\n    setIsLoading(true);\n    setMessage('');\n\n    try {\n      // Update password using the token in the URL hash\n      const hash = window.location.hash;\n      const params = new URLSearchParams(hash.substring(1));\n      const _accessToken = params.get('access_token');\n\n      // Call Supabase to update the password\n      const { data: _data, error } = await supabase.auth.updateUser({\n        password: password,\n      });\n\n      if (error) {\n        console.error('Password update failed:', error);\n        setMessage(`Failed to update password: ${error.message}`);\n        setMessageType('error');\n      } else {\n        console.warn('Password updated successfully');\n        setMessage(\n          'Password has been successfully reset! Redirecting to sign-in...'\n        );\n        setMessageType('success');\n\n        // Clear the URL hash to remove the token\n        window.location.hash = '';\n\n        // Redirect after a short delay\n        setTimeout(() => {\n          router.push('/sign-in');\n        }, 3000);\n      }\n    } catch (err) {\n      console.error('Error updating password:', err);\n      setMessage('An unexpected error occurred. Please try again.');\n      setMessageType('error');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  return (\n    <div className=\"container flex items-center justify-center min-h-screen py-12\">\n      <Card className=\"w-full max-w-md\">\n        <CardHeader className=\"space-y-1\">\n          <CardTitle className=\"text-2xl font-bold\">Reset Password</CardTitle>\n          <CardDescription>\n            Enter a new password for your account\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent>\n          {message && (\n            <div\n              className={`p-3 mb-4 rounded text-sm ${\n                messageType === 'error'\n                  ? 'bg-red-50 text-red-600'\n                  : 'bg-green-50 text-green-600'\n              }`}\n            >\n              {message}\n            </div>\n          )}\n\n          {tokenFound ? (\n            <form onSubmit={handleSubmit}>\n              <div className=\"space-y-4\">\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"password\">New Password</Label>\n                  <Input\n                    id=\"password\"\n                    type=\"password\"\n                    placeholder=\"Enter your new password\"\n                    value={password}\n                    onChange={(e) => setPassword(e.target.value)}\n                    required\n                    minLength={8}\n                  />\n                </div>\n\n                <div className=\"space-y-2\">\n                  <Label htmlFor=\"confirmPassword\">Confirm Password</Label>\n                  <Input\n                    id=\"confirmPassword\"\n                    type=\"password\"\n                    placeholder=\"Confirm your new password\"\n                    value={confirmPassword}\n                    onChange={(e) => setConfirmPassword(e.target.value)}\n                    required\n                    minLength={8}\n                  />\n                </div>\n              </div>\n\n              <Button\n                type=\"submit\"\n                className=\"w-full mt-6\"\n                disabled={isLoading}\n              >\n                {isLoading ? 'Updating...' : 'Reset Password'}\n              </Button>\n            </form>\n          ) : (\n            <div className=\"text-center\">\n              <p className=\"mb-4\">\n                Please check your email for a password reset link, or request a\n                new one.\n              </p>\n              <Link href=\"/sign-in\" className=\"text-blue-600 hover:underline\">\n                Return to sign in\n              </Link>\n            </div>\n          )}\n        </CardContent>\n\n        <CardFooter className=\"flex justify-center\">\n          <Link\n            href=\"/sign-in\"\n            className=\"text-sm text-gray-500 hover:underline\"\n          >\n            Return to sign in\n          </Link>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/(auth)/reset-password/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/(auth)/sign-up/confirmation/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/(auth)/sign-up/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/account/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSigningOut' is assigned a value but never used.","line":71,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsSigningOut' is assigned a value but never used.","line":71,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":39}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type { User } from '@supabase/supabase-js';\nimport Link from 'next/link';\nimport { useRouter } from 'next/navigation';\nimport { useState, useEffect, useReducer } from 'react';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  fetchCurrentUser,\n  updateUserPassword,\n  mapAuthErrorMessage,\n} from '@/lib/auth/service';\n\n// Constants\nconst MIN_PASSWORD_LENGTH = 6;\nconst ROUTES = {\n  signIn: '/log-in',\n  dashboard: '/dashboard',\n};\n\n// Message state management with useReducer\ntype MessageState = {\n  text: string;\n  type: 'error' | 'success';\n};\n\ntype MessageAction =\n  | {\n      type: 'SET_MESSAGE';\n      payload: { text: string; type: 'error' | 'success' };\n    }\n  | { type: 'CLEAR_MESSAGE' };\n\nconst initialMessageState: MessageState = {\n  text: '',\n  type: 'error',\n};\n\nfunction messageReducer(\n  state: MessageState,\n  action: MessageAction\n): MessageState {\n  switch (action.type) {\n    case 'SET_MESSAGE':\n      return {\n        text: action.payload.text,\n        type: action.payload.type,\n      };\n    case 'CLEAR_MESSAGE':\n      return initialMessageState;\n    default:\n      return state;\n  }\n}\n\nexport default function AccountPage() {\n  const router = useRouter();\n  const [user, setUser] = useState<User | null>(null);\n  const [isFetchingUser, setIsFetchingUser] = useState(true);\n  const [isSigningOut, setIsSigningOut] = useState(false);\n  const [newPassword, setNewPassword] = useState('');\n  const [confirmNewPassword, setConfirmNewPassword] = useState('');\n  const [isPasswordLoading, setIsPasswordLoading] = useState(false);\n  const [messageState, dispatchMessage] = useReducer(\n    messageReducer,\n    initialMessageState\n  );\n\n  // Fetch user data on component mount\n  useEffect(() => {\n    const getUserData = async () => {\n      setIsFetchingUser(true);\n\n      const { user: currentUser, error } = await fetchCurrentUser();\n\n      if (error || !currentUser) {\n        dispatchMessage({\n          type: 'SET_MESSAGE',\n          payload: {\n            text: 'Could not fetch user data. Please sign in again.',\n            type: 'error',\n          },\n        });\n        router.push(ROUTES.signIn);\n      } else {\n        setUser(currentUser);\n      }\n\n      setIsFetchingUser(false);\n    };\n\n    getUserData();\n  }, [router]);\n\n  // Handle password update\n  const handlePasswordUpdate = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsPasswordLoading(true);\n    dispatchMessage({ type: 'CLEAR_MESSAGE' });\n\n    // Validate passwords\n    if (!newPassword) {\n      dispatchMessage({\n        type: 'SET_MESSAGE',\n        payload: {\n          text: 'Password cannot be empty.',\n          type: 'error',\n        },\n      });\n      setIsPasswordLoading(false);\n      return;\n    }\n\n    if (newPassword.length < MIN_PASSWORD_LENGTH) {\n      dispatchMessage({\n        type: 'SET_MESSAGE',\n        payload: {\n          text: `Password must be at least ${MIN_PASSWORD_LENGTH} characters long.`,\n          type: 'error',\n        },\n      });\n      setIsPasswordLoading(false);\n      return;\n    }\n\n    if (newPassword !== confirmNewPassword) {\n      dispatchMessage({\n        type: 'SET_MESSAGE',\n        payload: {\n          text: 'New passwords do not match.',\n          type: 'error',\n        },\n      });\n      setIsPasswordLoading(false);\n      return;\n    }\n\n    // Update password\n    const { error } = await updateUserPassword(newPassword);\n\n    if (error) {\n      dispatchMessage({\n        type: 'SET_MESSAGE',\n        payload: {\n          text: `Password update failed: ${mapAuthErrorMessage(error.message)}`,\n          type: 'error',\n        },\n      });\n    } else {\n      dispatchMessage({\n        type: 'SET_MESSAGE',\n        payload: {\n          text: 'Password updated successfully!',\n          type: 'success',\n        },\n      });\n    }\n\n    // Always clear password fields after attempt\n    setNewPassword('');\n    setConfirmNewPassword('');\n    setIsPasswordLoading(false);\n  };\n\n  // Loading state\n  if (isFetchingUser && !user) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-100\">\n        <p>Loading account information...</p>\n      </div>\n    );\n  }\n\n  // No user state (fallback if redirect in useEffect fails)\n  if (!user) {\n    return (\n      <div className=\"flex min-h-screen items-center justify-center bg-gray-100\">\n        <p>\n          Please{' '}\n          <Link href={ROUTES.signIn} className=\"underline\">\n            sign in\n          </Link>{' '}\n          to view your account.\n        </p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"flex min-h-screen items-center justify-center bg-gray-100 py-12 px-4 sm:px-6 lg:px-8\">\n      <Card className=\"w-full max-w-lg shadow-lg\">\n        <CardHeader className=\"text-center\">\n          <CardTitle className=\"text-3xl font-bold text-teal-600\">\n            My Account\n          </CardTitle>\n          <CardDescription>\n            Manage your account details and settings.\n          </CardDescription>\n        </CardHeader>\n\n        <CardContent className=\"space-y-8\">\n          <div className=\"space-y-2\">\n            <h3 className=\"text-lg font-semibold\">Account Information</h3>\n            <p>\n              <span className=\"font-medium\">Email:</span> {user.email}\n            </p>\n            <p>\n              <span className=\"font-medium\">Account Created:</span>{' '}\n              {user.created_at\n                ? new Date(user.created_at).toLocaleDateString()\n                : 'N/A'}\n            </p>\n            {user.last_sign_in_at && (\n              <p>\n                <span className=\"font-medium\">Last Log In:</span>{' '}\n                {new Date(user.last_sign_in_at!).toLocaleString()}\n              </p>\n            )}\n          </div>\n\n          <Separator />\n\n          <div className=\"space-y-4\">\n            <h3 className=\"text-lg font-semibold\">Change Password</h3>\n            <form onSubmit={handlePasswordUpdate} className=\"space-y-4\">\n              <div>\n                <Label htmlFor=\"new_password\">New Password</Label>\n                <Input\n                  id=\"new_password\"\n                  type=\"password\"\n                  value={newPassword}\n                  onChange={(e) => setNewPassword(e.target.value)}\n                  placeholder=\"Enter new password\"\n                  required\n                />\n              </div>\n              <div>\n                <Label htmlFor=\"confirm_new_password\">\n                  Confirm New Password\n                </Label>\n                <Input\n                  id=\"confirm_new_password\"\n                  type=\"password\"\n                  value={confirmNewPassword}\n                  onChange={(e) => setConfirmNewPassword(e.target.value)}\n                  placeholder=\"Confirm new password\"\n                  required\n                />\n              </div>\n              <Button\n                type=\"submit\"\n                className=\"w-full sm:w-auto\"\n                disabled={isPasswordLoading}\n              >\n                {isPasswordLoading ? 'Updating...' : 'Update Password'}\n              </Button>\n            </form>\n          </div>\n\n          {messageState.text && (\n            <p\n              className={`mt-4 text-sm ${messageState.type === 'error' ? 'text-red-600' : 'text-green-600'}`}\n            >\n              {messageState.text}\n            </p>\n          )}\n\n          <Separator />\n        </CardContent>\n\n        <CardFooter className=\"justify-center\">\n          <Link\n            href={ROUTES.dashboard}\n            className=\"text-sm font-medium text-teal-600 hover:underline\"\n          >\n            Back to Dashboard\n          </Link>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/actions/contact-actions.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":8,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":8,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[202,205],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[202,205],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use server';\n\nimport { z } from 'zod';\nimport { contactSchema } from '../contacts/ContactForm';\n\n// Server action for creating/updating contacts\nexport async function submitContactAction(\n  prevState: any,\n  formData: FormData\n) {\n  try {\n    // Convert FormData to object\n    const rawData = Object.fromEntries(formData.entries());\n    \n    // Handle arrays (social_handles, tags)\n    const processedData = {\n      ...rawData,\n      social_handles: rawData.social_handles \n        ? (rawData.social_handles as string).split(',').map(s => s.trim()).filter(Boolean)\n        : [],\n      tags: rawData.tags \n        ? (rawData.tags as string).split(',').map(s => s.trim()).filter(Boolean)\n        : [],\n    };\n\n    // Validate with Zod\n    const validatedData = contactSchema.parse(processedData);\n\n    // Your database logic here\n    const isEdit = validatedData.id;\n    if (isEdit) {\n      // Update contact\n      // await updateContact(validatedData.id, validatedData);\n    } else {\n      // Create contact\n      // await createContact(validatedData);\n    }\n\n    return {\n      success: true,\n      message: isEdit ? 'Contact updated successfully' : 'Contact created successfully',\n      data: validatedData,\n    };\n  } catch (error) {\n    if (error instanceof z.ZodError) {\n      return {\n        success: false,\n        message: 'Validation failed',\n        errors: error.flatten().fieldErrors,\n      };\n    }\n    \n    return {\n      success: false,\n      message: 'Failed to save contact',\n      errors: {},\n    };\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/auth/[...supabase]/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/auth/callback/route.ts","messages":[{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":71,"column":7,"severity":1,"nodeType":null,"fix":{"range":[2440,2478],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":86,"column":7,"severity":1,"nodeType":null,"fix":{"range":[3179,3217],"text":" "}},{"ruleId":null,"message":"Unused eslint-disable directive (no problems were reported from 'no-console').","line":94,"column":7,"severity":1,"nodeType":null,"fix":{"range":[3475,3513],"text":" "}}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":3,"source":"import * as Sentry from '@sentry/nextjs';\nimport { NextRequest, NextResponse } from 'next/server';\n\n// Import the server client creator from our new helper\nimport { createRouteHandlerClient } from '@supabase/auth-helpers-nextjs';\nimport { cookies } from 'next/headers';\n\nexport const dynamic = 'force-dynamic';\n\n/**\n * Validates that a redirect URL is safe by ensuring it's a relative path\n * within our application and not an external URL\n */\nfunction validateRedirectPath(path: string | null): string {\n  // Default safe path if none provided or validation fails\n  const defaultPath = '/dashboard';\n\n  // If no path or empty, use default\n  if (!path || path.trim() === '') {\n    return defaultPath;\n  }\n\n  // Only allow relative paths that start with / but not // (protocol-relative URLs)\n  // Also reject paths with : which could be used for javascript: URLs\n  if (path.startsWith('/') && !path.startsWith('//') && !path.includes(':')) {\n    return path;\n  }\n\n  // If validation fails, return the default path\n  return defaultPath;\n}\n\n/**\n * This route handles the callback after a user completes OAuth authentication\n * It exchanges the authorization code for a session and redirects the user\n */\nexport async function GET(req: NextRequest) {\n  Sentry.captureMessage('Auth callback triggered, processing authentication...', 'info');\n\n  try {\n    // Create Supabase client using the server helper\n    const supabase = createRouteHandlerClient({ cookies });\n    const { searchParams } = new URL(req.url);\n    const code = searchParams.get('code');\n    const nextParam = searchParams.get('next');\n\n    // Validate the next parameter to prevent open redirect vulnerabilities\n    const safeRedirectPath = validateRedirectPath(nextParam);\n\n    Sentry.captureMessage(\n      `Auth callback params - code present: ${!!code}, redirect path: ${safeRedirectPath}`,\n      'debug'\n    );\n\n    // If no code is present, we can't authenticate the user\n    if (!code) {\n      Sentry.captureMessage('No code parameter found in callback URL', 'warning');\n      return NextResponse.redirect(\n        new URL('/sign-in?error=missing_code', req.url)\n      );\n    }\n\n    // Exchange the code for a session\n    Sentry.captureMessage(\n      `Auth Callback: Attempting to exchange code. Code present: ${!!code}, Next param: ${nextParam}`,\n      'debug'\n    );\n    const { error, data } = await supabase.auth.exchangeCodeForSession(code);\n\n    if (error) {\n      // eslint-disable-next-line no-console\n      console.error(\n        `Auth Callback: Error exchanging code for session: ${error.message}`,\n        error\n      );\n      Sentry.captureException(error, { extra: { context: 'Auth Callback: Error exchanging code for session', code, nextParam } });\n      // Log the redirect URL in case of error as well\n      const errorRedirectUrl = req.nextUrl.clone();\n      errorRedirectUrl.pathname = '/sign-in';\n      errorRedirectUrl.searchParams.set('error', 'auth_callback_error');\n      errorRedirectUrl.searchParams.set('error_description', error.message);\n      Sentry.captureMessage(\n        `Auth Callback: Redirecting to error page: ${errorRedirectUrl.toString()}`,\n        'error'\n      );\n      // eslint-disable-next-line no-console\n      console.error('Error exchanging code for session:', error); // Keep console.error as per user preference\n      return NextResponse.redirect(\n        new URL('/sign-in?error=auth_callback_error', req.url)\n      );\n    }\n\n    if (!data.session) {\n      // eslint-disable-next-line no-console\n      console.error('No session returned after code exchange');\n      Sentry.captureMessage('No session returned after code exchange', 'error');\n      return NextResponse.redirect(\n        new URL('/sign-in?error=no_session', req.url)\n      );\n    }\n\n    Sentry.captureMessage(`Successfully authenticated user: ${data.session.user?.id}`, 'info');\n\n    // Construct redirect URL properly using URL object and searchParams\n    const redirectUrl = new URL(safeRedirectPath, req.url);\n    // Add auth_success parameter with timestamp to prevent caching\n    redirectUrl.searchParams.set('auth_success', Date.now().toString());\n\n    if (data && data.session) {\n      Sentry.captureMessage(\n        `Auth Callback: Successfully exchanged code. User ID: ${data.session.user.id}. Session Exists: ${!!data.session}.`,\n        'info'\n      );\n      Sentry.captureMessage(\n        `Auth Callback: Cookies should have been set by Supabase client.`,\n        'debug'\n      );\n    } else if (!error) {\n      Sentry.captureMessage(\n        `Auth Callback: No error from exchangeCodeForSession, but no session data returned.`,\n        'warning'\n      );\n    }\n\n    Sentry.captureMessage(\n      `Auth Callback: Redirecting to final target: ${redirectUrl.toString()}`,\n      'info'\n    );\n    return NextResponse.redirect(redirectUrl);\n  } catch (error) {\n    console.error('Unexpected error in auth callback:', error);\n    Sentry.captureException(error, { extra: { context: 'Unexpected error in auth callback' } });\n    return NextResponse.redirect(\n      new URL('/sign-in?error=unexpected_error', req.url)\n    );\n  }\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/auth/logout/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/docs/openapi/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":8,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":35,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\nimport { getEnhancedOpenApiDocument } from '@codexcrm/server/src/utils/openapi';\n\n/**\n * GET /api/docs/openapi\n * Returns the OpenAPI documentation in JSON format\n */\nexport async function GET(req: NextRequest) {\n  try {\n    // Get the enhanced OpenAPI document\n    const openApiDocument = getEnhancedOpenApiDocument();\n\n    // Return the OpenAPI document\n    return NextResponse.json(openApiDocument, {\n      status: 200,\n      headers: {\n        'Cache-Control': 'public, max-age=3600',\n        'Access-Control-Allow-Origin': '*',\n        'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      },\n    });\n  } catch (error) {\n    console.error('Error generating OpenAPI documentation:', error);\n    return NextResponse.json(\n      { message: 'Error generating OpenAPI documentation' },\n      { status: 500 }\n    );\n  }\n}\n\n/**\n * OPTIONS /api/docs/openapi\n * Handles CORS preflight requests\n */\nexport async function OPTIONS(req: NextRequest) {\n  return NextResponse.json({}, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/docs/swagger/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'req' is defined but never used.","line":77,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":34}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { NextRequest, NextResponse } from 'next/server';\n\n/**\n * GET /api/docs/swagger\n * Returns the Swagger UI HTML for interactive API documentation\n */\nexport async function GET(req: NextRequest) {\n  const apiUrl = process.env.NEXT_PUBLIC_API_URL || `${req.nextUrl.origin}`;\n  \n  // Serve the Swagger UI HTML\n  const html = `\n    <!DOCTYPE html>\n    <html lang=\"en\">\n    <head>\n      <meta charset=\"UTF-8\">\n      <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n      <title>CodexCRM API Documentation</title>\n      <link rel=\"stylesheet\" href=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui.css\" />\n      <style>\n        body {\n          margin: 0;\n          padding: 0;\n        }\n        .topbar {\n          display: none;\n        }\n        .swagger-ui .info {\n          margin: 30px 0;\n        }\n        .swagger-ui .scheme-container {\n          padding: 15px 0;\n        }\n        .swagger-ui .info .title {\n          color: #2c3e50;\n        }\n        .swagger-ui .opblock-tag {\n          font-size: 18px;\n        }\n      </style>\n    </head>\n    <body>\n      <div id=\"swagger-ui\"></div>\n      <script src=\"https://unpkg.com/swagger-ui-dist@4.5.0/swagger-ui-bundle.js\"></script>\n      <script>\n        window.onload = function() {\n          window.ui = SwaggerUIBundle({\n            url: \"${apiUrl}/api/docs/openapi\",\n            dom_id: '#swagger-ui',\n            deepLinking: true,\n            presets: [\n              SwaggerUIBundle.presets.apis,\n              SwaggerUIBundle.SwaggerUIStandalonePreset\n            ],\n            layout: \"BaseLayout\",\n            withCredentials: true,\n            persistAuthorization: true,\n          });\n        };\n      </script>\n    </body>\n    </html>\n  `;\n\n  return new NextResponse(html, {\n    status: 200,\n    headers: {\n      'Content-Type': 'text/html',\n      'Cache-Control': 'public, max-age=3600',\n    },\n  });\n}\n\n/**\n * OPTIONS /api/docs/swagger\n * Handles CORS preflight requests\n */\nexport async function OPTIONS(req: NextRequest) {\n  return NextResponse.json({}, {\n    status: 200,\n    headers: {\n      'Access-Control-Allow-Origin': '*',\n      'Access-Control-Allow-Methods': 'GET, OPTIONS',\n      'Access-Control-Allow-Headers': 'Content-Type, Authorization',\n      'Access-Control-Max-Age': '86400',\n    },\n  });\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/sentry-example-api/route.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/api/trpc/[trpc]/route.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'superjson' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { appRouter, createContext } from '@codexcrm/server';\nimport { fetchRequestHandler } from '@trpc/server/adapters/fetch';\nimport superjson from 'superjson';\n\n/**\n * tRPC API endpoint configuration\n * Handles both GET and POST requests for tRPC procedures\n */\n\n// Define the tRPC endpoint path as a constant for maintainability\nconst TRPC_ENDPOINT = '/api/trpc';\n\n// Remove edge runtime to use Node.js for better compatibility with tRPC and Supabase\n// export const runtime = 'edge';\n\n/**\n * Standard error response format for consistency\n */\ntype ApiErrorResponse = {\n  error: string;\n  message: string;\n  code?: string;\n};\n\n/**\n * Main request handler for tRPC API calls\n */\nexport const GET = async (req: Request) => {\n  console.info(`[TRPC API] Handling ${req.method} request to ${req.url}`);\n\n  try {\n    // Log the headers at debug level for detailed troubleshooting only\n    if (process.env.NODE_ENV === 'development') {\n      const headers = Object.fromEntries(req.headers.entries());\n      // Use debug level for potentially sensitive or verbose information\n      console.debug(\n        '[TRPC API] Request headers:',\n        JSON.stringify(headers, null, 2)\n      );\n    }\n\n    // Handle the request with tRPC's fetchRequestHandler\n    const response = await fetchRequestHandler({\n      endpoint: TRPC_ENDPOINT,\n      req,\n      router: appRouter,\n      // Pass the request object to createContext with proper error handling\n      createContext: async () => {\n        try {\n          const ctx = await createContext({ req });\n          return ctx;\n        } catch (contextError) {\n          console.error('[TRPC API] Context creation error:', contextError);\n          throw contextError;\n        }\n      },\n      // Configure error handling based on environment\n      onError:\n        process.env.NODE_ENV === 'development'\n          ? ({ path, error }) => {\n              console.error(\n                `❌ [TRPC API] Failed on ${path}: ${error.message}`\n              );\n              console.error(error.stack);\n            }\n          : ({ path }) => {\n              // Log errors in production but without sensitive details\n              console.error(`[TRPC API] Error in procedure: ${path}`);\n            },\n    });\n\n    console.info(`[TRPC API] Response status: ${response.status}`);\n    return response;\n  } catch (error) {\n    console.error('[TRPC API] Unhandled error:', error);\n\n    // Create a standardized error response\n    const errorResponse: ApiErrorResponse = {\n      error: 'Internal Server Error',\n      // Provide generic message in production, detailed in development\n      message: 'An unexpected error occurred.',\n      // Log detailed error information on the server for debugging purposes\n      ...(process.env.NODE_ENV !== 'production' && error instanceof Error\n        ? { debugInfo: { message: error.message, stack: error.stack } }\n        : {}),\n      // Add error code for easier client-side handling\n      code: 'INTERNAL_SERVER_ERROR',\n    };\n\n    return new Response(JSON.stringify(errorResponse), {\n      status: 500,\n      headers: { 'content-type': 'application/json' },\n    });\n  }\n};\n\n// Use the same handler for POST requests\nexport const POST = GET;\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ColumnSelector.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactForm.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactGroupManager.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactGroupTags.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'formatDistance' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":24,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContactGroupManager' is defined but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GroupsProvider' is defined but never used.","line":30,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":33,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Button' is defined but never used.","line":34,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuRadioGroup' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuRadioItem' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":44,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onEditClick' is defined but never used.","line":106,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'onDeleteClick' is defined but never used.","line":107,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isDeleteMutationLoading' is defined but never used.","line":108,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSaveMutationLoading' is defined but never used.","line":109,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedGroupId' is defined but never used.","line":111,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":111,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'allGroups' is assigned a value but never used.","line":122,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoadingGroups' is assigned a value but never used.","line":122,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":122,"endColumn":59}],"suppressedMessages":[],"errorCount":18,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport {\n  format,\n  formatDistance,\n  subDays,\n  startOfDay,\n  startOfWeek,\n  endOfWeek,\n  startOfMonth,\n  endOfMonth,\n  isAfter,\n  isBefore,\n  parseISO,\n} from 'date-fns';\nimport {\n  ArrowDown,\n  ArrowUp,\n  Mail,\n  MessageSquareText,\n  Phone,\n  Sparkles,\n  ChevronDown,\n  Calendar,\n  Clock,\n  Check,\n} from 'lucide-react';\nimport Link from 'next/link';\n\nimport { ContactGroupManager, GroupsProvider } from './ContactGroupManager';\n\nimport { AvatarImage } from '@/components/ui/avatar-image';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n} from '@/components/ui/dropdown-menu';\nimport { api } from '@/lib/trpc';\nimport { cn } from '@/lib/utils';\n\nexport interface Contact {\n  id: string;\n  full_name: string;\n  email?: string | null;\n  phone?: string | null;\n  company_name?: string | null;\n  job_title?: string | null;\n  profile_image_url?: string | null;\n  source?: string | null;\n  notes?: string | null;\n  last_contacted_at?: string | null;\n  enrichment_status?: string | null;\n  enriched_data?: unknown | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  tags?: Array<{ id: string; name: string }> | null;\n}\n\n// NameSortField is no longer needed as full_name is used.\n\n// Define date filter options\nexport type DateFilterPeriod =\n  | 'today'\n  | 'this_week'\n  | 'last_week'\n  | 'this_month'\n  | 'last_month'\n  | 'older'\n  | 'all';\n\n// Define source types for filtering\nexport type SourceOption =\n  | 'conference'\n  | 'referral'\n  | 'website'\n  | 'event'\n  | 'social_media'\n  | 'cold_outreach'\n  | 'other';\n\ninterface ContactListProps {\n  contacts: Contact[];\n  onEditClick: (contact: Contact) => void;\n  onDeleteClick: (contactId: string) => void;\n  isDeleteMutationLoading: boolean;\n  isSaveMutationLoading: boolean;\n  searchQuery: string;\n  selectedGroupId: string;\n  visibleColumns?: string[];\n  sortField?: string;\n  sortDirection?: 'asc' | 'desc';\n  onSortChange?: (field: string) => void;\n  dateFilterPeriod?: DateFilterPeriod;\n  onDateFilterChange?: (period: DateFilterPeriod) => void;\n  selectedSourceFilters?: SourceOption[];\n  onSourceFilterChange?: (sources: SourceOption[]) => void;\n}\n\nexport function ContactList({\n  contacts,\n  onEditClick,\n  onDeleteClick,\n  isDeleteMutationLoading,\n  isSaveMutationLoading,\n  searchQuery,\n  selectedGroupId,\n  visibleColumns = ['name', 'last_contacted', 'notes', 'source'],\n  sortField = 'name',\n  sortDirection = 'asc',\n  onSortChange = () => {},\n  dateFilterPeriod = 'all',\n  onDateFilterChange = () => {},\n  selectedSourceFilters = [],\n  onSourceFilterChange = () => {},\n}: ContactListProps) {\n  // Query groups for contact group management\n  const { data: allGroups = [], isLoading: isLoadingGroups } =\n    api.groups.list.useQuery(undefined, {\n      staleTime: 60000, // Cache for 60 seconds\n      refetchOnWindowFocus: false, // Don't refetch on window focus\n    });\n\n  // Get contacts filtered by date period\n  const getFilteredContactsByDate = (\n    contacts: Contact[],\n    period: DateFilterPeriod\n  ): Contact[] => {\n    if (period === 'all') return contacts;\n\n    const today = new Date();\n    const startOfToday = startOfDay(today);\n\n    return contacts.filter((contact) => {\n      if (!contact.last_contacted_at) {\n        // If no last_contacted_at date and filtering for 'older', include it\n        return period === 'older';\n      }\n\n      const contactDate = parseISO(contact.last_contacted_at);\n\n      switch (period) {\n        case 'today':\n          return isAfter(contactDate, startOfToday);\n\n        case 'this_week': {\n          const weekStart = startOfWeek(today, { weekStartsOn: 1 }); // Monday as week start\n          const weekEnd = endOfWeek(today, { weekStartsOn: 1 });\n          return (\n            isAfter(contactDate, weekStart) && isBefore(contactDate, weekEnd)\n          );\n        }\n\n        case 'last_week': {\n          const lastWeekStart = startOfWeek(subDays(today, 7), {\n            weekStartsOn: 1,\n          });\n          const lastWeekEnd = endOfWeek(subDays(today, 7), { weekStartsOn: 1 });\n          return (\n            isAfter(contactDate, lastWeekStart) &&\n            isBefore(contactDate, lastWeekEnd)\n          );\n        }\n\n        case 'this_month': {\n          const monthStart = startOfMonth(today);\n          const monthEnd = endOfMonth(today);\n          return (\n            isAfter(contactDate, monthStart) && isBefore(contactDate, monthEnd)\n          );\n        }\n\n        case 'last_month': {\n          const lastMonthStart = startOfMonth(subDays(today, 30));\n          const lastMonthEnd = endOfMonth(subDays(today, 30));\n          return (\n            isAfter(contactDate, lastMonthStart) &&\n            isBefore(contactDate, lastMonthEnd)\n          );\n        }\n\n        case 'older':\n          // More than a month ago\n          return isBefore(contactDate, startOfMonth(subDays(today, 30)));\n\n        default:\n          return true;\n      }\n    });\n  };\n\n  // Available source options for filtering\n  const availableSourceOptions: SourceOption[] = [\n    'conference',\n    'referral',\n    'website',\n    'event',\n    'social_media',\n    'cold_outreach',\n    'other',\n  ];\n\n  // First filter by date period\n  const dateFilteredContacts = getFilteredContactsByDate(\n    contacts,\n    dateFilterPeriod\n  );\n\n  // Then filter by source if any source filters are selected\n  const sourceFilteredContacts =\n    selectedSourceFilters.length > 0\n      ? dateFilteredContacts.filter((contact) => {\n          // If contact has no source and we're filtering, exclude it\n          if (!contact.source) return false;\n\n          // Keep contact if its source is in the selected sources\n          return selectedSourceFilters.includes(contact.source as SourceOption);\n        })\n      : dateFilteredContacts;\n\n  // Then filter by search query\n  const filteredContacts = sourceFilteredContacts.filter((contact) => {\n    // Apply search filter\n    if (searchQuery.trim() === '') return true;\n\n    const searchLower = searchQuery.toLowerCase();\n    const fullName = (contact.full_name || '').toLowerCase();\n    const email = (contact.email || '').toLowerCase();\n    const phone = (contact.phone || '').toLowerCase();\n    const company = (contact.company_name || '').toLowerCase();\n    const notes = (contact.notes || '').toLowerCase();\n    const source = (contact.source || '').toLowerCase();\n\n    return (\n      fullName.includes(searchLower) ||\n      email.includes(searchLower) ||\n      phone.includes(searchLower) ||\n      company.includes(searchLower) ||\n      notes.includes(searchLower) ||\n      source.includes(searchLower)\n    );\n  });\n\n  // We'll always render the table and headers, but show a message in the table body if no contacts are found\n\n  return (\n    <div className=\"overflow-x-auto rounded-lg border border-gray-200\">\n      <table className=\"min-w-full divide-y divide-gray-200\">\n        <thead className=\"bg-gradient-to-r from-teal-50 to-teal-100\">\n          <tr>\n            {/* Name Column - Always visible */}\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-left text-xs font-semibold bg-gradient-to-r from-teal-50 to-teal-100 text-teal-800 uppercase tracking-wider\"\n            >\n              <div\n                className=\"flex items-center cursor-pointer\"\n                onClick={() => onSortChange && onSortChange('name')}\n              >\n                Name\n                {sortField === 'name' && (\n                  <span className=\"ml-1 flex items-center\">\n                    {sortDirection === 'asc' ? (\n                      <ArrowUp className=\"h-3 w-3\" />\n                    ) : (\n                      <ArrowDown className=\"h-3 w-3\" />\n                    )}\n                  </span>\n                )}\n                {sortField !== 'name' && (\n                  <ChevronDown className=\"h-3 w-3 ml-1 text-gray-400\" />\n                )}\n              </div>\n            </th>\n\n            {/* Last Contact Column */}\n            {visibleColumns.includes('last_contacted') && (\n              <th\n                scope=\"col\"\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <div className=\"flex items-center cursor-pointer\">\n                      <span>Last Contacted</span>\n                      <span className=\"ml-1 flex items-center\">\n                        <ChevronDown className=\"h-3 w-3 ml-1\" />\n                      </span>\n                    </div>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\" className=\"w-48\">\n                    <DropdownMenuItem onClick={() => onDateFilterChange('all')}>\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>All Contacts</span>\n                        {dateFilterPeriod === 'all' && (\n                          <Check className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => onDateFilterChange('today')}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>Today</span>\n                        {dateFilterPeriod === 'today' && (\n                          <Check className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => onDateFilterChange('this_week')}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>This Week</span>\n                        {dateFilterPeriod === 'this_week' && (\n                          <Check className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => onDateFilterChange('last_week')}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>Last Week</span>\n                        {dateFilterPeriod === 'last_week' && (\n                          <Check className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => onDateFilterChange('this_month')}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>This Month</span>\n                        {dateFilterPeriod === 'this_month' && (\n                          <Check className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => onDateFilterChange('last_month')}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>Last Month</span>\n                        {dateFilterPeriod === 'last_month' && (\n                          <Check className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => onDateFilterChange('older')}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>More than a Month</span>\n                        {dateFilterPeriod === 'older' && (\n                          <Check className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </th>\n            )}\n\n            {/* Notes Column */}\n            {visibleColumns.includes('notes') && (\n              <th\n                scope=\"col\"\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                Notes\n              </th>\n            )}\n\n            {/* Source Column */}\n            {visibleColumns.includes('source') && (\n              <th\n                scope=\"col\"\n                className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <div className=\"flex items-center cursor-pointer\">\n                      <span>Source</span>\n                      <span className=\"ml-1 flex items-center\">\n                        {sortField === 'source' ? (\n                          sortDirection === 'asc' ? (\n                            <ArrowUp className=\"h-3 w-3\" />\n                          ) : (\n                            <ArrowDown className=\"h-3 w-3\" />\n                          )\n                        ) : (\n                          <ChevronDown className=\"h-3 w-3 ml-1\" />\n                        )}\n                      </span>\n                    </div>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"start\" className=\"w-52\">\n                    {/* Sorting options */}\n                    <div className=\"px-2 py-1.5 text-xs font-semibold\">\n                      Sort By\n                    </div>\n                    <DropdownMenuItem onClick={() => onSortChange('source')}>\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>A-Z</span>\n                        {sortField === 'source' && sortDirection === 'asc' && (\n                          <ArrowUp className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem\n                      onClick={() => {\n                        if (sortField === 'source' && sortDirection === 'asc') {\n                          onSortChange('source'); // This will toggle to desc\n                        } else {\n                          onSortChange('source');\n                          if (sortDirection === 'asc') onSortChange('source'); // Toggle to desc\n                        }\n                      }}\n                    >\n                      <div className=\"flex items-center justify-between w-full\">\n                        <span>Z-A</span>\n                        {sortField === 'source' && sortDirection === 'desc' && (\n                          <ArrowDown className=\"h-3 w-3\" />\n                        )}\n                      </div>\n                    </DropdownMenuItem>\n\n                    <div className=\"h-px bg-slate-200 my-1\" />\n\n                    {/* Filter options */}\n                    <div className=\"px-2 py-1.5 text-xs font-semibold\">\n                      Filter By\n                    </div>\n\n                    {availableSourceOptions.map((source) => (\n                      <DropdownMenuItem\n                        key={source}\n                        onSelect={(e) => {\n                          e.preventDefault();\n                          const isSelected =\n                            selectedSourceFilters.includes(source);\n                          const updatedSources = isSelected\n                            ? selectedSourceFilters.filter((s) => s !== source)\n                            : [...selectedSourceFilters, source];\n                          onSourceFilterChange(updatedSources);\n                        }}\n                      >\n                        <div className=\"flex items-center space-x-2\">\n                          <div\n                            className={`w-4 h-4 border rounded flex items-center justify-center ${selectedSourceFilters.includes(source) ? 'bg-primary border-primary' : 'border-gray-300'}`}\n                          >\n                            {selectedSourceFilters.includes(source) && (\n                              <Check className=\"h-3 w-3 text-white\" />\n                            )}\n                          </div>\n                          <span className=\"capitalize\">\n                            {source.replace('_', ' ')}\n                          </span>\n                        </div>\n                      </DropdownMenuItem>\n                    ))}\n\n                    {selectedSourceFilters.length > 0 && (\n                      <>\n                        <div className=\"h-px bg-slate-200 my-1\" />\n                        <DropdownMenuItem\n                          onSelect={(e) => {\n                            e.preventDefault();\n                            onSourceFilterChange([]);\n                          }}\n                        >\n                          <div className=\"flex items-center justify-center w-full text-xs text-red-500 font-medium\">\n                            Clear Filters\n                          </div>\n                        </DropdownMenuItem>\n                      </>\n                    )}\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              </th>\n            )}\n\n            {/* Actions Column - Always visible */}\n            <th\n              scope=\"col\"\n              className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n            >\n              Actions\n            </th>\n          </tr>\n        </thead>\n        <tbody className=\"bg-white divide-y divide-gray-200\">\n          {filteredContacts.length > 0 ? (\n            filteredContacts.map((contact) => (\n              <tr key={contact.id} className=\"hover:bg-gray-50\">\n                <td className=\"px-6 py-4 whitespace-nowrap\">\n                  <div className=\"flex items-center\">\n                    <AvatarImage\n                      src={contact.profile_image_url || null}\n                      alt={contact.full_name}\n                      size=\"md\"\n                    />\n                    <div className=\"ml-4\">\n                      <Link\n                        href={`/contacts/${contact.id}`}\n                        className=\"font-medium text-teal-600 hover:underline\"\n                      >\n                        {contact.full_name}\n                      </Link>\n                    </div>\n                  </div>\n                </td>\n\n                {/* Last Contact Column */}\n                {visibleColumns.includes('last_contacted') && (\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {contact.last_contacted_at\n                      ? new Date(contact.last_contacted_at).toLocaleDateString()\n                      : '-'}\n                  </td>\n                )}\n\n                {/* Notes Column */}\n                {visibleColumns.includes('notes') && (\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    <div className=\"max-w-xs truncate\">\n                      {contact.notes || '-'}\n                    </div>\n                  </td>\n                )}\n\n                {/* Source Column */}\n                {visibleColumns.includes('source') && (\n                  <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                    {contact.source || '-'}\n                  </td>\n                )}\n\n                {/* Actions Column */}\n                <td className=\"px-6 py-4 whitespace-nowrap text-center\">\n                  <div className=\"flex justify-center space-x-3\">\n                    <button\n                      className=\"text-blue-600 hover:text-blue-800\"\n                      aria-label=\"Email contact\"\n                    >\n                      <Mail className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"text-green-600 hover:text-green-800\"\n                      aria-label=\"Call contact\"\n                    >\n                      <Phone className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"text-purple-600 hover:text-purple-800\"\n                      aria-label=\"Message contact\"\n                    >\n                      <MessageSquareText className=\"h-4 w-4\" />\n                    </button>\n                    <button\n                      className=\"text-amber-600 hover:text-amber-800\"\n                      aria-label=\"AI assistant\"\n                    >\n                      <Sparkles className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </td>\n              </tr>\n            ))\n          ) : (\n            <tr>\n              <td\n                colSpan={visibleColumns.length + 1}\n                className=\"px-6 py-10 text-center text-gray-500\"\n              >\n                <div className=\"flex flex-col items-center justify-center space-y-3\">\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-10 w-10 text-gray-400\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={1.5}\n                      d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                    />\n                  </svg>\n                  <p className=\"font-medium\">No contacts found</p>\n                  <p className=\"text-sm\">\n                    {selectedSourceFilters.length > 0 &&\n                      'Try adjusting your source filters.'}\n                    {dateFilterPeriod !== 'all' &&\n                      ' Try a different date range.'}\n                    {searchQuery && ' Try a different search term.'}\n                    {!selectedSourceFilters.length &&\n                      dateFilterPeriod === 'all' &&\n                      !searchQuery &&\n                      'No contacts available in this view.'}\n                  </p>\n                </div>\n              </td>\n            </tr>\n          )}\n        </tbody>\n      </table>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactsContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Download' is defined but never used.","line":4,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Upload' is defined but never used.","line":9,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":10,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageSquareText' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Sparkles' is defined but never used.","line":13,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Link' is defined but never used.","line":16,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuItem' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSidebarOpen' is assigned a value but never used.","line":83,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsSidebarOpen' is assigned a value but never used.","line":83,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":41}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport {\n  Download,\n  Plus,\n  Search,\n  SlidersHorizontal,\n  Tag,\n  Upload,\n  Mail,\n  Phone,\n  MessageSquareText,\n  Sparkles,\n  X,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport { useRouter, useSearchParams } from 'next/navigation';\nimport { useState, useEffect } from 'react';\n\nimport { ColumnSelector } from './ColumnSelector';\nimport { ContactForm, ContactFormData } from './ContactForm';\nimport { GroupsProvider } from '@/app/contacts/ContactGroupManager';\nimport type { Database } from '@codexcrm/db';\ntype Tables<T extends keyof Database['public']['Tables']> = Database['public']['Tables'][T]['Row'];\ntype DBContact = Tables<'contacts'>;\nimport {\n  EnhancedContactList,\n  Contact,\n  DateFilterPeriod,\n  SourceOption,\n} from './EnhancedContactList';\n\nimport { AddContactModal } from '@/components/contacts/AddContactModal';\nimport { Button } from '@/components/ui/button';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { Input } from '@/components/ui/input';\nimport { formatDateForInput, parseInputDateString } from '@/lib/dateUtils';\nimport { api } from '@/lib/trpc';\n\n// UI Components\n\n// Icons\n\nexport function ContactsContent({\n  initialGroupId,\n}: { initialGroupId?: string } = {}) {\n  // --- State Management ---\n  const router = useRouter();\n  const searchParams = useSearchParams();\n  const groupIdFromUrl = searchParams?.get('group') ?? initialGroupId ?? '';\n  // --- Modal state for quick add contact ---\n  const [isQuickAddOpen, setIsQuickAddOpen] = useState(false);\n  // Auto-open modal if ?new=true is present\n  useEffect(() => {\n    if (searchParams?.get('new') === 'true') {\n      setIsQuickAddOpen(true);\n    }\n  }, [searchParams]);\n  // Remove ?new=true from URL after closing modal or successful add\n  const handleQuickAddClose = () => {\n    setIsQuickAddOpen(false);\n    const params = new URLSearchParams(Array.from(searchParams?.entries() || []));\n    params.delete('new');\n    router.replace(`?${params.toString()}`, { scroll: false });\n  };\n  const [isFormOpen, setIsFormOpen] = useState(false);\n  const [formError, setFormError] = useState<string | null>(null);\n  const [editingContactId, setEditingContactId] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [selectedGroupId, setSelectedGroupId] =\n    useState<string>(groupIdFromUrl);\n  const [deleteError, setDeleteError] = useState<string | null>(null);\n  const [formData, setFormData] = useState<ContactFormData | undefined>(\n    undefined\n  );\n  const [isSidebarOpen, setIsSidebarOpen] = useState(true);\n  const [visibleColumns, setVisibleColumns] = useState<string[]>([\n    'name',\n    'last_contacted',\n    'notes',\n    'source',\n  ]);\n  const [sortField, setSortField] = useState('name'); // 'name' will refer to full_name\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  // nameSortField is no longer needed\n  const [dateFilterPeriod, setDateFilterPeriod] =\n    useState<DateFilterPeriod>('all');\n  const [selectedSourceFilters, setSelectedSourceFilters] = useState<\n    SourceOption[]\n  >([]);\n\n  // Keep state in sync with URL parameters\n  useEffect(() => {\n    // Prevent unnecessary re-setting if groupIdFromUrl is the same\n    if (selectedGroupId !== groupIdFromUrl) {\n      setSelectedGroupId(groupIdFromUrl);\n    }\n  }, [groupIdFromUrl, selectedGroupId]);\n\n  const utils = api.useUtils(); // Get tRPC context for cache invalidation\n\n  // --- Queries & Mutations ---\n  // Fetch groups for filtering\n  const { data: groups = [] } = api.groups.list.useQuery(undefined, {\n    staleTime: 30000, // Cache for 30 seconds\n  });\n\n  // Apply client-side sorting based on sort field and direction\n  const {\n    data: contacts = [], // Provide default empty array to avoid undefined\n    isLoading,\n    error: queryError,\n  } = api.contacts.list.useQuery(\n    {\n      search: searchQuery,\n      groupId: selectedGroupId || undefined, // Convert empty string to undefined for tRPC query\n    },\n    {\n      // Keep previous data while loading new search/filter results\n      placeholderData: (previousData: DBContact[] | undefined) => previousData,\n    }\n  );\n\n  const sortedContacts = [...contacts].sort((a, b) => {\n    if (sortField === 'name') {\n      // 'name' now refers to full_name\n      const aValue = a.full_name || '';\n      const bValue = b.full_name || '';\n      return sortDirection === 'asc'\n        ? aValue.localeCompare(bValue)\n        : bValue.localeCompare(aValue);\n    }\n\n    // For other fields, sort normally\n    const aValue = (a[sortField as keyof Contact] as string) || '';\n    const bValue = (b[sortField as keyof Contact] as string) || '';\n\n    if (typeof aValue === 'string' && typeof bValue === 'string') {\n      return sortDirection === 'asc'\n        ? aValue.localeCompare(bValue)\n        : bValue.localeCompare(aValue);\n    }\n\n    return 0;\n  });\n\n  // Filter contacts based on search query\n  const filteredContacts = sortedContacts.filter((contact) => {\n    // Backend search via tRPC's contacts.list already handles full_name and email.\n    // This client-side filter might be redundant or could be removed if backend search is sufficient.\n    // For now, keeping it simple and aligning with full_name for consistency if searchQuery is used for further client-side refinement.\n    if (!searchQuery) return true; // If no search query, don't filter out anything here\n    const searchRegex = new RegExp(searchQuery, 'i');\n    return (\n      searchRegex.test(contact.full_name) ||\n      (contact.email && searchRegex.test(contact.email)) || // Check if email exists\n      (contact.phone && searchRegex.test(contact.phone)) // Check if phone exists\n    );\n  });\n\n  // Groups data is already fetched above\n\n  // Mutations\n  const saveMutation = api.contacts.save.useMutation({\n    onSuccess: () => {\n      utils.contacts.list.invalidate(); // Invalidate list cache after save\n      handleCloseForm(); // Close form and reset state on success\n    },\n    onError: (error) => {\n      setFormError(`Failed to save contact: ${error.message}`);\n      // Log the full error object for debugging\n      console.error('Save Mutation Error:', error);\n    },\n  });\n\n  // Mutation for deleting a contact\n  const deleteMutation = api.contacts.delete.useMutation({\n    onSuccess: () => {\n      utils.contacts.list.invalidate(); // Invalidate list cache after delete\n      setDeleteError(null); // Clear any previous delete error on success\n    },\n    onError: (error) => {\n      setDeleteError(`Failed to delete contact: ${error.message}`);\n      // Log the full error object for debugging\n      console.error('Delete Mutation Error:', error);\n    },\n  });\n\n  // Helper function to reset form and error states\n  const resetFormAndErrorStates = () => {\n    setFormError(null);\n    setEditingContactId(null);\n    setDeleteError(null); // Also clear delete error when interacting with form\n    setFormData(undefined);\n  };\n\n  // --- Handler Functions ---\n  const handleCloseForm = () => {\n    setIsFormOpen(false);\n    resetFormAndErrorStates();\n  };\n\n  const handleAddNewClick = () => {\n    resetFormAndErrorStates();\n    setIsFormOpen(true);\n  };\n\n  const handleEditClick = (contact: Contact) => {\n    // Map Contact API data to ContactFormData\n    const formData: ContactFormData = {\n      id: contact.id,\n      full_name: contact.full_name,\n      email: contact.email ?? '',\n      phone: contact.phone ?? '',\n      company_name: contact.company_name ?? '',\n      job_title: contact.job_title ?? '',\n      profile_image_url: contact.profile_image_url ?? '',\n      source: contact.source ?? '',\n      notes: contact.notes ?? '',\n      last_contacted_at: formatDateForInput(contact.last_contacted_at),\n      enrichment_status: contact.enrichment_status ?? '',\n      enriched_data: contact.enriched_data ? contact.enriched_data as Record<string, unknown> : null,\n    };\n\n    setFormData(formData);\n    setEditingContactId(contact.id);\n    resetFormAndErrorStates(); // Reset errors before opening form\n    setIsFormOpen(true);\n  };\n\n  const handleDeleteClick = (contactId: string) => {\n    setDeleteError(null); // Clear error before attempting delete\n    if (\n      window.confirm(\n        'Are you sure you want to delete this contact? This action cannot be undone.'\n      )\n    ) {\n      deleteMutation.mutate({ contactId });\n    }\n  };\n\n  const handleSubmit = async (data: ContactFormData) => {\n    // No need to set formError to null here, as onError handles failure and onSuccess closes form\n\n    // Ensure optional fields are null if empty string for the backend API\n    const mutationData: ContactFormData = {\n      ...data,\n      id: editingContactId || undefined, // Use undefined for create, id for update\n      full_name: data.full_name.trim(),\n      email: data.email.trim(),\n      phone: data.phone?.trim() || null,\n      company_name: data.company_name?.trim() || null,\n      job_title: data.job_title?.trim() || null,\n      profile_image_url: data.profile_image_url?.trim() || null,\n      source: data.source?.trim() || null,\n      notes: data.notes?.trim() || null,\n      last_contacted_at: data.last_contacted_at\n        ? parseInputDateString(data.last_contacted_at)\n        : null,\n      enrichment_status: data.enrichment_status?.trim() || null,\n      enriched_data: data.enriched_data, // Pass as is\n    };\n\n    // No need for try-catch here as mutation.onError is the primary handler\n    await saveMutation.mutateAsync(mutationData);\n    // Success handling is done in the mutation's onSuccess callback\n  };\n\n  // --- Additional Handler Functions ---\n\n  // Toggle column visibility when a column is clicked\n  const handleColumnToggle = (column: string) => {\n    setVisibleColumns((prev) =>\n      prev.includes(column)\n        ? prev.filter((col) => col !== column)\n        : [...prev, column]\n    );\n  };\n\n  // Handle date filter change for Last Contacted\n  const handleDateFilterChange = (period: DateFilterPeriod) => {\n    setDateFilterPeriod(period);\n  };\n\n  // Handle source filter change\n  const handleSourceFilterChange = (sources: SourceOption[]) => {\n    setSelectedSourceFilters(sources);\n  };\n\n  const handleSortChange = (field: string) => {\n    if (sortField === field) {\n      // Toggle direction if clicking the same field\n      setSortDirection((prev) => (prev === 'asc' ? 'desc' : 'asc'));\n    } else {\n      // Set new field and default to ascending\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  // --- Rendering ---\n\n  // Show query error only if no data is loaded\n  if (queryError && contacts.length === 0) {\n    return (\n      <p className=\"p-4 text-red-600\">\n        Error loading contacts: {queryError.message}\n      </p>\n    );\n  }\n\n  // Show initial loading state only when no data is available yet\n  if (isLoading && contacts.length === 0) {\n    return (\n      <div className=\"py-6\">\n        <div className=\"flex justify-between items-center mb-6\">\n          <div className=\"flex items-center\">\n            <div className=\"bg-teal-400 text-teal-800 px-4 py-2 rounded-md shadow-sm mr-4\">\n              <h1 className=\"text-2xl font-bold\">Contacts</h1>\n            </div>\n          </div>\n        </div>\n        <div className=\"bg-white shadow-md rounded-lg p-8 flex items-center justify-center border-l-4 border-teal-400\">\n          <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-500 mr-4\"></div>\n          <p className=\"text-gray-700 font-medium\">Loading contacts...</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <GroupsProvider>\n      <div className=\"flex flex-col h-full\">\n        {/* Main Content */}\n        <div className=\"flex-1 overflow-auto p-4\">\n          <div className=\"mb-6\">\n            {/* Search and filters toolbar */}\n            <div className=\"flex flex-col md:flex-row items-center justify-between gap-4 mb-6\">\n              <div className=\"relative w-full md:w-64\">\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n                <Input\n                  placeholder=\"Search contacts...\"\n                  value={searchQuery}\n                  onChange={(e) => setSearchQuery(e.target.value)}\n                  className=\"pl-10 border-gray-300\"\n                />\n              </div>\n\n              {/* Active Group Filter */}\n              {selectedGroupId && (\n                <div className=\"flex items-center\">\n                  <div className=\"bg-purple-100 text-purple-700 px-3 py-1 rounded-full text-sm font-medium flex items-center mr-4\">\n                    {groups.find(\n                      (g: { id: string; name: string }) =>\n                        g.id === selectedGroupId\n                    )?.name || 'Group'}\n                    <button\n                      onClick={() => {\n                        router.push('/contacts');\n                      }}\n                      className=\"ml-2 text-purple-700 hover:text-purple-900\"\n                    >\n                      <X className=\"h-4 w-4\" />\n                    </button>\n                  </div>\n                </div>\n              )}\n\n              <div className=\"flex flex-wrap gap-2\">\n                <Button variant=\"outline\" size=\"sm\" className=\"border-gray-300\">\n                  <Tag className=\"w-4 h-4 mr-2\" />\n                  Filters\n                </Button>\n\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      className=\"border-gray-300\"\n                    >\n                      <SlidersHorizontal className=\"w-4 h-4 mr-2\" />\n                      Columns\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\">\n                    <DropdownMenuLabel>Visible Columns</DropdownMenuLabel>\n                    <DropdownMenuSeparator />\n                    <ColumnSelector\n                      visibleColumns={visibleColumns}\n                      onToggle={handleColumnToggle}\n                    />\n                  </DropdownMenuContent>\n                </DropdownMenu>\n\n                {/* New Contact Button */}\n                <Button\n                  onClick={handleAddNewClick}\n                  className=\"bg-teal-500 hover:bg-teal-600 text-white\"\n                  size=\"sm\"\n                >\n                  <Plus className=\"mr-2 h-4 w-4\" />\n                  New Contact\n                </Button>\n              </div>\n            </div>\n\n            {/* Alerts */}\n            {deleteError && (\n              <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6\">\n                <p>{deleteError}</p>\n              </div>\n            )}\n\n            {/* Contact List */}\n            <EnhancedContactList\n              contacts={filteredContacts}\n              onEditClick={handleEditClick}\n              onDeleteClick={handleDeleteClick}\n              isDeleteMutationLoading={deleteMutation.isPending}\n              isSaveMutationLoading={saveMutation.isPending}\n              searchQuery={searchQuery}\n              selectedGroupId={selectedGroupId}\n              visibleColumns={visibleColumns}\n              sortField={sortField}\n              sortDirection={sortDirection}\n              onSortChange={handleSortChange}\n              dateFilterPeriod={dateFilterPeriod}\n              onDateFilterChange={handleDateFilterChange}\n              selectedSourceFilters={selectedSourceFilters}\n              onSourceFilterChange={handleSourceFilterChange}\n            />\n          </div>\n        </div>\n\n        {/* Quick Add Contact Modal (auto-opens on ?new=true) */}\n        <AddContactModal\n          onContactAdded={handleQuickAddClose} // Or any other success handler\n          open={isQuickAddOpen}\n          onOpenChange={(openState) => {\n            // Renamed 'open' to 'openState' to avoid conflict\n            setIsQuickAddOpen(openState); // Sync state\n            if (!openState) {\n              handleQuickAddClose(); // Call your close logic which also handles URL\n            }\n          }}\n          showTriggerButton={false} // <--- HIDE the modal's default trigger\n        />\n\n        {/*\n        NOTE: For quick add, modal should only have fields: name, last name, email.\n        There should be an option (future) to \"Add full details\" that opens a full contact card page with all fields empty.\n        Fallback trigger for this modal will be added to the dashboard quicklinks page.\n      */}\n        {/* Add/Edit Contact Form Modal */}\n        {isFormOpen && (\n          <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n            <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n              <div className=\"p-6\">\n                <div className=\"flex justify-between items-center mb-6\">\n                  <h2 className=\"text-2xl font-bold text-gray-800\">\n                    {editingContactId ? 'Edit Contact' : 'Add New Contact'}\n                  </h2>\n                  <button\n                    onClick={handleCloseForm}\n                    className=\"text-gray-500 hover:text-gray-700 focus:outline-none\"\n                  >\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-6 w-6\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={2}\n                        d=\"M6 18L18 6M6 6l12 12\"\n                      />\n                    </svg>\n                  </button>\n                </div>\n\n                {formError && (\n                  <div className=\"bg-red-100 border-l-4 border-red-500 text-red-700 p-4 mb-6\">\n                    <p>{formError}</p>\n                  </div>\n                )}\n\n                <ContactForm\n                  onSubmit={handleSubmit}\n                  initialData={formData}\n                  isOpen={true}\n                  onClose={() => setIsFormOpen(false)}\n                  isSubmitting={saveMutation.isPending}\n                  error={formError}\n                  editingContactId={editingContactId}\n                />\n              </div>\n            </div>\n          </div>\n        )}\n      </div>\n    </GroupsProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactsLayout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedGroupId' is assigned a value but never used.","line":7,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":45}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { ContactsMainContent } from './ContactsMainContent';\n\nexport function ContactsLayout() {\n  const [selectedGroupId, setSelectedGroupId] = useState<string | null>(null);\n  const [searchQuery, setSearchQuery] = useState('');\n\n  // The sidebar is now handled by MainLayout.tsx\n  return (\n    <div className=\"flex h-full\">\n      {/* Main Content */}\n      <ContactsMainContent\n        selectedGroupId={selectedGroupId}\n        searchQuery={searchQuery}\n        onSearchChange={setSearchQuery}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactsMainContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1112,1115],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1112,1115],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":45,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1254,1257],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1254,1257],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dateFilterPeriod' is assigned a value but never used.","line":81,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setDateFilterPeriod' is assigned a value but never used.","line":81,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":81,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedSourceFilters' is assigned a value but never used.","line":82,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSelectedSourceFilters' is assigned a value but never used.","line":82,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'queryError' is assigned a value but never used.","line":88,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'b' is defined but never used.","line":101,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":101,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":103,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3174,3177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3174,3177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport {\n  Search,\n  SlidersHorizontal,\n  Plus,\n  Filter\n} from 'lucide-react';\nimport { api } from '@/lib/trpc';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Card } from '@/components/ui/card';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { ContactsTable } from './ContactsTable';\nimport { ColumnSelector } from './ColumnSelector';\nimport { ContactForm } from './ContactForm';\nimport { AddContactModal } from '@/components/contacts/AddContactModal';\n\n// Define Contact interface\ninterface Contact {\n  id: string;\n  full_name: string;\n  email?: string | null;\n  phone?: string | null;\n  phone_country_code?: string | null;\n  company_name?: string | null;\n  job_title?: string | null;\n  profile_image_url?: string | null;\n  source?: string | null;\n  notes?: string | null;\n  last_contacted_at?: string | null;\n  enrichment_status?: string | null;\n  enriched_data?: any | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  tags?: Array<{ id: string; name: string }> | null;\n  [key: string]: any; // Allow for additional properties\n}\n\ninterface ContactsMainContentProps {\n  selectedGroupId: string | null;\n  searchQuery: string;\n  onSearchChange: (query: string) => void;\n}\n\nexport function ContactsMainContent({\n  selectedGroupId,\n  searchQuery,\n  onSearchChange\n}: ContactsMainContentProps) {\n  // State for UI controls\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\n  const [isContactFormOpen, setIsContactFormOpen] = useState(false);\n  const [editingContactId, setEditingContactId] = useState<string | null>(null);\n  \n  // Check for URL parameters\n  const searchParams = new URLSearchParams(typeof window !== 'undefined' ? window.location.search : '');\n  const groupIdFromUrl = searchParams.get('group');\n  \n  // Use groupId from URL if available, otherwise use the selectedGroupId prop\n  const effectiveGroupId = groupIdFromUrl || selectedGroupId;\n  const [visibleColumns, setVisibleColumns] = useState<string[]>([\n    'name',\n    'email',\n    'phone',\n    'company_name',\n    'job_title',\n    'last_contacted_at',\n    'notes',\n  ]);\n  const [sortField, setSortField] = useState('name');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [dateFilterPeriod, setDateFilterPeriod] = useState('all');\n  const [selectedSourceFilters, setSelectedSourceFilters] = useState<string[]>([]);\n\n  // Fetch contacts\n  const {\n    data: contactsData = [],\n    isLoading,\n    error: queryError\n  } = api.contacts.list.useQuery(\n    {\n      search: searchQuery,\n      groupId: effectiveGroupId || undefined,\n    },\n    {\n      // Keep previous data while loading new search/filter results\n      placeholderData: (previousData: Contact[] | undefined) => previousData,\n    }\n  );\n\n  // Sort contacts based on sortField and sortDirection\n  const contacts = [...contactsData].sort((a, b) => {\n    // Handle nested fields like tags\n    const getFieldValue = (obj: any, field: string) => {\n      if (field === 'name') field = 'full_name';\n      \n      // Handle null or undefined values\n      const aVal = obj[field] ?? '';\n      const bVal = obj[field] ?? '';\n      \n      // Compare based on type\n      if (typeof aVal === 'string' && typeof bVal === 'string') {\n        return sortDirection === 'asc'\n          ? aVal.localeCompare(bVal)\n          : bVal.localeCompare(aVal);\n      } else if (aVal instanceof Date && bVal instanceof Date) {\n        return sortDirection === 'asc'\n          ? aVal.getTime() - bVal.getTime()\n          : bVal.getTime() - aVal.getTime();\n      } else if (typeof aVal === 'number' && typeof bVal === 'number') {\n        return sortDirection === 'asc' ? aVal - bVal : bVal - aVal;\n      }\n      \n      // Default string comparison for mixed types\n      return sortDirection === 'asc'\n        ? String(aVal).localeCompare(String(bVal))\n        : String(bVal).localeCompare(String(aVal));\n    };\n    \n    return getFieldValue(a, sortField);\n  });\n\n  // Mutations\n  const utils = api.useUtils();\n  \n  const deleteMutation = api.contacts.delete.useMutation({\n    onSuccess: () => {\n      utils.contacts.list.invalidate();\n    },\n  });\n\n  const saveMutation = api.contacts.save.useMutation({\n    onSuccess: () => {\n      utils.contacts.list.invalidate();\n      setIsContactFormOpen(false);\n      setEditingContactId(null);\n    },\n  });\n\n  // Handlers\n  const handleEditContact = (contactId: string) => {\n    const contact = contacts.find((c: Contact) => c.id === contactId);\n    if (contact) {\n      setEditingContactId(contactId);\n      setIsContactFormOpen(true);\n    }\n  };\n\n  const handleDeleteContact = (contactId: string) => {\n    if (window.confirm('Are you sure you want to delete this contact?')) {\n      deleteMutation.mutate({ contactId });\n    }\n  };\n\n  const handleColumnToggle = (column: string) => {\n    setVisibleColumns(prev => \n      prev.includes(column)\n        ? prev.filter(col => col !== column)\n        : [...prev, column]\n    );\n  };\n\n  const handleSortChange = (field: string) => {\n    if (sortField === field) {\n      setSortDirection(prev => prev === 'asc' ? 'desc' : 'asc');\n    } else {\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  // Widgets data\n  const totalContacts = contacts.length;\n  const recentlyAddedCount = contacts.filter(\n    (c: Contact) => c.created_at && new Date(c.created_at) > new Date(Date.now() - 7 * 24 * 60 * 60 * 1000)\n  ).length;\n  const needsEnrichmentCount = contacts.filter(\n    (c: Contact) => !c.enrichment_status || c.enrichment_status === 'pending'\n  ).length;\n\n  return (\n    <div className=\"flex-1 p-6 overflow-auto bg-slate-100\">\n      {/* Header with search and actions */}\n      <div className=\"flex flex-col md:flex-row items-center justify-between gap-4 mb-6\">\n        <div className=\"relative w-full md:w-64\">\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input\n            type=\"text\"\n            placeholder=\"Search contacts...\"\n            value={searchQuery}\n            onChange={(e) => onSearchChange(e.target.value)}\n            className=\"w-full pl-10\"\n          />\n        </div>\n\n        <div className=\"flex flex-wrap gap-2\">\n          <div className=\"relative\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center\">\n                  <Filter className=\"w-4 h-4 mr-2\" />\n                  Filters\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuLabel>Filter Contacts</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <DropdownMenuItem>By Date Added</DropdownMenuItem>\n                <DropdownMenuItem>By Last Contact</DropdownMenuItem>\n                <DropdownMenuItem>By Source</DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          <div className=\"relative\">\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"outline\" size=\"sm\" className=\"flex items-center\">\n                  <SlidersHorizontal className=\"w-4 h-4 mr-2\" />\n                  Columns\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\" className=\"w-48\">\n                <DropdownMenuLabel>Visible Columns</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                <ColumnSelector\n                  visibleColumns={visibleColumns}\n                  onToggle={handleColumnToggle}\n                />\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n\n          <Button\n            onClick={() => {\n              setEditingContactId(null);\n              setIsContactFormOpen(true);\n            }}\n            className=\"bg-teal-500 hover:bg-teal-600\"\n            size=\"sm\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" />\n            New Contact\n          </Button>\n        </div>\n      </div>\n\n      {/* Widgets */}\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 mb-6\">\n        <Card className=\"p-4\">\n          <div className=\"flex flex-col\">\n            <span className=\"text-sm text-gray-500\">Total Contacts</span>\n            <span className=\"text-2xl font-bold text-teal-600\">{totalContacts}</span>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex flex-col\">\n            <span className=\"text-sm text-gray-500\">Recently Added</span>\n            <span className=\"text-2xl font-bold text-blue-600\">{recentlyAddedCount}</span>\n            <span className=\"text-xs text-gray-400\">Last 7 days</span>\n          </div>\n        </Card>\n        \n        <Card className=\"p-4\">\n          <div className=\"flex flex-col\">\n            <span className=\"text-sm text-gray-500\">Needs Enrichment</span>\n            <span className=\"text-2xl font-bold text-amber-600\">{needsEnrichmentCount}</span>\n            <Button\n              variant=\"link\"\n              className=\"p-0 h-auto text-xs text-amber-600 hover:text-amber-800 text-left\"\n            >\n              Enrich All\n            </Button>\n          </div>\n        </Card>\n      </div>\n\n      {/* Contacts Table */}\n      <ContactsTable\n        contacts={contacts}\n        isLoading={isLoading}\n        visibleColumns={visibleColumns}\n        sortField={sortField}\n        sortDirection={sortDirection}\n        onSortChange={handleSortChange}\n        onEditContact={handleEditContact}\n        onDeleteContact={handleDeleteContact}\n      />\n\n      {/* Add Contact Modal */}\n      <AddContactModal\n        open={isAddContactModalOpen}\n        onOpenChange={setIsAddContactModalOpen}\n        onContactAdded={() => {\n          setIsAddContactModalOpen(false);\n          utils.contacts.list.invalidate();\n        }}\n        showTriggerButton={false}\n      />\n\n      {/* Edit Contact Form Modal */}\n      {isContactFormOpen && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4\">\n          <div className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n            <div className=\"p-6\">\n              <div className=\"flex justify-between items-center mb-6\">\n                <h2 className=\"text-2xl font-bold text-gray-800\">\n                  Edit Contact\n                </h2>\n                <button\n                  onClick={() => setIsContactFormOpen(false)}\n                  className=\"text-gray-500 hover:text-gray-700 focus:outline-none\"\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    className=\"h-6 w-6\"\n                    fill=\"none\"\n                    viewBox=\"0 0 24 24\"\n                    stroke=\"currentColor\"\n                  >\n                    <path\n                      strokeLinecap=\"round\"\n                      strokeLinejoin=\"round\"\n                      strokeWidth={2}\n                      d=\"M6 18L18 6M6 6l12 12\"\n                    />\n                  </svg>\n                </button>\n              </div>\n\n              <ContactForm\n                onSubmit={async (data) => {\n                  await saveMutation.mutateAsync({\n                    ...data,\n                    id: editingContactId || undefined,\n                  });\n                }}\n                initialData={contacts.find((c: Contact) => c.id === editingContactId)}\n                isOpen={true}\n                onClose={() => setIsContactFormOpen(false)}\n                isSubmitting={saveMutation.isPending}\n                error={saveMutation.error?.message || null}\n                editingContactId={editingContactId}\n              />\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactsTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useCallback' is defined but never used.","line":3,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useMemo' is defined but never used.","line":3,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":4,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":17,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":18,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":6},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":80,"column":9,"nodeType":"JSXOpeningElement","endLine":85,"endColumn":11},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'updateIsAllSelected'. Either include it or remove the dependency array.","line":197,"column":6,"nodeType":"ArrayExpression","endLine":197,"endColumn":43,"suggestions":[{"desc":"Update the dependencies array to be: [selectedContactIds, contacts.length, updateIsAllSelected]","fix":{"range":[5551,5588],"text":"[selectedContactIds, contacts.length, updateIsAllSelected]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'contact' is defined but never used.","line":288,"column":30,"nodeType":null,"messageId":"unusedVar","endLine":288,"endColumn":37}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect, useRef, useCallback, useMemo } from 'react';\nimport { format, formatDistance } from 'date-fns';\nimport Link from 'next/link';\nimport {\n  ArrowDown,\n  ArrowUp,\n  Mail,\n  MessageSquareText,\n  Phone,\n  Sparkles,\n  MoreHorizontal,\n  Trash2,\n  Edit,\n  ChevronDown,\n  Check,\n  Tag,\n  Users,\n} from 'lucide-react';\nimport { api } from '@/lib/trpc';\nimport { cn } from '@/lib/utils';\nimport { Avatar } from '@/components/ui/avatar';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuSeparator,\n} from '@/components/ui/dropdown-menu';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\n\n// ProfileAvatar component to handle profile image display with proper URL signing\nfunction ProfileAvatar({ contact }: { contact: Contact }) {\n  const [imageUrl, setImageUrl] = useState<string | null>(null);\n  const [imageError, setImageError] = useState(false);\n\n  // Use tRPC to get signed URL if profile_image_url exists and is a storage path\n  const { data: fileUrlData } = api.storage.getFileUrl.useQuery(\n    { filePath: contact.profile_image_url || '' },\n    {\n      enabled: !!contact.profile_image_url && !contact.profile_image_url.includes('?token='),\n      staleTime: 55 * 60 * 1000, // 55 minutes (URLs valid for 1 hour)\n    }\n  );\n\n  // Update image URL when signed URL is fetched\n  useEffect(() => {\n    if (fileUrlData?.signedUrl) {\n      setImageUrl(fileUrlData.signedUrl);\n      setImageError(false);\n    }\n  }, [fileUrlData]);\n\n  // Handle image load error\n  const handleImageError = () => {\n    setImageError(true);\n  };\n\n  if (contact.profile_image_url && !imageError && imageUrl) {\n    return (\n      <Avatar className=\"h-10 w-10 bg-teal-100 text-teal-800 overflow-hidden\">\n        <img\n          src={imageUrl}\n          alt={contact.full_name}\n          className=\"h-full w-full object-cover\"\n          onError={handleImageError}\n        />\n      </Avatar>\n    );\n  }\n\n  // Fallback to initials avatar\n  return (\n    <Avatar className=\"h-10 w-10 bg-teal-100 text-teal-800\">\n      <div className=\"flex items-center justify-center h-full w-full font-medium\">\n        {contact.full_name.charAt(0)}\n      </div>\n    </Avatar>\n  );\n}\n\nexport interface Contact {\n  id: string;\n  full_name: string;\n  email?: string | null;\n  phone?: string | null;\n  company_name?: string | null;\n  job_title?: string | null;\n  profile_image_url?: string | null;\n  source?: string | null;\n  notes?: string | null;\n  last_contacted_at?: string | null;\n  enrichment_status?: string | null;\n  enriched_data?: unknown | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  tags?: Array<{ id: string; name: string }> | null;\n  address_city?: string | null;\n  address_country?: string | null;\n  address_postal_code?: string | null;\n  address_street?: string | null;\n  client_since?: string | null;\n  referral_source?: string | null;\n  relationship_status?: string | null;\n  website?: string | null;\n  wellness_status?: string | null;\n}\n\ninterface Group {\n  id: string;\n  name: string;\n  description?: string | null;\n  color?: string | null;\n}\n\ninterface ContactsTableProps {\n  contacts: Contact[];\n  isLoading: boolean;\n  visibleColumns: string[];\n  sortField: string;\n  sortDirection: 'asc' | 'desc';\n  onSortChange: (field: string) => void;\n  onEditContact: (contactId: string) => void;\n  onDeleteContact: (contactId: string) => void;\n}\n\nexport function ContactsTable({\n  contacts,\n  isLoading,\n  visibleColumns,\n  sortField,\n  sortDirection,\n  onSortChange,\n  onEditContact,\n  onDeleteContact,\n}: ContactsTableProps) {\n  // State for bulk actions\n  const [selectedContactIds, setSelectedContactIds] = useState<string[]>([]);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isBulkDeleteDialogOpen, setIsBulkDeleteDialogOpen] = useState(false);\n  const [isEnrichDialogOpen, setIsEnrichDialogOpen] = useState(false);\n  const [isAddToGroupDialogOpen, setIsAddToGroupDialogOpen] = useState(false);\n  const [selectedGroupId, setSelectedGroupId] = useState<string>('');\n  \n  const utils = api.useUtils();\n  \n  // Get all available groups for the dropdown\n  const {\n    data: allGroups,\n    isLoading: isLoadingGroups,\n    error: groupsError,\n  } = api.groups.list.useQuery(undefined, {\n    enabled: isAddToGroupDialogOpen, // Only fetch when dialog is open\n  });\n  \n  // Mutation to add contacts to group\n  const addToGroupMutation = api.groups.addContact.useMutation({\n    onSuccess: () => {\n      // Invalidate any relevant queries\n      utils.groups.list.invalidate();\n      setIsAddToGroupDialogOpen(false);\n      setSelectedGroupId('');\n    },\n    onError: (error) => {\n      console.error('Add to group error:', error);\n    },\n  });\n  \n  // State for column dragging\n  const [draggedColumn, setDraggedColumn] = useState<string | null>(null);\n  const [columnOrder, setColumnOrder] = useState<string[]>([\n    'name', 'actions', 'email', 'phone', 'company_name', 'job_title', 'last_contacted_at', 'notes', 'source', 'tags'\n  ]);\n  const tableRef = useRef<HTMLTableElement>(null);\n  \n  // Update isAllSelected when selectedContactIds changes\n  useEffect(() => {\n    updateIsAllSelected();\n  }, [selectedContactIds, contacts.length]);\n  \n  // Handle select all checkbox\n  const handleSelectAll = () => {\n    if (isAllSelected || selectedContactIds.length === contacts.length) {\n      setSelectedContactIds([]);\n      setIsAllSelected(false);\n    } else {\n      setSelectedContactIds(contacts.map(contact => contact.id));\n      setIsAllSelected(true);\n    }\n  };\n\n  // Handle individual row selection\n  const handleSelectRow = (contactId: string, isSelected: boolean) => {\n    setSelectedContactIds(prev => {\n      if (isSelected) {\n        return [...prev, contactId];\n      } else {\n        return prev.filter(id => id !== contactId);\n      }\n    });\n  };\n\n  // Update isAllSelected when selectedContactIds changes\n  const updateIsAllSelected = () => {\n    setIsAllSelected(\n      contacts.length > 0 && \n      selectedContactIds.length === contacts.length\n    );\n  };\n\n  // Handle bulk delete\n  const handleBulkDelete = () => {\n    // Here you would implement the actual bulk delete functionality\n    // For now, we'll just close the dialog\n    setIsBulkDeleteDialogOpen(false);\n    setSelectedContactIds([]);\n  };\n\n  // Handle bulk enrich\n  const handleBulkEnrich = () => {\n    // Here you would implement the actual bulk enrich functionality\n    // For now, we'll just close the dialog\n    setIsEnrichDialogOpen(false);\n  };\n  \n  // Handle dialog open/close with proper state reset\n  const handleAddToGroupDialogOpenChange = (open: boolean) => {\n    setIsAddToGroupDialogOpen(open);\n    if (!open) {\n      setSelectedGroupId('');\n      // Reset mutation state when closing dialog\n      addToGroupMutation.reset();\n    }\n  };\n  \n  // Handle adding multiple contacts to a group\n  const handleAddToGroup = async () => {\n    if (!selectedGroupId || selectedContactIds.length === 0) return;\n    \n    try {\n      // Process contacts sequentially to avoid overwhelming the server\n      for (const contactId of selectedContactIds) {\n        await addToGroupMutation.mutateAsync({\n          contactId,\n          groupId: selectedGroupId,\n        });\n      }\n      \n      // Explicitly invalidate the groups list query to refresh counts\n      utils.groups.list.invalidate();\n      \n      // Close dialog and reset selection\n      setIsAddToGroupDialogOpen(false);\n      setSelectedGroupId('');\n      \n      // Optionally, you could clear the selection after adding to group\n      // setSelectedContactIds([]);\n    } catch (error) {\n      console.error('Error adding contacts to group:', error);\n    }\n  };\n\n  // Handle email action\n  const handleEmailAction = (contact: Contact) => {\n    // Open chat interface with email prompt\n    alert(`Opening chat to email ${contact.full_name}`);\n  };\n\n  // Handle phone action\n  const handlePhoneAction = (contact: Contact) => {\n    // Currently non-functional\n    alert(`Phone functionality not implemented yet`);\n  };\n\n  // Handle message action\n  const handleMessageAction = (contact: Contact) => {\n    // Open chat with WhatsApp integration\n    alert(`Opening chat to message ${contact.full_name} via WhatsApp`);\n  };\n\n  // Handle AI insights action\n  const handleAIAction = (contact: Contact) => {\n    // Ask AI for insights about the contact\n    alert(`Getting AI insights for ${contact.full_name}`);\n  };\n  \n  // Handle column drag start\n  const handleDragStart = (e: React.DragEvent<HTMLTableCellElement>, column: string) => {\n    setDraggedColumn(column);\n    e.dataTransfer.effectAllowed = 'move';\n    // Add a custom class to the dragged element for styling\n    e.currentTarget.classList.add('dragging');\n  };\n  \n  // Handle column drag over\n  const handleDragOver = (e: React.DragEvent<HTMLTableCellElement>, column: string) => {\n    e.preventDefault();\n    e.dataTransfer.dropEffect = 'move';\n    \n    if (draggedColumn && draggedColumn !== column) {\n      // Add visual indicator for drop target\n      e.currentTarget.classList.add('drag-over');\n    }\n  };\n  \n  // Handle column drag leave\n  const handleDragLeave = (e: React.DragEvent<HTMLTableCellElement>) => {\n    e.currentTarget.classList.remove('drag-over');\n  };\n  \n  // Handle column drop\n  const handleDrop = (e: React.DragEvent<HTMLTableCellElement>, targetColumn: string) => {\n    e.preventDefault();\n    e.currentTarget.classList.remove('drag-over');\n    \n    if (draggedColumn && draggedColumn !== targetColumn) {\n      // Reorder columns\n      const newOrder = [...columnOrder];\n      const draggedIndex = newOrder.indexOf(draggedColumn);\n      const targetIndex = newOrder.indexOf(targetColumn);\n      \n      if (draggedIndex !== -1 && targetIndex !== -1) {\n        newOrder.splice(draggedIndex, 1);\n        newOrder.splice(targetIndex, 0, draggedColumn);\n        setColumnOrder(newOrder);\n        \n        // Log the new order for debugging\n        console.log('New column order:', newOrder);\n      }\n    }\n    \n    setDraggedColumn(null);\n  };\n  \n  // Handle drag end\n  const handleDragEnd = (e: React.DragEvent<HTMLTableCellElement>) => {\n    e.currentTarget.classList.remove('dragging');\n    setDraggedColumn(null);\n    \n    // Remove drag-over class from all columns\n    if (tableRef.current) {\n      const headers = tableRef.current.querySelectorAll('th');\n      headers.forEach(header => {\n        header.classList.remove('drag-over');\n      });\n    }\n  };\n\n  // Add CSS styles for drag-and-drop\n  useEffect(() => {\n    const style = document.createElement('style');\n    style.textContent = `\n      .dragging {\n        opacity: 0.5;\n        border: 2px dashed #ccc;\n      }\n      .drag-over {\n        border: 2px dashed #0ea5e9;\n        background-color: rgba(14, 165, 233, 0.1);\n      }\n    `;\n    document.head.appendChild(style);\n    \n    return () => {\n      document.head.removeChild(style);\n    };\n  }, []);\n\n  // Show loading state\n  if (isLoading && contacts.length === 0) {\n    return (\n      <div className=\"bg-white shadow-md rounded-lg p-8 flex items-center justify-center border-l-4 border-teal-400\">\n        <div className=\"animate-spin rounded-full h-10 w-10 border-b-2 border-orange-500 mr-4\"></div>\n        <p className=\"text-gray-700 font-medium\">Loading contacts...</p>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Bulk Actions Toolbar */}\n      {selectedContactIds.length > 0 && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-2 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <span className=\"text-blue-700 font-medium ml-2\">\n              {selectedContactIds.length} contact{selectedContactIds.length !== 1 ? 's' : ''} selected\n            </span>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSelectedContactIds([])}\n            >\n              Clear\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsEnrichDialogOpen(true)}\n            >\n              Enrich\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => handleAddToGroupDialogOpenChange(true)}\n              className=\"flex items-center\"\n            >\n              <Users className=\"h-4 w-4 mr-1\" />\n              Add to Group\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50 flex items-center\"\n              onClick={() => setIsBulkDeleteDialogOpen(true)}\n            >\n              <Trash2 className=\"h-4 w-4 mr-1\" />\n              Delete\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Table Container */}\n      <div className=\"overflow-auto rounded-lg border border-gray-200 bg-white\">\n        <table ref={tableRef} className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-teal-100 sticky top-0 z-10\">\n            <tr className=\"draggable-header-row\">\n              {/* Selection Column */}\n              <th className=\"px-3 py-3 text-left\">\n                <Checkbox\n                  checked={isAllSelected}\n                  onCheckedChange={handleSelectAll}\n                  aria-label=\"Select all contacts\"\n                />\n              </th>\n\n              {/* Name Column - Always visible */}\n              <th\n                scope=\"col\"\n                className=\"px-6 py-3 text-left text-xs font-semibold text-teal-800 uppercase tracking-wider cursor-grab\"\n                draggable=\"true\"\n                data-column=\"name\"\n                onDragStart={(e) => handleDragStart(e, \"name\")}\n                onDragOver={(e) => handleDragOver(e, \"name\")}\n                onDragLeave={handleDragLeave}\n                onDrop={(e) => handleDrop(e, \"name\")}\n                onDragEnd={handleDragEnd}\n              >\n                <div\n                  className=\"flex items-center cursor-pointer\"\n                  onClick={() => onSortChange('name')}\n                >\n                  Name\n                  {sortField === 'name' && (\n                    <span className=\"ml-1 flex items-center\">\n                      {sortDirection === 'asc' ? (\n                        <ArrowUp className=\"h-3 w-3\" />\n                      ) : (\n                        <ArrowDown className=\"h-3 w-3\" />\n                      )}\n                    </span>\n                  )}\n                  {sortField !== 'name' && (\n                    <ChevronDown className=\"h-3 w-3 ml-1 text-gray-400\" />\n                  )}\n                </div>\n              </th>\n\n              {/* Actions Column - Moved to be right after Name */}\n              <th\n                scope=\"col\"\n                className=\"px-6 py-3 text-center text-xs font-semibold text-teal-800 uppercase tracking-wider cursor-grab\"\n                draggable=\"true\"\n                data-column=\"actions\"\n                onDragStart={(e) => handleDragStart(e, \"actions\")}\n                onDragOver={(e) => handleDragOver(e, \"actions\")}\n                onDragLeave={handleDragLeave}\n                onDrop={(e) => handleDrop(e, \"actions\")}\n                onDragEnd={handleDragEnd}\n              >\n                Actions\n              </th>\n\n              {/* Generate dynamic columns based on visibleColumns and columnOrder */}\n              {visibleColumns\n                .filter(col => col !== 'name')\n                .sort((a, b) => {\n                  const aIndex = columnOrder.indexOf(a);\n                  const bIndex = columnOrder.indexOf(b);\n                  return aIndex - bIndex;\n                })\n                .map(columnId => {\n                  // Find the column definition from ColumnSelector\n                  const columnDef = [\n                    { id: 'email', label: 'Email', field: 'email' },\n                    { id: 'phone', label: 'Phone', field: 'phone' },\n                    { id: 'company_name', label: 'Company', field: 'company_name' },\n                    { id: 'job_title', label: 'Job Title', field: 'job_title' },\n                    { id: 'address_city', label: 'City', field: 'address_city' },\n                    { id: 'address_country', label: 'Country', field: 'address_country' },\n                    { id: 'address_postal_code', label: 'Postal Code', field: 'address_postal_code' },\n                    { id: 'address_street', label: 'Street Address', field: 'address_street' },\n                    { id: 'client_since', label: 'Client Since', field: 'client_since' },\n                    { id: 'last_contacted_at', label: 'Last Contacted', field: 'last_contacted_at' },\n                    { id: 'notes', label: 'Notes', field: 'notes' },\n                    { id: 'referral_source', label: 'Referral Source', field: 'referral_source' },\n                    { id: 'relationship_status', label: 'Relationship Status', field: 'relationship_status' },\n                    { id: 'source', label: 'Source', field: 'source' },\n                    { id: 'tags', label: 'Tags', field: 'tags' },\n                    { id: 'website', label: 'Website', field: 'website' },\n                    { id: 'wellness_status', label: 'Wellness Status', field: 'wellness_status' }\n                  ].find(col => col.id === columnId);\n                  \n                  if (!columnDef) return null;\n                  \n                  return (\n                    <th\n                      key={columnId}\n                      scope=\"col\"\n                      className=\"px-6 py-3 text-left text-xs font-semibold text-teal-800 uppercase tracking-wider cursor-grab\"\n                      draggable=\"true\"\n                      data-column={columnId}\n                      onDragStart={(e) => handleDragStart(e, columnId)}\n                      onDragOver={(e) => handleDragOver(e, columnId)}\n                      onDragLeave={handleDragLeave}\n                      onDrop={(e) => handleDrop(e, columnId)}\n                      onDragEnd={handleDragEnd}\n                    >\n                      <div\n                        className=\"flex items-center cursor-pointer\"\n                        onClick={() => onSortChange(columnDef.field)}\n                      >\n                        {columnDef.label}\n                        {sortField === columnDef.field && (\n                          <span className=\"ml-1 flex items-center\">\n                            {sortDirection === 'asc' ? (\n                              <ArrowUp className=\"h-3 w-3\" />\n                            ) : (\n                              <ArrowDown className=\"h-3 w-3\" />\n                            )}\n                          </span>\n                        )}\n                        {sortField !== columnDef.field && (\n                          <ChevronDown className=\"h-3 w-3 ml-1 text-gray-400\" />\n                        )}\n                      </div>\n                    </th>\n                  );\n                })}\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {contacts.length > 0 ? (\n              contacts.map((contact) => {\n                const isSelected = selectedContactIds.includes(contact.id);\n                \n                return (\n                  <tr\n                    key={contact.id}\n                    className={cn(\n                      \"hover:bg-gray-50\",\n                      isSelected ? \"bg-blue-50\" : \"\"\n                    )}\n                  >\n                    {/* Selection Column */}\n                    <td className=\"px-3 py-4\">\n                      <Checkbox\n                        checked={isSelected}\n                        onCheckedChange={(checked) =>\n                          handleSelectRow(contact.id, checked as boolean)\n                        }\n                        aria-label={`Select ${contact.full_name}`}\n                      />\n                    </td>\n                    \n                    {/* Name Column */}\n                    <td className=\"px-6 py-4 whitespace-nowrap\">\n                      <div className=\"flex items-center\">\n                        <ProfileAvatar contact={contact} />\n                        <div className=\"ml-4\">\n                          <Link\n                            href={`/contacts/${contact.id}`}\n                            className=\"font-medium text-teal-600 hover:underline\"\n                          >\n                            {contact.full_name}\n                          </Link>\n                          {contact.job_title && (\n                            <div className=\"text-xs text-gray-500\">\n                              {contact.job_title}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </td>\n\n                    {/* Actions Column - Moved to be right after Name */}\n                    <td className=\"px-6 py-4 whitespace-nowrap text-center\">\n                      <div className=\"flex justify-center space-x-3\">\n                        <button\n                          className=\"text-blue-600 hover:text-blue-800\"\n                          onClick={() => handleEmailAction(contact)}\n                          aria-label=\"Email contact\"\n                          title=\"Email contact\"\n                        >\n                          <Mail className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <button\n                          className=\"text-green-600 hover:text-green-800\"\n                          onClick={() => handlePhoneAction(contact)}\n                          aria-label=\"Call contact\"\n                          title=\"Call contact\"\n                        >\n                          <Phone className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <button\n                          className=\"text-purple-600 hover:text-purple-800\"\n                          onClick={() => handleMessageAction(contact)}\n                          aria-label=\"Message contact\"\n                          title=\"Message contact\"\n                        >\n                          <MessageSquareText className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <button\n                          className=\"text-amber-600 hover:text-amber-800\"\n                          onClick={() => handleAIAction(contact)}\n                          aria-label=\"AI assistant\"\n                          title=\"AI insights\"\n                        >\n                          <Sparkles className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <button\n                              className=\"text-gray-600 hover:text-gray-800\"\n                              aria-label=\"More options\"\n                            >\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => onEditContact(contact.id)}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuSeparator />\n                            <DropdownMenuItem\n                              onClick={() => onDeleteContact(contact.id)}\n                              className=\"text-red-600\"\n                            >\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </td>\n\n                    {/* Generate dynamic cell content based on visibleColumns and columnOrder */}\n                    {visibleColumns\n                      .filter(col => col !== 'name')\n                      .sort((a, b) => {\n                        const aIndex = columnOrder.indexOf(a);\n                        const bIndex = columnOrder.indexOf(b);\n                        return aIndex - bIndex;\n                      })\n                      .map(columnId => {\n                        // Find the column definition\n                        const columnDef = [\n                          { id: 'email', label: 'Email', field: 'email', render: (c: Contact) => c.email || '-' },\n                          { id: 'phone', label: 'Phone', field: 'phone', render: (c: Contact) => c.phone || '-' },\n                          { id: 'company_name', label: 'Company', field: 'company_name', render: (c: Contact) => c.company_name || '-' },\n                          { id: 'job_title', label: 'Job Title', field: 'job_title', render: (c: Contact) => c.job_title || '-' },\n                          { id: 'address_city', label: 'City', field: 'address_city', render: (c: Contact) => c.address_city || '-' },\n                          { id: 'address_country', label: 'Country', field: 'address_country', render: (c: Contact) => c.address_country || '-' },\n                          { id: 'address_postal_code', label: 'Postal Code', field: 'address_postal_code', render: (c: Contact) => c.address_postal_code || '-' },\n                          { id: 'address_street', label: 'Street Address', field: 'address_street', render: (c: Contact) => c.address_street || '-' },\n                          { id: 'client_since', label: 'Client Since', field: 'client_since', render: (c: Contact) => c.client_since ? new Date(c.client_since).toLocaleDateString() : '-' },\n                          {\n                            id: 'last_contacted_at',\n                            label: 'Last Contacted',\n                            field: 'last_contacted_at',\n                            render: (c: Contact) => c.last_contacted_at ? (\n                              <div className=\"flex flex-col\">\n                                <span>{new Date(c.last_contacted_at).toLocaleDateString()}</span>\n                                <span className=\"text-xs text-gray-400\">\n                                  {formatDistance(new Date(c.last_contacted_at), new Date(), { addSuffix: true })}\n                                </span>\n                              </div>\n                            ) : '-'\n                          },\n                          {\n                            id: 'notes',\n                            label: 'Notes',\n                            field: 'notes',\n                            render: (c: Contact) => (\n                              <div className=\"max-w-xs truncate\">{c.notes || '-'}</div>\n                            )\n                          },\n                          { id: 'referral_source', label: 'Referral Source', field: 'referral_source', render: (c: Contact) => c.referral_source || '-' },\n                          { id: 'relationship_status', label: 'Relationship Status', field: 'relationship_status', render: (c: Contact) => c.relationship_status || '-' },\n                          {\n                            id: 'source',\n                            label: 'Source',\n                            field: 'source',\n                            render: (c: Contact) => c.source ? (\n                              <Badge variant=\"secondary\" className=\"capitalize\">\n                                {c.source.replace('_', ' ')}\n                              </Badge>\n                            ) : '-'\n                          },\n                          {\n                            id: 'tags',\n                            label: 'Tags',\n                            field: 'tags',\n                            render: (c: Contact) => c.tags && c.tags.length > 0 ? (\n                              <div className=\"flex flex-wrap gap-1\">\n                                {c.tags.map((tag, i) => (\n                                  <Badge key={i} variant=\"outline\" className=\"text-xs\">\n                                    {tag.name}\n                                  </Badge>\n                                ))}\n                              </div>\n                            ) : '-'\n                          },\n                          { id: 'website', label: 'Website', field: 'website', render: (c: Contact) => c.website || '-' },\n                          { id: 'wellness_status', label: 'Wellness Status', field: 'wellness_status', render: (c: Contact) => c.wellness_status || '-' }\n                        ].find(col => col.id === columnId);\n                        \n                        if (!columnDef) return null;\n                        \n                        return (\n                          <td key={columnId} className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                            {columnDef.render(contact)}\n                          </td>\n                        );\n                      })}\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td\n                  colSpan={visibleColumns.length + 2}\n                  className=\"px-6 py-10 text-center text-gray-500\"\n                >\n                  <div className=\"flex flex-col items-center justify-center space-y-3\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-10 w-10 text-gray-400\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={1.5}\n                        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                      />\n                    </svg>\n                    <p className=\"font-medium\">No contacts found</p>\n                    <p className=\"text-sm\">\n                      Try adjusting your search or filters.\n                    </p>\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Bulk Delete Dialog */}\n      <Dialog open={isBulkDeleteDialogOpen} onOpenChange={setIsBulkDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Selected Contacts</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete {selectedContactIds.length} selected contacts? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsBulkDeleteDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleBulkDelete}>\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Bulk Enrich Dialog */}\n      <Dialog open={isEnrichDialogOpen} onOpenChange={setIsEnrichDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Enrich Selected Contacts</DialogTitle>\n            <DialogDescription>\n              This will use AI to enrich {selectedContactIds.length} selected contacts with additional information.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsEnrichDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleBulkEnrich} className=\"bg-teal-600 hover:bg-teal-700\">\n              Enrich Contacts\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Add to Group Dialog */}\n      <Dialog open={isAddToGroupDialogOpen} onOpenChange={handleAddToGroupDialogOpenChange}>\n        <DialogContent className=\"sm:max-w-[425px]\">\n          <DialogHeader>\n            <DialogTitle>Add to Group</DialogTitle>\n            <DialogDescription>\n              Select a group to add {selectedContactIds.length} selected contact{selectedContactIds.length !== 1 ? 's' : ''} to.\n            </DialogDescription>\n          </DialogHeader>\n          \n          {/* Display errors from queries or mutations */}\n          {groupsError && (\n            <p className=\"text-sm text-red-600 mt-2\">\n              Failed to load groups: {groupsError.message}\n            </p>\n          )}\n          {addToGroupMutation.error && (\n            <p className=\"text-sm text-red-600 mt-2\">\n              {addToGroupMutation.error.message}\n            </p>\n          )}\n          \n          <div className=\"py-4\">\n            <Select\n              value={selectedGroupId}\n              onValueChange={setSelectedGroupId}\n              disabled={isLoadingGroups || addToGroupMutation.isPending}\n            >\n              <SelectTrigger>\n                {isLoadingGroups ? (\n                  <div className=\"flex items-center gap-2\">\n                    <div className=\"h-3 w-3 animate-spin rounded-full border border-gray-300 border-t-transparent\"></div>\n                    <span className=\"text-gray-400\">Loading groups...</span>\n                  </div>\n                ) : (\n                  <SelectValue placeholder=\"Select a group\" />\n                )}\n              </SelectTrigger>\n              <SelectContent>\n                {!allGroups || allGroups.length === 0 ? (\n                  <SelectItem value=\"no-groups\" disabled>\n                    {groupsError\n                      ? 'Error loading groups'\n                      : 'No available groups'}\n                  </SelectItem>\n                ) : (\n                  allGroups.map((group: Group) => (\n                    <SelectItem key={group.id} value={group.id}>\n                      <div className=\"flex items-center\">\n                        <div\n                          className={cn(\n                            'h-3 w-3 rounded-full mr-2',\n                            group.color ? `bg-[${group.color}]` : 'bg-blue-500'\n                          )}\n                        />\n                        {group.name}\n                      </div>\n                    </SelectItem>\n                  ))\n                )}\n              </SelectContent>\n            </Select>\n          </div>\n          \n          <DialogFooter>\n            <Button\n              variant=\"secondary\"\n              onClick={() => handleAddToGroupDialogOpenChange(false)}\n              disabled={addToGroupMutation.isPending}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleAddToGroup}\n              disabled={\n                isLoadingGroups ||\n                !selectedGroupId ||\n                addToGroupMutation.isPending\n              }\n            >\n              {addToGroupMutation.isPending ? 'Adding...' : 'Add to Group'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/ContactsTableClient.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setVisibleColumns' is assigned a value but never used.","line":14,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsLoading' is assigned a value but never used.","line":17,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":17,"endColumn":33}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { ContactsTable, Contact } from '@/app/contacts/ContactsTable';\n\ninterface ContactsTableClientProps {\n  initialContacts: Contact[];\n}\n\nexport default function ContactsTableClient({ initialContacts }: ContactsTableClientProps) {\n  // State for sorting and visible columns\n  const [sortField, setSortField] = useState<string>('full_name');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  const [visibleColumns, setVisibleColumns] = useState<string[]>([\n    'name', 'notes', 'phone', 'company_name', 'job_title', 'last_contacted_at'\n  ]);\n  const [isLoading, setIsLoading] = useState(false);\n\n  // Handler for sort changes\n  const handleSortChange = (field: string) => {\n    if (sortField === field) {\n      // Toggle direction if clicking the same field\n      setSortDirection(sortDirection === 'asc' ? 'desc' : 'asc');\n    } else {\n      // Set new field and default to ascending\n      setSortField(field);\n      setSortDirection('asc');\n    }\n  };\n\n  // Handlers for contact actions\n  const handleEditContact = (contactId: string) => {\n    // This would typically navigate to an edit page or open a modal\n    console.log(`Edit contact: ${contactId}`);\n  };\n\n  const handleDeleteContact = (contactId: string) => {\n    // This would typically show a confirmation dialog and then delete\n    console.log(`Delete contact: ${contactId}`);\n  };\n\n  return (\n    <ContactsTable\n      contacts={initialContacts}\n      isLoading={isLoading}\n      visibleColumns={visibleColumns}\n      sortField={sortField}\n      sortDirection={sortDirection}\n      onSortChange={handleSortChange}\n      onEditContact={handleEditContact}\n      onDeleteContact={handleDeleteContact}\n    />\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/EnhancedContactList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":25,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":26,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'UserPlus' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'FileText' is defined but never used.","line":34,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":35,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":35,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ContactGroupManager' is defined but never used.","line":43,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'GroupsProvider' is defined but never used.","line":43,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuRadioGroup' is defined but never used.","line":54,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuRadioItem' is defined but never used.","line":55,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuSeparator' is defined but never used.","line":56,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DropdownMenuLabel' is defined but never used.","line":57,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tooltip' is defined but never used.","line":62,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":10},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipContent' is defined but never used.","line":63,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipProvider' is defined but never used.","line":64,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":64,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TooltipTrigger' is defined but never used.","line":65,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Input' is defined but never used.","line":76,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":76,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isDeleteMutationLoading' is defined but never used.","line":139,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":139,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isSaveMutationLoading' is defined but never used.","line":140,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedGroupId' is defined but never used.","line":142,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'allGroups' is assigned a value but never used.","line":164,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoadingGroups' is assigned a value but never used.","line":164,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":164,"endColumn":59},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'selectedContactIds'. Either exclude it or remove the dependency array.","line":335,"column":6,"nodeType":"ArrayExpression","endLine":335,"endColumn":26,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[9696,9716],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":346,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":346,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10174,10177],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10174,10177],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":23,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useCallback, useRef, useEffect } from 'react';\nimport {\n  format,\n  formatDistance,\n  subDays,\n  startOfDay,\n  startOfWeek,\n  endOfWeek,\n  startOfMonth,\n  endOfMonth,\n  isAfter,\n  isBefore,\n  parseISO,\n} from 'date-fns';\nimport {\n  ArrowDown,\n  ArrowUp,\n  Mail,\n  MessageSquareText,\n  Phone,\n  Sparkles,\n  ChevronDown,\n  Calendar,\n  Clock,\n  Check,\n  Download,\n  MoreHorizontal,\n  Trash2,\n  Edit,\n  UserPlus,\n  Tag,\n  FileText,\n  Filter,\n  X,\n} from 'lucide-react';\nimport Link from 'next/link';\nimport React from 'react';\n// Removed virtual scrolling for now as it requires additional package\n// import { useVirtualizer } from '@tanstack/react-virtual';\n\nimport { ContactGroupManager, GroupsProvider } from './ContactGroupManager';\n\nimport { AvatarImage } from '@/components/ui/avatar-image';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n  DropdownMenuRadioGroup,\n  DropdownMenuRadioItem,\n  DropdownMenuSeparator,\n  DropdownMenuLabel,\n} from '@/components/ui/dropdown-menu';\nimport { api } from '@/lib/trpc';\nimport { cn } from '@/lib/utils';\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from '@/components/ui/tooltip';\nimport { Separator } from '@/components/ui/separator';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\n\nexport interface Contact {\n  id: string;\n  full_name: string;\n  email?: string | null;\n  phone?: string | null;\n  company_name?: string | null;\n  job_title?: string | null;\n  profile_image_url?: string | null;\n  source?: string | null;\n  notes?: string | null;\n  last_contacted_at?: string | null;\n  enrichment_status?: string | null;\n  enriched_data?: unknown | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  tags?: Array<{ id: string; name: string }> | null;\n}\n\n// Define date filter options\nexport type DateFilterPeriod =\n  | 'today'\n  | 'this_week'\n  | 'last_week'\n  | 'this_month'\n  | 'last_month'\n  | 'older'\n  | 'all';\n\n// Define source types for filtering\nexport type SourceOption =\n  | 'conference'\n  | 'referral'\n  | 'website'\n  | 'event'\n  | 'social_media'\n  | 'cold_outreach'\n  | 'other';\n\ninterface EnhancedContactListProps {\n  contacts: Contact[];\n  onEditClick: (contact: Contact) => void;\n  onDeleteClick: (contactId: string) => void;\n  isDeleteMutationLoading: boolean;\n  isSaveMutationLoading: boolean;\n  searchQuery: string;\n  selectedGroupId: string;\n  visibleColumns?: string[];\n  sortField?: string;\n  sortDirection?: 'asc' | 'desc';\n  onSortChange?: (field: string) => void;\n  dateFilterPeriod?: DateFilterPeriod;\n  onDateFilterChange?: (period: DateFilterPeriod) => void;\n  selectedSourceFilters?: SourceOption[];\n  onSourceFilterChange?: (sources: SourceOption[]) => void;\n}\n\nexport function EnhancedContactList({\n  contacts,\n  onEditClick,\n  onDeleteClick,\n  isDeleteMutationLoading,\n  isSaveMutationLoading,\n  searchQuery,\n  selectedGroupId,\n  visibleColumns = ['name', 'last_contacted', 'notes', 'source'],\n  sortField = 'name',\n  sortDirection = 'asc',\n  onSortChange = () => {},\n  dateFilterPeriod = 'all',\n  onDateFilterChange = () => {},\n  selectedSourceFilters = [],\n  onSourceFilterChange = () => {},\n}: EnhancedContactListProps) {\n  // State for selected contacts (for bulk actions)\n  const [selectedContactIds, setSelectedContactIds] = useState<string[]>([]);\n  const [isAllSelected, setIsAllSelected] = useState(false);\n  const [isBulkDeleteDialogOpen, setIsBulkDeleteDialogOpen] = useState(false);\n  const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n  const [exportFormat, setExportFormat] = useState<'csv' | 'json'>('csv');\n  const [exportFields, setExportFields] = useState<string[]>(['full_name', 'email', 'phone']);\n  \n  // Virtualization container ref\n  const parentRef = useRef<HTMLDivElement>(null);\n\n  // Query groups for contact group management\n  const { data: allGroups = [], isLoading: isLoadingGroups } =\n    api.groups.list.useQuery(undefined, {\n      staleTime: 60000, // Cache for 60 seconds\n      refetchOnWindowFocus: false, // Don't refetch on window focus\n    });\n\n  // Get contacts filtered by date period\n  const getFilteredContactsByDate = (\n    contacts: Contact[],\n    period: DateFilterPeriod\n  ): Contact[] => {\n    if (period === 'all') return contacts;\n\n    const today = new Date();\n    const startOfToday = startOfDay(today);\n\n    return contacts.filter((contact) => {\n      if (!contact.last_contacted_at) {\n        // If no last_contacted_at date and filtering for 'older', include it\n        return period === 'older';\n      }\n\n      const contactDate = parseISO(contact.last_contacted_at);\n\n      switch (period) {\n        case 'today':\n          return isAfter(contactDate, startOfToday);\n\n        case 'this_week': {\n          const weekStart = startOfWeek(today, { weekStartsOn: 1 }); // Monday as week start\n          const weekEnd = endOfWeek(today, { weekStartsOn: 1 });\n          return (\n            isAfter(contactDate, weekStart) && isBefore(contactDate, weekEnd)\n          );\n        }\n\n        case 'last_week': {\n          const lastWeekStart = startOfWeek(subDays(today, 7), {\n            weekStartsOn: 1,\n          });\n          const lastWeekEnd = endOfWeek(subDays(today, 7), { weekStartsOn: 1 });\n          return (\n            isAfter(contactDate, lastWeekStart) &&\n            isBefore(contactDate, lastWeekEnd)\n          );\n        }\n\n        case 'this_month': {\n          const monthStart = startOfMonth(today);\n          const monthEnd = endOfMonth(today);\n          return (\n            isAfter(contactDate, monthStart) && isBefore(contactDate, monthEnd)\n          );\n        }\n\n        case 'last_month': {\n          const lastMonthStart = startOfMonth(subDays(today, 30));\n          const lastMonthEnd = endOfMonth(subDays(today, 30));\n          return (\n            isAfter(contactDate, lastMonthStart) &&\n            isBefore(contactDate, lastMonthEnd)\n          );\n        }\n\n        case 'older':\n          // More than a month ago\n          return isBefore(contactDate, startOfMonth(subDays(today, 30)));\n\n        default:\n          return true;\n      }\n    });\n  };\n\n  // Available source options for filtering\n  const availableSourceOptions: SourceOption[] = [\n    'conference',\n    'referral',\n    'website',\n    'event',\n    'social_media',\n    'cold_outreach',\n    'other',\n  ];\n\n  // First filter by date period\n  const dateFilteredContacts = getFilteredContactsByDate(\n    contacts,\n    dateFilterPeriod\n  );\n\n  // Then filter by source if any source filters are selected\n  const sourceFilteredContacts =\n    selectedSourceFilters.length > 0\n      ? dateFilteredContacts.filter((contact) => {\n          // If contact has no source and we're filtering, exclude it\n          if (!contact.source) return false;\n\n          // Keep contact if its source is in the selected sources\n          return selectedSourceFilters.includes(contact.source as SourceOption);\n        })\n      : dateFilteredContacts;\n\n  // Then filter by search query\n  const filteredContacts = sourceFilteredContacts.filter((contact) => {\n    // Apply search filter\n    if (searchQuery.trim() === '') return true;\n\n    const searchLower = searchQuery.toLowerCase();\n    const fullName = (contact.full_name || '').toLowerCase();\n    const email = (contact.email || '').toLowerCase();\n    const phone = (contact.phone || '').toLowerCase();\n    const company = (contact.company_name || '').toLowerCase();\n    const notes = (contact.notes || '').toLowerCase();\n    const source = (contact.source || '').toLowerCase();\n\n    return (\n      fullName.includes(searchLower) ||\n      email.includes(searchLower) ||\n      phone.includes(searchLower) ||\n      company.includes(searchLower) ||\n      notes.includes(searchLower) ||\n      source.includes(searchLower)\n    );\n  });\n\n  // Set up virtualization for the table rows\n  // Temporarily removed virtualization\n  // const rowVirtualizer = useVirtualizer({\n  //   count: filteredContacts.length,\n  //   getScrollElement: () => parentRef.current,\n  //   estimateSize: () => 72, // Estimated row height\n  //   overscan: 10,\n  // });\n\n  // Handle select all checkbox\n  const handleSelectAll = useCallback(() => {\n    if (isAllSelected || selectedContactIds.length === filteredContacts.length) {\n      setSelectedContactIds([]);\n      setIsAllSelected(false);\n    } else {\n      setSelectedContactIds(filteredContacts.map(contact => contact.id));\n      setIsAllSelected(true);\n    }\n  }, [filteredContacts, isAllSelected, selectedContactIds.length]);\n\n  // Handle individual row selection\n  const handleSelectRow = useCallback((contactId: string, isSelected: boolean) => {\n    setSelectedContactIds(prev => {\n      if (isSelected) {\n        return [...prev, contactId];\n      } else {\n        return prev.filter(id => id !== contactId);\n      }\n    });\n  }, []);\n\n  // Update isAllSelected when selectedContactIds changes\n  useEffect(() => {\n    setIsAllSelected(\n      filteredContacts.length > 0 && \n      selectedContactIds.length === filteredContacts.length\n    );\n  }, [selectedContactIds, filteredContacts]);\n\n  // Handle bulk delete\n  const handleBulkDelete = useCallback(() => {\n    // Here you would implement the actual bulk delete functionality\n    // For now, we'll just close the dialog\n    setIsBulkDeleteDialogOpen(false);\n    setSelectedContactIds([]);\n  }, [selectedContactIds]);\n\n  // Handle export\n  const handleExport = useCallback(() => {\n    // Get selected contacts or all filtered contacts if none selected\n    const contactsToExport = selectedContactIds.length > 0\n      ? filteredContacts.filter(contact => selectedContactIds.includes(contact.id))\n      : filteredContacts;\n    \n    // Create export data based on selected fields\n    const exportData = contactsToExport.map(contact => {\n      const exportItem: Record<string, any> = {};\n      exportFields.forEach(field => {\n        exportItem[field] = contact[field as keyof Contact] || '';\n      });\n      return exportItem;\n    });\n    \n    // Convert to selected format and download\n    let dataStr = '';\n    let filename = '';\n    \n    if (exportFormat === 'csv') {\n      // Create CSV header\n      const header = exportFields.join(',');\n      // Create CSV rows\n      const rows = exportData.map(item => \n        exportFields.map(field => \n          typeof item[field] === 'string' ? `\"${item[field].replace(/\"/g, '\"\"')}\"` : item[field]\n        ).join(',')\n      );\n      dataStr = [header, ...rows].join('\\n');\n      filename = 'contacts-export.csv';\n    } else {\n      // JSON format\n      dataStr = JSON.stringify(exportData, null, 2);\n      filename = 'contacts-export.json';\n    }\n    \n    // Create download link\n    const blob = new Blob([dataStr], { type: exportFormat === 'csv' ? 'text/csv' : 'application/json' });\n    const url = URL.createObjectURL(blob);\n    const link = document.createElement('a');\n    link.setAttribute('href', url);\n    link.setAttribute('download', filename);\n    link.style.visibility = 'hidden';\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n    \n    setIsExportDialogOpen(false);\n  }, [exportFormat, exportFields, filteredContacts, selectedContactIds]);\n\n  // Available export fields\n  const availableExportFields = [\n    { id: 'full_name', label: 'Full Name' },\n    { id: 'email', label: 'Email' },\n    { id: 'phone', label: 'Phone' },\n    { id: 'company_name', label: 'Company' },\n    { id: 'job_title', label: 'Job Title' },\n    { id: 'source', label: 'Source' },\n    { id: 'notes', label: 'Notes' },\n    { id: 'last_contacted_at', label: 'Last Contacted' },\n    { id: 'created_at', label: 'Created Date' },\n  ];\n\n  // Toggle export field selection\n  const toggleExportField = (fieldId: string) => {\n    setExportFields(prev => \n      prev.includes(fieldId) \n        ? prev.filter(id => id !== fieldId)\n        : [...prev, fieldId]\n    );\n  };\n\n  return (\n    <div className=\"space-y-4\">\n      {/* Bulk Actions Toolbar */}\n      {selectedContactIds.length > 0 && (\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-2 flex items-center justify-between\">\n          <div className=\"flex items-center\">\n            <span className=\"text-blue-700 font-medium ml-2\">\n              {selectedContactIds.length} contact{selectedContactIds.length !== 1 ? 's' : ''} selected\n            </span>\n          </div>\n          <div className=\"flex gap-2\">\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setSelectedContactIds([])}\n            >\n              <X className=\"h-4 w-4 mr-1\" />\n              Clear\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsExportDialogOpen(true)}\n            >\n              <Download className=\"h-4 w-4 mr-1\" />\n              Export\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n            >\n              <Tag className=\"h-4 w-4 mr-1\" />\n              Add to Group\n            </Button>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={() => setIsBulkDeleteDialogOpen(true)}\n              className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\n            >\n              <Trash2 className=\"h-4 w-4 mr-1\" />\n              Delete\n            </Button>\n          </div>\n        </div>\n      )}\n\n      {/* Table Container */}\n      <div\n        ref={parentRef}\n        className=\"overflow-auto rounded-lg border border-gray-200\"\n        style={{ height: '600px' }}\n      >\n        <table className=\"min-w-full divide-y divide-gray-200\">\n          <thead className=\"bg-gradient-to-r from-teal-50 to-teal-100 sticky top-0 z-10\">\n            <tr>\n              {/* Selection Column */}\n              <th className=\"px-3 py-3 text-left\">\n                <Checkbox \n                  checked={isAllSelected}\n                  onCheckedChange={handleSelectAll}\n                  aria-label=\"Select all contacts\"\n                />\n              </th>\n\n              {/* Name Column - Always visible */}\n              <th\n                scope=\"col\"\n                className=\"px-6 py-3 text-left text-xs font-semibold bg-gradient-to-r from-teal-50 to-teal-100 text-teal-800 uppercase tracking-wider\"\n              >\n                <div\n                  className=\"flex items-center cursor-pointer\"\n                  onClick={() => onSortChange && onSortChange('name')}\n                >\n                  Name\n                  {sortField === 'name' && (\n                    <span className=\"ml-1 flex items-center\">\n                      {sortDirection === 'asc' ? (\n                        <ArrowUp className=\"h-3 w-3\" />\n                      ) : (\n                        <ArrowDown className=\"h-3 w-3\" />\n                      )}\n                    </span>\n                  )}\n                  {sortField !== 'name' && (\n                    <ChevronDown className=\"h-3 w-3 ml-1 text-gray-400\" />\n                  )}\n                </div>\n              </th>\n\n              {/* Last Contact Column */}\n              {visibleColumns.includes('last_contacted') && (\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <div className=\"flex items-center cursor-pointer\">\n                        <span>Last Contacted</span>\n                        <span className=\"ml-1 flex items-center\">\n                          <ChevronDown className=\"h-3 w-3 ml-1\" />\n                        </span>\n                      </div>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"start\" className=\"w-48\">\n                      <DropdownMenuItem onClick={() => onDateFilterChange('all')}>\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>All Contacts</span>\n                          {dateFilterPeriod === 'all' && (\n                            <Check className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => onDateFilterChange('today')}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>Today</span>\n                          {dateFilterPeriod === 'today' && (\n                            <Check className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => onDateFilterChange('this_week')}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>This Week</span>\n                          {dateFilterPeriod === 'this_week' && (\n                            <Check className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => onDateFilterChange('last_week')}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>Last Week</span>\n                          {dateFilterPeriod === 'last_week' && (\n                            <Check className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => onDateFilterChange('this_month')}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>This Month</span>\n                          {dateFilterPeriod === 'this_month' && (\n                            <Check className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => onDateFilterChange('last_month')}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>Last Month</span>\n                          {dateFilterPeriod === 'last_month' && (\n                            <Check className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => onDateFilterChange('older')}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>More than a Month</span>\n                          {dateFilterPeriod === 'older' && (\n                            <Check className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </th>\n              )}\n\n              {/* Notes Column */}\n              {visibleColumns.includes('notes') && (\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  Notes\n                </th>\n              )}\n\n              {/* Source Column */}\n              {visibleColumns.includes('source') && (\n                <th\n                  scope=\"col\"\n                  className=\"px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider\"\n                >\n                  <DropdownMenu>\n                    <DropdownMenuTrigger asChild>\n                      <div className=\"flex items-center cursor-pointer\">\n                        <span>Source</span>\n                        <span className=\"ml-1 flex items-center\">\n                          {sortField === 'source' ? (\n                            sortDirection === 'asc' ? (\n                              <ArrowUp className=\"h-3 w-3\" />\n                            ) : (\n                              <ArrowDown className=\"h-3 w-3\" />\n                            )\n                          ) : (\n                            <ChevronDown className=\"h-3 w-3 ml-1\" />\n                          )}\n                        </span>\n                      </div>\n                    </DropdownMenuTrigger>\n                    <DropdownMenuContent align=\"start\" className=\"w-52\">\n                      {/* Sorting options */}\n                      <div className=\"px-2 py-1.5 text-xs font-semibold\">\n                        Sort By\n                      </div>\n                      <DropdownMenuItem onClick={() => onSortChange('source')}>\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>A-Z</span>\n                          {sortField === 'source' && sortDirection === 'asc' && (\n                            <ArrowUp className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n                      <DropdownMenuItem\n                        onClick={() => {\n                          if (sortField === 'source' && sortDirection === 'asc') {\n                            onSortChange('source'); // This will toggle to desc\n                          } else {\n                            onSortChange('source');\n                            if (sortDirection === 'asc') onSortChange('source'); // Toggle to desc\n                          }\n                        }}\n                      >\n                        <div className=\"flex items-center justify-between w-full\">\n                          <span>Z-A</span>\n                          {sortField === 'source' && sortDirection === 'desc' && (\n                            <ArrowDown className=\"h-3 w-3\" />\n                          )}\n                        </div>\n                      </DropdownMenuItem>\n\n                      <div className=\"h-px bg-slate-200 my-1\" />\n\n                      {/* Filter options */}\n                      <div className=\"px-2 py-1.5 text-xs font-semibold\">\n                        Filter By\n                      </div>\n\n                      {availableSourceOptions.map((source) => (\n                        <DropdownMenuItem\n                          key={source}\n                          onSelect={(e) => {\n                            e.preventDefault();\n                            const isSelected =\n                              selectedSourceFilters.includes(source);\n                            const updatedSources = isSelected\n                              ? selectedSourceFilters.filter((s) => s !== source)\n                              : [...selectedSourceFilters, source];\n                            onSourceFilterChange(updatedSources);\n                          }}\n                        >\n                          <div className=\"flex items-center space-x-2\">\n                            <div\n                              className={`w-4 h-4 border rounded flex items-center justify-center ${selectedSourceFilters.includes(source) ? 'bg-primary border-primary' : 'border-gray-300'}`}\n                            >\n                              {selectedSourceFilters.includes(source) && (\n                                <Check className=\"h-3 w-3 text-white\" />\n                              )}\n                            </div>\n                            <span className=\"capitalize\">\n                              {source.replace('_', ' ')}\n                            </span>\n                          </div>\n                        </DropdownMenuItem>\n                      ))}\n\n                      {selectedSourceFilters.length > 0 && (\n                        <>\n                          <div className=\"h-px bg-slate-200 my-1\" />\n                          <DropdownMenuItem\n                            onSelect={(e) => {\n                              e.preventDefault();\n                              onSourceFilterChange([]);\n                            }}\n                          >\n                            <div className=\"flex items-center justify-center w-full text-xs text-red-500 font-medium\">\n                              Clear Filters\n                            </div>\n                          </DropdownMenuItem>\n                        </>\n                      )}\n                    </DropdownMenuContent>\n                  </DropdownMenu>\n                </th>\n              )}\n\n              {/* Actions Column - Always visible */}\n              <th\n                scope=\"col\"\n                className=\"px-6 py-3 text-center text-xs font-medium text-gray-500 uppercase tracking-wider\"\n              >\n                Actions\n              </th>\n            </tr>\n          </thead>\n          <tbody className=\"bg-white divide-y divide-gray-200\">\n            {filteredContacts.length > 0 ? (\n              filteredContacts.map((contact) => {\n                const isSelected = selectedContactIds.includes(contact.id);\n                \n                return (\n                  <tr\n                    key={contact.id}\n                    className={cn(\n                      \"hover:bg-gray-50\",\n                      isSelected ? \"bg-blue-50\" : \"\"\n                    )}\n                  >\n                      {/* Selection Column */}\n                      <td className=\"px-3 py-4\">\n                        <Checkbox \n                          checked={isSelected}\n                          onCheckedChange={(checked) => \n                            handleSelectRow(contact.id, checked === true)\n                          }\n                          aria-label={`Select ${contact.full_name}`}\n                        />\n                      </td>\n                      \n                      <td className=\"px-6 py-4 whitespace-nowrap\">\n                        <div className=\"flex items-center\">\n                          <AvatarImage\n                            src={contact.profile_image_url || null}\n                            alt={contact.full_name}\n                            size=\"md\"\n                          />\n                          <div className=\"ml-4\">\n                            <Link\n                              href={`/contacts/${contact.id}`}\n                              className=\"font-medium text-teal-600 hover:underline\"\n                            >\n                              {contact.full_name}\n                            </Link>\n                            {contact.email && (\n                              <div className=\"text-xs text-gray-500\">\n                                {contact.email}\n                              </div>\n                            )}\n                          </div>\n                        </div>\n                      </td>\n\n                      {/* Last Contact Column */}\n                      {visibleColumns.includes('last_contacted') && (\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {contact.last_contacted_at ? (\n                            <div className=\"flex flex-col\">\n                              <span>\n                                {new Date(contact.last_contacted_at).toLocaleDateString()}\n                              </span>\n                              <span className=\"text-xs text-gray-400\">\n                                {formatDistance(\n                                  new Date(contact.last_contacted_at),\n                                  new Date(),\n                                  { addSuffix: true }\n                                )}\n                              </span>\n                            </div>\n                          ) : (\n                            '-'\n                          )}\n                        </td>\n                      )}\n\n                      {/* Notes Column */}\n                      {visibleColumns.includes('notes') && (\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          <div className=\"max-w-xs truncate\">\n                            {contact.notes || '-'}\n                          </div>\n                        </td>\n                      )}\n\n                      {/* Source Column */}\n                      {visibleColumns.includes('source') && (\n                        <td className=\"px-6 py-4 whitespace-nowrap text-sm text-gray-500\">\n                          {contact.source ? (\n                            <Badge variant=\"outline\" className=\"capitalize\">\n                              {contact.source.replace('_', ' ')}\n                            </Badge>\n                          ) : (\n                            '-'\n                          )}\n                        </td>\n                      )}\n\n                      {/* Actions Column */}\n                    <td className=\"px-6 py-4 whitespace-nowrap text-center\">\n                      <div className=\"flex justify-center space-x-3\">\n                        <button\n                          className=\"text-blue-600 hover:text-blue-800\"\n                          aria-label=\"Email contact\"\n                          title=\"Email contact\"\n                        >\n                          <Mail className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <button\n                          className=\"text-green-600 hover:text-green-800\"\n                          aria-label=\"Call contact\"\n                          title=\"Call contact\"\n                        >\n                          <Phone className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <button\n                          className=\"text-purple-600 hover:text-purple-800\"\n                          aria-label=\"Message contact\"\n                          title=\"Message contact\"\n                        >\n                          <MessageSquareText className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <button\n                          className=\"text-amber-600 hover:text-amber-800\"\n                          aria-label=\"AI assistant\"\n                          title=\"AI assistant\"\n                        >\n                          <Sparkles className=\"h-4 w-4\" />\n                        </button>\n                        \n                        <DropdownMenu>\n                          <DropdownMenuTrigger asChild>\n                            <button\n                              className=\"text-gray-600 hover:text-gray-800\"\n                              aria-label=\"More options\"\n                            >\n                              <MoreHorizontal className=\"h-4 w-4\" />\n                            </button>\n                          </DropdownMenuTrigger>\n                          <DropdownMenuContent align=\"end\">\n                            <DropdownMenuItem onClick={() => onEditClick(contact)}>\n                              <Edit className=\"h-4 w-4 mr-2\" />\n                              Edit\n                            </DropdownMenuItem>\n                            <DropdownMenuItem onClick={() => onDeleteClick(contact.id)}>\n                              <Trash2 className=\"h-4 w-4 mr-2\" />\n                              Delete\n                            </DropdownMenuItem>\n                          </DropdownMenuContent>\n                        </DropdownMenu>\n                      </div>\n                    </td>\n                  </tr>\n                );\n              })\n            ) : (\n              <tr>\n                <td\n                  colSpan={visibleColumns.length + 2}\n                  className=\"px-6 py-10 text-center text-gray-500\"\n                >\n                  <div className=\"flex flex-col items-center justify-center space-y-3\">\n                    <svg\n                      xmlns=\"http://www.w3.org/2000/svg\"\n                      className=\"h-10 w-10 text-gray-400\"\n                      fill=\"none\"\n                      viewBox=\"0 0 24 24\"\n                      stroke=\"currentColor\"\n                    >\n                      <path\n                        strokeLinecap=\"round\"\n                        strokeLinejoin=\"round\"\n                        strokeWidth={1.5}\n                        d=\"M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z\"\n                      />\n                    </svg>\n                    <p className=\"font-medium\">No contacts found</p>\n                    <p className=\"text-sm\">\n                      {selectedSourceFilters.length > 0 &&\n                        'Try adjusting your source filters.'}\n                      {dateFilterPeriod !== 'all' &&\n                        ' Try a different date range.'}\n                      {searchQuery && ' Try a different search term.'}\n                      {!selectedSourceFilters.length &&\n                        dateFilterPeriod === 'all' &&\n                        !searchQuery &&\n                        'No contacts available in this view.'}\n                    </p>\n                  </div>\n                </td>\n              </tr>\n            )}\n          </tbody>\n        </table>\n      </div>\n      \n      {/* Bulk Delete Dialog */}\n      <Dialog open={isBulkDeleteDialogOpen} onOpenChange={setIsBulkDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Selected Contacts</DialogTitle>\n            <DialogDescription>\n              Are you sure you want to delete {selectedContactIds.length} selected contacts? This action cannot be undone.\n            </DialogDescription>\n          </DialogHeader>\n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsBulkDeleteDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button variant=\"destructive\" onClick={handleBulkDelete}>\n              Delete\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n      \n      {/* Export Dialog */}\n      <Dialog open={isExportDialogOpen} onOpenChange={setIsExportDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Export Contacts</DialogTitle>\n            <DialogDescription>\n              Choose export format and fields to include\n            </DialogDescription>\n          </DialogHeader>\n          \n          <div className=\"space-y-4 py-4\">\n            <div className=\"space-y-2\">\n              <Label>Export Format</Label>\n              <div className=\"flex gap-4\">\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"csv-format\"\n                    checked={exportFormat === 'csv'}\n                    onCheckedChange={() => setExportFormat('csv')}\n                  />\n                  <Label htmlFor=\"csv-format\">CSV</Label>\n                </div>\n                <div className=\"flex items-center space-x-2\">\n                  <Checkbox\n                    id=\"json-format\"\n                    checked={exportFormat === 'json'}\n                    onCheckedChange={() => setExportFormat('json')}\n                  />\n                  <Label htmlFor=\"json-format\">JSON</Label>\n                </div>\n              </div>\n            </div>\n            \n            <Separator />\n            \n            <div className=\"space-y-2\">\n              <Label>Fields to Export</Label>\n              <div className=\"grid grid-cols-2 gap-2\">\n                {availableExportFields.map(field => (\n                  <div key={field.id} className=\"flex items-center space-x-2\">\n                    <Checkbox\n                      id={`field-${field.id}`}\n                      checked={exportFields.includes(field.id)}\n                      onCheckedChange={() => toggleExportField(field.id)}\n                    />\n                    <Label htmlFor={`field-${field.id}`}>{field.label}</Label>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n          \n          <DialogFooter>\n            <Button variant=\"outline\" onClick={() => setIsExportDialogOpen(false)}>\n              Cancel\n            </Button>\n            <Button onClick={handleExport}>\n              Export {selectedContactIds.length > 0 ? selectedContactIds.length : 'All'} Contacts\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/[contactId]/ContactDetailView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabValue' is defined but never used.","line":34,"column":6,"nodeType":null,"messageId":"unusedVar","endLine":34,"endColumn":14},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":55,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4118,4162],"text":"Click &quot;Edit Notes\" to add important details."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4118,4162],"text":"Click &ldquo;Edit Notes\" to add important details."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4118,4162],"text":"Click &#34;Edit Notes\" to add important details."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4118,4162],"text":"Click &rdquo;Edit Notes\" to add important details."},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":109,"column":66,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[4118,4162],"text":"Click \"Edit Notes&quot; to add important details."},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[4118,4162],"text":"Click \"Edit Notes&ldquo; to add important details."},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[4118,4162],"text":"Click \"Edit Notes&#34; to add important details."},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[4118,4162],"text":"Click \"Edit Notes&rdquo; to add important details."},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\n// React/Next.js hooks\nimport { useRouter } from 'next/navigation';\nimport { useState, useTransition } from 'react';\n\n// Lucide React Icons\nimport {\n  AlertCircle, ArrowLeft, Briefcase, Building, Calendar, CheckCircle, Clock,\n  Edit, ExternalLink, Globe, Home, Link as LinkIcon, Mail, MapPin, Phone,\n  Plus, Sparkles, Tag, Trash2, User\n} from 'lucide-react';\n\n// Shadcn/ui and local components\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { AvatarImage as CustomAvatarImage } from '@/components/ui/avatar-image';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog, DialogContent, DialogDescription, DialogFooter,\n  DialogHeader, DialogTitle\n} from '@/components/ui/dialog';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { Textarea } from '@/components/ui/textarea'; // For inline notes\nimport { toast } from 'sonner';\n\n// Utilities and API\nimport { formatDateTime } from '@/lib/dateUtils';\nimport { api } from '@/lib/trpc';\nimport { ContactGroupsSection } from './ContactGroupsSection';\nimport { ContactTimeline } from './ContactTimeline';\n\nconst TABS = { NOTES: 'notes', TASKS: 'tasks', TIMELINE: 'timeline' } as const;\ntype TabValue = (typeof TABS)[keyof typeof TABS];\n\n/**\n * NotesEditSection Component\n * A self-contained component for inline note editing, using 'sonner' for notifications.\n */\nfunction NotesEditSection({ contactId, initialNotes }: { contactId: string; initialNotes: string | null }) {\n  const utils = api.useUtils();\n  const [isEditing, setIsEditing] = useState(false);\n  const [notes, setNotes] = useState(initialNotes || '');\n  const [isPending, startTransition] = useTransition();\n\n  // You will need to create this new mutation in your tRPC router.\n  // It should take `{ contactId: string, notes: string }` and update the contact.\n  const updateNotesMutation = api.contacts.updateNotes.useMutation({\n    onSuccess: async () => {\n      // Using sonner's success method\n      toast.success(\"Notes Updated\", { description: \"Your changes have been saved.\" });\n      await utils.contacts.getById.invalidate({ contactId });\n      setIsEditing(false);\n    },\n    onError: (error) => {\n      // Using sonner's error method\n      toast.error(\"Update Failed\", { description: `Failed to update notes: ${error.message}` });\n    },\n  });\n\n  const handleSave = () => {\n    startTransition(() => {\n      updateNotesMutation.mutate({ contactId, notes });\n    });\n  };\n\n  const handleCancel = () => {\n    setNotes(initialNotes || '');\n    setIsEditing(false);\n  };\n\n  return (\n    <div>\n      <div className=\"flex flex-row items-center justify-between mb-4\">\n        <h3 className=\"text-lg font-semibold text-gray-800\">Contact Notes</h3>\n        {!isEditing && (\n          <Button size=\"sm\" variant=\"outline\" onClick={() => setIsEditing(true)}>\n            <Edit className=\"mr-2 h-4 w-4\" /> Edit Notes\n          </Button>\n        )}\n      </div>\n\n      {isEditing ? (\n        <div className=\"space-y-4\">\n          <Textarea\n            value={notes}\n            onChange={(e) => setNotes(e.target.value)}\n            placeholder=\"Add notes about this contact...\"\n            rows={8}\n            className=\"w-full\"\n          />\n          <div className=\"flex justify-end gap-2\">\n            <Button variant=\"ghost\" onClick={handleCancel} disabled={isPending}>Cancel</Button>\n            <Button onClick={handleSave} disabled={isPending}>\n              {isPending ? \"Saving...\" : \"Save Notes\"}\n            </Button>\n          </div>\n        </div>\n      ) : (\n        <>\n          {initialNotes ? (\n            <div className=\"prose max-w-none text-gray-700 whitespace-pre-wrap p-4 bg-gray-50 rounded-md border\">\n              {initialNotes}\n            </div>\n          ) : (\n            <div className=\"text-center py-16 bg-gray-50 rounded-lg\">\n              <User className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n              <h3 className=\"text-lg font-medium text-gray-800\">No notes yet</h3>\n              <p className=\"text-gray-500 mt-1\">Click \"Edit Notes\" to add important details.</p>\n            </div>\n          )}\n        </>\n      )}\n    </div>\n  );\n}\n\n\nexport function ContactDetailView({ contactId }: { contactId: string }) {\n  const router = useRouter();\n  const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n  const [deleteError, setDeleteError] = useState<string | null>(null);\n\n  const { data: contact, isLoading, error: queryError } = api.contacts.getById.useQuery(\n    { contactId }, { enabled: !!contactId, retry: 1 }\n  );\n\n  const deleteMutation = api.contacts.delete.useMutation({\n    onSuccess: () => {\n        toast.success(\"Contact Deleted\");\n        router.push('/contacts');\n    },\n    onError: (error) => {\n      setDeleteError(`Failed to delete contact: ${error.message}`);\n      setIsDeleteDialogOpen(false);\n    },\n  });\n\n  const handleDeleteContact = () => {\n    if (contact?.id) deleteMutation.mutate({ contactId: contact.id });\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-96\">\n        <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-teal-800\"></div>\n      </div>\n    );\n  }\n\n  if (queryError || !contact) {\n    return (\n      <div className=\"container mx-auto py-8 px-4\">\n        <Alert variant=\"destructive\" className=\"max-w-2xl mx-auto\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Error Loading Contact</AlertTitle>\n          <AlertDescription>\n            {queryError ? queryError.message : 'The requested contact could not be found.'}\n          </AlertDescription>\n        </Alert>\n        <div className=\"text-center mt-6\">\n          <Button variant=\"outline\" onClick={() => router.push('/contacts')}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Contacts\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4 space-y-8\">\n      {/* Header with Back Navigation */}\n      <div>\n        <Button variant=\"ghost\" onClick={() => router.push('/contacts')} className=\"text-gray-600 hover:text-gray-900 mb-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          All Contacts\n        </Button>\n        {deleteError && (\n          <Alert variant=\"destructive\" className=\"mb-6\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{deleteError}</AlertDescription>\n          </Alert>\n        )}\n      </div>\n\n      {/* Contact Header with Title and Action Buttons */}\n      <div className=\"bg-teal-800 text-white px-6 py-3 flex justify-between items-center rounded-t-lg shadow-md\">\n        <h2 className=\"text-xl font-semibold flex items-center\">\n          <User className=\"h-5 w-5 mr-3\" />\n          Contact Details\n        </h2>\n        <div className=\"flex items-center gap-x-2\">\n          <Button variant=\"ghost\" className=\"text-white hover:bg-teal-700/50\" onClick={() => router.push(`/contacts/${contactId}/edit`)}>\n            <Edit className=\"mr-2 h-4 w-4\" /> Edit Contact\n          </Button>\n          <Button variant=\"outline\" className=\"bg-transparent text-white border-white hover:bg-teal-700/50\">\n            <Sparkles className=\"mr-2 h-4 w-4\" /> Enrich Contact\n          </Button>\n          <Button variant=\"destructive\" className=\"bg-red-600 hover:bg-red-700\" onClick={() => setIsDeleteDialogOpen(true)}>\n            <Trash2 className=\"mr-2 h-4 w-4\" /> Delete\n          </Button>\n        </div>\n      </div>\n\n      {/* Main Content with Three-Column Layout */}\n      <div className=\"bg-white shadow-lg rounded-b-lg border border-gray-200 p-6\">\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-x-8\">\n          {/* === COLUMN 1: PRIMARY INFO === */}\n          <div className=\"space-y-6 lg:pr-8\">\n            <div className=\"flex flex-col items-center lg:items-start text-center lg:text-left\">\n              <CustomAvatarImage\n                src={contact.profile_image_url}\n                alt={contact.full_name || 'Contact'}\n                size=\"xl\"\n                className=\"h-28 w-28 mb-4 shadow-lg border-4 border-white\"\n              />\n              <h1 className=\"text-3xl font-bold text-gray-900\">{contact.full_name}</h1>\n              {contact.job_title && <p className=\"text-lg text-gray-500\">{contact.job_title}</p>}\n            </div>\n\n            <div className=\"space-y-4 pt-4 border-t border-gray-200\">\n              <h3 className=\"text-base font-semibold text-gray-800\">Contact & Professional</h3>\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center\">\n                  <Mail className=\"h-4 w-4 mr-3 text-gray-400\" />\n                  <a href={`mailto:${contact.email}`} className=\"text-teal-700 hover:underline\">{contact.email}</a>\n                </div>\n                {contact.phone && (\n                  <div className=\"flex items-center\">\n                    <Phone className=\"h-4 w-4 mr-3 text-gray-400\" />\n                    <span>{contact.phone}</span>\n                    {contact.phone_country_code && <span className=\"text-gray-500 ml-1\">({contact.phone_country_code})</span>}\n                  </div>\n                )}\n                {contact.company_name && (\n                  <div className=\"flex items-center\">\n                    <Building className=\"h-4 w-4 mr-3 text-gray-400\" />\n                    <span>{contact.company_name}</span>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* === COLUMN 2: LOCATION & ONLINE PRESENCE === */}\n          <div className=\"space-y-6 pt-6 md:pt-0 lg:px-8 lg:border-l lg:border-r border-gray-200\">\n            {contact.address_street || contact.address_city || contact.address_postal_code || contact.address_country ? (\n              <div className=\"space-y-4\">\n                <h3 className=\"text-base font-semibold text-gray-800\">Location</h3>\n                <div className=\"space-y-3\">\n                  {contact.address_street && (\n                    <div className=\"flex items-center\">\n                      <Home className=\"h-4 w-4 mr-3 text-gray-400\" />\n                      <span>{contact.address_street}</span>\n                    </div>\n                  )}\n                  {contact.address_city && (\n                    <div className=\"flex items-center\">\n                      <MapPin className=\"h-4 w-4 mr-3 text-gray-400\" />\n                      <span>{contact.address_city}</span>\n                      {contact.address_postal_code && <span className=\"ml-1\">{contact.address_postal_code}</span>}\n                    </div>\n                  )}\n                  {contact.address_country && (\n                    <div className=\"flex items-center\">\n                      <Globe className=\"h-4 w-4 mr-3 text-gray-400\" />\n                      <span>{contact.address_country}</span>\n                    </div>\n                  )}\n                </div>\n              </div>\n            ) : null}\n\n            <div className=\"space-y-4 pt-4 border-t border-gray-200\">\n              <h3 className=\"text-base font-semibold text-gray-800\">Online Presence</h3>\n              <div className=\"space-y-3\">\n                {contact.website && (\n                  <div className=\"flex items-center\">\n                    <ExternalLink className=\"h-4 w-4 mr-3 text-gray-400\" />\n                    <a href={contact.website} target=\"_blank\" rel=\"noopener noreferrer\" className=\"text-teal-700 hover:underline\">{contact.website}</a>\n                  </div>\n                )}\n                {contact.social_handles && contact.social_handles.length > 0 && (\n                  <div className=\"flex items-start\">\n                    <LinkIcon className=\"h-4 w-4 mr-3 text-gray-400 mt-1\" />\n                    <div className=\"flex flex-col\">\n                      {contact.social_handles.map((handle: string, index: number) => (\n                        <span key={index} className=\"text-gray-700\">{handle}</span>\n                      ))}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n\n          {/* === COLUMN 3: CRM & TAGS === */}\n          <div className=\"space-y-6 pt-6 lg:pt-0 lg:pl-8\">\n            <div className=\"space-y-4\">\n              <h3 className=\"text-base font-semibold text-gray-800\">CRM Data</h3>\n              <div className=\"space-y-3\">\n                {contact.tags && contact.tags.length > 0 && (\n                  <div className=\"flex flex-wrap gap-2 mb-3\">\n                    {contact.tags.map((tag: string, index: number) => (\n                      <Badge key={index} variant=\"secondary\" className=\"flex items-center gap-1\">\n                        <Tag className=\"h-3 w-3\" />{tag}\n                      </Badge>\n                    ))}\n                  </div>\n                )}\n                {contact.source && (\n                  <div className=\"flex items-center\">\n                    <Briefcase className=\"h-4 w-4 mr-3 text-gray-400\" />\n                    <span>Source: <Badge variant=\"outline\">{contact.source}</Badge></span>\n                  </div>\n                )}\n                {contact.last_contacted_at && (\n                  <div className=\"flex items-center\">\n                    <Clock className=\"h-4 w-4 mr-3 text-gray-400\" />\n                    <span>Last contact: {formatDateTime(contact.last_contacted_at)}</span>\n                  </div>\n                )}\n                {contact.enrichment_status && (\n                  <div className=\"flex items-start\">\n                    <Sparkles className=\"h-4 w-4 mr-3 text-gray-400 mt-1\" />\n                    <div>\n                      <div className=\"flex items-center\">\n                        <span className=\"mr-2\">Enrichment:</span>\n                        <Badge\n                          className=\"text-sm\"\n                          variant={contact.enrichment_status === 'completed' ? 'default' : 'destructive'}\n                        >\n                          {contact.enrichment_status === 'completed' ? (\n                            <><CheckCircle className=\"mr-1 h-3 w-3\" /> Completed</>\n                          ) : (\n                            <><AlertCircle className=\"mr-1 h-3 w-3\" /> {contact.enrichment_status}</>\n                          )}\n                        </Badge>\n                      </div>\n                      {contact.enriched_data && (\n                        <div className=\"mt-2 text-sm bg-gray-50 p-2 rounded-md\">\n                          {Object.entries(contact.enriched_data || {}).map(([key, value]) => (\n                            <div key={key} className=\"flex items-start mb-1\">\n                              <span className=\"font-medium mr-1\">{key}:</span>\n                              <span>{typeof value === 'string' ? value : JSON.stringify(value)}</span>\n                            </div>\n                          ))}\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n\n      {/* --- Tab Structure --- */}\n      <div className=\"bg-white shadow-lg rounded-lg border border-gray-200 mt-8\">\n        <Tabs defaultValue={TABS.NOTES} className=\"w-full\">\n          <TabsList className=\"grid w-full grid-cols-3 bg-teal-50/50 rounded-t-lg\">\n            <TabsTrigger value={TABS.NOTES}>Notes</TabsTrigger>\n            <TabsTrigger value={TABS.TASKS}>Tasks</TabsTrigger>\n            <TabsTrigger value={TABS.TIMELINE}>Timeline</TabsTrigger>\n          </TabsList>\n          \n          <div className=\"min-h-[400px]\">\n            <TabsContent value={TABS.NOTES} className=\"p-6\">\n              <NotesEditSection contactId={contact.id} initialNotes={contact.notes} />\n            </TabsContent>\n\n            <TabsContent value={TABS.TASKS} className=\"p-6\">\n              <div className=\"flex flex-row items-center justify-between mb-4\">\n                <h3 className=\"text-lg font-semibold text-gray-800\">Tasks</h3>\n                <Button size=\"sm\" variant=\"outline\" disabled>\n                  <Plus className=\"mr-2 h-4 w-4\" /> Add Task\n                </Button>\n              </div>\n              <div className=\"text-center py-16 bg-gray-50 rounded-lg\">\n                <Calendar className=\"h-12 w-12 text-gray-400 mx-auto mb-4\" />\n                <h3 className=\"text-lg font-medium text-gray-800\">Task Management Coming Soon</h3>\n                <p className=\"text-gray-500 mt-1\">This feature will be available in a future update.</p>\n              </div>\n            </TabsContent>\n            \n            <TabsContent value={TABS.TIMELINE} className=\"p-6\">\n              <ContactTimeline contactId={contactId} />\n            </TabsContent>\n          </div>\n        </Tabs>\n      </div>\n\n      {/* Groups Section */}\n      <div className=\"bg-white shadow-lg rounded-lg border border-gray-200 mt-8 p-6\">\n        <ContactGroupsSection contactId={contactId} />\n      </div>\n\n      {/* Delete Confirmation Dialog */}\n      <Dialog open={isDeleteDialogOpen} onOpenChange={setIsDeleteDialogOpen}>\n        <DialogContent>\n          <DialogHeader>\n            <DialogTitle>Delete Contact</DialogTitle>\n            <DialogDescription>Are you sure you want to delete this contact? This action cannot be undone.</DialogDescription>\n          </DialogHeader>\n          <p className=\"text-sm text-muted-foreground\">This will permanently delete <span className=\"font-semibold\">{contact.full_name}</span>.</p>\n          <DialogFooter>\n            <Button type=\"button\" variant=\"outline\" onClick={() => setIsDeleteDialogOpen(false)} disabled={deleteMutation.isPending}>Cancel</Button>\n            <Button variant=\"destructive\" onClick={handleDeleteContact} disabled={deleteMutation.isPending}>\n              {deleteMutation.isPending ? 'Deleting...' : 'Delete Contact'}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/[contactId]/ContactGroupsSection.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/[contactId]/ContactTimeline.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Phone' is defined but never used.","line":14,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Mail' is defined but never used.","line":15,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":7},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Star' is defined but never used.","line":16,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":16,"endColumn":7},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":41,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[916,919],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[916,919],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":183,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5438,5526],"text":"\n            This contact doesn&apos;t have any recorded sessions or interactions.\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5438,5526],"text":"\n            This contact doesn&lsquo;t have any recorded sessions or interactions.\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5438,5526],"text":"\n            This contact doesn&#39;t have any recorded sessions or interactions.\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5438,5526],"text":"\n            This contact doesn&rsquo;t have any recorded sessions or interactions.\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport { format, parseISO } from 'date-fns';\nimport {\n  Calendar,\n  Clock,\n  MessageSquare,\n  FileText,\n  CheckCircle,\n  AlertCircle,\n  Tag,\n  User,\n  Phone,\n  Mail,\n  Star,\n  Sparkles,\n} from 'lucide-react';\n\nimport {\n  Timeline,\n  TimelineItem,\n  TimelineContent,\n  TimelineSeparator,\n} from '@codexcrm/ui';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { api } from '@/lib/trpc';\n\n// Define types for our timeline data\ninterface TimelineEvent {\n  id: string;\n  type: 'session' | 'email' | 'call' | 'note' | 'status_change';\n  title: string;\n  description?: string;\n  date: string;\n  icon?: React.ReactNode;\n  iconBackground?: string;\n  metadata?: Record<string, any>;\n}\n\ninterface ContactTimelineProps {\n  contactId: string;\n  limit?: number;\n}\n\nexport function ContactTimeline({ contactId, limit = 10 }: ContactTimelineProps) {\n  const [timelineEvents, setTimelineEvents] = useState<TimelineEvent[]>([]);\n  const [isCompact, setIsCompact] = useState(false);\n\n  // Fetch sessions for this contact\n  const {\n    data: sessions,\n    isLoading: isLoadingSessions,\n    error: sessionsError,\n  } = api.sessions.list.useQuery(\n    { contactId },\n    {\n      enabled: !!contactId,\n      staleTime: 30000, // Cache for 30 seconds\n    }\n  );\n\n  // Transform sessions into timeline events\n  useEffect(() => {\n    if (sessions) {\n      const events: TimelineEvent[] = sessions.map((session) => {\n        // Determine icon and background color based on session type\n        let icon = <Calendar className=\"h-4 w-4\" />;\n        let iconBackground = '#4CAF50'; // Default green\n\n        if (session.session_type) {\n          switch (session.session_type.toLowerCase()) {\n            case 'consultation':\n              icon = <User className=\"h-4 w-4\" />;\n              iconBackground = '#2196F3'; // Blue\n              break;\n            case 'follow-up':\n              icon = <CheckCircle className=\"h-4 w-4\" />;\n              iconBackground = '#4CAF50'; // Green\n              break;\n            case 'assessment':\n              icon = <FileText className=\"h-4 w-4\" />;\n              iconBackground = '#9C27B0'; // Purple\n              break;\n            case 'emergency':\n              icon = <AlertCircle className=\"h-4 w-4\" />;\n              iconBackground = '#F44336'; // Red\n              break;\n            case 'group':\n              icon = <Tag className=\"h-4 w-4\" />;\n              iconBackground = '#FF9800'; // Orange\n              break;\n            default:\n              // Keep default\n              break;\n          }\n        }\n\n        return {\n          id: session.id,\n          type: 'session',\n          title: session.session_type || 'Session',\n          description: session.notes || undefined,\n          date: session.session_time,\n          icon,\n          iconBackground,\n          metadata: {\n            duration: session.duration_minutes,\n            location: session.location,\n            virtualMeetingLink: session.virtual_meeting_link,\n            keyTopics: session.key_topics,\n            outcomes: session.outcomes,\n            followUpNeeded: session.follow_up_needed,\n            followUpDetails: session.follow_up_details,\n            status: session.status,\n            sentiment: session.sentiment,\n            aiInsights: session.ai_insights,\n          },\n        };\n      });\n\n      // Sort events by date (newest first)\n      events.sort((a, b) => {\n        return new Date(b.date).getTime() - new Date(a.date).getTime();\n      });\n\n      // Apply limit if specified\n      const limitedEvents = limit ? events.slice(0, limit) : events;\n      \n      setTimelineEvents(limitedEvents);\n    }\n  }, [sessions, limit]);\n\n  // Loading state\n  if (isLoadingSessions) {\n    return (\n      <div className=\"space-y-4\">\n        <div className=\"flex justify-between items-center\">\n          <Skeleton className=\"h-8 w-48\" />\n          <Skeleton className=\"h-8 w-24\" />\n        </div>\n        {[1, 2, 3].map((i) => (\n          <div key={i} className=\"flex gap-4\">\n            <Skeleton className=\"h-10 w-10 rounded-full\" />\n            <div className=\"space-y-2 flex-1\">\n              <Skeleton className=\"h-5 w-32\" />\n              <Skeleton className=\"h-4 w-full\" />\n              <Skeleton className=\"h-4 w-3/4\" />\n            </div>\n          </div>\n        ))}\n      </div>\n    );\n  }\n\n  // Error state\n  if (sessionsError) {\n    return (\n      <div className=\"p-4 border border-red-200 bg-red-50 rounded-md text-red-800\">\n        <h3 className=\"font-medium\">Error loading timeline</h3>\n        <p className=\"text-sm\">{sessionsError.message}</p>\n      </div>\n    );\n  }\n\n  // Empty state\n  if (timelineEvents.length === 0) {\n    return (\n      <Card>\n        <CardHeader>\n          <CardTitle className=\"flex items-center gap-2\">\n            <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n            Contact Timeline\n          </CardTitle>\n        </CardHeader>\n        <CardContent className=\"flex flex-col items-center justify-center py-8 text-center\">\n          <Calendar className=\"h-12 w-12 text-muted-foreground mb-4\" />\n          <h3 className=\"text-lg font-medium\">No sessions yet</h3>\n          <p className=\"text-muted-foreground mt-1 mb-4\">\n            This contact doesn't have any recorded sessions or interactions.\n          </p>\n          <Button variant=\"outline\" size=\"sm\">\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            Schedule Session\n          </Button>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Group events by month/year for separators\n  const groupedEvents: Record<string, TimelineEvent[]> = {};\n  timelineEvents.forEach((event) => {\n    const date = new Date(event.date);\n    const monthYear = format(date, 'MMMM yyyy');\n    \n    if (!groupedEvents[monthYear]) {\n      groupedEvents[monthYear] = [];\n    }\n    \n    groupedEvents[monthYear].push(event);\n  });\n\n  return (\n    <Card>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <CardTitle className=\"flex items-center gap-2\">\n          <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n          Contact Timeline\n        </CardTitle>\n        <div className=\"flex items-center gap-2\">\n          <Button\n            variant=\"outline\"\n            size=\"sm\"\n            onClick={() => setIsCompact(!isCompact)}\n          >\n            {isCompact ? 'Detailed View' : 'Compact View'}\n          </Button>\n        </div>\n      </CardHeader>\n      <CardContent>\n        <Timeline compact={isCompact}>\n          {Object.entries(groupedEvents).map(([monthYear, events], groupIndex) => (\n            <div key={monthYear}>\n              {groupIndex > 0 && <TimelineSeparator label={monthYear} />}\n              {events.map((event, eventIndex) => (\n                <TimelineItem\n                  key={event.id}\n                  active={eventIndex === 0} // Mark the most recent event as active\n                  icon={event.icon}\n                  iconBackground={event.iconBackground}\n                  connector={eventIndex < events.length - 1 || groupIndex < Object.keys(groupedEvents).length - 1}\n                >\n                  <TimelineContent\n                    title={event.title}\n                    date={format(parseISO(event.date), 'PPp')} // Format date as \"Jan 1, 2025, 12:00 PM\"\n                  >\n                    {event.description && (\n                      <p className=\"text-sm text-muted-foreground mt-1\">\n                        {event.description}\n                      </p>\n                    )}\n                    \n                    {!isCompact && event.metadata && (\n                      <div className=\"mt-3 space-y-2\">\n                        {/* Session details */}\n                        {event.type === 'session' && (\n                          <div className=\"flex flex-wrap gap-2 mt-2\">\n                            {event.metadata.duration && (\n                              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                                <Clock className=\"h-3 w-3\" />\n                                {event.metadata.duration} min\n                              </Badge>\n                            )}\n                            {event.metadata.location && (\n                              <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                                <Tag className=\"h-3 w-3\" />\n                                {event.metadata.location}\n                              </Badge>\n                            )}\n                            {event.metadata.status && (\n                              <Badge \n                                variant={event.metadata.status === 'completed' ? 'default' : 'secondary'} \n                                className=\"flex items-center gap-1\"\n                              >\n                                <CheckCircle className=\"h-3 w-3\" />\n                                {event.metadata.status}\n                              </Badge>\n                            )}\n                            {event.metadata.followUpNeeded && (\n                              <Badge variant=\"destructive\" className=\"flex items-center gap-1\">\n                                <AlertCircle className=\"h-3 w-3\" />\n                                Follow-up needed\n                              </Badge>\n                            )}\n                          </div>\n                        )}\n                        \n                        {/* AI Insights */}\n                        {event.metadata.aiInsights && (\n                          <div className=\"mt-3 bg-purple-50 p-2 rounded-md border border-purple-100\">\n                            <div className=\"flex items-center gap-1 text-sm font-medium text-purple-700 mb-1\">\n                              <Sparkles className=\"h-3 w-3\" />\n                              AI Insights\n                            </div>\n                            <p className=\"text-xs text-purple-800\">\n                              {typeof event.metadata.aiInsights === 'string' \n                                ? event.metadata.aiInsights \n                                : JSON.stringify(event.metadata.aiInsights)}\n                            </p>\n                          </div>\n                        )}\n                        \n                        {/* Quick Actions */}\n                        <div className=\"flex gap-2 mt-3\">\n                          <Button variant=\"outline\" size=\"sm\" className=\"h-7 px-2 text-xs\">\n                            <MessageSquare className=\"h-3 w-3 mr-1\" />\n                            Add Note\n                          </Button>\n                          <Button variant=\"outline\" size=\"sm\" className=\"h-7 px-2 text-xs\">\n                            <Calendar className=\"h-3 w-3 mr-1\" />\n                            Schedule Follow-up\n                          </Button>\n                        </div>\n                      </div>\n                    )}\n                  </TimelineContent>\n                </TimelineItem>\n              ))}\n            </div>\n          ))}\n        </Timeline>\n        \n        {timelineEvents.length >= limit && (\n          <div className=\"flex justify-center mt-6\">\n            <Button variant=\"outline\" size=\"sm\">\n              View All History\n            </Button>\n          </div>\n        )}\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/[contactId]/edit/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'use' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":73,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2355,2358],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2355,2358],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { use, useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ContactForm, ContactFormData } from '@/app/contacts/ContactForm';\nimport { api } from '@/lib/trpc';\nimport { Button } from '@/components/ui/button';\n// Correctly import AlertCircle from lucide-react\nimport { ArrowLeft, AlertCircle } from 'lucide-react'; \n// Import only the necessary components from your alert file\nimport { Alert, AlertTitle, AlertDescription } from '@/components/ui/alert';\n\n// Define the props type with proper typing for Next.js 15+\ninterface EditContactPageProps {\n  params: {\n    contactId: string;\n  };\n}\n\n// The component now accepts the props type\nexport default function EditContactPage({ params }: EditContactPageProps) {\n  const router = useRouter();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  // Use the contactId directly from params\n  // In Next.js 15+, this is the recommended approach\n  const contactId = params.contactId;\n  const utils = api.useUtils();\n\n  \n  // Fetch contact data\n  const { data: contact, isLoading, error: fetchError } = api.contacts.getById.useQuery(\n    { contactId },\n    {\n      enabled: !!contactId,\n      retry: 1,\n    }\n  );\n\n  // Save mutation\n  const saveContact = api.contacts.save.useMutation({\n    onSuccess: () => {\n      utils.contacts.list.invalidate();\n      utils.contacts.getById.invalidate({ contactId });\n      utils.groups.list.invalidate();\n      router.push(`/contacts/${contactId}`);\n    },\n    onError: (error) => {\n      setError(`Error saving contact: ${error.message}`);\n      setIsSubmitting(false);\n    },\n  });\n\n  const handleSubmit = async (data: ContactFormData) => {\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      await saveContact.mutateAsync({\n        id: contactId,\n        full_name: data.full_name,\n        email: data.email || undefined,\n        phone: data.phone || undefined,\n        company_name: data.company_name || undefined,\n        job_title: data.job_title || undefined,\n        profile_image_url: data.profile_image_url || undefined,\n        source: data.source || undefined,\n        notes: data.notes || undefined,\n        last_contacted_at: data.last_contacted_at || undefined,\n        // Add other fields as needed\n      });\n    } catch (err: any) {\n      setError(err.message || 'An unexpected error occurred');\n      setIsSubmitting(false);\n    }\n  };\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"container mx-auto py-8 px-4\">\n        <div className=\"flex justify-center items-center h-64\">\n          <div className=\"animate-spin rounded-full h-12 w-12 border-b-2 border-gray-900\"></div>\n        </div>\n      </div>\n    );\n  }\n\n  // Error state\n  if (fetchError || !contact) {\n    return (\n      <div className=\"container mx-auto py-8 px-4\">\n        <Alert variant=\"destructive\" className=\"max-w-4xl mx-auto\">\n          <AlertCircle className=\"h-4 w-4\" />\n          <AlertTitle>Error</AlertTitle>\n          <AlertDescription>\n            {fetchError ? fetchError.message : 'Contact not found'}\n          </AlertDescription>\n        </Alert>\n        <div className=\"flex justify-center mt-8\">\n          <Button variant=\"outline\" onClick={() => router.push('/contacts')}>\n            <ArrowLeft className=\"mr-2 h-4 w-4\" />\n            Back to Contacts\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"flex items-center mb-6\">\n        <Button variant=\"outline\" onClick={() => router.push(`/contacts/${contactId}`)} className=\"mr-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Contact\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Edit Contact: {contact.full_name}</h1>\n      </div>\n      \n      <ContactForm\n        isOpen={true}\n        initialData={{\n          id: contact.id,\n          full_name: contact.full_name || '',\n          email: contact.email || '',\n          phone: contact.phone || '',\n          company_name: contact.company_name || '',\n          job_title: contact.job_title || '',\n          profile_image_url: contact.profile_image_url || '',\n          source: contact.source || '',\n          notes: contact.notes || '',\n          last_contacted_at: contact.last_contacted_at || '',\n          // Add other fields as needed\n        }}\n        onSubmit={handleSubmit}\n        onClose={() => router.push(`/contacts/${contactId}`)}\n        isSubmitting={isSubmitting}\n        error={error}\n        editingContactId={contactId}\n      />\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/[contactId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/form-components.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/form-config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/groups/ContactGroupsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ArrowLeft' is defined but never used.","line":5,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":6,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":8},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ChevronDown' is defined but never used.","line":7,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tag' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":6},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Trash2' is defined but never used.","line":12,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardFooter' is defined but never used.","line":28,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":28,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Separator' is defined but never used.","line":42,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":42,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Tabs' is defined but never used.","line":43,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsContent' is defined but never used.","line":43,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsList' is defined but never used.","line":43,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TabsTrigger' is defined but never used.","line":43,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":50}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport {\n  AlertCircle,\n  ArrowLeft,\n  Check,\n  ChevronDown,\n  Edit,\n  Plus,\n  Search,\n  Tag,\n  Trash2,\n  Users,\n  Loader2,\n} from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useState } from 'react';\n\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\n\n// UI Components\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Separator } from '@/components/ui/separator';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\nimport { api } from '@/lib/trpc';\n\n// Define the Group interface to match the API response\ninterface Group {\n  id: string;\n  name: string;\n  color?: string | null;\n  emoji?: string | null;\n  description?: string | null;\n  contactCount?: number;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// Contact Groups Page Component\nexport function ContactGroupsPage() {\n  const router = useRouter();\n  const [searchTerm, setSearchTerm] = useState('');\n  const [isAddGroupOpen, setIsAddGroupOpen] = useState(false);\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedColor, setSelectedColor] = useState('bg-blue-500');\n  const [error, setError] = useState<string | null>(null);\n\n  const utils = api.useUtils(); // Get tRPC context for cache invalidation\n\n  // Fetch groups using tRPC\n  const {\n    data: groupsData = [],\n    isLoading,\n    error: groupsError,\n  } = api.groups.list.useQuery();\n\n  // Filter groups based on search term\n  const filteredGroups = groupsData.filter((group: Group) => {\n    if (!searchTerm) return true;\n    return group.name.toLowerCase().includes(searchTerm.toLowerCase());\n  });\n\n  // Group creation mutation with explicit logging\n  const createGroupMutation = api.groups.save.useMutation({\n    onSuccess: (data) => {\n      console.log('Group created successfully:', data);\n\n      // Invalidate the groups list cache to refresh data\n      utils.groups.list.invalidate();\n\n      // Reset form and close dialog\n      setNewGroupName('');\n      setSelectedColor('bg-blue-500');\n      setIsAddGroupOpen(false);\n      setError(null);\n    },\n    onError: (error) => {\n      console.error('Create Group Error:', error);\n      setError(`Failed to create group: ${error.message}`);\n    },\n  });\n\n  const handleAddGroup = async () => {\n    if (!newGroupName.trim()) {\n      setError('Group name cannot be empty');\n      return;\n    }\n\n    try {\n      console.log('Attempting to create group with:', {\n        name: newGroupName.trim(),\n        color: selectedColor,\n      });\n\n      // Call the tRPC mutation to create the new group\n      await createGroupMutation.mutateAsync({\n        name: newGroupName.trim(),\n        color: selectedColor,\n        emoji: null, // Optional emoji field\n        description: null, // Optional description field\n      });\n\n      // No need to force refetch as invalidate in onSuccess will trigger a refetch\n    } catch (err) {\n      console.error('Group creation failed:', err);\n      setError(\n        `Failed to create group: ${err instanceof Error ? err.message : 'Unknown error'}`\n      );\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"flex flex-col space-y-8\">\n        {/* Header with title, search and add button */}\n        <div className=\"flex flex-col md:flex-row md:items-center justify-between gap-4\">\n          <div>\n            <h1 className=\"text-3xl font-bold tracking-tight\">\n              Contacts Groups\n            </h1>\n            <p className=\"text-muted-foreground mt-1\">\n              Organize your contacts into meaningful groups\n            </p>\n          </div>\n\n          <div className=\"flex flex-col sm:flex-row gap-3\">\n            <div className=\"relative\">\n              <Search className=\"absolute left-2.5 top-2.5 h-4 w-4 text-muted-foreground\" />\n              <Input\n                type=\"search\"\n                placeholder=\"Search groups...\"\n                className=\"pl-8 w-full sm:w-[250px]\"\n                value={searchTerm}\n                onChange={(e) => setSearchTerm(e.target.value)}\n              />\n            </div>\n\n            <Button onClick={() => setIsAddGroupOpen(true)}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Group\n            </Button>\n          </div>\n        </div>\n\n        {/* Error Alerts */}\n        {error && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n\n        {groupsError && (\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error Loading Groups</AlertTitle>\n            <AlertDescription>\n              {groupsError.message || 'Failed to fetch groups.'}\n            </AlertDescription>\n          </Alert>\n        )}\n\n        {/* Loading State */}\n        {isLoading && (\n          <div className=\"flex flex-col items-center justify-center py-12\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-muted-foreground mb-4\" />\n            <p className=\"text-muted-foreground\">Loading groups...</p>\n          </div>\n        )}\n\n        {/* Groups Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {filteredGroups.map((group: Group) => (\n            <Card\n              key={group.id}\n              className=\"hover:shadow-md transition-shadow cursor-pointer\"\n              onClick={() => router.push(`/contacts?group=${group.id}`)}\n            >\n              <CardHeader className=\"pb-2\">\n                <div className=\"flex items-center justify-between\">\n                  <Badge\n                    className={`${group.color || 'bg-blue-500'} hover:opacity-80`}\n                  >\n                    {group.contactCount || 0} contacts\n                  </Badge>\n                  <Button\n                    variant=\"ghost\"\n                    size=\"icon\"\n                    onClick={(e) => {\n                      e.stopPropagation();\n                      // Add edit functionality\n                    }}\n                  >\n                    <Edit className=\"h-4 w-4\" />\n                  </Button>\n                </div>\n                <CardTitle className=\"text-xl\">{group.name}</CardTitle>\n              </CardHeader>\n              <CardContent>\n                <p className=\"text-muted-foreground text-sm\">\n                  Click to view all contacts in this group\n                </p>\n              </CardContent>\n            </Card>\n          ))}\n\n          {/* Add Group Card */}\n          <Card\n            className=\"border-dashed hover:border-muted-foreground/50 cursor-pointer flex flex-col items-center justify-center p-6\"\n            onClick={() => setIsAddGroupOpen(true)}\n          >\n            <div className=\"rounded-full bg-muted p-3\">\n              <Plus className=\"h-6 w-6\" />\n            </div>\n            <h3 className=\"mt-3 font-medium\">Add New Group</h3>\n            <p className=\"text-sm text-muted-foreground text-center mt-1\">\n              Create a new group to organize your contacts\n            </p>\n          </Card>\n        </div>\n\n        {/* Empty State - No Search Results */}\n        {filteredGroups.length === 0 && searchTerm && (\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <Users className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium\">No groups found</h3>\n            <p className=\"text-muted-foreground mt-1\">\n              Try a different search term or create a new group.\n            </p>\n            <Button className=\"mt-4\" onClick={() => setIsAddGroupOpen(true)}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Group\n            </Button>\n          </div>\n        )}\n\n        {/* Empty State - No Groups Yet */}\n        {!isLoading && groupsData.length === 0 && !searchTerm && (\n          <div className=\"flex flex-col items-center justify-center py-12 text-center\">\n            <Users className=\"h-12 w-12 text-muted-foreground mb-4\" />\n            <h3 className=\"text-lg font-medium\">No groups yet</h3>\n            <p className=\"text-muted-foreground mt-1\">\n              Get started by creating your first contact group.\n            </p>\n            <Button className=\"mt-4\" onClick={() => setIsAddGroupOpen(true)}>\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Add Group\n            </Button>\n          </div>\n        )}\n\n        {/* Add Group Dialog using Shadcn Dialog component */}\n        <Dialog\n          open={isAddGroupOpen}\n          onOpenChange={(isOpen) => {\n            setIsAddGroupOpen(isOpen);\n            // Reset form/error state when dialog closes\n            if (!isOpen) {\n              setNewGroupName('');\n              setSelectedColor('bg-blue-500');\n              setError(null);\n            }\n          }}\n        >\n          <DialogContent className=\"sm:max-w-md\">\n            <DialogHeader>\n              <DialogTitle>Add New Group</DialogTitle>\n              <DialogDescription>\n                Create a new group to organize your contacts\n              </DialogDescription>\n            </DialogHeader>\n            <div className=\"space-y-4 py-4\">\n              <div className=\"space-y-2\">\n                <Label htmlFor=\"groupName\">Group Name</Label>\n                <Input\n                  id=\"groupName\"\n                  placeholder=\"Enter group name\"\n                  value={newGroupName}\n                  onChange={(e) => setNewGroupName(e.target.value)}\n                />\n              </div>\n\n              <div className=\"space-y-2\">\n                <Label>Group Color</Label>\n                <div className=\"flex flex-wrap gap-2\">\n                  {[\n                    'bg-blue-500',\n                    'bg-green-500',\n                    'bg-yellow-500',\n                    'bg-purple-500',\n                    'bg-pink-500',\n                    'bg-red-500',\n                  ].map((color) => (\n                    <div\n                      key={color}\n                      className={`w-8 h-8 rounded-full ${color} cursor-pointer hover:ring-2 hover:ring-offset-2 ${selectedColor === color ? 'ring-2 ring-offset-2 ring-gray-400' : ''}`}\n                      onClick={() => setSelectedColor(color)}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n            <DialogFooter>\n              <Button\n                variant=\"outline\"\n                onClick={() => setIsAddGroupOpen(false)}\n              >\n                Cancel\n              </Button>\n              <Button\n                onClick={handleAddGroup}\n                disabled={createGroupMutation.isPending || !newGroupName.trim()}\n              >\n                {createGroupMutation.isPending ? 'Creating...' : 'Create Group'}\n              </Button>\n            </DialogFooter>\n          </DialogContent>\n        </Dialog>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/groups/GroupContactsList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Badge' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Users, Plus, X, Loader2, UserCheck, UserPlus } from 'lucide-react';\nimport { useState } from 'react';\n\nimport { Contact } from '@/app/contacts/ContactList';\n\nimport { Alert, AlertDescription } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport { api } from '@/lib/trpc';\n\n// Helper function to get initials from name\nconst getInitials = (fullName: string | null | undefined) => {\n  if (!fullName) return '??';\n  const nameParts = fullName.split(' ');\n  const firstInitial = nameParts[0]?.[0] || '';\n  const lastInitial =\n    nameParts.length > 1 ? nameParts[nameParts.length - 1]?.[0] || '' : '';\n  return `${firstInitial}${lastInitial}`.toUpperCase();\n};\n\ninterface GroupContactsListProps {\n  groupId: string;\n  groupName: string;\n}\n\nexport function GroupContactsList({\n  groupId,\n  groupName,\n}: GroupContactsListProps) {\n  const [isAddContactDialogOpen, setIsAddContactDialogOpen] = useState(false);\n  const [selectedContactId, setSelectedContactId] = useState<string>('');\n  const [error, setError] = useState<string | null>(null);\n  const [showAllContacts, setShowAllContacts] = useState(false);\n\n  const utils = api.useUtils();\n\n  // Get contacts in this group\n  const { data: groupContacts, isLoading: isLoadingGroupContacts } =\n    api.groups.getContacts.useQuery({ groupId }, { enabled: !!groupId });\n\n  // Get all contacts for the add dialog\n  const { data: allContacts, isLoading: isLoadingAllContacts } =\n    api.contacts.list.useQuery(\n      {},\n      {\n        enabled: isAddContactDialogOpen,\n      }\n    );\n\n  // Mutation to add contact to group\n  const addContactMutation = api.groups.addContact.useMutation({\n    onSuccess: () => {\n      utils.groups.getContacts.invalidate({ groupId });\n      utils.groups.list.invalidate(); // Update contact counts\n      setIsAddContactDialogOpen(false);\n      setSelectedContactId('');\n      setError(null);\n    },\n    onError: (error) => {\n      setError(`Failed to add contact: ${error.message}`);\n    },\n  });\n\n  // Mutation to remove contact from group\n  const removeContactMutation = api.groups.removeContact.useMutation({\n    onSuccess: () => {\n      utils.groups.getContacts.invalidate({ groupId });\n      utils.groups.list.invalidate(); // Update contact counts\n      setError(null);\n    },\n    onError: (error) => {\n      setError(`Failed to remove contact: ${error.message}`);\n    },\n  });\n\n  // Filter out contacts already in group\n  const availableContacts = allContacts?.filter(\n    (contact: Contact) =>\n      !groupContacts?.some((gc: Contact) => gc.id === contact.id)\n  );\n\n  const handleAddContact = () => {\n    if (!selectedContactId) {\n      setError('Please select a contact');\n      return;\n    }\n\n    addContactMutation.mutate({\n      contactId: selectedContactId,\n      groupId,\n    });\n  };\n\n  const handleRemoveContact = (contactId: string) => {\n    removeContactMutation.mutate({\n      contactId,\n      groupId,\n    });\n  };\n\n  const displayContacts = showAllContacts\n    ? groupContacts\n    : groupContacts?.slice(0, 3);\n  const hasMoreContacts = groupContacts && groupContacts.length > 3;\n\n  if (isLoadingGroupContacts) {\n    return (\n      <div className=\"flex items-center space-x-2 text-sm text-purple-500\">\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\n        <span>Loading contacts...</span>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"space-y-3\">\n      {/* Contact count and add button */}\n      <div className=\"flex items-center justify-between\">\n        <div className=\"flex items-center space-x-2\">\n          <Users className=\"h-4 w-4 text-purple-500\" />\n          <span className=\"text-sm text-purple-700\">\n            {groupContacts?.length || 0} contact\n            {groupContacts?.length === 1 ? '' : 's'}\n          </span>\n        </div>\n        <Button\n          variant=\"outline\"\n          size=\"sm\"\n          onClick={() => setIsAddContactDialogOpen(true)}\n          className=\"h-7 px-2 text-xs text-purple-600 hover:text-purple-700 border-purple-200 hover:bg-purple-50\"\n        >\n          <Plus className=\"h-3 w-3 mr-1\" />\n          Add\n        </Button>\n      </div>\n\n      {/* Contacts list */}\n      {groupContacts && groupContacts.length > 0 ? (\n        <div className=\"space-y-2\">\n          {displayContacts?.map((contact: Contact) => (\n            <div\n              key={contact.id}\n              className=\"flex items-center justify-between bg-purple-50 p-2 rounded-md hover:bg-purple-100 transition-colors\"\n            >\n              <div className=\"flex items-center space-x-2 min-w-0 flex-1\">\n                <div className=\"h-6 w-6 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0\">\n                  <span className=\"text-xs font-medium text-purple-600\">\n                    {getInitials(contact.full_name)}\n                  </span>\n                </div>\n                <div className=\"min-w-0 flex-1\">\n                  <div className=\"text-sm font-medium text-purple-900 truncate\">\n                    {contact.full_name}\n                  </div>\n                  {contact.email && (\n                    <div className=\"text-xs text-purple-600 truncate\">\n                      {contact.email}\n                    </div>\n                  )}\n                </div>\n              </div>\n              <button\n                onClick={() => handleRemoveContact(contact.id)}\n                className=\"flex-shrink-0 p-1 hover:bg-purple-200 rounded-full transition-colors\"\n                disabled={removeContactMutation.isPending}\n              >\n                {removeContactMutation.isPending ? (\n                  <Loader2 className=\"h-3 w-3 animate-spin text-purple-400\" />\n                ) : (\n                  <X className=\"h-3 w-3 text-purple-400 hover:text-purple-600\" />\n                )}\n              </button>\n            </div>\n          ))}\n\n          {/* Show more/less toggle */}\n          {hasMoreContacts && (\n            <button\n              onClick={() => setShowAllContacts(!showAllContacts)}\n              className=\"text-xs text-purple-600 hover:text-purple-700 font-medium transition-colors\"\n            >\n              {showAllContacts\n                ? 'Show less'\n                : `Show ${groupContacts.length - 3} more`}\n            </button>\n          )}\n        </div>\n      ) : (\n        <div className=\"text-center py-4 text-purple-500\">\n          <UserPlus className=\"h-8 w-8 mx-auto mb-2 text-purple-300\" />\n          <p className=\"text-sm\">No contacts in this group</p>\n          <p className=\"text-xs text-purple-400\">Add contacts to get started</p>\n        </div>\n      )}\n\n      {/* Add contact dialog */}\n      <Dialog\n        open={isAddContactDialogOpen}\n        onOpenChange={setIsAddContactDialogOpen}\n      >\n        <DialogContent className=\"sm:max-w-md\">\n          <DialogHeader>\n            <DialogTitle className=\"flex items-center gap-2\">\n              <UserCheck className=\"h-5 w-5\" />\n              Add Contact to {groupName}\n            </DialogTitle>\n            <DialogDescription>\n              Select a contact to add to this group.\n            </DialogDescription>\n          </DialogHeader>\n\n          <div className=\"space-y-4\">\n            {error && (\n              <Alert variant=\"destructive\">\n                <AlertDescription>{error}</AlertDescription>\n              </Alert>\n            )}\n\n            <div className=\"space-y-2\">\n              <label className=\"text-sm font-medium\">Select Contact</label>\n              <Select\n                value={selectedContactId}\n                onValueChange={setSelectedContactId}\n                disabled={isLoadingAllContacts || !availableContacts?.length}\n              >\n                <SelectTrigger>\n                  <SelectValue\n                    placeholder={\n                      isLoadingAllContacts\n                        ? 'Loading contacts...'\n                        : !availableContacts?.length\n                          ? 'No contacts available'\n                          : 'Select a contact'\n                    }\n                  />\n                </SelectTrigger>\n                <SelectContent>\n                  {availableContacts?.map((contact: Contact) => (\n                    <SelectItem key={contact.id} value={contact.id}>\n                      <div className=\"flex items-center gap-2\">\n                        <div className=\"h-6 w-6 bg-gray-100 rounded-full flex items-center justify-center\">\n                          <span className=\"text-xs text-gray-600\">\n                            {getInitials(contact.full_name)}\n                          </span>\n                        </div>\n                        <div>\n                          <div className=\"font-medium\">{contact.full_name}</div>\n                          {contact.email && (\n                            <div className=\"text-xs text-gray-500\">\n                              {contact.email}\n                            </div>\n                          )}\n                        </div>\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n\n          <DialogFooter>\n            <Button\n              variant=\"outline\"\n              onClick={() => {\n                setIsAddContactDialogOpen(false);\n                setSelectedContactId('');\n                setError(null);\n              }}\n            >\n              Cancel\n            </Button>\n            <Button\n              onClick={handleAddContact}\n              disabled={!selectedContactId || addContactMutation.isPending}\n            >\n              {addContactMutation.isPending ? (\n                <>\n                  <Loader2 className=\"h-4 w-4 mr-2 animate-spin\" />\n                  Adding...\n                </>\n              ) : (\n                'Add Contact'\n              )}\n            </Button>\n          </DialogFooter>\n        </DialogContent>\n      </Dialog>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/groups/GroupsContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'refetchGroups' is assigned a value but never used.","line":138,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":138,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":160,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":160,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { useQueryClient } from '@tanstack/react-query'; // For cache invalidation directly\nimport {\n  Plus,\n  Edit,\n  Trash2,\n  Loader2,\n  AlertCircle,\n  Users,\n  Folder,\n  UserPlus,\n} from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useState, useEffect } from 'react';\nimport { useForm, SubmitHandler } from 'react-hook-form';\nimport { toast } from 'sonner'; // For notifications\nimport * as z from 'zod';\n\nimport { BulkContactSelector } from '@/components/groups/BulkContactSelector';\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport {\n  Card,\n  CardHeader,\n  CardTitle,\n  CardDescription,\n  CardContent,\n  CardFooter,\n} from '@/components/ui/card';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n  // DialogTrigger, // We will trigger dialog programmatically\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Textarea } from '@/components/ui/textarea'; // If using for description\nimport { api } from '@/lib/trpc';\n\n// Curated dark color palette for good contrast on light grey background\nconst CURATED_COLORS = [\n  '#374151', // gray-700\n  '#1f2937', // gray-800\n  '#4b5563', // gray-600\n  '#6b7280', // gray-500\n  '#7c3aed', // violet-600\n  '#8b5cf6', // violet-500\n  '#6366f1', // indigo-500\n  '#3b82f6', // blue-500\n  '#0ea5e9', // sky-500\n  '#06b6d4', // cyan-500\n  '#10b981', // emerald-500\n  '#84cc16', // lime-500\n  '#f59e0b', // amber-500\n  '#ef4444', // red-500\n];\n\n// --- Zod Schema for Form Validation (should match backend) ---\nconst groupFormSchema = z.object({\n  name: z.string().min(1, 'Group name is required').max(100, 'Name too long'),\n  description: z\n    .string()\n    .max(500, 'Description too long')\n    .optional()\n    .nullable(),\n  color: z\n    .string()\n    .regex(/^#[0-9A-Fa-f]{6}$/, 'Must be a valid hex color (e.g., #FF0000)')\n    .or(z.literal(''))\n    .nullable()\n    .optional()\n    .transform((val) => (val === '' ? null : val)),\n  emoji: z\n    .string()\n    .max(2, 'Emoji should be 1-2 characters')\n    .or(z.literal(''))\n    .nullable()\n    .optional()\n    .transform((val) => (val === '' ? null : val)),\n});\ntype GroupFormData = z.infer<typeof groupFormSchema>;\n\n// --- Interface for Group Data (matching what `api.groups.list` returns) ---\ninterface Group {\n  id: string;\n  name: string;\n  description?: string | null;\n  color?: string | null;\n  emoji?: string | null;\n  created_at?: string | null;\n  updated_at?: string | null;\n  contactCount?: number;\n}\n\nexport function GroupsContent() {\n  const [isFormDialogOpen, setIsFormDialogOpen] = useState(false);\n  const [editingGroup, setEditingGroup] = useState<Group | null>(null); // Store full group object for editing\n\n  const [isContactSelectorOpen, setIsContactSelectorOpen] = useState(false);\n  const [selectedGroupForContacts, setSelectedGroupForContacts] = useState<{\n    id: string;\n    name: string;\n  } | null>(null);\n\n  const queryClient = useQueryClient(); // For direct cache invalidation\n  const router = useRouter();\n\n  // --- React Hook Form ---\n  const {\n    register,\n    handleSubmit,\n    reset,\n    setValue,\n    watch,\n    formState: { errors, isSubmitting: isFormSubmittingRHF }, // isSubmitting from RHF\n  } = useForm<GroupFormData>({\n    resolver: zodResolver(groupFormSchema),\n    defaultValues: {\n      name: '',\n      description: '',\n      color: CURATED_COLORS[5], // A default purple\n      emoji: '👍',\n    },\n  });\n\n  // --- tRPC Queries and Mutations ---\n  const {\n    data: groups = [],\n    isLoading: isLoadingGroups,\n    error: groupsQueryError,\n    refetch: refetchGroups,\n  } = api.groups.list.useQuery(undefined, {\n    // staleTime: 5 * 60 * 1000, // 5 minutes\n  });\n\n  const saveGroupMutation = api.groups.save.useMutation({\n    onSuccess: (savedGroup) => {\n      toast.success(editingGroup ? 'Group updated!' : 'Group created!', {\n        description: `\"${savedGroup.name}\" has been saved.`,\n      });\n      queryClient.invalidateQueries({ queryKey: [['groups', 'list']] }); // Correct way to invalidate\n      // refetchGroups(); // Alternatively, directly refetch\n      setIsFormDialogOpen(false);\n    },\n    onError: (error) => {\n      toast.error('Failed to save group', {\n        description: error.message,\n      });\n    },\n  });\n\n  const deleteGroupMutation = api.groups.delete.useMutation({\n    onSuccess: (data) => {\n      toast.success('Group deleted successfully!');\n      queryClient.invalidateQueries({ queryKey: [['groups', 'list']] });\n    },\n    onError: (error) => {\n      toast.error('Failed to delete group', { description: error.message });\n    },\n  });\n\n  // --- Event Handlers ---\n  const handleOpenNewGroupDialog = () => {\n    setEditingGroup(null);\n    reset({\n      // Reset form to defaults\n      name: '',\n      description: '',\n      color: CURATED_COLORS[5],\n      emoji: '👍',\n    });\n    setIsFormDialogOpen(true);\n  };\n\n  const handleOpenEditGroupDialog = (group: Group) => {\n    setEditingGroup(group);\n    reset({\n      // Populate form with existing group data\n      name: group.name,\n      description: group.description || '',\n      color: group.color || CURATED_COLORS[5],\n      emoji: group.emoji || '👍',\n    });\n    setIsFormDialogOpen(true);\n  };\n\n  const onFormSubmit: SubmitHandler<GroupFormData> = (formData) => {\n    const payload = {\n      ...formData,\n      id: editingGroup?.id, // Add id if we are editing\n    };\n    saveGroupMutation.mutate(payload);\n  };\n\n  const handleDeleteGroup = (groupId: string, groupName: string) => {\n    if (\n      window.confirm(\n        `Are you sure you want to delete the group \"${groupName}\"? This action cannot be undone.`\n      )\n    ) {\n      deleteGroupMutation.mutate({ groupId });\n    }\n  };\n\n  const handleOpenManageContactsDialog = (\n    groupId: string,\n    groupName: string\n  ) => {\n    setSelectedGroupForContacts({ id: groupId, name: groupName });\n    setIsContactSelectorOpen(true);\n  };\n\n  // --- Effect to reset form when dialog closes ---\n  useEffect(() => {\n    if (!isFormDialogOpen) {\n      setEditingGroup(null);\n      reset(); // Reset RHF state\n    }\n  }, [isFormDialogOpen, reset]);\n\n  // --- Render Logic ---\n  if (isLoadingGroups) {\n    return (\n      <div className=\"p-4 text-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin mx-auto\" /> Loading groups...\n      </div>\n    );\n  }\n\n  if (groupsQueryError) {\n    return (\n      <Alert variant=\"destructive\" className=\"m-4\">\n        <AlertCircle className=\"h-4 w-4\" />\n        <AlertTitle>Error Loading Groups</AlertTitle>\n        <AlertDescription>{groupsQueryError.message}</AlertDescription>\n      </Alert>\n    );\n  }\n\n  return (\n    <div className=\"p-4 md:p-6 space-y-6\">\n      <div className=\"flex flex-col sm:flex-row justify-between items-center gap-4\">\n        <div className=\"flex items-center gap-2\">\n          <Folder className=\"h-7 w-7 text-purple-500\" />\n          <h1 className=\"text-2xl md:text-3xl font-bold text-gray-800\">\n            Manage Groups\n          </h1>\n        </div>\n        <Button\n          onClick={handleOpenNewGroupDialog}\n          className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n        >\n          <Plus className=\"mr-2 h-5 w-5\" /> Create New Group\n        </Button>\n      </div>\n\n      {/* Groups Grid */}\n      {groups.length === 0 ? (\n        <div className=\"text-center py-10 border-2 border-dashed border-gray-300 rounded-lg\">\n          <Users className=\"h-16 w-16 mx-auto text-gray-400 mb-4\" />\n          <h3 className=\"text-xl font-semibold text-gray-700\">\n            No groups yet!\n          </h3>\n          <p className=\"text-gray-500 mb-6\">\n            Get started by creating your first group.\n          </p>\n          <Button\n            onClick={handleOpenNewGroupDialog}\n            className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n          >\n            <Plus className=\"mr-2 h-4 w-4\" /> Create Group\n          </Button>\n        </div>\n      ) : (\n        <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-6\">\n          {groups.map((group: Group) => (\n            <Card\n              key={group.id}\n              className=\"flex flex-col hover:shadow-md transition-shadow cursor-pointer\"\n              onClick={() => router.push(`/contacts?group=${group.id}`)}\n            >\n              <CardHeader>\n                <div className=\"flex justify-between items-start\">\n                  <CardTitle className=\"flex items-center gap-2 text-lg\">\n                    <span className=\"text-2xl\">{group.emoji || '📁'}</span>\n                    <span style={{ color: group.color || 'inherit' }}>\n                      {group.name}\n                    </span>\n                  </CardTitle>\n                  <Badge variant=\"secondary\">\n                    {group.contactCount ?? 0} Contacts\n                  </Badge>\n                </div>\n                {group.description && (\n                  <CardDescription className=\"mt-1 text-sm text-gray-600 h-10 overflow-hidden text-ellipsis\">\n                    {group.description}\n                  </CardDescription>\n                )}\n              </CardHeader>\n              <CardContent className=\"flex-grow\">\n                {/* Can add more details or a preview here if needed */}\n              </CardContent>\n              <CardFooter className=\"border-t pt-3 px-4 pb-4\">\n                <div className=\"flex flex-col gap-2 w-full\">\n                  {/* Add Contacts button - full width on mobile */}\n                  <Button\n                    variant=\"outline\"\n                    size=\"sm\"\n                    onClick={(e) => {\n                      e.stopPropagation(); // Prevent card click\n                      handleOpenManageContactsDialog(group.id, group.name);\n                    }}\n                    className=\"w-full justify-center\"\n                  >\n                    <UserPlus className=\"mr-1.5 h-3.5 w-3.5\" /> Add Contacts\n                  </Button>\n\n                  {/* Edit and Delete buttons - side by side on all screens */}\n                  <div className=\"flex gap-2 w-full\">\n                    <Button\n                      variant=\"outline\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation(); // Prevent card click\n                        handleOpenEditGroupDialog(group);\n                      }}\n                      className=\"flex-1 justify-center\"\n                    >\n                      <Edit className=\"mr-1.5 h-3.5 w-3.5\" /> Edit\n                    </Button>\n                    <Button\n                      variant=\"destructive\"\n                      size=\"sm\"\n                      onClick={(e) => {\n                        e.stopPropagation(); // Prevent card click\n                        handleDeleteGroup(group.id, group.name);\n                      }}\n                      disabled={\n                        deleteGroupMutation.isPending &&\n                        deleteGroupMutation.variables?.groupId === group.id\n                      }\n                      className=\"flex-1 justify-center\"\n                    >\n                      {deleteGroupMutation.isPending &&\n                      deleteGroupMutation.variables?.groupId === group.id ? (\n                        <Loader2 className=\"h-3.5 w-3.5 animate-spin\" />\n                      ) : (\n                        <>\n                          <Trash2 className=\"mr-1.5 h-3.5 w-3.5\" />\n                          Delete\n                        </>\n                      )}\n                    </Button>\n                  </div>\n                </div>\n              </CardFooter>\n            </Card>\n          ))}\n        </div>\n      )}\n\n      {/* Dialog for Create/Edit Group Form */}\n      <Dialog open={isFormDialogOpen} onOpenChange={setIsFormDialogOpen}>\n        <DialogContent className=\"sm:max-w-lg\">\n          <DialogHeader>\n            <DialogTitle className=\"text-xl font-semibold text-gray-800\">\n              {editingGroup ? 'Edit Group' : 'Create New Group'}\n            </DialogTitle>\n            {editingGroup && (\n              <DialogDescription>\n                Update the details for the group: {editingGroup.name}\n              </DialogDescription>\n            )}\n          </DialogHeader>\n\n          <form\n            onSubmit={handleSubmit(onFormSubmit)}\n            className=\"space-y-4 py-4\"\n          >\n            {/* Top row: Emoji, Group Name, Color Picker */}\n            <div className=\"flex gap-3 items-end\">\n              {/* Emoji Picker */}\n              <div className=\"flex-shrink-0\">\n                <Label htmlFor=\"emoji\" className=\"text-sm font-medium\">\n                  Emoji\n                </Label>\n                <Input\n                  id=\"emoji\"\n                  {...register('emoji')}\n                  placeholder=\"📁\"\n                  className=\"w-16 h-10 text-center text-lg mt-1\"\n                  maxLength={2}\n                />\n              </div>\n\n              {/* Group Name */}\n              <div className=\"flex-grow\">\n                <Label htmlFor=\"name\" className=\"text-sm font-medium\">\n                  Group Name *\n                </Label>\n                <Input\n                  id=\"name\"\n                  {...register('name')}\n                  placeholder=\"Enter group name...\"\n                  className={`mt-1 ${errors.name ? 'border-red-500' : ''}`}\n                />\n                {errors.name && (\n                  <p className=\"text-red-500 text-xs mt-1\">\n                    {errors.name.message}\n                  </p>\n                )}\n              </div>\n\n              {/* Color Picker */}\n              <div className=\"flex-shrink-0\">\n                <Label className=\"text-sm font-medium\">Color</Label>\n                <div className=\"mt-1 grid grid-cols-7 gap-1 p-2 border rounded-md bg-gray-50 w-28\">\n                  {CURATED_COLORS.map((color) => (\n                    <button\n                      key={color}\n                      type=\"button\"\n                      onClick={() => setValue('color', color)}\n                      className={`w-4 h-4 rounded-full border-2 hover:scale-110 transition-transform ${\n                        watch('color') === color\n                          ? 'border-gray-800 scale-110'\n                          : 'border-gray-300'\n                      }`}\n                      style={{ backgroundColor: color }}\n                      title={color}\n                    />\n                  ))}\n                </div>\n              </div>\n            </div>\n\n            {/* Description */}\n            <div>\n              <Label htmlFor=\"description\" className=\"text-sm font-medium\">\n                Description (Optional)\n              </Label>\n              <Textarea\n                id=\"description\"\n                {...register('description')}\n                placeholder=\"Add a description for this group...\"\n                rows={3}\n                className=\"mt-1 resize-none\"\n                maxLength={500}\n              />\n              {errors.description && (\n                <p className=\"text-red-500 text-xs mt-1\">\n                  {errors.description.message}\n                </p>\n              )}\n            </div>\n\n            <DialogFooter className=\"pt-2\">\n              <Button\n                type=\"button\"\n                variant=\"outline\"\n                onClick={() => setIsFormDialogOpen(false)}\n                disabled={saveGroupMutation.isPending || isFormSubmittingRHF}\n              >\n                Cancel\n              </Button>\n              <Button\n                type=\"submit\"\n                disabled={saveGroupMutation.isPending || isFormSubmittingRHF}\n                className=\"bg-purple-500 hover:bg-purple-600 text-white\"\n              >\n                {saveGroupMutation.isPending || isFormSubmittingRHF ? (\n                  <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                ) : editingGroup ? (\n                  'Save Changes'\n                ) : (\n                  'Create Group'\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Bulk Contact Selector Dialog */}\n      {selectedGroupForContacts && (\n        <BulkContactSelector\n          groupId={selectedGroupForContacts.id}\n          groupName={selectedGroupForContacts.name}\n          isOpen={isContactSelectorOpen}\n          onClose={() => {\n            setIsContactSelectorOpen(false);\n            setSelectedGroupForContacts(null);\n          }}\n        />\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/groups/[groupId]/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/groups/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/import/csv-upload-test/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppRouter' is defined but never used.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TRPCClientErrorLike' is defined but never used.","line":4,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TRPCClientError' is defined but never used.","line":5,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PapaParseError' is defined but never used.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":18,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsImporting' is assigned a value but never used.","line":54,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'contactsWithOriginalIndex' is assigned a value but never used.","line":169,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":169,"endColumn":38}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type { AppRouter } from '@codexcrm/server/src/root'; // Corrected tRPC client import path\nimport type { TRPCClientErrorLike } from '@trpc/client';\nimport type { TRPCClientError } from '@trpc/client';\nimport type { ParseError as PapaParseError } from 'papaparse';\nimport React, { useState } from 'react';\nimport type { FileWithPath } from 'react-dropzone';\n\nimport { Button } from '@/components/ui/button';\nimport { CsvUpload } from '@/components/ui/csv-upload';\nimport {\n  parseCsvFile,\n  validateCsvData,\n  CsvValidationError,\n  ValidatedContactData,\n} from '@/lib/csv-utils'; // Removed ParsedCsvRow, Added ValidatedContactData\nimport { api } from '@/lib/trpc';\n\n// Define the expected response structure from the importCsvData mutation (matching backend's importCsvDataOutputSchema)\ninterface ContactImportResult {\n  originalIndex: number;\n  email?: string | null;\n  status: 'imported' | 'skipped' | 'error';\n  message: string;\n  contactData?: ValidatedContactData;\n  errorDetails?: string;\n}\n\ninterface ImportCsvDataResponse {\n  overallStatus: string;\n  successCount: number;\n  skippedCount: number;\n  errorCount: number;\n  results: ContactImportResult[];\n}\n\nexport default function CsvUploadTestPage() {\n  const [uploadedFile, setUploadedFile] = useState<FileWithPath | null>(null);\n  const [feedbackMessage, setFeedbackMessage] = useState<string>('');\n  const [parsedData, setParsedData] = useState<ValidatedContactData[] | null>(\n    null\n  );\n  const [parsingErrors, setParsingErrors] = useState<Array<{\n    message: string;\n    code?: string;\n    type?: string;\n    row?: number;\n  }> | null>(null);\n  const [rowCount, setRowCount] = useState<number | null>(null);\n  const [csvValidationErrors, setCsvValidationErrors] = useState<\n    CsvValidationError[] | null\n  >(null);\n  const [isImporting, setIsImporting] = useState<boolean>(false);\n  const [importFeedback, setImportFeedback] = useState<string>('');\n  const [importResult, setImportResult] = useState<\n    ImportCsvDataResponse | { error: string } | null\n  >(null); // To store backend response\n\n  const handleFilesAccepted = async (files: FileWithPath[]) => {\n    console.log('Files received in parent component:', files);\n    setUploadedFile(null);\n    setParsedData(null);\n    setParsingErrors(null);\n    setRowCount(null);\n    setFeedbackMessage('');\n    setCsvValidationErrors(null);\n    setImportResult(null); // Reset import result on new file\n    setImportFeedback(''); // Reset import feedback\n\n    if (files.length > 0) {\n      const file = files[0];\n      setUploadedFile(file);\n      setFeedbackMessage(`Processing \"${file.name}\"...`);\n      try {\n        const parsedResult = await parseCsvFile(file);\n        console.log('Parsed CSV Result:', parsedResult);\n\n        setParsingErrors(\n          parsedResult.errors.length > 0\n            ? parsedResult.errors.map((e) => ({ ...e, row: e.row ?? -1 }))\n            : null\n        ); // Ensure row is always number\n        setRowCount(parsedResult.data.length);\n\n        const validationResult = validateCsvData(parsedResult);\n        setParsedData(validationResult.validatedData);\n        setCsvValidationErrors(\n          validationResult.errors.length > 0 ? validationResult.errors : null\n        );\n\n        let currentFeedback = `Successfully processed \"${file.name}\". Found ${parsedResult.data.length} data rows.`;\n        if (parsedResult.errors.length > 0) {\n          currentFeedback += ` Encountered ${parsedResult.errors.length} parsing error(s).`;\n        }\n        if (validationResult.errors.length > 0) {\n          currentFeedback += ` Found ${validationResult.errors.length} validation issue(s). Please check below.`;\n        } else if (\n          parsedResult.errors.length === 0 &&\n          validationResult.validatedData.length > 0\n        ) {\n          // Only add \"looks good\" if there were no parsing errors AND some data was actually validated.\n          currentFeedback += ` CSV structure and required fields look good!`;\n        } else if (\n          parsedResult.errors.length === 0 &&\n          validationResult.validatedData.length === 0 &&\n          parsedResult.data.length > 0\n        ) {\n          // All rows were filtered out by validation, but no explicit validation errors (e.g. all rows invalid format but not header issues)\n          currentFeedback += ` All ${parsedResult.data.length} data rows were filtered out during validation. Please check data format.`;\n        }\n\n        setFeedbackMessage(currentFeedback);\n      } catch (error) {\n        console.error('Error processing CSV in parent component:', error);\n        setFeedbackMessage(\n          `Error processing \"${file.name}\": ${(error as Error).message}`\n        );\n        setParsingErrors([\n          {\n            message: (error as Error).message,\n            row: 0,\n            code: 'ProcessingError',\n            type: 'General',\n          },\n        ]);\n        setParsedData(null);\n        setCsvValidationErrors(null);\n      }\n    } else {\n      setFeedbackMessage('File selection cancelled or no file provided.');\n    }\n  };\n\n  /*\n  const importMutation = api.contacts.importCsvData.useMutation({\n    onMutate: () => {\n      setIsImporting(true);\n      setImportFeedback('Importing contacts...');\n      setImportResult(null);\n    },\n    onSuccess: (data: ImportCsvDataResponse) => {\n      setImportFeedback(data.overallStatus || 'Import completed.');\n      setImportResult(data);\n      // Optionally clear parsedData or file after successful import\n      // setParsedData(null);\n      // setUploadedFile(null);\n      // setCsvValidationErrors(null);\n    },\n    onError: (error: TRPCClientErrorLike<AppRouter>) => {\n      // Use TRPCClientErrorLike\n      setImportFeedback(`Import failed: ${error.message}`);\n      setImportResult({ error: error.message });\n    },\n    onSettled: () => {\n      setIsImporting(false);\n    },\n  });\n  */\n\n  const handleImportContacts = () => {\n    if (\n      parsedData &&\n      (!csvValidationErrors || csvValidationErrors.length === 0)\n    ) {\n      // The backend expects an object { contacts: ParsedCsvRow[] }\n      // Ensure parsedData matches the structure expected by csvContactInput Zod schema on backend\n      // Keys in ParsedCsvRow should align with csvContactInput fields (e.g. 'company', not 'company_name')\n      const contactsWithOriginalIndex = parsedData.map((contact, index) => ({\n        ...contact,\n        originalIndex: index,\n      }));\n      // importMutation.mutate({\n      //   contacts: validatedContacts,\n      //   fieldMapping: fieldMapping as Record<string, keyof ValidatedContactData>,\n      // });\n      console.warn('CSV import functionality is currently disabled.');\n      setImportFeedback('CSV import functionality is currently disabled.');\n    } else {\n      setImportFeedback(\n        'Cannot import: No valid data or validation errors exist.'\n      );\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto p-8\">\n      <h1 className=\"text-2xl font-bold mb-6\">CSV Upload Component Test</h1>\n\n      <div className=\"max-w-xl mx-auto\">\n        <p className=\"mb-4 text-muted-foreground\">\n          This page demonstrates the integration of the <code>CsvUpload</code>{' '}\n          component. Try uploading a CSV file (max 10MB).\n        </p>\n        <CsvUpload onFilesAccepted={handleFilesAccepted} />\n      </div>\n\n      {feedbackMessage && (\n        <div className=\"mt-6 p-4 border rounded-md bg-secondary/50\">\n          <h2 className=\"text-lg font-semibold mb-2\">\n            Parent Component Feedback:\n          </h2>\n          <p>{feedbackMessage}</p>\n          {uploadedFile && (\n            <div className=\"mt-2 text-sm space-y-1\">\n              <p>\n                <strong>File Name:</strong> {uploadedFile.name}\n              </p>\n              <p>\n                <strong>File Size:</strong>{' '}\n                {(uploadedFile.size / 1024).toFixed(2)} KB\n              </p>\n              <p>\n                <strong>File Type:</strong> {uploadedFile.type}\n              </p>\n            </div>\n          )}\n          {rowCount !== null && (\n            <p className=\"mt-2 text-sm\">\n              <strong>Rows Parsed (excluding header):</strong> {rowCount}\n            </p>\n          )}\n          {parsingErrors && parsingErrors.length > 0 && (\n            <div className=\"mt-3\">\n              <h3 className=\"text-md font-semibold text-destructive mb-1\">\n                Parsing Errors:\n              </h3>\n              <ul className=\"list-disc list-inside text-sm text-destructive/90 bg-destructive/10 p-2 rounded-md\">\n                {parsingErrors.map((err, index) => (\n                  <li key={index}>\n                    Row {err.row !== undefined ? err.row + 1 : 'N/A'}:{' '}\n                    {err.message} {err.code && `(${err.code})`}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n          {parsedData && parsedData.length > 0 && (\n            <div className=\"mt-3\">\n              <h3 className=\"text-md font-semibold mb-1\">\n                Parsed Data Preview (first 5 rows):\n              </h3>\n              <pre className=\"text-xs bg-muted p-2 rounded-md overflow-x-auto\">\n                {JSON.stringify(parsedData.slice(0, 5), null, 2)}\n              </pre>\n            </div>\n          )}\n\n          {/* Display CSV Validation Issues */}\n          {csvValidationErrors && csvValidationErrors.length > 0 && (\n            <div className=\"mt-3\">\n              <h3 className=\"text-md font-semibold text-yellow-700 mb-1\">\n                CSV Validation Issues:\n              </h3>\n              <ul className=\"list-disc list-inside text-sm text-yellow-700 bg-yellow-50 p-2 rounded-md\">\n                {csvValidationErrors.map((err, index) => (\n                  <li key={`val-${index}`}>\n                    {err.type === 'header'\n                      ? `Header Error: ${err.message}`\n                      : `Row ${err.row !== undefined ? err.row : 'N/A'}${err.field ? ` (Field: ${err.field})` : ''}: ${err.message}`}\n                  </li>\n                ))}\n              </ul>\n            </div>\n          )}\n\n          {/* Import Button and Feedback */}\n          {parsedData &&\n            parsedData.length > 0 &&\n            (!csvValidationErrors || csvValidationErrors.length === 0) && (\n              <div className=\"mt-6\">\n                <Button\n                  onClick={handleImportContacts}\n                  disabled={\n                    isImporting ||\n                    !parsedData ||\n                    (!!csvValidationErrors && csvValidationErrors.length > 0)\n                  }\n                >\n                  {isImporting ? 'Importing...' : 'Import Contacts'}\n                </Button>\n              </div>\n            )}\n          {importFeedback && (\n            <div\n              className={`mt-4 p-3 rounded-md ${importResult && 'error' in importResult ? 'bg-destructive/20 text-destructive' : 'bg-green-100 text-green-700'}`}\n            >\n              <p className=\"font-semibold\">Import Status:</p>\n              <p>{importFeedback}</p>\n              {importResult && (\n                <div className=\"mt-4 p-3 border rounded-md bg-muted/50\">\n                  <h3 className=\"text-md font-semibold mb-1\">\n                    Import Results:\n                  </h3>\n                  {'error' in importResult ? (\n                    <p className=\"text-sm text-red-600\">\n                      Error Detail: {importResult.error}\n                    </p>\n                  ) : (\n                    <>\n                      <p className=\"text-sm\">\n                        Successfully imported: {importResult.successCount}{' '}\n                        contacts.\n                      </p>\n                      <p className=\"text-sm\">\n                        Skipped: {importResult.skippedCount} contacts.\n                      </p>\n                      <p className=\"text-sm\">\n                        Failed to import (errors): {importResult.errorCount}{' '}\n                        contacts.\n                      </p>\n                      {importResult.results &&\n                        importResult.results.length > 0 && (\n                          <details className=\"mt-2 text-xs\">\n                            <summary>\n                              Show detailed results (\n                              {importResult.results.length} rows processed)\n                            </summary>\n                            <ul className=\"max-h-40 overflow-y-auto list-disc pl-5 mt-1 space-y-1\">\n                              {importResult.results.map((item) => (\n                                <li\n                                  key={item.originalIndex}\n                                  className={\n                                    item.status === 'imported'\n                                      ? 'text-green-700'\n                                      : item.status === 'skipped'\n                                        ? 'text-yellow-700'\n                                        : item.status === 'error'\n                                          ? 'text-red-700'\n                                          : ''\n                                  }\n                                >\n                                  Row {item.originalIndex + 1}:{' '}\n                                  {item.status.toUpperCase()} - {item.message}\n                                  {item.email && ` (Email: ${item.email})`}\n                                  {item.errorDetails && (\n                                    <span className=\"block text-red-500\">\n                                      Error: {item.errorDetails}\n                                    </span>\n                                  )}\n                                </li>\n                              ))}\n                            </ul>\n                          </details>\n                        )}\n                      {/* TODO: Display detailed errors per row if backend provides them */}\n                    </>\n                  )}\n                </div>\n              )}\n            </div>\n          )}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/import/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":14,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ArrowLeft, Upload, FileSpreadsheet, Check, AlertCircle } from 'lucide-react';\nimport Link from 'next/link';\nimport { Button } from '@/components/ui/button';\nimport { Card } from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { api } from '@/lib/trpc';\n\nexport default function ImportContactsPage() {\n  const router = useRouter();\n  const [file, setFile] = useState<File | null>(null);\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadSuccess, setUploadSuccess] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  \n  // Handle file selection\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0] || null;\n    setFile(selectedFile);\n    setUploadSuccess(false);\n    setUploadError(null);\n  };\n  \n  // Handle file upload\n  const handleUpload = async () => {\n    if (!file) {\n      setUploadError('Please select a file to upload');\n      return;\n    }\n    \n    // Check file type\n    const fileType = file.name.split('.').pop()?.toLowerCase();\n    if (!['csv', 'xlsx', 'xls'].includes(fileType || '')) {\n      setUploadError('Please upload a CSV or Excel file');\n      return;\n    }\n    \n    setIsUploading(true);\n    setUploadError(null);\n    \n    try {\n      // Here you would implement the actual file upload and processing\n      // For now, we'll just simulate a successful upload after a delay\n      await new Promise(resolve => setTimeout(resolve, 2000));\n      \n      setUploadSuccess(true);\n      setFile(null);\n      \n      // Reset the file input\n      const fileInput = document.getElementById('file-upload') as HTMLInputElement;\n      if (fileInput) {\n        fileInput.value = '';\n      }\n    } catch (error) {\n      setUploadError('An error occurred while uploading the file. Please try again.');\n      console.error('Upload error:', error);\n    } finally {\n      setIsUploading(false);\n    }\n  };\n  \n  return (\n    <div className=\"container mx-auto p-6 max-w-4xl\">\n      <div className=\"mb-6\">\n        <Link href=\"/contacts\" className=\"flex items-center text-teal-600 hover:text-teal-800\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Contacts\n        </Link>\n      </div>\n      \n      <div className=\"mb-8\">\n        <h1 className=\"text-3xl font-bold text-gray-900\">Import Contacts</h1>\n        <p className=\"text-gray-600 mt-2\">\n          Upload a CSV or Excel file to import contacts into your database.\n        </p>\n      </div>\n      \n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6\">\n        <Card className=\"p-6 col-span-2\">\n          <div className=\"space-y-6\">\n            <div>\n              <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Upload File</h2>\n              \n              <div className=\"space-y-4\">\n                <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\n                  <Input\n                    id=\"file-upload\"\n                    type=\"file\"\n                    accept=\".csv,.xlsx,.xls\"\n                    onChange={handleFileChange}\n                    className=\"hidden\"\n                  />\n                  <Label\n                    htmlFor=\"file-upload\"\n                    className=\"flex flex-col items-center justify-center cursor-pointer\"\n                  >\n                    <Upload className=\"h-12 w-12 text-gray-400 mb-2\" />\n                    <span className=\"text-sm font-medium text-gray-700\">\n                      {file ? file.name : 'Click to upload or drag and drop'}\n                    </span>\n                    <span className=\"text-xs text-gray-500 mt-1\">\n                      CSV, Excel files up to 10MB\n                    </span>\n                  </Label>\n                </div>\n                \n                {file && (\n                  <div className=\"flex items-center p-3 bg-gray-50 rounded-md\">\n                    <FileSpreadsheet className=\"h-5 w-5 text-teal-600 mr-2\" />\n                    <span className=\"text-sm font-medium text-gray-700 flex-1 truncate\">\n                      {file.name}\n                    </span>\n                    <span className=\"text-xs text-gray-500\">\n                      {(file.size / 1024 / 1024).toFixed(2)} MB\n                    </span>\n                  </div>\n                )}\n                \n                {uploadSuccess && (\n                  <div className=\"flex items-center p-3 bg-green-50 text-green-700 rounded-md\">\n                    <Check className=\"h-5 w-5 mr-2\" />\n                    <span>File uploaded successfully! Your contacts are being processed.</span>\n                  </div>\n                )}\n                \n                {uploadError && (\n                  <div className=\"flex items-center p-3 bg-red-50 text-red-700 rounded-md\">\n                    <AlertCircle className=\"h-5 w-5 mr-2\" />\n                    <span>{uploadError}</span>\n                  </div>\n                )}\n                \n                <Button\n                  onClick={handleUpload}\n                  disabled={!file || isUploading}\n                  className=\"w-full\"\n                >\n                  {isUploading ? 'Uploading...' : 'Upload and Process'}\n                </Button>\n              </div>\n            </div>\n          </div>\n        </Card>\n        \n        <Card className=\"p-6\">\n          <h2 className=\"text-xl font-semibold text-gray-800 mb-4\">Import Tips</h2>\n          <ul className=\"space-y-3 text-sm text-gray-600\">\n            <li className=\"flex items-start\">\n              <span className=\"text-teal-600 font-bold mr-2\">•</span>\n              <span>Make sure your CSV has headers for each column</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-teal-600 font-bold mr-2\">•</span>\n              <span>Required fields: Name or First Name/Last Name</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-teal-600 font-bold mr-2\">•</span>\n              <span>Recommended fields: Email, Phone, Company, Job Title</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-teal-600 font-bold mr-2\">•</span>\n              <span>Maximum file size: 10MB</span>\n            </li>\n            <li className=\"flex items-start\">\n              <span className=\"text-teal-600 font-bold mr-2\">•</span>\n              <span>Supported formats: CSV, Excel (.xlsx, .xls)</span>\n            </li>\n          </ul>\n          \n          <div className=\"mt-6 pt-6 border-t border-gray-200\">\n            <h3 className=\"font-medium text-gray-800 mb-2\">Need a template?</h3>\n            <Button\n              variant=\"outline\"\n              size=\"sm\"\n              className=\"w-full\"\n              onClick={() => {\n                // Create CSV content with headers\n                const headers = [\n                  \"First Name\",\n                  \"Last Name\",\n                  \"Email\",\n                  \"Phone\",\n                  \"Company\",\n                  \"Job Title\",\n                  \"Notes\",\n                  \"Source\"\n                ];\n                \n                // Create CSV content\n                const csvContent = headers.join(\",\") + \"\\n\";\n                \n                // Create a Blob with the CSV content\n                const blob = new Blob([csvContent], { type: \"text/csv;charset=utf-8;\" });\n                \n                // Create a download link\n                const link = document.createElement(\"a\");\n                const url = URL.createObjectURL(blob);\n                \n                // Set link properties\n                link.setAttribute(\"href\", url);\n                link.setAttribute(\"download\", \"contacts_import_template.csv\");\n                \n                // Append to body, click and remove\n                document.body.appendChild(link);\n                link.click();\n                document.body.removeChild(link);\n              }}\n            >\n              Download Template\n            </Button>\n          </div>\n        </Card>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/new/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":47,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1512,1515],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1512,1515],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { ContactForm, ContactFormData } from '@/app/contacts/ContactForm';\nimport { api } from '@/lib/trpc';\nimport { Button } from '@/components/ui/button';\nimport { ArrowLeft } from 'lucide-react';\n\nexport default function NewContactPage() {\n  const router = useRouter();\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n  \n  const utils = api.useUtils();\n  \n  // Save mutation\n  const saveContact = api.contacts.save.useMutation({\n    onSuccess: () => {\n      utils.contacts.list.invalidate();\n      utils.groups.list.invalidate();\n      router.push('/contacts');\n    },\n    onError: (error) => {\n      setError(`Error saving contact: ${error.message}`);\n      setIsSubmitting(false);\n    },\n  });\n\n  const handleSubmit = async (data: ContactFormData) => {\n    setIsSubmitting(true);\n    setError(null);\n\n    try {\n      await saveContact.mutateAsync({\n        full_name: data.full_name,\n        email: data.email || undefined,\n        phone: data.phone || undefined,\n        company_name: data.company_name || undefined,\n        job_title: data.job_title || undefined,\n        profile_image_url: data.profile_image_url || undefined,\n        source: data.source || undefined,\n        notes: data.notes || undefined,\n        last_contacted_at: data.last_contacted_at || undefined,\n        // Add other fields as needed\n      });\n    } catch (err: any) {\n      setError(err.message || 'An unexpected error occurred');\n      setIsSubmitting(false);\n    }\n  };\n\n  return (\n    <div className=\"container mx-auto py-8 px-4\">\n      <div className=\"flex items-center mb-6\">\n        <Button variant=\"outline\" onClick={() => router.push('/contacts')} className=\"mr-4\">\n          <ArrowLeft className=\"mr-2 h-4 w-4\" />\n          Back to Contacts\n        </Button>\n        <h1 className=\"text-2xl font-bold\">Add New Contact</h1>\n      </div>\n      \n      <ContactForm\n        isOpen={true}\n        onSubmit={handleSubmit}\n        onClose={() => router.push('/contacts')}\n        isSubmitting={isSubmitting}\n        error={error}\n        editingContactId={null}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/contacts/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":34,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1190,1193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1190,1193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Contact } from '@/app/contacts/ContactsTable'; // Import Contact type\nimport { ContactsWidgets } from '@/components/contacts/ContactsWidgets';\nimport { Suspense } from 'react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { createClient } from '@/lib/supabase/server';\nimport ContactsTableClient from '@/app/contacts/ContactsTableClient';\n\n// A simple loading state for the page content\nfunction ContactsPageSkeleton() {\n  return (\n    <div className=\"p-4 md:p-6 space-y-6\">\n      <Skeleton className=\"h-24 w-full\" />\n      <Skeleton className=\"h-96 w-full\" />\n    </div>\n  );\n}\n\n// Server component to fetch data\nexport default async function ContactsPage() {\n  // Fetch contacts from Supabase\n  try {\n    const supabase = await createClient();\n    const { data: contacts, error } = await supabase\n      .from('contacts')\n      .select('*, tags(*)')\n      .order('full_name', { ascending: true });\n\n    if (error) {\n      console.error('Error fetching contacts:', error);\n      throw new Error(`Failed to fetch contacts: ${error.message}`);\n    }\n\n    // Transform the data to match the Contact type\n    const formattedContacts: Contact[] = contacts?.map((contact: any) => ({\n      ...contact,\n      tags: contact.tags as Array<{ id: string; name: string }> | null\n    })) || [];\n    \n    return (\n      <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n        <Suspense fallback={<ContactsPageSkeleton />}>\n          <div className=\"space-y-6\">\n            <ContactsWidgets />\n            <ContactsTableClient initialContacts={formattedContacts} />\n          </div>\n        </Suspense>\n      </main>\n    );\n  } catch (error) {\n    console.error('Error in ContactsPage:', error);\n    return (\n      <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n        <div className=\"flex flex-col items-center justify-center h-full\">\n          <div className=\"bg-red-50 border border-red-200 rounded-md p-4 max-w-md\">\n            <h2 className=\"text-lg font-semibold text-red-800 mb-2\">Error Loading Contacts</h2>\n            <p className=\"text-red-700\">There was a problem fetching your contacts. Please try refreshing the page.</p>\n          </div>\n        </div>\n      </main>\n    );\n  }\n\n\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/dashboard/DashboardClient.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/dashboard/DashboardContent.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/dashboard/components/DashboardWidgets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/docs/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/global-error.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/layout.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toast' is defined but never used.","line":30,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * Root Layout - Main Application Container (Server Component)\n *\n * This is the top-level layout component. As a Server Component, it is\n * responsible for the static parts of the application shell that are\n * shared across all pages.\n *\n * Responsibilities:\n * 1. Defining the <html> and <body> tags.\n * 2. Configuring and applying global fonts (Geist Sans and Geist Mono).\n * 3. Importing global CSS stylesheets.\n * 4. Rendering the global <Providers> component, which in turn handles\n *    all client-side state and logic (like authentication).\n *\n * Client-side logic, auth state, and conditional rendering based on path\n * are delegated to the <AppContent> component, rendered inside <Providers>.\n *\n * Date: June 11, 2025\n */\nimport type { Metadata } from 'next';\nimport { Geist, Geist_Mono } from 'next/font/google';\n\n// Global Styles\nimport './globals.css';\nimport './theme.css';\n\n// Providers and Components\nimport { Providers } from './providers';\nimport { AppContent } from '@/components/layout/AppContent'; // The new client logic component\nimport { Toaster, toast } from 'sonner';\n\n// Third-party tools\nimport { StagewiseToolbar } from '@stagewise/toolbar-next';\nimport { ReactPlugin } from '@stagewise-plugins/react';\n\n// Font configuration\nconst geistSans = Geist({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-geist-sans',\n});\n\nconst geistMono = Geist_Mono({\n  subsets: ['latin'],\n  display: 'swap',\n  variable: '--font-geist-mono',\n});\n\n// Static metadata, possible because this is now a Server Component.\nexport const metadata: Metadata = {\n  title: 'CodexCRM',\n  description: 'The intelligent CRM for modern professionals.',\n};\n\nexport default function RootLayout({\n  children,\n}: Readonly<{\n  children: React.ReactNode;\n}>) {\n  return (\n    <html lang=\"en\" suppressHydrationWarning>\n      <body\n        className={`${geistSans.variable} ${geistMono.variable} antialiased`}\n      >\n        <Providers>\n          <Toaster />\n          <StagewiseToolbar config={{ plugins: [ReactPlugin] }} />\n          \n          {/* AppContent acts as the dynamic boundary. Everything else is static. */}\n          {/* It will contain all the logic that was previously in this file. */}\n          <AppContent>{children}</AppContent>\n        </Providers>\n      </body>\n    </html>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/components/MarketingWidgets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/components/widgets/ContentCalendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Clock' is defined but never used.","line":4,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":47},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'PlusCircle' is defined but never used.","line":4,"column":63,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":73}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Calendar, ArrowRight, Sparkles, Clock, CalendarDays, PlusCircle } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\n\nexport function ContentCalendar() {\n  const [contentTitle, setContentTitle] = useState('');\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <div className=\"space-y-6\">\n        <div className=\"bg-blue-50 dark:bg-blue-950/20 p-6 rounded-lg\">\n          <h2 className=\"text-2xl font-bold flex items-center gap-2 mb-4 text-blue-700 dark:text-blue-300\">\n            <Calendar className=\"h-6 w-6\" />\n            Content Calendar\n          </h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Plan, schedule, and automate your content across all platforms. Our intuitive calendar \n            helps you maintain a consistent presence and engage your audience with timely, relevant content.\n          </p>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-1 block\">Content Title</label>\n              <Input \n                placeholder=\"e.g., '5 Mindfulness Practices for Busy Professionals'\"\n                value={contentTitle}\n                onChange={(e) => setContentTitle(e.target.value)}\n                className=\"bg-white dark:bg-blue-950/40\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Content Type</label>\n                <select className=\"w-full h-9 rounded-md border border-input bg-white dark:bg-blue-950/40 px-3 py-1 text-sm\">\n                  <option value=\"blog\">Blog Post</option>\n                  <option value=\"social\">Social Media Post</option>\n                  <option value=\"email\">Email Newsletter</option>\n                  <option value=\"video\">Video Content</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Schedule Date</label>\n                <Input \n                  type=\"date\"\n                  className=\"bg-white dark:bg-blue-950/40\"\n                />\n              </div>\n            </div>\n            \n            <Button className=\"w-full bg-teal-600 hover:bg-teal-100 hover:text-teal-800 text-white\">\n              <Sparkles className=\"h-4 w-4 mr-2\" />\n              Add to Calendar\n            </Button>\n          </div>\n        </div>\n        \n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-semibold\">Key Features</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-blue-500\"></div>\n                <span className=\"text-sm\">Visual content planning with drag-and-drop interface</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-blue-500\"></div>\n                <span className=\"text-sm\">Automated publishing to multiple platforms</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-blue-500\"></div>\n                <span className=\"text-sm\">Content recycling and repurposing suggestions</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-blue-500\"></div>\n                <span className=\"text-sm\">Performance analytics for published content</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"space-y-6\">\n        <Card className=\"border-blue-100 dark:border-blue-900/50 py-0\">\n          <CardHeader className=\"pt-6 pb-3 bg-blue-50 dark:bg-blue-950/20 rounded-t-lg\">\n            <CardTitle className=\"text-lg font-semibold\">Calendar Preview</CardTitle>\n            <CardDescription>Your upcoming content schedule</CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"border rounded-md p-4 bg-white dark:bg-blue-950/10\">\n              <div className=\"text-sm font-medium mb-3 pb-2 border-b flex items-center justify-between\">\n                <span>June 2025</span>\n                <div className=\"flex gap-1\">\n                  <button className=\"p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20\">\n                    <ArrowRight className=\"h-4 w-4 rotate-180\" />\n                  </button>\n                  <button className=\"p-1 rounded hover:bg-blue-50 dark:hover:bg-blue-900/20\">\n                    <ArrowRight className=\"h-4 w-4\" />\n                  </button>\n                </div>\n              </div>\n              \n              {/* Simplified week view with colored bubbles and labels */}\n              <div className=\"space-y-2\">\n                {[\"Mon\", \"Tue\", \"Wed\", \"Thu\", \"Fri\"].map((d, idx) => (\n                  <div key={d} className=\"flex items-start gap-3\">\n                    <span className=\"w-10 text-right text-xs mt-1 font-medium\">{d}</span>\n                    <div className=\"flex-1 space-y-1\">\n                      {idx === 1 && (\n                        <div className=\"bg-teal-100 text-teal-800 rounded px-2 py-1 text-xs inline-flex items-center gap-1\">\n                          <CalendarDays className=\"h-3 w-3\" /> Instagram – {contentTitle || 'Mindfulness Reel'}\n                        </div>\n                      )}\n                      {idx === 2 && (\n                        <div className=\"bg-blue-100 text-blue-800 rounded px-2 py-1 text-xs inline-flex items-center gap-1\">\n                          <CalendarDays className=\"h-3 w-3\" /> Blog – 5 Tips for Balance\n                        </div>\n                      )}\n                      {idx === 4 && (\n                        <div className=\"bg-purple-100 text-purple-800 rounded px-2 py-1 text-xs inline-flex items-center gap-1\">\n                          <CalendarDays className=\"h-3 w-3\" /> Newsletter – Weekend Reset\n                        </div>\n                      )}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between border-t pt-4 pb-6\">\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <Link href={{ pathname: \"/marketing/calendar/analytics\" }}>\n                View Analytics\n              </Link>\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-blue-50 hover:bg-blue-100 dark:bg-blue-950/20 dark:hover:bg-blue-900/30\" asChild>\n              <Link href={{ pathname: \"/marketing/calendar\" }}>\n                Open Full Calendar\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </Button>\n          </CardFooter>\n        </Card>\n        \n        <div className=\"bg-amber-50 dark:bg-amber-950/20 p-4 rounded-lg\">\n          <h3 className=\"font-medium flex items-center gap-2 text-amber-700 dark:text-amber-300\">\n            <Sparkles className=\"h-4 w-4\" />\n            Try Our Lead Magnet Studio\n          </h3>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Need content for your calendar? Our Lead Magnet Studio helps you create valuable downloadable resources to attract new clients.\n          </p>\n          <Button variant=\"link\" className=\"text-amber-600 dark:text-amber-400 p-0 h-auto mt-2\" onClick={() => document.querySelector('[value=\"lead\"]')?.dispatchEvent(new MouseEvent('click'))}>\n            Explore Lead Magnet Studio\n            <ArrowRight className=\"ml-1 h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/components/widgets/CreatorStudio.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":103,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5156,5200],"text":"\n                    Your design based on: &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5156,5200],"text":"\n                    Your design based on: &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5156,5200],"text":"\n                    Your design based on: &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5156,5200],"text":"\n                    Your design based on: &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":103,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5212,5213],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5212,5213],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5212,5213],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5212,5213],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"jsx-a11y/alt-text","severity":1,"message":"Image elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","line":109,"column":19,"nodeType":"JSXOpeningElement","endLine":109,"endColumn":74},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":111,"column":46,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click &quot;Generate Content\""},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click &ldquo;Generate Content\""},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click &#34;Generate Content\""},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click &rdquo;Generate Content\""},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":111,"column":63,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click \"Generate Content&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click \"Generate Content&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click \"Generate Content&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[5539,5603],"text":"\n                    Enter a prompt and click \"Generate Content&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Palette, ArrowRight, Sparkles, Image, Layers, Wand2 } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\n\nexport function CreatorStudio() {\n  const [promptText, setPromptText] = useState('');\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <div className=\"space-y-6\">\n        <div className=\"bg-purple-50 dark:bg-purple-950/20 p-6 rounded-lg\">\n          <h2 className=\"text-2xl font-bold flex items-center gap-2 mb-4 text-purple-700 dark:text-purple-300\">\n            <Palette className=\"h-6 w-6\" />\n            Creator Studio\n          </h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Go beyond visuals—ideate, write, and design any marketing asset in one place. Creator Studio uses AI to craft on-brand blog posts, email sequences, captions, and eye-catching graphics from a single prompt or your past content.\n          </p>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-1 block\">Design Prompt</label>\n              <Input \n                placeholder=\"e.g., 'Calming yoga pose in nature with soft lighting'\"\n                value={promptText}\n                onChange={(e) => setPromptText(e.target.value)}\n                className=\"bg-white dark:bg-purple-950/40\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Content Type</label>\n                <select className=\"w-full h-9 rounded-md border border-input bg-white dark:bg-purple-950/40 px-3 py-1 text-sm\">\n                  <option value=\"social\">Social Media Post</option>\n                  <option value=\"banner\">Website Banner</option>\n                  <option value=\"flyer\">Digital Flyer</option>\n                  <option value=\"logo\">Logo Design</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Style</label>\n                <select className=\"w-full h-9 rounded-md border border-input bg-white dark:bg-purple-950/40 px-3 py-1 text-sm\">\n                  <option value=\"minimalist\">Minimalist</option>\n                  <option value=\"vibrant\">Vibrant & Colorful</option>\n                  <option value=\"serene\">Serene & Calm</option>\n                  <option value=\"professional\">Professional</option>\n                </select>\n              </div>\n            </div>\n            \n            <Button className=\"w-full bg-purple-600 text-white hover:bg-teal-100 hover:text-teal-800\">\n              <Sparkles className=\"h-4 w-4 mr-2\" />\n              Generate Content\n            </Button>\n          </div>\n        </div>\n        \n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-semibold\">Key Features</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-purple-500\"></div>\n                <span className=\"text-sm\">AI-powered image generation with your brand style</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-purple-500\"></div>\n                <span className=\"text-sm\">Customizable templates for all social platforms</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-purple-500\"></div>\n                <span className=\"text-sm\">Brand kit integration for consistent visuals</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-purple-500\"></div>\n                <span className=\"text-sm\">One-click resize for different platforms</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"space-y-6\">\n        <Card className=\"border-purple-100 dark:border-purple-900/50 py-0\">\n          <CardHeader className=\"pt-6 pb-3 bg-purple-50 dark:bg-purple-950/20 rounded-t-lg\">\n            <CardTitle className=\"text-lg font-semibold\">Design Preview</CardTitle>\n            <CardDescription>How your generated design might look</CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"border rounded-md p-4 bg-white dark:bg-purple-950/10 aspect-square flex items-center justify-center relative overflow-hidden\">\n              {promptText ? (\n                <div className=\"text-center space-y-4\">\n                  <Layers className=\"h-16 w-16 mx-auto text-purple-400\" />\n                  <p className=\"text-sm text-muted-foreground\">\n                    Your design based on: \"{promptText}\"<br />\n                    would appear here after generation\n                  </p>\n                </div>\n              ) : (\n                <div className=\"text-center space-y-4\">\n                  <Image className=\"h-16 w-16 mx-auto text-purple-300\" />\n                  <p className=\"text-sm text-muted-foreground z-10\">\n                    Enter a prompt and click \"Generate Content\"<br />\n                    to create your custom visual\n                  </p>\n                  <Wand2 className=\"absolute -bottom-4 -left-4 h-24 w-24 text-purple-100/50 dark:text-purple-900/50 rotate-12\" />\n                  <Layers className=\"absolute -top-5 -right-5 h-20 w-20 text-purple-100/50 dark:text-purple-900/50 rotate-12\" />\n                </div>\n              )}\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between border-t pt-4 pb-6\">\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <Link href={{ pathname: \"/marketing/creator/templates\" }}>\n                Browse Templates\n              </Link>\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-purple-50 hover:bg-purple-100 dark:bg-purple-950/20 dark:hover:bg-purple-900/30\" asChild>\n              <Link href={{ pathname: \"/marketing/creator\" }}>\n                Open Creator Studio\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </Button>\n          </CardFooter>\n        </Card>\n        \n        <div className=\"bg-blue-50 dark:bg-blue-950/20 p-4 rounded-lg\">\n          <h3 className=\"font-medium flex items-center gap-2 text-blue-700 dark:text-blue-300\">\n            <Sparkles className=\"h-4 w-4\" />\n            Try Our Content Calendar\n          </h3>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Ready to schedule your new designs? Our Content Calendar helps you plan and automate your content across all platforms.\n          </p>\n          <Button variant=\"link\" className=\"text-blue-600 dark:text-blue-400 p-0 h-auto mt-2\" onClick={() => document.querySelector('[value=\"calendar\"]')?.dispatchEvent(new MouseEvent('click'))}>\n            Explore Content Calendar\n            <ArrowRight className=\"ml-1 h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/components/widgets/EmailMarketing.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":105,"column":68,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5131,5248],"text":"Thank you for joining our wellness community. We&apos;re excited to be part of your journey toward balance and well-being."},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5131,5248],"text":"Thank you for joining our wellness community. We&lsquo;re excited to be part of your journey toward balance and well-being."},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5131,5248],"text":"Thank you for joining our wellness community. We&#39;re excited to be part of your journey toward balance and well-being."},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5131,5248],"text":"Thank you for joining our wellness community. We&rsquo;re excited to be part of your journey toward balance and well-being."},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":109,"column":31,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[5457,5488],"text":"Beginner&apos;s guide to mindfulness"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[5457,5488],"text":"Beginner&lsquo;s guide to mindfulness"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[5457,5488],"text":"Beginner&#39;s guide to mindfulness"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[5457,5488],"text":"Beginner&rsquo;s guide to mindfulness"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Mail, ArrowRight, Sparkles, Megaphone } from \"lucide-react\";\nimport Link from \"next/link\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle, CardFooter } from \"@/components/ui/card\";\n\nexport function EmailMarketing() {\n  const [emailSubject, setEmailSubject] = useState('');\n\n  return (\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\n      <div className=\"space-y-6\">\n        <div className=\"bg-teal-50 dark:bg-teal-950/20 p-6 rounded-lg\">\n          <h2 className=\"text-2xl font-bold flex items-center gap-2 mb-4 text-teal-700 dark:text-teal-300\">\n            <Mail className=\"h-6 w-6\" />\n            Email Marketing Automation\n          </h2>\n          <p className=\"text-muted-foreground mb-6\">\n            Design automated email sequences that nurture leads and build lasting client relationships. \n            Our intuitive email builder helps you create beautiful, personalized emails that resonate with your audience.\n          </p>\n          \n          <div className=\"space-y-4\">\n            <div>\n              <label className=\"text-sm font-medium mb-1 block\">Email Subject Line</label>\n              <Input \n                placeholder=\"e.g., 'Your Wellness Journey Begins Today'\"\n                value={emailSubject}\n                onChange={(e) => setEmailSubject(e.target.value)}\n                className=\"bg-white dark:bg-teal-950/40\"\n              />\n            </div>\n            \n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Audience</label>\n                <select className=\"w-full h-9 rounded-md border border-input bg-white dark:bg-teal-950/40 px-3 py-1 text-sm\">\n                  <option value=\"new\">New Subscribers</option>\n                  <option value=\"existing\">Existing Clients</option>\n                  <option value=\"inactive\">Inactive Clients</option>\n                </select>\n              </div>\n              <div>\n                <label className=\"text-sm font-medium mb-1 block\">Email Type</label>\n                <select className=\"w-full h-9 rounded-md border border-input bg-white dark:bg-teal-950/40 px-3 py-1 text-sm\">\n                  <option value=\"welcome\">Welcome Series</option>\n                  <option value=\"newsletter\">Newsletter</option>\n                  <option value=\"promotion\">Promotion</option>\n                  <option value=\"event\">Event Invitation</option>\n                </select>\n              </div>\n            </div>\n            \n            <Button className=\"w-full bg-teal-600 hover:bg-teal-100 hover:text-teal-800 text-white\">\n              <Sparkles className=\"h-4 w-4 mr-2\" />\n              Generate Email Template\n            </Button>\n          </div>\n        </div>\n        \n        <Card>\n          <CardHeader className=\"pb-3\">\n            <CardTitle className=\"text-lg font-semibold\">Key Features</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-teal-500\"></div>\n                <span className=\"text-sm\">Personalized templates with dynamic content</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-teal-500\"></div>\n                <span className=\"text-sm\">Behavior-based triggers and automations</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-teal-500\"></div>\n                <span className=\"text-sm\">Detailed performance analytics and insights</span>\n              </div>\n              <div className=\"flex items-center gap-2\">\n                <div className=\"h-2 w-2 rounded-full bg-teal-500\"></div>\n                <span className=\"text-sm\">A/B testing to optimize open and click rates</span>\n              </div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n      \n      <div className=\"space-y-6\">\n        <Card className=\"border-teal-100 dark:border-teal-900/50 py-0\">\n          <CardHeader className=\"pt-6 pb-3 bg-teal-50 dark:bg-teal-950/20 rounded-t-lg\">\n            <CardTitle className=\"text-lg font-semibold\">Email Preview</CardTitle>\n            <CardDescription>How your email might look to recipients</CardDescription>\n          </CardHeader>\n          <CardContent className=\"pt-6\">\n            <div className=\"border rounded-md p-4 bg-white dark:bg-teal-950/10\">\n              <div className=\"border-b pb-2 mb-3\">\n                <div className=\"font-medium\">{emailSubject || \"Your Wellness Journey Begins Today\"}</div>\n                <div className=\"text-xs text-muted-foreground\">From: Your Practice Name</div>\n              </div>\n              <div className=\"space-y-3 text-sm\">\n                <p>Dear [Client Name],</p>\n                <p>Thank you for joining our wellness community. We're excited to be part of your journey toward balance and well-being.</p>\n                <p>Here are some resources to get you started:</p>\n                <ul className=\"list-disc pl-5 space-y-1\">\n                  <li>Your free wellness assessment</li>\n                  <li>Beginner's guide to mindfulness</li>\n                  <li>Schedule your first session</li>\n                </ul>\n                <p>Looking forward to supporting you,</p>\n                <p>Your Name</p>\n              </div>\n            </div>\n          </CardContent>\n          <CardFooter className=\"flex justify-between border-t pt-4 pb-6\">\n            <Button variant=\"outline\" size=\"sm\" asChild>\n              <Link href={{ pathname: \"/marketing/email/templates\" }}>\n                Browse Templates\n              </Link>\n            </Button>\n            <Button variant=\"outline\" size=\"sm\" className=\"bg-teal-50 hover:bg-teal-100 dark:bg-teal-950/20 dark:hover:bg-teal-900/30\" asChild>\n              <Link href={{ pathname: \"/marketing/email\" }}>\n                Create Email Campaign\n                <ArrowRight className=\"ml-2 h-4 w-4\" />\n              </Link>\n            </Button>\n          </CardFooter>\n        </Card>\n        \n        <div className=\"bg-rose-50 dark:bg-rose-950/20 p-4 rounded-lg\">\n          <h3 className=\"font-medium flex items-center gap-2 text-rose-700 dark:text-rose-300\">\n            <Megaphone className=\"h-4 w-4\" />\n            Try Our Creator Studio\n          </h3>\n          <p className=\"text-sm text-muted-foreground mt-1\">\n            Unlock limitless content potential with Creator Studio. Ideate blog posts, social captions, emails, and more — then let AI craft on-brand copy and visuals for you. Feed previous blogs or videos and watch the studio match your unique tone.\n          </p>\n          <Button variant=\"link\" className=\"text-rose-600 dark:text-rose-400 p-0 h-auto mt-2\" onClick={() => document.querySelector('[value=\"creator\"]')?.dispatchEvent(new MouseEvent('click'))}>\n            Explore Creator Studio\n            <ArrowRight className=\"ml-1 h-3 w-3\" />\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/components/widgets/LeadMagnetStudio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/components/widgets/MembershipLoyalty.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/components/widgets/QuizCreator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/marketing/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/providers-client.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AppRouter' is defined but never used.","line":3,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport type { AppRouter } from '@codexcrm/server/src/root';\nimport { QueryClient, QueryClientProvider, QueryCache, MutationCache } from '@tanstack/react-query';\nimport { httpBatchLink } from '@trpc/client';\nimport React, { useEffect } from 'react';\nimport superjson from 'superjson';\nimport { AuthProvider } from '@codexcrm/auth';\n\nimport { logDebugInfo } from '@/lib/debug-helper';\nimport { api, API_VERSION } from '@/lib/trpc';\n\nexport default function ClientProviders({\n  children,\n}: {\n  children: React.ReactNode;\n}) {\n  // Import the tRPC client from the correct location\n\n  /**\n   * Helper to get the base URL for API requests depending on environment\n   */\n  function getBaseUrl() {\n    // In the browser, we use an absolute URL without domain to avoid CORS issues\n    if (typeof window !== 'undefined') {\n      // Make sure we return the absolute path from the root\n      return window.location.origin;\n    }\n    // SSR should use vercel url\n    if (process.env.VERCEL_URL) return `https://${process.env.VERCEL_URL}`;\n\n    // Dev SSR should use localhost\n    return 'http://localhost:3008';\n  }\n\n  /**\n   * Client-side providers component that wraps the app with tRPC and React Query providers\n   * This is extracted as a separate client component to avoid issues with server components\n   */\n  // Run debugging utilities on mount in development\n  useEffect(() => {\n    if (process.env.NODE_ENV === 'development') {\n      logDebugInfo();\n    }\n  }, []);\n\n  // Create React Query client with better error handling\n  const [queryClient] = React.useState<QueryClient>(\n    () =>\n      new QueryClient({\n        queryCache: new QueryCache({\n          onError: (error: Error) => {\n            console.error('React Query error:', error);\n          },\n        }),\n        mutationCache: new MutationCache({\n          onError: (error: Error) => {\n            console.error('Mutation error:', error);\n          },\n        }),\n        defaultOptions: {\n          queries: {\n            refetchOnWindowFocus: false,\n            retry: 1,\n          },\n        },\n      })\n  );\n\n  // Create tRPC client with better error handling\n  const [trpcClient] = React.useState(() => {\n    const baseUrl = getBaseUrl();\n    console.warn(\n      `Creating new tRPC client (version: ${API_VERSION}) with baseUrl: ${baseUrl}`\n    );\n\n    return api.createClient({\n      links: [\n        httpBatchLink({\n          transformer: superjson,\n          // Ensure we have a proper absolute URL\n          url: `${baseUrl}/api/trpc`,\n\n          // Custom fetch handler for debugging\n          fetch: async (input, init) => {\n            // Log request details\n            const inputUrl =\n              typeof input === 'string'\n                ? input\n                : input instanceof Request\n                  ? input.url\n                  : String(input);\n            console.warn('tRPC fetch request to:', inputUrl);\n\n            try {\n              // Use the standard fetch API with timeout\n              const controller = new AbortController();\n              const timeoutId = setTimeout(() => controller.abort(), 10000); // 10 second timeout\n\n              const response = await fetch(input, {\n                ...init,\n                credentials: 'include', // Include cookies for auth\n                signal: controller.signal,\n              });\n\n              clearTimeout(timeoutId);\n\n              // Log response status for debugging\n              console.warn(\n                `tRPC response from ${inputUrl}: ${response.status}`\n              );\n\n              if (!response.ok) {\n                console.error(\n                  `tRPC request failed: ${response.status} ${response.statusText}`\n                );\n              }\n\n              return response;\n            } catch (error) {\n              console.error('tRPC fetch error:', error);\n              throw error;\n            }\n          },\n\n          // Add headers for cache busting and debugging\n          headers: () => ({\n            'Cache-Control': 'no-cache, no-store, must-revalidate',\n            Pragma: 'no-cache',\n            Expires: '0',\n            'x-trpc-source': 'react',\n            'x-trpc-version': `${API_VERSION}`,\n            // Add additional debug header\n            'x-debug-url': 'true',\n          }),\n        }),\n      ],\n    });\n  });\n\n  return (\n    <AuthProvider>\n      <api.Provider client={trpcClient} queryClient={queryClient}>\n        <QueryClientProvider client={queryClient}>{children}</QueryClientProvider>\n      </api.Provider>\n    </AuthProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/providers.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/BreadcrumbNavigation.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'React' is defined but never used.","line":3,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":13}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\n\n/**\n * Empty placeholder component to satisfy import requirements\n * This component can be safely removed once all references are updated\n */\nexport function BreadcrumbNavigation() {\n  return null;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/CategoryViews.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":129,"column":65,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3677,3702],"text":"No tasks found matching &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3677,3702],"text":"No tasks found matching &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3677,3702],"text":"No tasks found matching &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3677,3702],"text":"No tasks found matching &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":129,"column":79,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[3715,3716],"text":"&quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[3715,3716],"text":"&ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[3715,3716],"text":"&#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[3715,3716],"text":"&rdquo;"},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { \n  Inbox, \n  Calendar, \n  CalendarDays, \n  Infinity, \n  Archive, \n  CheckCircle2,\n  FolderClosed,\n  Plus,\n  Search\n} from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Task } from './TaskCard';\nimport { VirtualizedTaskList } from './VirtualizedTaskList';\n\ninterface CategoryViewProps {\n  viewType: string;\n  projectName?: string | null;\n  tasks: Task[];\n  isLoading: boolean;\n  searchQuery: string;\n  onEdit: (taskId: string) => void;\n  onDelete: (taskId: string) => void;\n  onStatusChange: (taskId: string, newStatus: string) => void;\n  onToggleComplete: (taskId: string, completed: boolean) => void;\n  onAddTask: () => void;\n}\n\nexport function CategoryView({\n  viewType,\n  projectName,\n  tasks,\n  isLoading,\n  searchQuery,\n  onEdit,\n  onDelete,\n  onStatusChange,\n  onToggleComplete,\n  onAddTask\n}: CategoryViewProps) {\n  // Get view title and icon\n  const getViewInfo = () => {\n    switch(viewType) {\n      case 'inbox':\n        return { \n          title: 'Inbox', \n          icon: Inbox, \n          description: 'Tasks without a category',\n          emptyMessage: 'Your inbox is empty. Great job!'\n        };\n      case 'today':\n        return { \n          title: 'Today', \n          icon: Calendar, \n          description: 'Tasks due today',\n          emptyMessage: 'No tasks due today. Take a break!'\n        };\n      case 'upcoming':\n        return { \n          title: 'Upcoming', \n          icon: CalendarDays, \n          description: 'Tasks with future due dates',\n          emptyMessage: 'No upcoming tasks. You\\'re all caught up!'\n        };\n      case 'anytime':\n        return { \n          title: 'Anytime', \n          icon: Infinity, \n          description: 'Tasks with a category but no due date',\n          emptyMessage: 'No anytime tasks. Add some tasks that can be done whenever!'\n        };\n      case 'someday':\n        return { \n          title: 'Someday', \n          icon: Archive, \n          description: 'Low priority tasks',\n          emptyMessage: 'No someday tasks. Add some tasks for the future!'\n        };\n      case 'logbook':\n        return { \n          title: 'Logbook', \n          icon: CheckCircle2, \n          description: 'Completed tasks',\n          emptyMessage: 'No completed tasks yet. Keep working!'\n        };\n      case 'project':\n        return { \n          title: projectName || 'Project', \n          icon: FolderClosed, \n          description: `Tasks in the ${projectName} project`,\n          emptyMessage: `No tasks in ${projectName}. Add some tasks to get started!`\n        };\n      default:\n        return { \n          title: 'Tasks', \n          icon: Calendar, \n          description: 'All tasks',\n          emptyMessage: 'No tasks found. Add some tasks to get started!'\n        };\n    }\n  };\n\n  const viewInfo = getViewInfo();\n  const ViewIcon = viewInfo.icon;\n\n  // Empty state component\n  const EmptyState = () => (\n    <div className=\"text-center py-12 bg-gray-50 rounded-lg border border-dashed border-gray-200\">\n      <ViewIcon className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n      <p className=\"text-gray-500 mb-4\">{viewInfo.emptyMessage}</p>\n      <Button\n        onClick={onAddTask}\n        className=\"bg-teal-500 hover:bg-teal-600 text-white\"\n        size=\"sm\"\n      >\n        <Plus className=\"mr-2 h-4 w-4\" />\n        Add a task\n      </Button>\n    </div>\n  );\n\n  // Search empty state\n  const SearchEmptyState = () => (\n    <div className=\"text-center py-12 bg-gray-50 rounded-lg border border-dashed border-gray-200\">\n      <Search className=\"mx-auto h-12 w-12 text-gray-400 mb-4\" />\n      <p className=\"text-gray-500 mb-4\">No tasks found matching \"{searchQuery}\"</p>\n      <Button\n        onClick={onAddTask}\n        className=\"bg-teal-500 hover:bg-teal-600 text-white\"\n        size=\"sm\"\n      >\n        <Plus className=\"mr-2 h-4 w-4\" />\n        Add a task\n      </Button>\n    </div>\n  );\n\n  return (\n    <div className=\"space-y-6\">\n      <div className=\"flex items-center gap-3 mb-2\">\n        <ViewIcon className=\"h-6 w-6 text-gray-700\" />\n        <div>\n          <h1 className=\"text-2xl font-semibold text-gray-900\">{viewInfo.title}</h1>\n          <p className=\"text-sm text-gray-500\">{viewInfo.description}</p>\n        </div>\n      </div>\n\n      <VirtualizedTaskList\n        tasks={tasks}\n        onEdit={onEdit}\n        onDelete={onDelete}\n        onStatusChange={onStatusChange}\n        onToggleComplete={onToggleComplete}\n        isLoading={isLoading}\n        emptyState={searchQuery ? <SearchEmptyState /> : <EmptyState />}\n      />\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/DraggableTaskList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'activeId' is assigned a value but never used.","line":44,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { \n  DndContext, \n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent\n} from '@dnd-kit/core';\nimport { \n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy\n} from '@dnd-kit/sortable';\nimport { restrictToVerticalAxis } from '@dnd-kit/modifiers';\nimport { Task } from './TaskCard';\nimport { VirtualizedTaskList } from './VirtualizedTaskList';\n\ninterface DraggableTaskListProps {\n  tasks: Task[];\n  onEdit: (taskId: string) => void;\n  onDelete: (taskId: string) => void;\n  onStatusChange: (taskId: string, newStatus: string) => void;\n  onToggleComplete: (taskId: string, completed: boolean) => void;\n  onReorder: (tasks: Task[]) => void;\n  isLoading?: boolean;\n  emptyState?: React.ReactNode;\n}\n\nexport function DraggableTaskList({\n  tasks,\n  onEdit,\n  onDelete,\n  onStatusChange,\n  onToggleComplete,\n  onReorder,\n  isLoading = false,\n  emptyState\n}: DraggableTaskListProps) {\n  const [activeId, setActiveId] = useState<string | null>(null);\n  \n  // Set up sensors for drag and drop\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8, // Minimum drag distance before activation\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Handle drag end\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    \n    if (over && active.id !== over.id) {\n      const oldIndex = tasks.findIndex(task => task.id === active.id);\n      const newIndex = tasks.findIndex(task => task.id === over.id);\n      \n      if (oldIndex !== -1 && newIndex !== -1) {\n        // Create new array with reordered tasks\n        const newTasks = arrayMove(tasks, oldIndex, newIndex);\n        \n        // Update positions\n        const updatedTasks = newTasks.map((task, index) => ({\n          ...task,\n          position: index\n        }));\n        \n        // Call onReorder with the updated tasks\n        onReorder(updatedTasks);\n      }\n    }\n    \n    setActiveId(null);\n  };\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCenter}\n      onDragStart={(event) => setActiveId(String(event.active.id))}\n      onDragEnd={handleDragEnd}\n      modifiers={[restrictToVerticalAxis]}\n    >\n      <SortableContext\n        items={tasks.map(task => task.id)}\n        strategy={verticalListSortingStrategy}\n      >\n        <VirtualizedTaskList\n          tasks={tasks}\n          onEdit={onEdit}\n          onDelete={onDelete}\n          onStatusChange={onStatusChange}\n          onToggleComplete={onToggleComplete}\n          isLoading={isLoading}\n          emptyState={emptyState}\n        />\n      </SortableContext>\n    </DndContext>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/KeyboardShortcuts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/TaskAdapter.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/TaskBoard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getContainerFromStatus' is assigned a value but never used.","line":269,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":269,"endColumn":31}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useEffect } from 'react';\nimport {\n  DndContext,\n  DragOverlay,\n  closestCorners,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragStartEvent,\n  DragOverEvent,\n  DragEndEvent,\n} from '@dnd-kit/core';\nimport {\n  arrayMove,\n  SortableContext,\n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy,\n} from '@dnd-kit/sortable';\nimport { TaskCard, Task, TaskStatus } from './TaskCard';\nimport { TaskColumn } from './TaskColumn';\nimport { api } from '@/lib/trpc';\n\ninterface TaskBoardProps {\n  initialTasks: Task[];\n  selectedCategory: string | null;\n}\n\nexport function TaskBoard({ initialTasks, selectedCategory }: TaskBoardProps) {\n  // State for tasks and active drag\n  const [tasks, setTasks] = useState<Task[]>(initialTasks);\n  const [activeId, setActiveId] = useState<string | null>(null);\n  const [activeTask, setActiveTask] = useState<Task | null>(null);\n\n  // Update tasks when initialTasks changes\n  useEffect(() => {\n    if (initialTasks && Array.isArray(initialTasks)) {\n      setTasks(initialTasks);\n    }\n  }, [initialTasks]);\n\n  // Set up sensors for drag and drop\n  const sensors = useSensors(\n    useSensor(PointerSensor, {\n      activationConstraint: {\n        distance: 8,\n      },\n    }),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // Filter tasks by status\n  const todoTasks = tasks.filter(task => task.status === 'todo')\n    .sort((a, b) => a.position - b.position);\n  \n  const inProgressTasks = tasks.filter(task => task.status === 'in-progress')\n    .sort((a, b) => a.position - b.position);\n  \n  const doneTasks = tasks.filter(task => task.status === 'done')\n    .sort((a, b) => a.position - b.position);\n\n  // Filter tasks by category if selected\n  const filteredTodoTasks = selectedCategory \n    ? todoTasks.filter(task => task.category === selectedCategory)\n    : todoTasks;\n  \n  const filteredInProgressTasks = selectedCategory\n    ? inProgressTasks.filter(task => task.category === selectedCategory)\n    : inProgressTasks;\n  \n  const filteredDoneTasks = selectedCategory\n    ? doneTasks.filter(task => task.category === selectedCategory)\n    : doneTasks;\n\n  // Get task IDs for each column\n  const todoIds = filteredTodoTasks.map(task => task.id);\n  const inProgressIds = filteredInProgressTasks.map(task => task.id);\n  const doneIds = filteredDoneTasks.map(task => task.id);\n\n  // tRPC mutations\n  const utils = api.useUtils();\n  \n  const updateTaskMutation = api.tasks.update.useMutation({\n    onSuccess: () => {\n      utils.tasks.list.invalidate();\n    },\n  });\n  \n  const updatePositionsMutation = api.tasks.updatePositions.useMutation({\n    onSuccess: () => {\n      utils.tasks.list.invalidate();\n    },\n  });\n  \n  const deleteTaskMutation = api.tasks.delete.useMutation({\n    onSuccess: () => {\n      utils.tasks.list.invalidate();\n    },\n  });\n\n  // Event handlers\n  const handleDragStart = (event: DragStartEvent) => {\n    const { active } = event;\n    setActiveId(active.id as string);\n    \n    const draggedTask = tasks.find(task => task.id === active.id);\n    if (draggedTask) {\n      setActiveTask(draggedTask);\n    }\n  };\n\n  const handleDragOver = (event: DragOverEvent) => {\n    const { active, over } = event;\n    \n    if (!over || active.id === over.id) {\n      return;\n    }\n\n    // Find the containers (columns)\n    const activeContainer = findContainer(active.id as string);\n    const overContainer = findContainer(over.id as string);\n    \n    if (!activeContainer || !overContainer) {\n      return;\n    }\n    \n    // If same container, we don't need to do anything here\n    if (activeContainer === overContainer) {\n      return;\n    }\n\n    // Moving to a different container\n    setTasks(prev => {\n      const activeIndex = findTaskIndex(prev, active.id as string);\n      const overIndex = findTaskIndex(prev, over.id as string);\n      \n      if (activeIndex === -1) {\n        return prev;\n      }\n      \n      // Update the task's status based on the container it's moved to\n      const updatedTasks = [...prev];\n      const movedTask = { ...updatedTasks[activeIndex] };\n      \n      // Set the new status based on the container\n      movedTask.status = getStatusFromContainer(overContainer);\n      \n      // Remove from original position and insert at new position\n      updatedTasks.splice(activeIndex, 1);\n      updatedTasks.splice(overIndex, 0, movedTask);\n      \n      // Update positions for all tasks in the affected containers\n      return updatePositionsInContainers(updatedTasks, [activeContainer, overContainer]);\n    });\n  };\n\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    \n    if (!over) {\n      setActiveId(null);\n      setActiveTask(null);\n      return;\n    }\n    \n    // Find the containers\n    const activeContainer = findContainer(active.id as string);\n    const overContainer = findContainer(over.id as string);\n    \n    if (!activeContainer || !overContainer) {\n      setActiveId(null);\n      setActiveTask(null);\n      return;\n    }\n    \n    // If moving within the same container\n    if (activeContainer === overContainer) {\n      const activeIndex = findTaskIndex(tasks, active.id as string);\n      const overIndex = findTaskIndex(tasks, over.id as string);\n      \n      if (activeIndex !== overIndex) {\n        setTasks(prev => {\n          const updatedTasks = arrayMove(prev, activeIndex, overIndex);\n          \n          // Update positions for all tasks in the container\n          return updatePositionsInContainer(updatedTasks, activeContainer);\n        });\n        \n        // Prepare tasks for position update\n        const tasksToUpdate = getTasksInContainer(tasks, activeContainer)\n          .sort((a, b) => a.position - b.position)\n          .map((task, index) => ({\n            id: task.id,\n            position: index + 1,\n          }));\n        \n        if (tasksToUpdate.length > 0) {\n          // Update positions in the database - pass array directly\n          updatePositionsMutation.mutate(tasksToUpdate);\n        }\n      }\n    } else {\n      // If the task was moved to a different container, update its status in the database\n      const taskId = active.id as string;\n      const task = tasks.find(t => t.id === taskId);\n      \n      if (task) {\n        const newStatus = getStatusFromContainer(overContainer);\n        \n        // Update the task status in the database\n        updateTaskMutation.mutate({\n          id: taskId,\n          status: newStatus,\n        });\n        \n        // Update positions for both containers\n        const activeContainerTasks = getTasksInContainer(tasks, activeContainer)\n          .sort((a, b) => a.position - b.position)\n          .map((task, index) => ({\n            id: task.id,\n            position: index + 1,\n          }));\n        \n        const overContainerTasks = getTasksInContainer(tasks, overContainer)\n          .sort((a, b) => a.position - b.position)\n          .map((task, index) => ({\n            id: task.id,\n            position: index + 1,\n          }));\n        \n        const tasksToUpdate = [...activeContainerTasks, ...overContainerTasks];\n        if (tasksToUpdate.length > 0) {\n          // Update positions in the database - pass array directly\n          updatePositionsMutation.mutate(tasksToUpdate);\n        }\n      }\n    }\n    \n    setActiveId(null);\n    setActiveTask(null);\n  };\n\n  // Helper functions\n  const findContainer = (id: string) => {\n    if (todoIds && todoIds.includes(id)) return 'todo';\n    if (inProgressIds && inProgressIds.includes(id)) return 'in-progress';\n    if (doneIds && doneIds.includes(id)) return 'done';\n    return null;\n  };\n\n  const findTaskIndex = (tasks: Task[], id: string) => {\n    if (!tasks || !Array.isArray(tasks)) return -1;\n    return tasks.findIndex(task => task && task.id === id);\n  };\n\n  const getStatusFromContainer = (containerId: string): TaskStatus => {\n    switch (containerId) {\n      case 'todo': return TaskStatus.TODO;\n      case 'in-progress': return TaskStatus.IN_PROGRESS;\n      case 'done': return TaskStatus.DONE;\n      default: return TaskStatus.TODO;\n    }\n  };\n\n  const getContainerFromStatus = (status: TaskStatus): string => {\n    switch (status) {\n      case TaskStatus.TODO: return 'todo';\n      case TaskStatus.IN_PROGRESS: return 'in-progress';\n      case TaskStatus.DONE: return 'done';\n      default: return 'todo';\n    }\n  };\n\n  const getTasksInContainer = (tasks: Task[], container: string) => {\n    if (!tasks || !Array.isArray(tasks)) return [];\n    return tasks.filter(task => task && task.status === getStatusFromContainer(container));\n  };\n\n  const updatePositionsInContainer = (tasks: Task[], container: string) => {\n    const containerTasks = getTasksInContainer(tasks, container);\n    const otherTasks = tasks.filter(task => task.status !== getStatusFromContainer(container));\n    \n    // Update positions for tasks in the container\n    const updatedContainerTasks = containerTasks\n      .sort((a, b) => {\n        const aIndex = findTaskIndex(tasks, a.id);\n        const bIndex = findTaskIndex(tasks, b.id);\n        return aIndex - bIndex;\n      })\n      .map((task, index) => ({\n        ...task,\n        position: index + 1,\n      }));\n    \n    return [...otherTasks, ...updatedContainerTasks];\n  };\n\n  const updatePositionsInContainers = (tasks: Task[], containerIds: string[]) => {\n    const updatedTasks = [...tasks];\n    \n    // For each container, update the positions of its tasks\n    containerIds.forEach(containerId => {\n      const containerTasks = getTasksInContainer(updatedTasks, containerId);\n      const sortedContainerTasks = [...containerTasks].sort((a, b) => a.position - b.position);\n      \n      // Update positions\n      sortedContainerTasks.forEach((task, index) => {\n        const taskIndex = updatedTasks.findIndex(t => t.id === task.id);\n        if (taskIndex !== -1) {\n          updatedTasks[taskIndex] = {\n            ...updatedTasks[taskIndex],\n            position: index + 1\n          };\n        }\n      });\n      if (containerId) {\n        // Use the existing container tasks that were already sorted\n        // No need to call updatePositionsInContainer again\n      }\n    });\n    \n    return updatedTasks;\n  };\n\n  // Task action handlers\n  const handleEditTask = (taskId: string) => {\n    if (!taskId) return;\n    // This will be handled by the parent component via props\n    console.log('Edit task:', taskId);\n  };\n\n  const handleDeleteTask = (taskId: string) => {\n    if (!taskId) return;\n    \n    if (window.confirm('Are you sure you want to delete this task?')) {\n      try {\n        deleteTaskMutation.mutate({ id: taskId });\n        \n        // Optimistic update\n        setTasks(prev => prev.filter(task => task && task.id !== taskId));\n      } catch (error) {\n        console.error('Error deleting task:', error);\n      }\n    }\n  };\n\n  const handleStatusChange = (taskId: string, newStatus: TaskStatus) => {\n    if (!taskId || !newStatus) return;\n    \n    try {\n      // Update task status\n      updateTaskMutation.mutate({\n        id: taskId,\n        status: newStatus,\n      });\n      \n      // Optimistic update\n      setTasks(prev => {\n        const taskIndex = prev.findIndex(task => task && task.id === taskId);\n        if (taskIndex === -1) return prev;\n        \n        const updatedTasks = [...prev];\n        updatedTasks[taskIndex] = {\n          ...updatedTasks[taskIndex],\n          status: newStatus,\n        };\n        \n        return updatePositionsInContainers(updatedTasks, ['todo', 'in-progress', 'done']);\n      });\n    } catch (error) {\n      console.error('Error updating task status:', error);\n    }\n  };\n\n  return (\n    <DndContext\n      sensors={sensors}\n      collisionDetection={closestCorners}\n      onDragStart={handleDragStart}\n      onDragOver={handleDragOver}\n      onDragEnd={handleDragEnd}\n    >\n      <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\n        {/* To Do Column */}\n        <TaskColumn \n          title=\"To Do\" \n          tasks={filteredTodoTasks} \n          status=\"todo\"\n        >\n          <SortableContext items={todoIds} strategy={verticalListSortingStrategy}>\n            {filteredTodoTasks.map(task => (\n              <TaskCard\n                key={task.id}\n                task={task}\n                onEdit={handleEditTask}\n                onDelete={handleDeleteTask}\n                onStatusChange={handleStatusChange}\n              />\n            ))}\n          </SortableContext>\n        </TaskColumn>\n\n        {/* In Progress Column */}\n        <TaskColumn \n          title=\"In Progress\" \n          tasks={filteredInProgressTasks} \n          status=\"in-progress\"\n        >\n          <SortableContext items={inProgressIds} strategy={verticalListSortingStrategy}>\n            {filteredInProgressTasks.map(task => (\n              <TaskCard\n                key={task.id}\n                task={task}\n                onEdit={handleEditTask}\n                onDelete={handleDeleteTask}\n                onStatusChange={handleStatusChange}\n              />\n            ))}\n          </SortableContext>\n        </TaskColumn>\n\n        {/* Done Column */}\n        <TaskColumn \n          title=\"Done\" \n          tasks={filteredDoneTasks} \n          status=\"done\"\n        >\n          <SortableContext items={doneIds} strategy={verticalListSortingStrategy}>\n            {filteredDoneTasks.map(task => (\n              <TaskCard\n                key={task.id}\n                task={task}\n                onEdit={handleEditTask}\n                onDelete={handleDeleteTask}\n                onStatusChange={handleStatusChange}\n              />\n            ))}\n          </SortableContext>\n        </TaskColumn>\n      </div>\n\n      {/* Drag Overlay */}\n      <DragOverlay>\n        {activeId && activeTask ? (\n          <TaskCard\n            task={activeTask}\n            onEdit={handleEditTask}\n            onDelete={handleDeleteTask}\n            onStatusChange={handleStatusChange}\n          />\n        ) : null}\n      </DragOverlay>\n    </DndContext>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/TaskCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":220,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":220,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { cn } from '@/lib/utils';\nimport { Card, CardContent, CardFooter, CardHeader } from '@/components/ui/card';\nimport { Badge } from '@/components/ui/badge';\nimport { Button } from '@/components/ui/button';\nimport { \n  MoreHorizontal, \n  Calendar, \n  User, \n  Tag, \n  Edit, \n  Trash2, \n  ArrowUp, \n  ArrowRight, \n  ArrowDown \n} from 'lucide-react';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport { TaskStatus, TaskPriority } from '@codexcrm/db/src/models';\n\n// Re-export the enums for other components to use\nexport { TaskStatus, TaskPriority };\n\n// Define the Task interface\nexport interface Task {\n  id: string;\n  title: string;\n  description: string | null;\n  status: TaskStatus;\n  priority: TaskPriority;\n  category: string | null;\n  color: string | null;\n  due_date: string | null;\n  contact_id: string | null;\n  business_impact: number | null;\n  position: number;\n  ai_generated: boolean;\n  user_id: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\ninterface TaskCardProps {\n  task: Task;\n  onEdit: (taskId: string) => void;\n  onDelete: (taskId: string) => void;\n  onStatusChange: (taskId: string, newStatus: TaskStatus) => void;\n}\n\nexport function TaskCard({ task, onEdit, onDelete, onStatusChange }: TaskCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n\n  // Set up sortable functionality\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: task.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n    zIndex: isDragging ? 10 : 1,\n  };\n\n  // Priority badge color\n  const priorityColors: Record<TaskPriority, string> = {\n    [TaskPriority.HIGH]: 'bg-red-500 hover:bg-red-600',\n    [TaskPriority.MEDIUM]: 'bg-yellow-500 hover:bg-yellow-600',\n    [TaskPriority.LOW]: 'bg-blue-500 hover:bg-blue-600',\n    [TaskPriority.NONE]: 'bg-gray-500 hover:bg-gray-600',\n  };\n\n  // Status change options based on current status\n  const getStatusChangeOptions = () => {\n    if (!task || !task.status) return [];\n\n    switch (task.status) {\n      case TaskStatus.TODO:\n        return [{ label: 'Move to In Progress', value: TaskStatus.IN_PROGRESS }];\n      case TaskStatus.IN_PROGRESS:\n        return [\n          { label: 'Move to To Do', value: TaskStatus.TODO },\n          { label: 'Move to Done', value: TaskStatus.DONE },\n        ];\n      case TaskStatus.DONE:\n        return [\n          { label: 'Move to To Do', value: TaskStatus.TODO },\n          { label: 'Move to In Progress', value: TaskStatus.IN_PROGRESS },\n        ];\n      default:\n        return [];\n    }\n  };\n\n  // Priority icon\n  const PriorityIcon = () => {\n    if (!task || !task.priority) return null;\n    \n    switch (task.priority) {\n      case TaskPriority.HIGH:\n        return <ArrowUp className=\"h-4 w-4 text-red-500\" />;\n      case TaskPriority.MEDIUM:\n        return <ArrowRight className=\"h-4 w-4 text-yellow-500\" />;\n      case TaskPriority.LOW:\n        return <ArrowDown className=\"h-4 w-4 text-blue-500\" />;\n      default:\n        return null;\n    }\n  };\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      className=\"mb-3\"\n    >\n      <Card className=\"border-l-4 shadow-sm hover:shadow-md transition-shadow duration-200\" \n        style={{ borderLeftColor: task.color || '#e2e8f0' }}>\n        <CardHeader className=\"p-3 pb-0 cursor-grab\" {...listeners}>\n          <div className=\"flex justify-between items-start\">\n            <div className=\"flex items-center gap-2\">\n              <PriorityIcon />\n              <h3 className=\"font-medium text-sm\">{task.title}</h3>\n            </div>\n            <DropdownMenu>\n              <DropdownMenuTrigger asChild>\n                <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\n                  <MoreHorizontal className=\"h-4 w-4\" />\n                </Button>\n              </DropdownMenuTrigger>\n              <DropdownMenuContent align=\"end\">\n                <DropdownMenuLabel>Task Actions</DropdownMenuLabel>\n                <DropdownMenuSeparator />\n                \n                {/* Status change options */}\n                {getStatusChangeOptions().map((option) => (\n                  <DropdownMenuItem \n                    key={option.value}\n                    onClick={() => onStatusChange(task.id, option.value)}\n                  >\n                    {option.label}\n                  </DropdownMenuItem>\n                ))}\n                \n                <DropdownMenuSeparator />\n                <DropdownMenuItem onClick={() => onEdit(task.id)}>\n                  <Edit className=\"mr-2 h-4 w-4\" />\n                  Edit\n                </DropdownMenuItem>\n                <DropdownMenuItem \n                  onClick={() => onDelete(task.id)}\n                  className=\"text-red-600 hover:text-red-700 focus:text-red-700\"\n                >\n                  <Trash2 className=\"mr-2 h-4 w-4\" />\n                  Delete\n                </DropdownMenuItem>\n              </DropdownMenuContent>\n            </DropdownMenu>\n          </div>\n        </CardHeader>\n        \n        <CardContent className=\"p-3 pt-2\">\n          {/* Show description preview or full description based on expanded state */}\n          {task.description && (\n            <p className={`text-gray-600 text-xs ${!isExpanded ? 'line-clamp-2' : ''}`}>\n              {task.description}\n            </p>\n          )}\n          \n          {/* Show \"Show more\" button if description is long */}\n          {task.description && task.description.length > 100 && (\n            <Button \n              variant=\"link\" \n              size=\"sm\" \n              className=\"p-0 h-auto text-xs mt-1\"\n              onClick={() => setIsExpanded(!isExpanded)}\n            >\n              {isExpanded ? 'Show less' : 'Show more'}\n            </Button>\n          )}\n        </CardContent>\n        \n        <CardFooter className=\"p-3 pt-0 flex flex-wrap gap-2 items-center\">\n          {/* Priority badge */}\n          <Badge className={cn('text-white', priorityColors[task.priority] || priorityColors[TaskPriority.NONE])}>\n            {task.priority || 'Unknown'}\n          </Badge>\n          \n          {/* Category badge */}\n          {task.category && (\n            <Badge variant=\"outline\" className=\"text-xs flex items-center gap-1\">\n              <Tag className=\"h-3 w-3\" />\n              {task.category}\n            </Badge>\n          )}\n          \n          {/* Due date badge */}\n          {task.due_date && (\n            <Badge variant=\"outline\" className=\"text-xs flex items-center gap-1\">\n              <Calendar className=\"h-3 w-3\" />\n              {(() => {\n                try {\n                  return new Date(task.due_date).toLocaleDateString();\n                } catch (e) {\n                  console.error('Invalid date format:', task.due_date);\n                  return 'Invalid date';\n                }\n              })()}\n            </Badge>\n          )}\n          \n          {/* Contact badge */}\n          {task.contact_id && (\n            <Badge variant=\"outline\" className=\"text-xs flex items-center gap-1\">\n              <User className=\"h-3 w-3\" />\n              Contact\n            </Badge>\n          )}\n          \n          {/* AI generated badge */}\n          {task.ai_generated && (\n            <Badge variant=\"secondary\" className=\"text-xs\">\n              AI\n            </Badge>\n          )}\n          \n          {/* Business impact indicator */}\n          {task.business_impact !== null && (\n            <div className=\"ml-auto text-xs text-gray-500 flex items-center\">\n              Impact: \n              <span className=\"font-medium ml-1\">\n                {task.business_impact}/10\n              </span>\n            </div>\n          )}\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/TaskColumn.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/TaskDetailView.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":46,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":55,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":55,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":63,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":63,"endColumn":15}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useRef } from 'react';\nimport { useSwipeable } from 'react-swipeable';\nimport { format } from 'date-fns';\nimport { \n  Calendar, \n  Tag, \n  User, \n  Edit, \n  Trash2, \n  CheckCircle2,\n  XCircle,\n  ArrowLeft,\n  Clock,\n  BarChart\n} from 'lucide-react';\nimport { Task } from './TaskCard';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport { Card } from '@/components/ui/card';\nimport { Separator } from '@/components/ui/separator';\n\ninterface TaskDetailViewProps {\n  task: Task;\n  onClose: () => void;\n  onEdit: (taskId: string) => void;\n  onDelete: (taskId: string) => void;\n  onToggleComplete: (taskId: string, completed: boolean) => void;\n}\n\nexport function TaskDetailView({\n  task,\n  onClose,\n  onEdit,\n  onDelete,\n  onToggleComplete\n}: TaskDetailViewProps) {\n  const [showDeleteConfirm, setShowDeleteConfirm] = useState(false);\n  const swipeableRef = useRef<HTMLDivElement>(null);\n  \n  // Format due date if present\n  const formattedDueDate = task.due_date ? (() => {\n    try {\n      return format(new Date(task.due_date), 'PPPP');\n    } catch (e) {\n      return null;\n    }\n  })() : null;\n  \n  // Format created/updated dates\n  const formattedCreatedAt = task.created_at ? (() => {\n    try {\n      return format(new Date(task.created_at), 'PPp');\n    } catch (e) {\n      return null;\n    }\n  })() : null;\n  \n  const formattedUpdatedAt = task.updated_at ? (() => {\n    try {\n      return format(new Date(task.updated_at), 'PPp');\n    } catch (e) {\n      return null;\n    }\n  })() : null;\n  \n  // Set up swipe handlers for mobile\n  const { ref: swipeRef, ...swipeHandlers } = useSwipeable({\n    onSwipedLeft: () => {\n      // Swipe left to delete\n      setShowDeleteConfirm(true);\n    },\n    onSwipedRight: () => {\n      // Swipe right to toggle complete\n      onToggleComplete(task.id, task.status !== 'done');\n    },\n    trackMouse: false,\n    trackTouch: true\n  });\n  \n  // Priority color\n  const getPriorityColor = () => {\n    switch (task.priority) {\n      case 'high':\n        return 'text-red-600';\n      case 'medium':\n        return 'text-yellow-600';\n      case 'low':\n        return 'text-blue-600';\n      default:\n        return 'text-gray-600';\n    }\n  };\n  \n  // Status badge\n  const getStatusBadge = () => {\n    switch (task.status) {\n      case 'done':\n        return <Badge className=\"bg-green-500\">Completed</Badge>;\n      case 'in-progress':\n        return <Badge className=\"bg-blue-500\">In Progress</Badge>;\n      case 'todo':\n        return <Badge className=\"bg-gray-500\">To Do</Badge>;\n      default:\n        return <Badge>{task.status}</Badge>;\n    }\n  };\n\n  return (\n    <div className=\"fixed inset-0 bg-black bg-opacity-50 z-50 flex items-center justify-center p-4 backdrop-blur-sm\">\n      <Card className=\"bg-white rounded-lg shadow-xl max-w-2xl w-full max-h-[90vh] overflow-y-auto\">\n        <div className=\"p-6\">\n          {/* Header with close button */}\n          <div className=\"flex justify-between items-center mb-6\">\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              onClick={onClose}\n              className=\"h-8 w-8\"\n            >\n              <ArrowLeft className=\"h-5 w-5\" />\n            </Button>\n            <div className=\"flex items-center gap-2\">\n              <Button\n                variant=\"outline\"\n                size=\"sm\"\n                onClick={() => onEdit(task.id)}\n                className=\"flex items-center\"\n              >\n                <Edit className=\"mr-1 h-4 w-4\" />\n                Edit\n              </Button>\n              {!showDeleteConfirm ? (\n                <Button\n                  variant=\"destructive\"\n                  size=\"sm\"\n                  onClick={() => setShowDeleteConfirm(true)}\n                  className=\"flex items-center\"\n                >\n                  <Trash2 className=\"mr-1 h-4 w-4\" />\n                  Delete\n                </Button>\n              ) : (\n                <div className=\"flex items-center gap-1\">\n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => setShowDeleteConfirm(false)}\n                  >\n                    Cancel\n                  </Button>\n                  <Button\n                    variant=\"destructive\"\n                    size=\"sm\"\n                    onClick={() => onDelete(task.id)}\n                  >\n                    Confirm\n                  </Button>\n                </div>\n              )}\n            </div>\n          </div>\n          \n          {/* Swipeable content area */}\n          <div \n            ref={(node) => {\n              swipeableRef.current = node;\n              // Attach swipeable's ref as well\n              if (typeof swipeRef === 'function') {\n                swipeRef(node);\n              }\n            }}\n            {...swipeHandlers}\n            className=\"touch-pan-y\"\n          >\n            {/* Title and status */}\n            <div className=\"mb-6\">\n              <div className=\"flex items-center justify-between mb-2\">\n                <h1 className=\"text-2xl font-bold text-gray-900\">{task.title}</h1>\n                {getStatusBadge()}\n              </div>\n              \n              {/* Complete/Uncomplete button */}\n              <Button\n                variant={task.status === 'done' ? 'destructive' : 'default'}\n                className={`w-full mt-4 ${task.status === 'done' ? 'bg-red-100 text-red-700 hover:bg-red-200 border-red-200' : 'bg-green-500 hover:bg-green-600'}`}\n                onClick={() => onToggleComplete(task.id, task.status !== 'done')}\n              >\n                {task.status === 'done' ? (\n                  <>\n                    <XCircle className=\"mr-2 h-4 w-4\" />\n                    Mark as Incomplete\n                  </>\n                ) : (\n                  <>\n                    <CheckCircle2 className=\"mr-2 h-4 w-4\" />\n                    Mark as Complete\n                  </>\n                )}\n              </Button>\n            </div>\n            \n            <Separator className=\"my-4\" />\n            \n            {/* Description */}\n            {task.description && (\n              <div className=\"mb-6\">\n                <h2 className=\"text-sm font-medium text-gray-700 mb-2\">Description</h2>\n                <p className=\"text-gray-600 whitespace-pre-wrap\">{task.description}</p>\n              </div>\n            )}\n            \n            {/* Metadata */}\n            <div className=\"space-y-4\">\n              {/* Priority */}\n              <div className=\"flex items-center\">\n                <div className=\"w-24 text-sm font-medium text-gray-700\">Priority:</div>\n                <div className={`font-medium ${getPriorityColor()}`}>\n                  {task.priority?.charAt(0).toUpperCase() + task.priority?.slice(1) || 'None'}\n                </div>\n              </div>\n              \n              {/* Category */}\n              <div className=\"flex items-center\">\n                <div className=\"w-24 text-sm font-medium text-gray-700\">Category:</div>\n                {task.category ? (\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <Tag className=\"h-3 w-3\" />\n                    {task.category}\n                  </Badge>\n                ) : (\n                  <span className=\"text-gray-500\">None</span>\n                )}\n              </div>\n              \n              {/* Due date */}\n              <div className=\"flex items-center\">\n                <div className=\"w-24 text-sm font-medium text-gray-700\">Due date:</div>\n                {formattedDueDate ? (\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <Calendar className=\"h-3 w-3\" />\n                    {formattedDueDate}\n                  </Badge>\n                ) : (\n                  <span className=\"text-gray-500\">None</span>\n                )}\n              </div>\n              \n              {/* Contact */}\n              {task.contact_id && (\n                <div className=\"flex items-center\">\n                  <div className=\"w-24 text-sm font-medium text-gray-700\">Contact:</div>\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <User className=\"h-3 w-3\" />\n                    Contact ID: {task.contact_id}\n                  </Badge>\n                </div>\n              )}\n              \n              {/* Business impact */}\n              {task.business_impact !== null && (\n                <div className=\"flex items-center\">\n                  <div className=\"w-24 text-sm font-medium text-gray-700\">Impact:</div>\n                  <Badge variant=\"outline\" className=\"flex items-center gap-1\">\n                    <BarChart className=\"h-3 w-3\" />\n                    {task.business_impact}/10\n                  </Badge>\n                </div>\n              )}\n            </div>\n            \n            <Separator className=\"my-4\" />\n            \n            {/* Timestamps */}\n            <div className=\"text-xs text-gray-500 space-y-1\">\n              {formattedCreatedAt && (\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-3 w-3 mr-1\" />\n                  Created: {formattedCreatedAt}\n                </div>\n              )}\n              {formattedUpdatedAt && formattedUpdatedAt !== formattedCreatedAt && (\n                <div className=\"flex items-center\">\n                  <Clock className=\"h-3 w-3 mr-1\" />\n                  Updated: {formattedUpdatedAt}\n                </div>\n              )}\n              {task.ai_generated && (\n                <div className=\"flex items-center mt-1\">\n                  <Badge variant=\"secondary\" className=\"text-xs\">AI Generated</Badge>\n                </div>\n              )}\n            </div>\n            \n            {/* Mobile swipe hint */}\n            <div className=\"mt-8 text-center text-xs text-gray-400 md:hidden\">\n              <p>Swipe right to mark as {task.status === 'done' ? 'incomplete' : 'complete'}</p>\n              <p>Swipe left to delete</p>\n            </div>\n          </div>\n        </div>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/TaskForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":29,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useEffect' is defined but never used.","line":29,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'categories' is assigned a value but never used.","line":109,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":109,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":406,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":29}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\n * TaskForm - Task Creation & Editing Form Component\n * \n * This component handles the UI and form logic for creating and editing tasks in the CodexCRM app.\n * It integrates with react-hook-form and Zod for form validation and handles the conversion\n * between frontend camelCase properties and backend snake_case database fields.\n * \n * Key features:\n * - Form validation with Zod schema\n * - Task property editing (title, notes, status, priority, category, etc.)\n * - Date picker for task due dates\n * - Contact selection for assigning tasks\n * - Support for both create and edit modes\n * - Proper handling of enum values (TaskStatus, TaskPriority, TaskCategory)\n * \n * The component accepts snake_case task data (TaskOutput) from tRPC and converts it to\n * camelCase for the form, then back to the appropriate format for submission. This ensures\n * type safety throughout the application while maintaining the database structure.\n * \n * Parent components: \n * - ThingsMainContent (used in modals for task creation/editing)\n * - TaskDetailView (potentially used for inline editing)\n * \n * Date: June 11, 2025\n */\n\n'use client';\n\nimport { useState, useEffect } from 'react';\nimport { useForm } from 'react-hook-form';\nimport { zodResolver } from '@hookform/resolvers/zod';\nimport { z } from 'zod';\nimport { Calendar } from 'lucide-react';\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Textarea } from '@/components/ui/textarea';\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Form,\n  FormControl,\n  FormDescription,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from '@/components/ui/form';\nimport { Popover, PopoverContent, PopoverTrigger } from '@/components/ui/popover';\nimport { Calendar as CalendarComponent } from '@/components/ui/calendar';\nimport { format } from 'date-fns';\nimport { cn } from '@/lib/utils';\nimport { type AppRouter } from '@codexcrm/server/src/root';\nimport { type inferRouterOutputs } from '@trpc/server';\nimport { TaskStatus, TaskPriority, TaskCategory } from '@codexcrm/db/src/models/Task';\n\ntype RouterOutput = inferRouterOutputs<AppRouter>;\n// This will be the type of a single task object returned by the `tasks.list` procedure\nexport type TaskOutput = RouterOutput['tasks']['list'][number];\n\n// The actual shape of task data from the API\ninterface TaskData {\n  id: string;\n  title: string;\n  notes?: string;\n  status: TaskStatus;\n  priority: TaskPriority;\n  category: TaskCategory;\n  due_date?: string | null;\n  contact_id?: string | null;\n  // Other fields omitted for brevity\n}\n\n// Form schema\nconst taskFormSchema = z.object({\n  title: z.string().min(1, 'Title is required'),\n  notes: z.string().optional(),\n  status: z.nativeEnum(TaskStatus).optional(),\n  priority: z.nativeEnum(TaskPriority).optional(),\n  category: z.nativeEnum(TaskCategory).optional(),\n  color: z.string().optional(),\n  dueDate: z.date().optional().nullable(),\n  contactId: z.string().optional().nullable(),\n  business_impact: z.number().optional().nullable(),\n  ai_generated: z.boolean().optional(),\n});\n\nexport type TaskFormValues = z.infer<typeof taskFormSchema>;\n\nexport interface TaskFormProps {\n  initialData?: TaskOutput | null;\n  onSubmit: (data: TaskFormValues) => void;\n  onClose: () => void;\n  isSubmitting: boolean;\n  error?: string | null;\n  categories?: string[];\n}\n\nexport function TaskForm({\n  onSubmit,\n  initialData,\n  onClose,\n  isSubmitting,\n  error,\n  categories = [],\n}: TaskFormProps) {\n  // Initialize form with default values or initial data\n  // Create a properly typed version of initialData to satisfy TypeScript\n  const safeInitialData = initialData as unknown as TaskData | null;\n  \n  const form = useForm<TaskFormValues>({\n    resolver: zodResolver(taskFormSchema),\n    defaultValues: safeInitialData\n      ? {\n          title: safeInitialData.title,\n          notes: safeInitialData.notes || '',\n          status: safeInitialData.status,\n          priority: safeInitialData.priority,\n          category: safeInitialData.category || TaskCategory.INBOX,\n          dueDate: safeInitialData.due_date ? new Date(safeInitialData.due_date) : null,\n          contactId: safeInitialData.contact_id || null,\n          // Form-only fields not in the DB model yet\n          color: '',\n          business_impact: null,\n          ai_generated: false,\n        }\n      : {\n          title: '',\n          notes: '',\n          status: TaskStatus.TODO,\n          priority: TaskPriority.NONE,\n          category: TaskCategory.INBOX,\n          color: '',\n          dueDate: null,\n          contactId: null,\n          business_impact: null,\n          ai_generated: false,\n        },\n  });\n\n  // Status options\n  const statusOptions = [\n    { value: TaskStatus.TODO, label: 'To Do' },\n    { value: TaskStatus.IN_PROGRESS, label: 'In Progress' },\n    { value: TaskStatus.DONE, label: 'Done' },\n    { value: TaskStatus.CANCELED, label: 'Canceled' },\n  ];\n\n  // Priority options\n  const priorityOptions = [\n    { value: TaskPriority.HIGH, label: 'High' },\n    { value: TaskPriority.MEDIUM, label: 'Medium' },\n    { value: TaskPriority.LOW, label: 'Low' },\n    { value: TaskPriority.NONE, label: 'None' },\n  ];\n\n  // Color options\n  const colorOptions = [\n    { value: '#e2e8f0', label: 'Default' },\n    { value: '#f87171', label: 'Red' },\n    { value: '#fb923c', label: 'Orange' },\n    { value: '#facc15', label: 'Yellow' },\n    { value: '#4ade80', label: 'Green' },\n    { value: '#60a5fa', label: 'Blue' },\n    { value: '#a78bfa', label: 'Purple' },\n    { value: '#f472b6', label: 'Pink' },\n  ];\n\n  // Business impact options\n  const businessImpactOptions = [\n    { value: 1, label: '1 - Very Low' },\n    { value: 2, label: '2' },\n    { value: 3, label: '3' },\n    { value: 4, label: '4' },\n    { value: 5, label: '5 - Medium' },\n    { value: 6, label: '6' },\n    { value: 7, label: '7' },\n    { value: 8, label: '8' },\n    { value: 9, label: '9' },\n    { value: 10, label: '10 - Very High' },\n  ];\n\n  return (\n    <Form {...form}>\n      <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-6\">\n        {/* Title */}\n        <FormField\n          control={form.control}\n          name=\"title\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Title</FormLabel>\n              <FormControl>\n                <Input placeholder=\"Task title\" {...field} />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Description */}\n        <FormField\n          control={form.control}\n          name=\"notes\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Description</FormLabel>\n              <FormControl>\n                <Textarea\n                  placeholder=\"Task description\"\n                  className=\"min-h-[100px]\"\n                  {...field}\n                  value={field.value || ''}\n                />\n              </FormControl>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Status */}\n        <FormField\n          control={form.control}\n          name=\"status\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Status</FormLabel>\n              <Select\n                onValueChange={field.onChange}\n                defaultValue={field.value}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select status\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {statusOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Priority */}\n        <FormField\n          control={form.control}\n          name=\"priority\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Priority</FormLabel>\n              <Select\n                onValueChange={field.onChange}\n                defaultValue={field.value}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select priority\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {priorityOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Category */}\n        <FormField\n          control={form.control}\n          name=\"category\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Category</FormLabel>\n              <Select\n                onValueChange={(value) => field.onChange(value === 'none-category' ? null : value)}\n                value={field.value || 'none-category'}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select category\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value={TaskCategory.INBOX}>Inbox</SelectItem>\n                  <SelectItem value={TaskCategory.TODAY}>Today</SelectItem>\n                  <SelectItem value={TaskCategory.UPCOMING}>Upcoming</SelectItem>\n                  <SelectItem value={TaskCategory.ANYTIME}>Anytime</SelectItem>\n                  <SelectItem value={TaskCategory.SOMEDAY}>Someday</SelectItem>\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Color */}\n        <FormField\n          control={form.control}\n          name=\"color\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Color</FormLabel>\n              <Select\n                onValueChange={(value) => field.onChange(value || '#e2e8f0')}\n                value={field.value || '#e2e8f0'}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select color\">\n                      <div className=\"flex items-center\">\n                        <div\n                          className=\"w-4 h-4 rounded-full mr-2\"\n                          style={{ backgroundColor: field.value || '#e2e8f0' }}\n                        />\n                        {colorOptions.find(c => c.value === field.value)?.label || 'Default'}\n                      </div>\n                    </SelectValue>\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  {colorOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value}>\n                      <div className=\"flex items-center\">\n                        <div\n                          className=\"w-4 h-4 rounded-full mr-2\"\n                          style={{ backgroundColor: option.value }}\n                        />\n                        {option.label}\n                      </div>\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Due Date */}\n        <FormField\n          control={form.control}\n          name=\"dueDate\"\n          render={({ field }) => (\n            <FormItem className=\"flex flex-col\">\n              <FormLabel>Due Date</FormLabel>\n              <Popover>\n                <PopoverTrigger asChild>\n                  <FormControl>\n                    <Button\n                      variant={\"outline\"}\n                      className={cn(\n                        \"w-full pl-3 text-left font-normal\",\n                        !field.value && \"text-muted-foreground\"\n                      )}\n                    >\n                      {field.value ? (\n                        format(field.value, \"PPP\")\n                      ) : (\n                        <span>Pick a date</span>\n                      )}\n                      <Calendar className=\"ml-auto h-4 w-4 opacity-50\" />\n                    </Button>\n                  </FormControl>\n                </PopoverTrigger>\n                <PopoverContent className=\"w-auto p-0\" align=\"start\">\n                  <CalendarComponent\n                    mode=\"single\"\n                    selected={field.value || undefined}\n                    onSelect={field.onChange}\n                    initialFocus\n                  />\n                </PopoverContent>\n              </Popover>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Business Impact */}\n        <FormField\n          control={form.control}\n          name=\"business_impact\"\n          render={({ field }) => (\n            <FormItem>\n              <FormLabel>Business Impact (1-10)</FormLabel>\n              <Select\n                onValueChange={(value) => {\n                  try {\n                    field.onChange(value === 'none' ? null : parseInt(value, 10));\n                  } catch (e) {\n                    console.error('Invalid number format:', value);\n                    field.onChange(null);\n                  }\n                }}\n                value={field.value?.toString() || 'none'}\n              >\n                <FormControl>\n                  <SelectTrigger>\n                    <SelectValue placeholder=\"Select business impact\" />\n                  </SelectTrigger>\n                </FormControl>\n                <SelectContent>\n                  <SelectItem value=\"none-impact\">None</SelectItem>\n                  {businessImpactOptions.map((option) => (\n                    <SelectItem key={option.value} value={option.value.toString()}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n              <FormDescription>\n                Rate the business impact of this task from 1 (lowest) to 10 (highest)\n              </FormDescription>\n              <FormMessage />\n            </FormItem>\n          )}\n        />\n\n        {/* Error message */}\n        {error && (\n          <div className=\"bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded\">\n            {error}\n          </div>\n        )}\n\n        {/* Form actions */}\n        <div className=\"flex justify-end space-x-2\">\n          <Button\n            type=\"button\"\n            variant=\"outline\"\n            onClick={onClose}\n            disabled={isSubmitting}\n          >\n            Cancel\n          </Button>\n          <Button type=\"submit\" disabled={isSubmitting}>\n            {isSubmitting ? 'Saving...' : initialData ? 'Update Task' : 'Create Task'}\n          </Button>\n        </div>\n      </form>\n    </Form>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/TasksTableClient.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createRoute' is defined but never used.","line":23,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":23,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'api' is defined but never used.","line":25,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Filter' is defined but never used.","line":27,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardFooter' is defined but never used.","line":40,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":40,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pathname' is assigned a value but never used.","line":59,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'searchParams' is assigned a value but never used.","line":60,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":21}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useRouter } from 'next/navigation';\nimport { \n  DndContext, \n  closestCenter,\n  KeyboardSensor,\n  PointerSensor,\n  useSensor,\n  useSensors,\n  DragEndEvent\n} from '@dnd-kit/core';\nimport { \n  arrayMove,\n  SortableContext, \n  sortableKeyboardCoordinates,\n  verticalListSortingStrategy\n} from '@dnd-kit/sortable';\nimport { Task } from './TaskCard';\nimport { TaskCard, TaskStatus, TaskPriority } from './TaskCard';\nimport { usePathname, useSearchParams } from 'next/navigation';\nimport { createRoute } from '@/lib/utils/routes';\nimport type { Route } from 'next';\nimport { api } from '@/lib/trpc/client';\nimport { Button } from '@/components/ui/button';\nimport { Plus, Filter } from 'lucide-react';\nimport {\n  Select,\n  SelectContent,\n  SelectGroup,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from '@/components/ui/select';\nimport {\n  Card,\n  CardContent,\n  CardDescription,\n  CardFooter,\n  CardHeader,\n  CardTitle,\n} from '@/components/ui/card';\nimport { Input } from '@/components/ui/input';\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';\n\ninterface TasksTableClientProps {\n  initialTasks: Task[];\n}\n\nexport default function TasksTableClient({ initialTasks }: TasksTableClientProps) {\n  const [tasks, setTasks] = useState<Task[]>(initialTasks);\n  const [searchQuery, setSearchQuery] = useState('');\n  const [statusFilter, setStatusFilter] = useState<string>('all');\n  const [priorityFilter, setPriorityFilter] = useState<string>('all');\n  const [activeTab, setActiveTab] = useState('all');\n  \n  const router = useRouter();\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  \n  // Set up DnD sensors\n  const sensors = useSensors(\n    useSensor(PointerSensor),\n    useSensor(KeyboardSensor, {\n      coordinateGetter: sortableKeyboardCoordinates,\n    })\n  );\n\n  // TRPC mutations - commented out until tRPC router is implemented\n  // For now, we'll just update the local state\n  /*\n  const updateTaskMutation = api.tasks.update.useMutation({\n    onSuccess: () => {\n      router.refresh();\n    },\n  });\n\n  const deleteTaskMutation = api.tasks.delete.useMutation({\n    onSuccess: () => {\n      router.refresh();\n    },\n  });\n  */\n\n  // Handle task editing\n  const handleEditTask = (taskId: string) => {\n    router.push(`/tasks/edit/${taskId}` as Route);\n  };\n\n  // Handle task deletion\n  const handleDeleteTask = (taskId: string) => {\n    // Temporarily just update the local state until tRPC is implemented\n    // deleteTaskMutation.mutate({ id: taskId });\n    setTasks(tasks.filter(task => task.id !== taskId));\n  };\n\n  // Handle status change\n  const handleStatusChange = (taskId: string, newStatus: TaskStatus) => {\n    // Temporarily just update the local state until tRPC is implemented\n    // updateTaskMutation.mutate({ id: taskId, status: newStatus });\n    \n    setTasks(tasks.map(task => \n      task.id === taskId ? { ...task, status: newStatus } : task\n    ));\n  };\n\n  // Handle drag end for reordering tasks\n  const handleDragEnd = (event: DragEndEvent) => {\n    const { active, over } = event;\n    \n    if (over && active.id !== over.id) {\n      setTasks((items) => {\n        const oldIndex = items.findIndex(item => item.id === active.id);\n        const newIndex = items.findIndex(item => item.id === over.id);\n        \n        const reorderedTasks = arrayMove(items, oldIndex, newIndex);\n        \n        // Update positions in database - commented out until tRPC is implemented\n        /*\n        reorderedTasks.forEach((task, index) => {\n          updateTaskMutation.mutate({ \n            id: task.id, \n            position: index \n          });\n        });\n        */\n        \n        return reorderedTasks;\n      });\n    }\n  };\n\n  // Filter tasks based on search, status, and priority\n  const filteredTasks = tasks.filter(task => {\n    const matchesSearch = task.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\n                         (task.description?.toLowerCase().includes(searchQuery.toLowerCase()) ?? false);\n    \n    const matchesStatus = statusFilter === 'all' || task.status === statusFilter;\n    const matchesPriority = priorityFilter === 'all' || task.priority === priorityFilter;\n    \n    // Filter by tab (view)\n    if (activeTab === 'all') {\n      return matchesSearch && matchesStatus && matchesPriority;\n    } else if (activeTab === 'today') {\n      const today = new Date();\n      today.setHours(0, 0, 0, 0);\n      const tomorrow = new Date(today);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      \n      const isDueToday = task.due_date && \n        new Date(task.due_date) >= today && \n        new Date(task.due_date) < tomorrow;\n        \n      return matchesSearch && matchesStatus && matchesPriority && isDueToday;\n    } else if (activeTab === 'upcoming') {\n      const tomorrow = new Date();\n      tomorrow.setHours(0, 0, 0, 0);\n      tomorrow.setDate(tomorrow.getDate() + 1);\n      \n      const isUpcoming = task.due_date && new Date(task.due_date) >= tomorrow;\n      return matchesSearch && matchesStatus && matchesPriority && isUpcoming;\n    }\n    \n    return matchesSearch && matchesStatus && matchesPriority;\n  });\n\n  return (\n    <div className=\"space-y-4\">\n      <div className=\"flex flex-col sm:flex-row justify-between gap-4\">\n        <div className=\"flex-1\">\n          <Input\n            placeholder=\"Search tasks...\"\n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"max-w-md\"\n          />\n        </div>\n        <div className=\"flex flex-wrap gap-2\">\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by status\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectGroup>\n                <SelectItem value=\"all\">All Statuses</SelectItem>\n                <SelectItem value={TaskStatus.TODO}>To Do</SelectItem>\n                <SelectItem value={TaskStatus.IN_PROGRESS}>In Progress</SelectItem>\n                <SelectItem value={TaskStatus.DONE}>Done</SelectItem>\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n          \n          <Select value={priorityFilter} onValueChange={setPriorityFilter}>\n            <SelectTrigger className=\"w-[180px]\">\n              <SelectValue placeholder=\"Filter by priority\" />\n            </SelectTrigger>\n            <SelectContent>\n              <SelectGroup>\n                <SelectItem value=\"all\">All Priorities</SelectItem>\n                <SelectItem value={TaskPriority.HIGH}>High</SelectItem>\n                <SelectItem value={TaskPriority.MEDIUM}>Medium</SelectItem>\n                <SelectItem value={TaskPriority.LOW}>Low</SelectItem>\n              </SelectGroup>\n            </SelectContent>\n          </Select>\n          \n          <Button onClick={() => router.push('/tasks/new' as Route)}>\n            <Plus className=\"mr-2 h-4 w-4\" />\n            New Task\n          </Button>\n        </div>\n      </div>\n      \n      <Tabs defaultValue=\"all\" value={activeTab} onValueChange={setActiveTab}>\n        <TabsList>\n          <TabsTrigger value=\"all\">All Tasks</TabsTrigger>\n          <TabsTrigger value=\"today\">Today</TabsTrigger>\n          <TabsTrigger value=\"upcoming\">Upcoming</TabsTrigger>\n        </TabsList>\n        \n        <TabsContent value={activeTab} className=\"mt-4\">\n          <Card>\n            <CardHeader>\n              <CardTitle>\n                {activeTab === 'all' ? 'All Tasks' : \n                 activeTab === 'today' ? 'Today\\'s Tasks' : 'Upcoming Tasks'}\n              </CardTitle>\n              <CardDescription>\n                {filteredTasks.length} {filteredTasks.length === 1 ? 'task' : 'tasks'} found\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <DndContext\n                sensors={sensors}\n                collisionDetection={closestCenter}\n                onDragEnd={handleDragEnd}\n              >\n                <SortableContext\n                  items={filteredTasks.map(task => task.id)}\n                  strategy={verticalListSortingStrategy}\n                >\n                  <div className=\"space-y-3\">\n                    {filteredTasks.length > 0 ? (\n                      filteredTasks.map((task) => (\n                        <TaskCard\n                          key={task.id}\n                          task={task}\n                          onEdit={handleEditTask}\n                          onDelete={handleDeleteTask}\n                          onStatusChange={handleStatusChange}\n                        />\n                      ))\n                    ) : (\n                      <div className=\"text-center py-8 text-gray-500\">\n                        No tasks found. Create a new task to get started.\n                      </div>\n                    )}\n                  </div>\n                </SortableContext>\n              </DndContext>\n            </CardContent>\n          </Card>\n        </TabsContent>\n      </Tabs>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/ThingsTaskCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Circle' is defined but never used.","line":11,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":9},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":67,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":67,"endColumn":15}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { useSortable } from '@dnd-kit/sortable';\nimport { CSS } from '@dnd-kit/utilities';\nimport { format } from 'date-fns';\nimport { \n  Calendar, \n  Tag, \n  MoreHorizontal, \n  Circle, \n  Check,\n  ChevronRight,\n  ChevronDown\n} from 'lucide-react';\nimport { Task } from './TaskCard';\nimport { Button } from '@/components/ui/button';\nimport { Badge } from '@/components/ui/badge';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\n\ninterface ThingsTaskCardProps {\n  task: Task;\n  onEdit: (taskId: string) => void;\n  onDelete: (taskId: string) => void;\n  onStatusChange: (taskId: string, newStatus: string) => void;\n  onToggleComplete: (taskId: string, completed: boolean) => void;\n}\n\nexport function ThingsTaskCard({ \n  task, \n  onEdit, \n  onDelete, \n  onStatusChange,\n  onToggleComplete\n}: ThingsTaskCardProps) {\n  const [isExpanded, setIsExpanded] = useState(false);\n  const [isHovered, setIsHovered] = useState(false);\n  const isCompleted = task.status === 'done';\n\n  // Set up sortable functionality\n  const {\n    attributes,\n    listeners,\n    setNodeRef,\n    transform,\n    transition,\n    isDragging,\n  } = useSortable({ id: task.id });\n\n  const style = {\n    transform: CSS.Transform.toString(transform),\n    transition,\n    opacity: isDragging ? 0.5 : 1,\n    zIndex: isDragging ? 10 : 1,\n  };\n\n  // Format due date if present\n  const formattedDueDate = task.due_date ? (() => {\n    try {\n      return format(new Date(task.due_date), 'MMM d');\n    } catch (e) {\n      return null;\n    }\n  })() : null;\n\n  return (\n    <div\n      ref={setNodeRef}\n      style={style}\n      {...attributes}\n      className=\"mb-2\"\n      onMouseEnter={() => setIsHovered(true)}\n      onMouseLeave={() => setIsHovered(false)}\n    >\n      <div \n        className={`\n          px-3 py-2 rounded-md border border-transparent\n          ${isHovered ? 'bg-gray-100' : 'bg-transparent'} \n          ${isCompleted ? 'opacity-60' : 'opacity-100'}\n          transition-all duration-150\n        `}\n      >\n        <div className=\"flex items-start gap-2\">\n          {/* Checkbox */}\n          <Button\n            variant=\"ghost\"\n            size=\"sm\"\n            className=\"p-0 h-5 w-5 rounded-full hover:bg-transparent\"\n            onClick={() => onToggleComplete(task.id, !isCompleted)}\n          >\n            {isCompleted ? (\n              <div className=\"h-5 w-5 rounded-full border border-gray-300 bg-gray-200 flex items-center justify-center\">\n                <Check className=\"h-3 w-3 text-gray-600\" />\n              </div>\n            ) : (\n              <div className=\"h-5 w-5 rounded-full border border-gray-300 hover:border-gray-400\" />\n            )}\n          </Button>\n\n          {/* Task Content */}\n          <div className=\"flex-1 min-w-0\" {...listeners}>\n            <div className=\"flex items-center justify-between\">\n              <h3 className={`font-medium text-sm truncate ${isCompleted ? 'line-through text-gray-500' : 'text-gray-900'}`}>\n                {task.title}\n              </h3>\n              \n              {/* Actions (only visible on hover) */}\n              {isHovered && (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" size=\"icon\" className=\"h-6 w-6 ml-2\">\n                      <MoreHorizontal className=\"h-3 w-3\" />\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-40\">\n                    <DropdownMenuItem onClick={() => onEdit(task.id)}>\n                      Edit\n                    </DropdownMenuItem>\n                    <DropdownMenuItem \n                      onClick={() => onStatusChange(task.id, task.status === 'todo' ? 'in-progress' : 'todo')}\n                    >\n                      {task.status === 'todo' ? 'Move to In Progress' : 'Move to To Do'}\n                    </DropdownMenuItem>\n                    <DropdownMenuSeparator />\n                    <DropdownMenuItem \n                      onClick={() => onDelete(task.id)}\n                      className=\"text-red-600 hover:text-red-700 focus:text-red-700\"\n                    >\n                      Delete\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              )}\n            </div>\n            \n            {/* Task details (expandable) */}\n            {task.description && (\n              <div className=\"mt-1\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  className=\"p-0 h-5 text-xs text-gray-500 hover:text-gray-700 hover:bg-transparent\"\n                  onClick={() => setIsExpanded(!isExpanded)}\n                >\n                  {isExpanded ? (\n                    <ChevronDown className=\"h-3 w-3 mr-1\" />\n                  ) : (\n                    <ChevronRight className=\"h-3 w-3 mr-1\" />\n                  )}\n                  Notes\n                </Button>\n                \n                {isExpanded && (\n                  <p className=\"text-xs text-gray-600 mt-1 ml-4 pl-1 border-l-2 border-gray-200\">\n                    {task.description}\n                  </p>\n                )}\n              </div>\n            )}\n            \n            {/* Task metadata */}\n            <div className=\"flex flex-wrap items-center gap-2 mt-1\">\n              {/* Priority indicator */}\n              {task.priority && (\n                <Badge \n                  variant=\"outline\" \n                  className={`\n                    text-xs px-1.5 py-0 h-5 font-normal\n                    ${task.priority === 'high' ? 'border-red-200 bg-red-50 text-red-700' : \n                      task.priority === 'medium' ? 'border-yellow-200 bg-yellow-50 text-yellow-700' : \n                      'border-blue-200 bg-blue-50 text-blue-700'}\n                  `}\n                >\n                  {task.priority}\n                </Badge>\n              )}\n              \n              {/* Due date */}\n              {formattedDueDate && (\n                <Badge \n                  variant=\"outline\" \n                  className=\"text-xs px-1.5 py-0 h-5 font-normal border-gray-200 bg-gray-50 text-gray-700 flex items-center gap-1\"\n                >\n                  <Calendar className=\"h-3 w-3\" />\n                  {formattedDueDate}\n                </Badge>\n              )}\n              \n              {/* Category/Project */}\n              {task.category && (\n                <Badge \n                  variant=\"outline\" \n                  className=\"text-xs px-1.5 py-0 h-5 font-normal border-gray-200 bg-gray-50 text-gray-700 flex items-center gap-1\"\n                >\n                  <Tag className=\"h-3 w-3\" />\n                  {task.category}\n                </Badge>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/VirtualizedTaskList.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parentHeight' is assigned a value but never used.","line":30,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":30,"endColumn":22},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'parentRef.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'parentRef.current' to a variable inside the effect, and use that variable in the cleanup function.","line":51,"column":44,"nodeType":"Identifier","endLine":51,"endColumn":51}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useRef, useEffect, useState } from 'react';\nimport { useVirtualizer } from '@tanstack/react-virtual';\nimport type { VirtualItem } from '@tanstack/react-virtual';\nimport { motion, AnimatePresence } from 'framer-motion';\nimport { Task } from './TaskCard';\nimport { ThingsTaskCard } from './ThingsTaskCard';\n\ninterface VirtualizedTaskListProps {\n  tasks: Task[];\n  onEdit: (taskId: string) => void;\n  onDelete: (taskId: string) => void;\n  onStatusChange: (taskId: string, newStatus: string) => void;\n  onToggleComplete: (taskId: string, completed: boolean) => void;\n  isLoading?: boolean;\n  emptyState?: React.ReactNode;\n}\n\nexport function VirtualizedTaskList({\n  tasks,\n  onEdit,\n  onDelete,\n  onStatusChange,\n  onToggleComplete,\n  isLoading = false,\n  emptyState\n}: VirtualizedTaskListProps) {\n  const parentRef = useRef<HTMLDivElement>(null);\n  const [parentHeight, setParentHeight] = useState(0);\n  const [taskHeights, setTaskHeights] = useState<Record<string, number>>({});\n  const [removedTaskIds, setRemovedTaskIds] = useState<string[]>([]);\n\n  // Update parent height on resize\n  useEffect(() => {\n    if (!parentRef.current) return;\n    \n    const updateHeight = () => {\n      if (parentRef.current) {\n        setParentHeight(parentRef.current.offsetHeight);\n      }\n    };\n    \n    updateHeight();\n    \n    const resizeObserver = new ResizeObserver(updateHeight);\n    resizeObserver.observe(parentRef.current);\n    \n    return () => {\n      if (parentRef.current) {\n        resizeObserver.unobserve(parentRef.current);\n      }\n    };\n  }, []);\n\n  // Set up virtualizer\n  const rowVirtualizer = useVirtualizer({\n    count: tasks.length,\n    getScrollElement: () => parentRef.current,\n    estimateSize: (index: number) => {\n      const task = tasks[index];\n      return taskHeights[task.id] || 100; // Default height estimate\n    },\n    overscan: 5,\n  });\n\n  // Handle task deletion with animation\n  const handleDelete = (taskId: string) => {\n    setRemovedTaskIds(prev => [...prev, taskId]);\n    \n    // After animation completes, actually delete the task\n    setTimeout(() => {\n      onDelete(taskId);\n      setRemovedTaskIds(prev => prev.filter(id => id !== taskId));\n    }, 300);\n  };\n\n  // Handle task height measurement\n  const measureTaskHeight = (taskId: string, height: number) => {\n    if (taskHeights[taskId] !== height) {\n      setTaskHeights(prev => ({\n        ...prev,\n        [taskId]: height\n      }));\n    }\n  };\n\n  if (isLoading) {\n    return (\n      <div className=\"space-y-2 max-w-3xl mx-auto\">\n        {Array.from({ length: 5 }).map((_, index) => (\n          <div \n            key={index} \n            className=\"h-24 bg-gray-100 animate-pulse rounded-md\"\n          />\n        ))}\n      </div>\n    );\n  }\n\n  if (tasks.length === 0 && emptyState) {\n    return <>{emptyState}</>;\n  }\n\n  return (\n    <div \n      ref={parentRef} \n      className=\"max-w-3xl mx-auto overflow-auto\"\n      style={{ height: 'calc(100vh - 200px)' }}\n    >\n      <div\n        style={{\n          height: `${rowVirtualizer.getTotalSize()}px`,\n          width: '100%',\n          position: 'relative',\n        }}\n      >\n        <AnimatePresence>\n          {rowVirtualizer.getVirtualItems().map((virtualRow: VirtualItem) => {\n            const task = tasks[virtualRow.index];\n            const isBeingRemoved = removedTaskIds.includes(task.id);\n            \n            return (\n              <motion.div\n                key={task.id}\n                initial={{ opacity: 0, y: 20 }}\n                animate={{ \n                  opacity: isBeingRemoved ? 0 : 1, \n                  y: isBeingRemoved ? -20 : 0,\n                  height: isBeingRemoved ? 0 : 'auto'\n                }}\n                exit={{ opacity: 0, y: -20, height: 0 }}\n                transition={{ duration: 0.3 }}\n                style={{\n                  position: 'absolute',\n                  top: 0,\n                  left: 0,\n                  width: '100%',\n                  transform: `translateY(${virtualRow.start}px)`,\n                }}\n                onAnimationComplete={() => {\n                  // Recalculate virtualizer after animations\n                  rowVirtualizer.measure();\n                }}\n              >\n                <div\n                  ref={(el) => {\n                    if (el) {\n                      measureTaskHeight(task.id, el.getBoundingClientRect().height);\n                    }\n                  }}\n                >\n                  <ThingsTaskCard\n                    task={task}\n                    onEdit={onEdit}\n                    onDelete={handleDelete}\n                    onStatusChange={onStatusChange}\n                    onToggleComplete={onToggleComplete}\n                  />\n                </div>\n              </motion.div>\n            );\n          })}\n        </AnimatePresence>\n      </div>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/app/tasks/page.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TasksTableClient' is defined but never used.","line":4,"column":8,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TasksWidgets' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ThingsTaskCard' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskForm' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskFormValues' is defined but never used.","line":7,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskOutput' is defined but never used.","line":7,"column":41,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":51},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskCategory' is defined but never used.","line":8,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":48},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CategoryView' is defined but never used.","line":9,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":9,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DraggableTaskList' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":27},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskDetailView' is defined but never used.","line":11,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'KeyboardShortcuts' is defined but never used.","line":12,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":12,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":61,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2017,2020],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2017,2020],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { Suspense } from 'react';\nimport { Skeleton } from '@/components/ui/skeleton';\nimport { createClient } from '@/lib/supabase/server';\nimport TasksTableClient from './TasksTableClient';\nimport { TasksWidgets } from '@/components/tasks/TasksWidgets';\nimport { ThingsTaskCard } from './ThingsTaskCard';\nimport { TaskForm, TaskFormValues, type TaskOutput } from './TaskForm';\nimport { TaskPriority, TaskStatus, TaskCategory } from '@codexcrm/db/src/models/Task';\nimport { CategoryView } from './CategoryViews';\nimport { DraggableTaskList } from './DraggableTaskList';\nimport { TaskDetailView } from './TaskDetailView';\nimport { KeyboardShortcuts } from './KeyboardShortcuts';\n\n// Define the Task interface based on our database schema\nexport interface Task {\n  id: string;\n  title: string;\n  description: string | null;\n  status: TaskStatus;\n  priority: TaskPriority;\n  category: string | null;\n  color: string | null;\n  due_date: string | null;\n  contact_id: string | null;\n  project_id: string | null;\n  business_impact: number | null;\n  position: number;\n  ai_generated: boolean;\n  user_id: string;\n  created_at?: string;\n  updated_at?: string;\n}\n\n// A simple loading state for the page content\nfunction TasksPageSkeleton() {\n  return (\n    <div className=\"p-4 md:p-6 space-y-6\">\n      <Skeleton className=\"h-10 w-full max-w-md\" />\n      <Skeleton className=\"h-24 w-full\" />\n      <Skeleton className=\"h-96 w-full\" />\n    </div>\n  );\n}\n\n// Server component to fetch data\nexport default async function TasksPage() {\n  // Fetch tasks from Supabase\n  try {\n    const supabase = await createClient();\n    const { data: tasks, error } = await supabase\n      .from('tasks')\n      .select('*, contacts(*), projects(*)')\n      .order('position', { ascending: true });\n\n    if (error) {\n      console.error('Error fetching tasks:', error);\n      throw new Error(`Failed to fetch tasks: ${error.message}`);\n    }\n\n    // Transform the data to match the Task interface\n    const formattedTasks: Task[] = tasks?.map((task: any) => ({\n      id: task.id,\n      title: task.title || 'Untitled Task',\n      description: task.description || null,\n      status: task.status as TaskStatus || TaskStatus.TODO,\n      priority: task.priority as TaskPriority || TaskPriority.MEDIUM,\n      category: task.category || null,\n      color: task.color || null,\n      due_date: task.due_date || null,\n      contact_id: task.contact_id || null,\n      project_id: task.project_id || null,\n      business_impact: task.business_impact || null,\n      position: task.position || 0,\n      ai_generated: task.ai_generated || false,\n      user_id: task.user_id,\n      created_at: task.created_at,\n      updated_at: task.updated_at\n    })) || [];\n\n    return (\n      <main className=\"flex-1 overflow-y-auto p-4 md:p-6\">\n        <Suspense fallback={<TasksPageSkeleton />}>\n          <div className=\"space-y-6\">\n            <h1 className=\"text-2xl font-bold tracking-tight\">Tasks</h1>\n            <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n              <div className=\"rounded-lg border bg-card text-card-foreground shadow-sm\">\n                <div className=\"p-6 flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <h3 className=\"tracking-tight text-sm font-medium\">All Tasks</h3>\n                  <span className=\"text-xl\">📋</span>\n                </div>\n                <div className=\"p-6 pt-0\">\n                  <div className=\"text-2xl font-bold\">{formattedTasks.length}</div>\n                </div>\n              </div>\n              <div className=\"rounded-lg border bg-card text-card-foreground shadow-sm\">\n                <div className=\"p-6 flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <h3 className=\"tracking-tight text-sm font-medium\">To Do</h3>\n                  <span className=\"text-xl\">📝</span>\n                </div>\n                <div className=\"p-6 pt-0\">\n                  <div className=\"text-2xl font-bold\">{formattedTasks.filter(t => t.status === TaskStatus.TODO).length}</div>\n                </div>\n              </div>\n              <div className=\"rounded-lg border bg-card text-card-foreground shadow-sm\">\n                <div className=\"p-6 flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <h3 className=\"tracking-tight text-sm font-medium\">In Progress</h3>\n                  <span className=\"text-xl\">⏳</span>\n                </div>\n                <div className=\"p-6 pt-0\">\n                  <div className=\"text-2xl font-bold\">{formattedTasks.filter(t => t.status === TaskStatus.IN_PROGRESS).length}</div>\n                </div>\n              </div>\n              <div className=\"rounded-lg border bg-card text-card-foreground shadow-sm\">\n                <div className=\"p-6 flex flex-row items-center justify-between space-y-0 pb-2\">\n                  <h3 className=\"tracking-tight text-sm font-medium\">Completed</h3>\n                  <span className=\"text-xl\">✅</span>\n                </div>\n                <div className=\"p-6 pt-0\">\n                  <div className=\"text-2xl font-bold\">{formattedTasks.filter(t => t.status === TaskStatus.DONE).length}</div>\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"rounded-md border\">\n              <div className=\"p-4\">\n                <h2 className=\"text-xl font-semibold\">Task List</h2>\n                <p className=\"text-sm text-gray-500\">{formattedTasks.length} tasks found</p>\n              </div>\n              <div className=\"divide-y\">\n                {formattedTasks.length > 0 ? (\n                  formattedTasks.map((task) => (\n                    <div key={task.id} className=\"p-4 hover:bg-gray-50\">\n                      <h3 className=\"font-medium\">{task.title}</h3>\n                      {task.description && <p className=\"text-sm text-gray-500 mt-1\">{task.description}</p>}\n                      <div className=\"flex gap-2 mt-2\">\n                        <span className=\"inline-flex items-center rounded-full px-2 py-1 text-xs font-medium bg-blue-50 text-blue-700\">\n                          {task.status}\n                        </span>\n                        <span className=\"inline-flex items-center rounded-full px-2 py-1 text-xs font-medium bg-purple-50 text-purple-700\">\n                          {task.priority}\n                        </span>\n                      </div>\n                    </div>\n                  ))\n                ) : (\n                  <div className=\"p-8 text-center text-gray-500\">\n                    No tasks found. Create your first task to get started.\n                  </div>\n                )}\n              </div>\n            </div>\n          </div>\n        </Suspense>\n      </main>\n    );\n  } catch (error) {\n    console.error('Error in TasksPage:', error);\n    return (\n      <div className=\"flex flex-col items-center justify-center h-full\">\n        <div className=\"bg-red-50 border border-red-200 rounded-md p-4 max-w-md\">\n          <h2 className=\"text-lg font-semibold text-red-800 mb-2\">Error Loading Tasks</h2>\n          <p className=\"text-red-700\">There was a problem fetching your tasks. Please try refreshing the page.</p>\n        </div>\n      </div>\n    );\n  }\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/SupabaseProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/auth/OneTapComponent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'signInData' is assigned a value but never used.","line":86,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":86,"endColumn":35}],"suppressedMessages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'performGoogleOneTapInit'. Either include it or remove the dependency array.","line":183,"column":6,"nodeType":"ArrayExpression","endLine":183,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [performGoogleOneTapInit]","fix":{"range":[7330,7332],"text":"[performGoogleOneTapInit]"}}],"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\nimport * as Sentry from '@sentry/nextjs'; // Added Sentry\nimport { CredentialResponse, PromptMomentNotification } from 'google-one-tap'; // Added PromptMomentNotification\nimport { useRouter } from 'next/navigation';\nimport Script from 'next/script';\nimport { useEffect, useRef } from 'react';\n\nimport { createClient } from '@/lib/supabase/client';\n\nconst supabase = createClient();\n\nconst OneTapComponent = () => {\n  const router = useRouter();\n  const initAttemptedRef = useRef(false);\n\n  // generate nonce to use for google id token sign-in\n  const generateNonce = async (): Promise<string[]> => {\n    const nonce = btoa(\n      String.fromCharCode(...crypto.getRandomValues(new Uint8Array(32)))\n    );\n    const encoder = new TextEncoder();\n    const encodedNonce = encoder.encode(nonce);\n    const hashBuffer = await crypto.subtle.digest('SHA-256', encodedNonce);\n    const hashArray = Array.from(new Uint8Array(hashBuffer));\n    const hashedNonce = hashArray\n      .map((b) => b.toString(16).padStart(2, '0'))\n      .join('');\n    return [nonce, hashedNonce];\n  };\n\n  const performGoogleOneTapInit = async () => {\n    if (initAttemptedRef.current) {\n      // Removed: console.log('[OneTapComponent] Initialization already attempted, skipping.');\n      return;\n    }\n    initAttemptedRef.current = true;\n    Sentry.captureMessage(\n      '[OneTapComponent] Attempting Google One Tap initialization...',\n      'info'\n    );\n\n    // Check if Google Identity Services are loaded\n    if (\n      !window.google ||\n      !window.google.accounts ||\n      !window.google.accounts.id\n    ) {\n      console.warn('Google GSI client not ready yet. Ensure script is loaded.');\n      Sentry.captureMessage(\n        'Google GSI client not ready yet. Ensure script is loaded.',\n        'warning'\n      );\n      // The <Script onLoad> should handle triggering this once GSI is ready.\n      // If GSI fails to load, this won't proceed, which is intended.\n      return;\n    }\n\n    // Check for an existing Supabase session\n    const { data: sessionData, error: sessionError } =\n      await supabase.auth.getSession();\n    if (sessionError) {\n      console.error('Error getting session:', sessionError);\n      Sentry.captureException(sessionError);\n      return; // Don't proceed if session check fails\n    }\n\n    if (sessionData.session) {\n      // Removed: console.log('Active session found. Redirecting to dashboard. One Tap will not initialize.');\n      // router.push('/dashboard'); // Optionally redirect if user is already logged in and somehow lands here\n      return; // Don't initialize One Tap if a session already exists\n    }\n\n    Sentry.captureMessage(\n      '[OneTapComponent] No active session. Initializing Google One Tap.',\n      'info'\n    );\n    const [nonce, hashedNonce] = await generateNonce();\n    // Removed: console.log('Nonce generated:', { nonce, hashedNonce });\n    // Removed: console.log('[OneTapComponent] Using NEXT_PUBLIC_GOOGLE_CLIENT_ID:', process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID);\n\n    window.google.accounts.id.initialize({\n      client_id: process.env.NEXT_PUBLIC_GOOGLE_CLIENT_ID!,\n      callback: async (response: CredentialResponse) => {\n        // Removed: console.log('Google Sign-In callback received:', response);\n        try {\n          const { data: signInData, error: signInError } =\n            await supabase.auth.signInWithIdToken({\n              provider: 'google',\n              token: response.credential,\n              nonce, // Use the raw nonce\n            });\n\n          if (signInError) {\n            console.error('Supabase signInWithIdToken error:', signInError);\n            Sentry.captureException(signInError);\n            throw signInError;\n          }\n\n          // Removed: console.log('Supabase session data after signInWithIdToken:', signInData);\n          Sentry.captureMessage(\n            'Successfully logged in with Google One Tap.',\n            'info'\n          );\n          router.push('/dashboard');\n          router.refresh(); // Ensure UI updates after redirect\n        } catch (error) {\n          console.error('Error processing Google One Tap sign-in:', error);\n          Sentry.captureException(error);\n        }\n      },\n      nonce: hashedNonce, // Use the hashed nonce\n      use_fedcm_for_prompt: true,\n    });\n\n    Sentry.captureMessage(\n      '[OneTapComponent] Google ID initialized. Displaying One Tap prompt...',\n      'info'\n    );\n    window.google.accounts.id.prompt(\n      (notification: PromptMomentNotification) => {\n        // Changed type from any\n        // This notification callback can be used to understand prompt display status\n        if (notification.isNotDisplayed()) {\n          const reason = notification.getNotDisplayedReason();\n          console.warn(\n            'Google One Tap prompt was not displayed. Reason:',\n            reason\n          );\n          Sentry.captureMessage(\n            `Google One Tap prompt was not displayed. Reason: ${reason}`,\n            'warning'\n          );\n        } else if (notification.isSkippedMoment()) {\n          const reason = notification.getSkippedReason();\n          console.warn(\n            'Google One Tap prompt was skipped by the user. Reason:',\n            reason\n          );\n          Sentry.captureMessage(\n            `Google One Tap prompt was skipped by the user. Reason: ${reason}`,\n            'warning'\n          );\n        } else if (notification.isDismissedMoment()) {\n          const reason = notification.getDismissedReason();\n          console.warn(\n            'Google One Tap prompt was dismissed by the user. Reason:',\n            reason\n          );\n          Sentry.captureMessage(\n            `Google One Tap prompt was dismissed by the user. Reason: ${reason}`,\n            'warning'\n          );\n        }\n        // If the prompt is not displayed or skipped, Google's library might show a fallback button\n        // if one is configured via HTML (e.g., <div class=\"g_id_signin\">...</div>), or nothing further happens.\n        // The Supabase JS example primarily relies on the prompt.\n      }\n    );\n  };\n  // This useEffect is primarily for cleanup if needed, or could be removed if onLoad is sufficient.\n  // For now, let's rely on onLoad.\n\n  // If the script is already loaded when this component mounts (e.g., cached or fast navigation),\n  // and onLoad might not fire, we can try to initialize here too.\n  if (window.google && window.google.accounts && window.google.accounts.id) {\n    // Removed: console.log('[OneTapComponent useEffect] GSI already loaded on mount, attempting init.');\n    performGoogleOneTapInit();\n  }\n\n  useEffect(() => {\n    // The <Script onLoad> prop will call initializeAndPrompt once the GSI client is loaded.\n    // This useEffect is primarily for cleanup if needed, or could be removed if onLoad is sufficient.\n    // For now, let's rely on onLoad.\n\n    // If the script is already loaded when this component mounts (e.g., cached or fast navigation),\n    // and onLoad might not fire, we can try to initialize here too.\n    if (window.google && window.google.accounts && window.google.accounts.id) {\n      // Removed: console.log('[OneTapComponent useEffect] GSI already loaded on mount, attempting init.');\n      performGoogleOneTapInit();\n    }\n\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, []); // Run once on mount\n\n  return (\n    <>\n      <Script\n        src=\"https://accounts.google.com/gsi/client\"\n        async\n        defer\n        onLoad={() => {\n          Sentry.captureMessage(\n            '[OneTapComponent <Script onLoad>] Google GSI Script loaded. Initializing One Tap...',\n            'info'\n          );\n          performGoogleOneTapInit();\n        }}\n        onError={(e) => {\n          console.error('Google GSI Script load error:', e);\n          Sentry.captureException(e);\n        }}\n        strategy=\"afterInteractive\"\n      />\n      {/* This div is used by Google if it needs to anchor the prompt UI. */}\n      {/* Matching Supabase example's ID and styling suggestion. */}\n      <div id=\"oneTap\" className=\"fixed top-0 right-0 z-[100]\" />\n      {/* \n        If a traditional button is desired as a fallback, it's typically added declaratively \n        using HTML like <div class=\"g_id_signin\" ...>. The Supabase Next.js example focuses on the prompt.\n        <div id=\"oneTapGoogleButton\"></div> \n      */}\n    </>\n  );\n};\n\nexport default OneTapComponent;\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/contacts/AddContactModal.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Plus' is defined but never used.","line":4,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":4,"endColumn":43},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'setOpen' function makes the dependencies of useEffect Hook (at line 64) change on every render. To fix this, wrap the definition of 'setOpen' in its own useCallback() Hook.","line":43,"column":9,"nodeType":"VariableDeclarator","endLine":49,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'setOpen' in its own useCallback() Hook.","fix":{"range":[1484,1634],"text":"useCallback((newOpenState: boolean) => {\n    if (onOpenChange) {\n      onOpenChange(newOpenState);\n    } else {\n      setUncontrolledOpen(newOpenState);\n    }\n  })"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'setOpen' function makes the dependencies of useEffect Hook (at line 77) change on every render. To fix this, wrap the definition of 'setOpen' in its own useCallback() Hook.","line":43,"column":9,"nodeType":"VariableDeclarator","endLine":49,"endColumn":4,"suggestions":[{"desc":"Wrap the definition of 'setOpen' in its own useCallback() Hook.","fix":{"range":[1484,1634],"text":"useCallback((newOpenState: boolean) => {\n    if (onOpenChange) {\n      onOpenChange(newOpenState);\n    } else {\n      setUncontrolledOpen(newOpenState);\n    }\n  })"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":106,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":106,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3267,3270],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3267,3270],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":140,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":140,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4453,4456],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4453,4456],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useQueryClient } from '@tanstack/react-query';\nimport { Check, AlertCircle, Loader2, Plus, User } from 'lucide-react'; // Plus might be unused here\nimport { useState, useEffect, FormEvent } from 'react'; // Added FormEvent\n\nimport { Alert, AlertDescription, AlertTitle } from '@/components/ui/alert';\nimport { Button } from '@/components/ui/button';\nimport {\n  Dialog,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogDescription,\n  DialogFooter,\n  // DialogClose // DialogClose is usually for a manual close button inside content, not needed here\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { api } from '@/lib/trpc';\nimport { cn } from '@/lib/utils';\n\ninterface AddContactModalProps {\n  open?: boolean;\n  onOpenChange?: (open: boolean) => void;\n  onContactAdded?: () => void;\n  showTriggerButton?: boolean; // New prop\n  triggerButtonComponent?: React.ReactNode; // Optional: for a completely custom trigger\n}\n\nexport function AddContactModal({\n  open: controlledOpen,\n  onOpenChange,\n  onContactAdded,\n  showTriggerButton = true, // Default to true\n  triggerButtonComponent, // For custom trigger from parent\n}: AddContactModalProps) {\n  const queryClient = useQueryClient();\n  const [uncontrolledOpen, setUncontrolledOpen] = useState(false);\n\n  const open = controlledOpen !== undefined ? controlledOpen : uncontrolledOpen;\n  const setOpen = (newOpenState: boolean) => {\n    if (onOpenChange) {\n      onOpenChange(newOpenState);\n    } else {\n      setUncontrolledOpen(newOpenState);\n    }\n  };\n\n  const [fullName, setFullName] = useState('');\n  const [email, setEmail] = useState('');\n  const [source, setSource] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [success, setSuccess] = useState(false);\n  const [error, setError] = useState<string | null>(null);\n\n  useEffect(() => {\n    if (success) {\n      // Close the modal immediately after successful contact addition\n      setOpen(false);\n      // Resetting form is handled by the effect watching 'open' state\n    }\n  }, [success, setOpen]);\n\n  // Listen for custom event to open the modal\n  useEffect(() => {\n    const handleOpenModal = () => {\n      setOpen(true);\n    };\n    \n    window.addEventListener('open-add-contact-modal', handleOpenModal);\n    \n    return () => {\n      window.removeEventListener('open-add-contact-modal', handleOpenModal);\n    };\n  }, [setOpen]);\n\n  useEffect(() => {\n    if (!open) {\n      // Delay reset to allow animations to complete\n      const timer = setTimeout(() => {\n        resetForm();\n      }, 300); // Adjust timing if needed\n      return () => clearTimeout(timer);\n    }\n  }, [open]);\n\n  const resetForm = () => {\n    setFullName('');\n    setEmail('');\n    setSource('');\n    setSuccess(false);\n    setError(null);\n    // setIsSubmitting(false); // Important: also reset submitting state\n  };\n\n  const addContactMutation = api.contacts.save.useMutation({\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: ['contacts.list'] }); // Corrected invalidateQueries\n      setSuccess(true);\n      if (onContactAdded) {\n        onContactAdded();\n      }\n    },\n    onError: (err: any) => {\n      // Catch error here\n      setError(err.message || 'Failed to add contact');\n      setIsSubmitting(false); // Reset submitting state on error\n    },\n    // onSettled: () => { // Also reset submitting state when mutation is settled\n    //   setIsSubmitting(false);\n    // }\n  });\n\n  async function handleAddContact(e: FormEvent) {\n    // Changed to FormEvent\n    e.preventDefault();\n    if (success) return; // Prevent re-submission if already successful\n\n    setIsSubmitting(true);\n    setError(null); // Clear previous errors\n    setSuccess(false); // Clear previous success\n\n    // Basic client-side validation (you can add more robust validation e.g. with Zod)\n    if (!fullName.trim()) {\n      setError('Full name is required.');\n      setIsSubmitting(false);\n      return;\n    }\n\n    try {\n      await addContactMutation.mutateAsync({\n        full_name: fullName.trim(),\n        email: email.trim() || undefined, // Send undefined if empty\n        source: source.trim() || undefined, // Send undefined if empty\n        // id: undefined, // Ensure no ID is sent for new contact\n      });\n      // Success handling is now in onSuccess of useMutation\n    } catch (err: any) {\n      // This catch block might not be strictly necessary if useMutation's onError handles it,\n      // but it's a safeguard.\n      setError(\n        err.message || 'An unexpected error occurred while adding contact.'\n      );\n      setIsSubmitting(false);\n    }\n    // No finally here, as isSubmitting is handled in onSuccess/onError\n  }\n\n  return (\n    <Dialog open={open} onOpenChange={setOpen}>\n      {triggerButtonComponent ? ( // If a custom trigger is passed, use it\n        <DialogTrigger asChild>{triggerButtonComponent}</DialogTrigger>\n      ) : showTriggerButton ? ( // Otherwise, show default trigger if enabled\n        <DialogTrigger asChild>\n          <Button\n            variant=\"outline\"\n            className=\"h-auto flex flex-col items-center justify-center p-4 space-y-2\"\n          >\n            <User className=\"h-6 w-6 mb-2\" />\n            <span>Add Contact</span>\n          </Button>\n        </DialogTrigger>\n      ) : null}\n      {/* If no trigger specified and showTriggerButton is false, no trigger is rendered by this component */}\n\n      <DialogContent className=\"max-w-md w-full p-6\">\n        {' '}\n        {/* Removed flex items-center justify-center */}\n        <DialogHeader className=\"w-full text-center mb-4\">\n          <DialogTitle className=\"text-teal-800 text-2xl font-extrabold tracking-tight mb-2\">\n            Add New Contact\n          </DialogTitle>\n          <DialogDescription>\n            <span className=\"text-xs text-muted-foreground\">\n              Enter contact details below to add them to your CRM system\n            </span>\n          </DialogDescription>\n        </DialogHeader>\n        {success &&\n          !error && ( // Only show success if there's no error\n            <Alert className=\"mb-4 bg-green-50 border-green-200\">\n              <Check className=\"h-4 w-4 text-green-600\" />\n              <AlertTitle className=\"text-green-800\">Success!</AlertTitle>\n              <AlertDescription className=\"text-green-700\">\n                Contact has been added successfully. Closing soon...\n              </AlertDescription>\n            </Alert>\n          )}\n        {error && (\n          <Alert variant=\"destructive\" className=\"mb-4\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>{error}</AlertDescription>\n          </Alert>\n        )}\n        {/* Hide form after success to prevent re-submission before modal closes */}\n        {!success && (\n          <form\n            onSubmit={handleAddContact}\n            className=\"w-full flex flex-col gap-4\"\n          >\n            {' '}\n            {/* Removed items-center justify-center */}\n            <div className=\"flex flex-col space-y-1.5 w-full\">\n              <Label htmlFor=\"fullNameModal\" className=\"text-sm font-medium\">\n                Full Name *\n              </Label>\n              <Input\n                id=\"fullNameModal\"\n                placeholder=\"Full Name\"\n                value={fullName}\n                onChange={(e) => setFullName(e.target.value)}\n                required\n                autoFocus\n                disabled={isSubmitting}\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"flex flex-col space-y-1.5 w-full\">\n              <Label htmlFor=\"emailModal\" className=\"text-sm font-medium\">\n                Email\n              </Label>{' '}\n              {/* Changed id */}\n              <Input\n                id=\"emailModal\"\n                type=\"email\"\n                placeholder=\"Email Address\"\n                value={email}\n                onChange={(e) => setEmail(e.target.value)}\n                disabled={isSubmitting}\n                className=\"w-full\"\n              />\n            </div>\n            <div className=\"flex flex-col space-y-1.5 w-full\">\n              <Label\n                htmlFor=\"sourceModal\"\n                className=\"text-sm font-medium text-gray-700\"\n              >\n                {' '}\n                {/* Changed id */}\n                How do you know this person?\n              </Label>\n              <Input\n                id=\"sourceModal\"\n                placeholder=\"e.g. Met at a conference\"\n                value={source}\n                onChange={(e) => setSource(e.target.value)}\n                disabled={isSubmitting}\n                className=\"w-full\"\n              />\n            </div>\n            <DialogFooter className=\"w-full mt-4\">\n              <Button\n                type=\"submit\"\n                className={cn(\n                  'w-full font-bold shadow-md',\n                  'bg-gradient-to-r from-teal-400 to-orange-500 text-white border-0 hover:from-teal-500 hover:to-orange-600 focus:ring-2 focus:ring-orange-400 focus:outline-none',\n                  'h-10 px-4 py-2'\n                )}\n                disabled={isSubmitting}\n              >\n                {isSubmitting ? (\n                  <>\n                    <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                    Adding Contact...\n                  </>\n                ) : (\n                  'Add Contact'\n                )}\n              </Button>\n            </DialogFooter>\n          </form>\n        )}\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/contacts/ContactsTable.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSortField' is assigned a value but never used.","line":14,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":14,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setSortDirection' is assigned a value but never used.","line":15,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":15,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":19,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sortedContacts' is assigned a value but never used.","line":24,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":23},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'sortDirection' and 'sortField'. Either exclude them or remove the dependency array.","line":27,"column":6,"nodeType":"ArrayExpression","endLine":27,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: [contactsData]","fix":{"range":[972,1012],"text":"[contactsData]"}}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState, useMemo } from 'react';\nimport { api } from '@/lib/trpc';\n// ... other imports for UI components, icons etc. ...\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Search, Plus } from 'lucide-react';\n// ... etc ...\n\n// This component now has its own state and data fetching\nexport function ContactsTable() {\n  const [searchQuery, setSearchQuery] = useState('');\n  const [sortField, setSortField] = useState('full_name');\n  const [sortDirection, setSortDirection] = useState<'asc' | 'desc'>('asc');\n  // ... other state for modals, etc.\n\n  // The tRPC query now lives here\n  const { data: contactsData = [], isLoading } = api.contacts.list.useQuery({\n    search: searchQuery,\n  });\n\n  // The sorting logic (useMemo is great here) now lives here\n  const sortedContacts = useMemo(() => {\n    // ... sorting logic from your old file ...\n    return [...contactsData].sort(/* ... */);\n  }, [contactsData, sortField, sortDirection]);\n\n  return (\n    <div className=\"space-y-4\">\n      {/* The Toolbar (Search, Filters, New Contact button) now lives here */}\n      <div className=\"flex justify-between items-center\">\n        <div className=\"relative w-full md:w-64\">\n          <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 text-gray-400 h-4 w-4\" />\n          <Input \n            placeholder=\"Search contacts...\" \n            value={searchQuery}\n            onChange={(e) => setSearchQuery(e.target.value)}\n            className=\"pl-10\"\n          />\n        </div>\n        <Button>\n          <Plus className=\"mr-2 h-4 w-4\" />\n          New Contact\n        </Button>\n      </div>\n\n      {/* The actual HTML <table> */}\n      <div className=\"rounded-lg border\">\n        <table>\n          {/* ... table headers and body mapping over `sortedContacts` ... */}\n        </table>\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/contacts/ContactsWidgets.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/customized/ShadcnCalendarTest.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/customized/TailwindTestCard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/customized/dropdown-menu/dropdown-menu-02.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/customized/table/table-06.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/dashboard/ai-client-insights/AiClientInsights.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/dashboard/ai-task-panel/AiTaskPanel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/dashboard/business-metrics/BusinessMetricsCard.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertCircle' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingDown' is defined but never used.","line":6,"column":47,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":59},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":6,"column":61,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":66},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Alert' is defined but never used.","line":7,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertDescription' is defined but never used.","line":7,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'AlertTitle' is defined but never used.","line":7,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":7,"endColumn":45},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'BarChart' is defined but never used.","line":10,"column":86,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":94},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Bar' is defined but never used.","line":10,"column":96,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":99},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is assigned a value but never used.","line":21,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":21,"endColumn":42},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":78,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3246,3249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3246,3249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":78,"column":85,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":90},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":274,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11480,11483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11480,11483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":12,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { api } from \"@/lib/trpc\";\nimport { AlertCircle, ArrowRight, TrendingUp, TrendingDown, Users, Calendar, AlertTriangle } from \"lucide-react\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Button } from \"@/components/ui/button\";\nimport Link from \"next/link\";\nimport { AreaChart, Area, XAxis, YAxis, CartesianGrid, Tooltip, ResponsiveContainer, BarChart, Bar, PieChart, Pie, Cell } from 'recharts';\n\n// Theme-consistent color constants - using the same color palette as the rest of the dashboard\nconst COLORS = ['#00afaf', '#ffaf00', '#8884d8', '#FF8042', '#00C49F'];\n\ninterface BusinessMetricsCardProps {\n  className?: string;\n}\n\nexport function BusinessMetricsCard({ className }: BusinessMetricsCardProps) {\n  // Try to fetch dashboard summary data, but use mock data if the endpoint doesn't exist\n  const { data: apiData, isLoading, error } = api.dashboard.summary.useQuery({}, {\n    retry: false\n  });\n  \n  // Try to fetch contact metrics, but use mock data if the endpoint doesn't exist\n  const { data: apiContactMetrics } = api.dashboard.contactMetrics.useQuery({}, {\n    retry: false\n  });\n  \n  // Try to fetch session metrics, but use mock data if the endpoint doesn't exist\n  const { data: apiSessionMetrics } = api.dashboard.sessionMetrics.useQuery({}, {\n    retry: false\n  });\n\n  // Mock data to use when API endpoints are not available\n  const mockData = {\n    totalContacts: 42,\n    upcomingSessionsCount: 5,\n  };\n\n  const mockContactMetrics = {\n    journeyStageDistribution: [\n      { wellness_journey_stage: 'onboarding', count: 8 },\n      { wellness_journey_stage: 'inquiry', count: 12 },\n      { wellness_journey_stage: 'inactive', count: 5 },\n      { wellness_journey_stage: 'maintenance', count: 10 },\n      { wellness_journey_stage: 'active', count: 7 }\n    ]\n  };\n\n  const mockSessionMetrics = {\n    sessionTrend: [\n      { date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 6).toISOString(), count: 2 },\n      { date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 5).toISOString(), count: 3 },\n      { date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 4).toISOString(), count: 1 },\n      { date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 3).toISOString(), count: 4 },\n      { date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 2).toISOString(), count: 2 },\n      { date: new Date(Date.now() - 1000 * 60 * 60 * 24 * 1).toISOString(), count: 3 },\n      { date: new Date().toISOString(), count: 5 }\n    ]\n  };\n\n  // Use API data if available, otherwise use mock data\n  const data = apiData || mockData;\n  const contactMetrics = apiContactMetrics || mockContactMetrics;\n  const sessionMetrics = apiSessionMetrics || mockSessionMetrics;\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <div className=\"flex justify-center items-center h-40\">\n        <div className=\"animate-spin rounded-full h-8 w-8 border-2 border-primary border-t-transparent\"></div>\n      </div>\n    );\n  }\n\n  // Format journey stage data for pie chart with warmer terminology\n  const journeyStageData = contactMetrics.journeyStageDistribution.map((stage: any, index: number) => {\n    // Map the existing journey stage names to warmer, more relationship-focused terms\n    let displayName = stage.wellness_journey_stage;\n    \n    // Transform the stage names to warmer terminology\n    switch(stage.wellness_journey_stage.toLowerCase()) {\n      case 'onboarding':\n        displayName = 'Welcome';\n        break;\n      case 'inquiry':\n        displayName = 'Inquiry'; // Keep English spelling\n        break;\n      case 'inactive':\n        displayName = 'Needs Outreach';\n        break;\n      case 'maintenance':\n        displayName = 'Relationship Development';\n        break;\n      case 'active':\n        displayName = 'My Core Tribe';\n        break;\n    }\n    \n    return {\n      name: displayName,\n      value: stage.count,\n      originalName: stage.wellness_journey_stage // Keep original for data integrity\n    };\n  }) || [];\n\n  // Format session trend data for area chart\n  const sessionTrendData = sessionMetrics.sessionTrend.map(item => ({\n    date: new Date(item.date).toLocaleDateString('en-US', { month: 'short', day: 'numeric' }),\n    sessions: item.count,\n  })) || [];\n\n  // Calculate retention risk (mock data - would be calculated based on engagement metrics)\n  const retentionRisk = {\n    high: Math.floor(Math.random() * 5),\n    medium: Math.floor(Math.random() * 10),\n    low: (data?.totalContacts || 0) - Math.floor(Math.random() * 15),\n  };\n\n  return (\n    <div className={`grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4 ${className}`}>\n      {/* Upcoming Sessions Card */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Upcoming Sessions</CardTitle>\n          <Calendar className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{data?.upcomingSessionsCount || 0}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            {data?.upcomingSessionsCount === 1\n              ? '1 session scheduled'\n              : `${data?.upcomingSessionsCount || 0} sessions scheduled`}\n          </p>\n          <div className=\"mt-4 space-y-2\">\n            <div className=\"text-xs font-medium\">Time-based grouping</div>\n            <div className=\"grid grid-cols-3 gap-2 text-center text-xs\">\n              <div className=\"rounded-md bg-primary/10 p-2\">\n                <div className=\"font-medium\">Today</div>\n                <div>{Math.floor((data?.upcomingSessionsCount || 0) * 0.3)}</div>\n              </div>\n              <div className=\"rounded-md bg-primary/10 p-2\">\n                <div className=\"font-medium\">This Week</div>\n                <div>{Math.floor((data?.upcomingSessionsCount || 0) * 0.6)}</div>\n              </div>\n              <div className=\"rounded-md bg-primary/10 p-2\">\n                <div className=\"font-medium\">Later</div>\n                <div>{Math.floor((data?.upcomingSessionsCount || 0) * 0.1)}</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n            <Link href={{ pathname: '/calendar' }}>\n              View Calendar\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Link>\n          </Button>\n        </CardFooter>\n      </Card>\n\n      {/* Retention Risk Card */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Retention Risk</CardTitle>\n          <AlertTriangle className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{retentionRisk.high}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            {retentionRisk.high} customers at high risk\n          </p>\n          <div className=\"mt-4 space-y-2\">\n            <div className=\"text-xs font-medium\">Risk Distribution</div>\n            <div className=\"grid grid-cols-3 gap-2 text-center text-xs\">\n              <div className=\"rounded-md bg-red-100 p-2\">\n                <div className=\"font-medium text-red-700\">High</div>\n                <div>{retentionRisk.high}</div>\n              </div>\n              <div className=\"rounded-md bg-amber-100 p-2\">\n                <div className=\"font-medium text-amber-700\">Medium</div>\n                <div>{retentionRisk.medium}</div>\n              </div>\n              <div className=\"rounded-md bg-green-100 p-2\">\n                <div className=\"font-medium text-green-700\">Low</div>\n                <div>{retentionRisk.low}</div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n            <Link href={{ pathname: '/contacts', query: { risk: 'high' } }}>\n              View At-Risk Customers\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Link>\n          </Button>\n        </CardFooter>\n      </Card>\n\n      {/* Goal Progress Card */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Goal Progress</CardTitle>\n          <TrendingUp className=\"h-4 w-4 text-muted-foreground\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">68%</div>\n          <p className=\"text-xs text-muted-foreground\">\n            Overall goal completion rate\n          </p>\n          <div className=\"mt-4 space-y-2\">\n            <div className=\"text-xs font-medium\">Goal Categories</div>\n            <div className=\"space-y-2\">\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs\">Retreats</span>\n                <span className=\"text-xs font-medium\">75%</span>\n              </div>\n              <div className=\"h-1.5 w-full rounded-full bg-primary/20\">\n                <div className=\"h-1.5 rounded-full bg-primary\" style={{ width: '75%' }}></div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs\">Workshops</span>\n                <span className=\"text-xs font-medium\">50%</span>\n              </div>\n              <div className=\"h-1.5 w-full rounded-full bg-primary/20\">\n                <div className=\"h-1.5 rounded-full bg-primary\" style={{ width: '50%' }}></div>\n              </div>\n              <div className=\"flex items-center justify-between\">\n                <span className=\"text-xs\">Conversions</span>\n                <span className=\"text-xs font-medium\">80%</span>\n              </div>\n              <div className=\"h-1.5 w-full rounded-full bg-primary/20\">\n                <div className=\"h-1.5 rounded-full bg-primary\" style={{ width: '80%' }}></div>\n              </div>\n            </div>\n          </div>\n        </CardContent>\n        <CardFooter>\n          <Button variant=\"outline\" size=\"sm\" className=\"w-full\" asChild>\n            <Link href={{ pathname: '/goals' }}>\n              Manage Goals\n              <ArrowRight className=\"ml-2 h-4 w-4\" />\n            </Link>\n          </Button>\n        </CardFooter>\n      </Card>\n\n      {/* Well-being Customer Journey */}\n      <Card className=\"md:col-span-2\">\n        <CardHeader>\n          <CardTitle>Well-being Customer Journey</CardTitle>\n          <CardDescription>\n            Breakdown of your community by wellness journey stage\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80\">\n            {journeyStageData.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <PieChart>\n                  <Pie\n                    data={journeyStageData}\n                    cx=\"50%\"\n                    cy=\"50%\"\n                    labelLine={true}\n                    label={({ name, percent }) => `${name}: ${(percent * 100).toFixed(0)}%`}\n                    outerRadius={80}\n                    fill=\"#8884d8\"\n                    dataKey=\"value\"\n                  >\n                    {journeyStageData.map((entry: any, index: number) => (\n                      <Cell key={`cell-${index}`} fill={COLORS[index % COLORS.length]} />\n                    ))}\n                  </Pie>\n                  <Tooltip formatter={(value) => [`${value} customers`, 'Count']} />\n                </PieChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"flex h-full items-center justify-center\">\n                <p className=\"text-sm text-muted-foreground\">No journey stage data available</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Session Trend - Improved visualization */}\n      <Card className=\"md:col-span-1\">\n        <CardHeader>\n          <CardTitle>Session Trend</CardTitle>\n          <CardDescription>\n            Your wellness journey impact\n          </CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"h-80\">\n            {sessionTrendData.length > 0 ? (\n              <ResponsiveContainer width=\"100%\" height=\"100%\">\n                <AreaChart data={sessionTrendData}>\n                  <defs>\n                    <linearGradient id=\"sessionGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\n                      <stop offset=\"5%\" stopColor=\"#00afaf\" stopOpacity={0.8}/>\n                      <stop offset=\"95%\" stopColor=\"#00afaf\" stopOpacity={0.1}/>\n                    </linearGradient>\n                  </defs>\n                  <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f5f5f5\" />\n                  <XAxis\n                    dataKey=\"date\"\n                    tick={{fontSize: 12}}\n                    tickLine={false}\n                  />\n                  <YAxis\n                    tick={{fontSize: 12}}\n                    tickLine={false}\n                    axisLine={false}\n                  />\n                  <Tooltip\n                    contentStyle={{\n                      borderRadius: '8px',\n                      border: 'none',\n                      boxShadow: '0 2px 10px rgba(0,0,0,0.1)'\n                    }}\n                  />\n                  <Area\n                    type=\"monotone\"\n                    dataKey=\"sessions\"\n                    stroke=\"#00afaf\"\n                    strokeWidth={2}\n                    fill=\"url(#sessionGradient)\"\n                  />\n                </AreaChart>\n              </ResponsiveContainer>\n            ) : (\n              <div className=\"flex h-full items-center justify-center\">\n                <p className=\"text-sm text-muted-foreground\">No session trend data available</p>\n              </div>\n            )}\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/dashboard/calendar-preview/CalendarPreview.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":18,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":18,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Calendar, Clock, User, MapPin, ArrowRight, AlertCircle } from \"lucide-react\";\nimport { api } from \"@/lib/trpc\";\nimport { Alert, AlertDescription, AlertTitle } from \"@/components/ui/alert\";\nimport { Badge } from \"@/components/ui/badge\";\nimport Link from \"next/link\";\n\ninterface CalendarPreviewProps {\n  className?: string;\n}\n\nexport function CalendarPreview({ className }: CalendarPreviewProps) {\n  // Fetch session metrics for upcoming sessions\n  const { data, isLoading, error } = api.dashboard.sessionMetrics.useQuery({});\n\n  // Loading state\n  if (isLoading) {\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Upcoming Sessions</CardTitle>\n          <CardDescription>Loading calendar data...</CardDescription>\n        </CardHeader>\n        <CardContent>\n          <div className=\"flex justify-center items-center h-40\">\n            <div className=\"animate-spin rounded-full h-8 w-8 border-2 border-primary border-t-transparent\"></div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Error state - handle authentication errors gracefully\n  if (error) {\n    // If it's an authentication error, show a more user-friendly message\n    if (error.message.includes('UNAUTHORIZED') || error.message.includes('logged in')) {\n      return (\n        <Card className={className}>\n          <CardHeader>\n            <CardTitle>Upcoming Sessions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <Alert>\n              <AlertCircle className=\"h-4 w-4\" />\n              <AlertTitle>Authentication Required</AlertTitle>\n              <AlertDescription>\n                Please sign in to view your upcoming sessions.\n              </AlertDescription>\n            </Alert>\n          </CardContent>\n        </Card>\n      );\n    }\n    \n    // For other errors, show the standard error message\n    return (\n      <Card className={className}>\n        <CardHeader>\n          <CardTitle>Upcoming Sessions</CardTitle>\n        </CardHeader>\n        <CardContent>\n          <Alert variant=\"destructive\">\n            <AlertCircle className=\"h-4 w-4\" />\n            <AlertTitle>Error</AlertTitle>\n            <AlertDescription>\n              Failed to load calendar data: {error.message}\n            </AlertDescription>\n          </Alert>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  // Get today's date\n  const today = new Date();\n  today.setHours(0, 0, 0, 0);\n  \n  // Get tomorrow's date\n  const tomorrow = new Date(today);\n  tomorrow.setDate(tomorrow.getDate() + 1);\n  \n  // Mock upcoming sessions (would come from the API in a real implementation)\n  const upcomingSessions = [\n    {\n      id: '1',\n      title: 'Initial Consultation',\n      clientName: 'Jane Smith',\n      time: new Date(today.getTime() + 1000 * 60 * 60 * 2).toISOString(), // 2 hours from now\n      duration: 60,\n      location: 'Virtual',\n      type: 'consultation',\n    },\n    {\n      id: '2',\n      title: 'Follow-up Session',\n      clientName: 'John Doe',\n      time: new Date(today.getTime() + 1000 * 60 * 60 * 4).toISOString(), // 4 hours from now\n      duration: 45,\n      location: 'Office',\n      type: 'follow-up',\n    },\n    {\n      id: '3',\n      title: 'Wellness Assessment',\n      clientName: 'Sarah Johnson',\n      time: new Date(tomorrow.getTime() + 1000 * 60 * 60 * 10).toISOString(), // 10 hours from tomorrow\n      duration: 90,\n      location: 'Virtual',\n      type: 'assessment',\n    },\n    {\n      id: '4',\n      title: 'Group Workshop',\n      clientName: 'Multiple Clients',\n      time: new Date(tomorrow.getTime() + 1000 * 60 * 60 * 14).toISOString(), // 14 hours from tomorrow\n      duration: 120,\n      location: 'Community Center',\n      type: 'workshop',\n    },\n  ];\n\n  // Format time helper\n  const formatTime = (dateString: string) => {\n    const date = new Date(dateString);\n    return date.toLocaleTimeString('en-US', { hour: 'numeric', minute: '2-digit', hour12: true });\n  };\n\n  // Format date helper\n  const formatDate = (dateString: string) => {\n    const date = new Date(dateString);\n    const todayDate = new Date();\n    todayDate.setHours(0, 0, 0, 0);\n    \n    const tomorrowDate = new Date(todayDate);\n    tomorrowDate.setDate(tomorrowDate.getDate() + 1);\n    \n    if (date.getDate() === todayDate.getDate() && \n        date.getMonth() === todayDate.getMonth() && \n        date.getFullYear() === todayDate.getFullYear()) {\n      return 'Today';\n    } else if (date.getDate() === tomorrowDate.getDate() && \n               date.getMonth() === tomorrowDate.getMonth() && \n               date.getFullYear() === tomorrowDate.getFullYear()) {\n      return 'Tomorrow';\n    } else {\n      return date.toLocaleDateString('en-US', { weekday: 'short', month: 'short', day: 'numeric' });\n    }\n  };\n\n  // Get session type badge\n  const getSessionTypeBadge = (type: string) => {\n    switch (type) {\n      case 'consultation':\n        return <Badge className=\"bg-blue-100 text-blue-800 hover:bg-blue-100\">Consultation</Badge>;\n      case 'follow-up':\n        return <Badge className=\"bg-green-100 text-green-800 hover:bg-green-100\">Follow-up</Badge>;\n      case 'assessment':\n        return <Badge className=\"bg-purple-100 text-purple-800 hover:bg-purple-100\">Assessment</Badge>;\n      case 'workshop':\n        return <Badge className=\"bg-amber-100 text-amber-800 hover:bg-amber-100\">Workshop</Badge>;\n      default:\n        return <Badge>{type}</Badge>;\n    }\n  };\n\n  // Group sessions by date\n  const sessionsByDate = upcomingSessions.reduce((acc, session) => {\n    const dateKey = formatDate(session.time);\n    if (!acc[dateKey]) {\n      acc[dateKey] = [];\n    }\n    acc[dateKey].push(session);\n    return acc;\n  }, {} as Record<string, typeof upcomingSessions>);\n\n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div>\n          <CardTitle>Calendar</CardTitle>\n          <CardDescription>Your upcoming sessions</CardDescription>\n        </div>\n        <Calendar className=\"h-5 w-5 text-muted-foreground\" />\n      </CardHeader>\n      <CardContent>\n        <div className=\"space-y-6\">\n          {Object.entries(sessionsByDate).map(([date, sessions]) => (\n            <div key={date}>\n              <h3 className=\"font-medium text-sm mb-2\">{date}</h3>\n              <div className=\"space-y-3\">\n                {sessions.map((session) => (\n                  <div key={session.id} className=\"border rounded-lg p-3 space-y-2\">\n                    <div className=\"flex items-start justify-between\">\n                      <div>\n                        <h4 className=\"font-medium text-sm\">{session.title}</h4>\n                        <div className=\"flex items-center text-xs text-muted-foreground mt-1\">\n                          <User className=\"h-3 w-3 mr-1\" />\n                          {session.clientName}\n                        </div>\n                      </div>\n                      {getSessionTypeBadge(session.type)}\n                    </div>\n                    <div className=\"flex items-center justify-between text-xs\">\n                      <div className=\"flex items-center text-muted-foreground\">\n                        <Clock className=\"h-3 w-3 mr-1\" />\n                        {formatTime(session.time)} ({session.duration} min)\n                      </div>\n                      <div className=\"flex items-center text-muted-foreground\">\n                        <MapPin className=\"h-3 w-3 mr-1\" />\n                        {session.location}\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          ))}\n\n          {Object.keys(sessionsByDate).length === 0 && (\n            <div className=\"flex flex-col items-center justify-center py-8 text-center\">\n              <Calendar className=\"h-12 w-12 text-muted-foreground mb-4\" />\n              <h3 className=\"text-lg font-medium\">No upcoming sessions</h3>\n              <p className=\"text-muted-foreground mt-1\">\n                Your schedule is clear for now.\n              </p>\n            </div>\n          )}\n        </div>\n      </CardContent>\n      <CardFooter>\n        <Button variant=\"outline\" className=\"w-full\" asChild>\n          <Link href={{ pathname: '/calendar' }}>\n            View Full Calendar\n            <ArrowRight className=\"ml-2 h-4 w-4\" />\n          </Link>\n        </Button>\n      </CardFooter>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/dashboard/daily-inspiration/DailyInspirationCard.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":80,"column":11,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2663,2675],"text":"\n          &quot;"},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2663,2675],"text":"\n          &ldquo;"},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2663,2675],"text":"\n          &#34;"},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2663,2675],"text":"\n          &rdquo;"},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":80,"column":24,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[2687,2697],"text":"&quot;\n        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[2687,2697],"text":"&ldquo;\n        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[2687,2697],"text":"&#34;\n        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[2687,2697],"text":"&rdquo;\n        "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { RefreshCw, Quote } from \"lucide-react\";\n\ninterface DailyInspirationCardProps {\n  className?: string;\n}\n\nexport function DailyInspirationCard({ className }: DailyInspirationCardProps) {\n  const [isRefreshing, setIsRefreshing] = React.useState(false);\n\n  // Mock quotes - would be fetched from API in real implementation\n  const quotes = [\n    {\n      text: \"The good life is a process, not a state of being. It is a direction, not a destination.\",\n      author: \"Carl Rogers\"\n    },\n    {\n      text: \"Between stimulus and response there is a space. In that space is our power to choose our response.\",\n      author: \"Viktor Frankl\"\n    },\n    {\n      text: \"You don't have to see the whole staircase, just take the first step.\",\n      author: \"Martin Luther King Jr.\"\n    },\n    {\n      text: \"The privilege of a lifetime is being who you are.\",\n      author: \"Joseph Campbell\"\n    },\n    {\n      text: \"We are not what happened to us, we are what we choose to become.\",\n      author: \"Carl Jung\"\n    }\n  ];\n\n  // Select a random quote - in real implementation, this would be from an API\n  const [quoteIndex, setQuoteIndex] = React.useState(\n    Math.floor(Math.random() * quotes.length)\n  );\n  const quote = quotes[quoteIndex];\n\n  // Simulate refresh action to get a new quote\n  const handleRefresh = () => {\n    setIsRefreshing(true);\n    // Simulate API call delay\n    setTimeout(() => {\n      let newIndex;\n      do {\n        newIndex = Math.floor(Math.random() * quotes.length);\n      } while (newIndex === quoteIndex);\n      setQuoteIndex(newIndex);\n      setIsRefreshing(false);\n    }, 1000);\n  };\n\n  return (\n    <Card className={`${className} bg-primary/5`}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div>\n          <CardTitle>Daily Inspiration</CardTitle>\n          <CardDescription>Wisdom to guide your practice</CardDescription>\n        </div>\n        <Button \n          variant=\"ghost\" \n          size=\"icon\" \n          onClick={handleRefresh} \n          disabled={isRefreshing}\n          className=\"h-8 w-8\"\n        >\n          <RefreshCw className={`h-4 w-4 ${isRefreshing ? 'animate-spin' : ''}`} />\n          <span className=\"sr-only\">New quote</span>\n        </Button>\n      </CardHeader>\n      <CardContent className=\"flex flex-col items-center justify-center space-y-4 pt-4\">\n        <Quote className=\"h-8 w-8 text-primary/60\" />\n        <blockquote className=\"text-lg italic text-center\">\n          \"{quote.text}\"\n        </blockquote>\n        <cite className=\"font-medium text-sm\">— {quote.author}</cite>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/dashboard/quick-actions/QuickActions.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/dashboard/therapist-check-in/TherapistCheckIn.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Users' is defined but never used.","line":6,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":22}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport React, { useState } from 'react';\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Heart, Users, Save, CheckCircle } from \"lucide-react\";\n\ninterface TherapistCheckInProps {\n  className?: string;\n}\n\nexport function TherapistCheckIn({ className }: TherapistCheckInProps) {\n  const [mood, setMood] = useState<string | null>(null);\n  const [connections, setConnections] = useState<number | null>(null);\n  const [saved, setSaved] = useState(false);\n  \n  // Mood options with emojis\n  const moodOptions = [\n    { label: 'Great', emoji: '😊' },\n    { label: 'Good', emoji: '🙂' },\n    { label: 'Okay', emoji: '😐' },\n    { label: 'Stressed', emoji: '😓' }\n  ];\n  \n  // Connection count options\n  const connectionOptions = [0, 1, 2, 3, '4+'];\n  \n  // Handle save\n  const handleSave = () => {\n    // In a real implementation, this would save to an API\n    setSaved(true);\n    setTimeout(() => setSaved(false), 2000);\n  };\n  \n  return (\n    <Card className={className}>\n      <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n        <div>\n          <CardTitle>Daily Check-In</CardTitle>\n          <CardDescription>Track your wellbeing and client connections</CardDescription>\n        </div>\n        <Heart className=\"h-5 w-5 text-primary\" />\n      </CardHeader>\n      <CardContent className=\"space-y-4\">\n        <div>\n          <p className=\"mb-2 text-sm font-medium\">How are you feeling today?</p>\n          <div className=\"flex flex-wrap gap-2\">\n            {moodOptions.map((option) => (\n              <Button \n                key={option.label} \n                variant={mood === option.label ? 'default' : 'outline'}\n                onClick={() => setMood(option.label)}\n                size=\"sm\"\n                className=\"flex gap-1\"\n              >\n                <span>{option.emoji}</span>\n                <span>{option.label}</span>\n              </Button>\n            ))}\n          </div>\n        </div>\n        \n        <div>\n          <p className=\"mb-2 text-sm font-medium\">Client connections today:</p>\n          <div className=\"flex flex-wrap gap-2\">\n            {connectionOptions.map((option) => (\n              <Button \n                key={option.toString()} \n                variant={connections === option ? 'default' : 'outline'}\n                onClick={() => setConnections(typeof option === 'string' ? 4 : option)}\n                size=\"sm\"\n              >\n                {option}\n              </Button>\n            ))}\n          </div>\n        </div>\n        \n        <div className=\"pt-2\">\n          <Button \n            onClick={handleSave}\n            disabled={!mood || connections === null || saved}\n            className=\"w-full\"\n          >\n            {saved ? (\n              <>\n                <CheckCircle className=\"mr-2 h-4 w-4\" />\n                Saved\n              </>\n            ) : (\n              <>\n                <Save className=\"mr-2 h-4 w-4\" />\n                Save Check-In\n              </>\n            )}\n          </Button>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/groups/BulkContactSelector.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Check' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'User' is defined but never used.","line":3,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { Check, Search, User, Mail } from 'lucide-react';\nimport { useState } from 'react';\nimport { toast } from 'sonner';\n\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport { Button } from '@/components/ui/button';\nimport { Checkbox } from '@/components/ui/checkbox';\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogFooter,\n} from '@/components/ui/dialog';\nimport { Input } from '@/components/ui/input';\nimport { api } from '@/lib/trpc';\n\ninterface Contact {\n  id: string;\n  full_name: string;\n  email?: string | null;\n  company_name?: string | null;\n  profile_image_url?: string | null;\n}\n\ninterface BulkContactSelectorProps {\n  groupId: string;\n  groupName: string;\n  isOpen: boolean;\n  onClose: () => void;\n}\n\nexport function BulkContactSelector({\n  groupId,\n  groupName,\n  isOpen,\n  onClose,\n}: BulkContactSelectorProps) {\n  const [searchTerm, setSearchTerm] = useState('');\n  const [selectedContactIds, setSelectedContactIds] = useState<string[]>([]);\n\n  // Fetch all contacts\n  const { data: allContacts = [], isLoading: contactsLoading } =\n    api.contacts.list.useQuery({});\n\n  // Fetch contacts already in this group\n  const { data: groupContacts = [] } = api.groups.getContacts.useQuery({\n    groupId,\n  });\n\n  // Add contacts to group mutation\n  const addContactsMutation = api.groups.addContact.useMutation({\n    onSuccess: () => {\n      toast.success(\n        `Added ${selectedContactIds.length} contact(s) to ${groupName}`\n      );\n      setSelectedContactIds([]);\n      onClose();\n    },\n    onError: (error) => {\n      toast.error(`Failed to add contacts: ${error.message}`);\n    },\n  });\n\n  // Filter contacts not already in group and by search term\n  const existingContactIds = new Set(groupContacts.map((c: Contact) => c.id));\n  const availableContacts = allContacts\n    .filter((contact: Contact) => !existingContactIds.has(contact.id))\n    .filter((contact: Contact) => {\n      if (!searchTerm) return true;\n      const searchLower = searchTerm.toLowerCase();\n      return (\n        contact.full_name?.toLowerCase().includes(searchLower) ||\n        contact.email?.toLowerCase().includes(searchLower) ||\n        contact.company_name?.toLowerCase().includes(searchLower)\n      );\n    }) as Contact[];\n\n  const handleSelectContact = (contactId: string) => {\n    setSelectedContactIds((prev) =>\n      prev.includes(contactId)\n        ? prev.filter((id) => id !== contactId)\n        : [...prev, contactId]\n    );\n  };\n\n  const handleSelectAll = () => {\n    if (selectedContactIds.length === availableContacts.length) {\n      setSelectedContactIds([]);\n    } else {\n      setSelectedContactIds(availableContacts.map((c) => c.id));\n    }\n  };\n\n  const handleAddContacts = async () => {\n    for (const contactId of selectedContactIds) {\n      await addContactsMutation.mutateAsync({\n        contactId,\n        groupId,\n      });\n    }\n  };\n\n  return (\n    <Dialog open={isOpen} onOpenChange={onClose}>\n      <DialogContent className=\"sm:max-w-2xl\">\n        <DialogHeader>\n          <DialogTitle>Add Contacts to {groupName}</DialogTitle>\n        </DialogHeader>\n\n        <div className=\"space-y-4\">\n          {/* Search */}\n          <div className=\"relative\">\n            <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\n            <Input\n              placeholder=\"Search contacts...\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n              className=\"pl-10\"\n            />\n          </div>\n\n          {/* Select All */}\n          {availableContacts.length > 0 && (\n            <div className=\"flex items-center space-x-2\">\n              <Checkbox\n                id=\"select-all\"\n                checked={selectedContactIds.length === availableContacts.length}\n                onCheckedChange={handleSelectAll}\n              />\n              <label htmlFor=\"select-all\" className=\"text-sm font-medium\">\n                Select All ({availableContacts.length} available)\n              </label>\n            </div>\n          )}\n\n          {/* Contact List */}\n          <div className=\"max-h-96 overflow-y-auto space-y-2\">\n            {contactsLoading ? (\n              <div className=\"text-center py-4\">Loading contacts...</div>\n            ) : availableContacts.length === 0 ? (\n              <div className=\"text-center py-4 text-gray-500\">\n                {searchTerm\n                  ? 'No contacts found matching your search'\n                  : 'All contacts are already in this group'}\n              </div>\n            ) : (\n              availableContacts.map((contact: Contact) => (\n                <div\n                  key={contact.id}\n                  className={`flex items-center space-x-3 p-3 rounded-lg border cursor-pointer hover:bg-gray-50 ${\n                    selectedContactIds.includes(contact.id)\n                      ? 'bg-purple-50 border-purple-200'\n                      : ''\n                  }`}\n                  onClick={() => handleSelectContact(contact.id)}\n                >\n                  <Checkbox\n                    checked={selectedContactIds.includes(contact.id)}\n                    onChange={() => handleSelectContact(contact.id)}\n                  />\n                  <Avatar className=\"h-10 w-10\">\n                    <AvatarImage src={contact.profile_image_url || undefined} />\n                    <AvatarFallback>\n                      {contact.full_name\n                        ?.split(' ')\n                        .map((namePart) => namePart[0])\n                        .join('')\n                        .substring(0, 2)\n                        .toUpperCase() || '??'}\n                    </AvatarFallback>\n                  </Avatar>\n                  <div className=\"flex-1\">\n                    <div className=\"font-medium\">{contact.full_name}</div>\n                    <div className=\"text-sm text-gray-500 flex items-center gap-2\">\n                      {contact.email && (\n                        <span className=\"flex items-center gap-1\">\n                          <Mail className=\"h-3 w-3\" />\n                          {contact.email}\n                        </span>\n                      )}\n                      {contact.company_name && (\n                        <span>• {contact.company_name}</span>\n                      )}\n                    </div>\n                  </div>\n                </div>\n              ))\n            )}\n          </div>\n        </div>\n\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={onClose}>\n            Cancel\n          </Button>\n          <Button\n            onClick={handleAddContacts}\n            disabled={\n              selectedContactIds.length === 0 || addContactsMutation.isPending\n            }\n            className=\"bg-purple-500 hover:bg-purple-600\"\n          >\n            {addContactsMutation.isPending\n              ? 'Adding...'\n              : `Add ${selectedContactIds.length} Contact(s)`}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/groups/CreateGroupDialog.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":36,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":36,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport { Loader2 } from 'lucide-react';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport {\n  Dialog,\n  DialogContent,\n  DialogDescription,\n  DialogFooter,\n  DialogHeader,\n  DialogTitle,\n} from '@/components/ui/dialog';\nimport { api } from '@/lib/trpc';\n\n// Common emojis for group selection\nconst POPULAR_EMOJIS = ['👥', '👨‍👩‍👧‍👦', '🫂', '🤝', '🏢', '🏫', '🏭', '🏠', '📱', '💻', '💰', '📊', '📈', '🔍', '🎯', '🚀', '⭐', '🌟', '💡', '📝', '📚', '🎓', '🏆', '🎮', '🎨', '🎬', '🎵'];\n\ninterface CreateGroupDialogProps {\n  open: boolean;\n  onOpenChange: (open: boolean) => void;\n}\n\nexport function CreateGroupDialog({ open, onOpenChange }: CreateGroupDialogProps) {\n  const [newGroupName, setNewGroupName] = useState('');\n  const [selectedEmoji, setSelectedEmoji] = useState('👥');\n  \n  // Get the tRPC utils for cache invalidation\n  const utils = api.useUtils();\n  \n  // Get the create group mutation\n  const createGroupMutation = api.groups.save.useMutation({\n    onSuccess: (data) => {\n      // Invalidate the groups query to refetch the list\n      utils.groups.list.invalidate();\n      \n      // Show success toast\n      toast.success('Group Created', {\n        description: `\"${newGroupName}\" has been created successfully.`,\n      });\n      \n      // Reset form and close dialog\n      setNewGroupName('');\n      setSelectedEmoji('👥');\n      onOpenChange(false);\n    },\n    onError: (error) => {\n      console.error('Error creating group:', error);\n      toast.error('Failed to Create Group', {\n        description: error.message || 'An unexpected error occurred',\n      });\n    }\n  });\n  \n  // Handle group creation\n  const handleCreateGroup = () => {\n    if (!newGroupName.trim()) {\n      toast.error('Group name is required');\n      return;\n    }\n    \n    // Call the API to create the group\n    createGroupMutation.mutate({\n      name: newGroupName.trim(),\n      emoji: selectedEmoji\n    });\n  };\n\n  return (\n    <Dialog open={open} onOpenChange={onOpenChange}>\n      <DialogContent className=\"sm:max-w-[425px]\">\n        <DialogHeader>\n          <DialogTitle>Create New Group</DialogTitle>\n          <DialogDescription>\n            Create a new group to organize your contacts. Choose an emoji and enter a name.\n          </DialogDescription>\n        </DialogHeader>\n        <div className=\"grid gap-4 py-4\">\n          <div className=\"flex flex-wrap gap-2 justify-center\">\n            {POPULAR_EMOJIS.map((emoji) => (\n              <Button\n                key={emoji}\n                variant={selectedEmoji === emoji ? \"default\" : \"outline\"}\n                className=\"w-10 h-10 p-0 text-lg\"\n                onClick={() => setSelectedEmoji(emoji)}\n              >\n                {emoji}\n              </Button>\n            ))}\n          </div>\n          <div className=\"grid grid-cols-4 items-center gap-4\">\n            <label htmlFor=\"name\" className=\"text-right\">\n              Name\n            </label>\n            <Input\n              id=\"name\"\n              value={newGroupName}\n              onChange={(e) => setNewGroupName(e.target.value)}\n              className=\"col-span-3\"\n              placeholder=\"Enter group name\"\n            />\n          </div>\n        </div>\n        <DialogFooter>\n          <Button variant=\"outline\" onClick={() => onOpenChange(false)}>\n            Cancel\n          </Button>\n          <Button\n            onClick={handleCreateGroup}\n            disabled={createGroupMutation.isPending || !newGroupName.trim()}\n          >\n            {createGroupMutation.isPending ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating...\n              </>\n            ) : (\n              'Create Group'\n            )}\n          </Button>\n        </DialogFooter>\n      </DialogContent>\n    </Dialog>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/groups/QuickCreateGroupButton.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":70,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":15}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { PlusCircle, Loader2, Search, X } from 'lucide-react';\nimport { useRouter } from 'next/navigation';\nimport { useState, useEffect } from 'react';\nimport { toast } from 'sonner';\n\nimport { Button } from '@/components/ui/button';\nimport { Input } from '@/components/ui/input';\nimport { Label } from '@/components/ui/label';\nimport { Popover, PopoverTrigger, PopoverContent } from '@/components/ui/popover';\nimport { createClient } from '@/lib/supabase/client';\nimport { api } from '@/lib/trpc';\n\nconst supabase = createClient();\n\n// Common emojis for groups\nconst COMMON_EMOJIS = [\n  '👥', '👨‍👩‍👧‍👦', '👨‍👨‍👧‍👧', '👩‍👩‍👧‍👦', '🫂', '🤝', '🏢', '🏫', '🏭',\n  '🏠', '🏡', '🏘️', '🏙️', '🌆', '🌇', '🌃', '🌉', '🏛️', '🏪', '🏬',\n  '🏨', '🏦', '🏥', '🏤', '🏣', '🏟️', '🏞️', '🏝️', '🏜️', '🏚️', '🏗️',\n  '⛪', '🕌', '🕍', '⛩️', '🕋', '⛲', '⛺', '🏕️', '🗻', '🌋', '🌄', '🌅',\n  '🌠', '🎆', '🎇', '🎑', '🏞️', '🌅', '🌄', '🌠', '🎇', '🎆', '🌇', '🌆',\n  '🏙️', '🌃', '🌌', '🌉', '🌁', '⌚', '📱', '💻', '⌨️', '🖥️', '🖨️', '🖱️',\n  '🖲️', '🕹️', '🗜️', '💽', '💾', '💿', '📀', '📼', '📷', '📸', '📹', '🎥',\n  '📽️', '🎞️', '📞', '☎️', '📟', '📠', '📺', '📻', '🎙️', '🎚️', '🎛️', '🧭',\n  '⏱️', '⏲️', '⏰', '🕰️', '⌛', '⏳', '📡', '🔋', '🔌', '💡', '🔦', '🕯️',\n  '🧯', '🛢️', '💸', '💵', '💴', '💶', '💷', '💰', '💳', '💎', '⚖️', '🧰',\n  '🔧', '🔨', '⚒️', '🛠️', '⛏️', '🔩', '⚙️', '🧱', '⛓️', '🧲', '🔫', '💣',\n  '🧨', '🪓', '🔪', '🗡️', '⚔️', '🛡️', '🚬', '⚰️', '⚱️', '🏺', '🔮', '📿',\n  '🧿', '💈', '⚗️', '🔭', '🔬', '🕳️', '💊', '💉', '🩸', '🩹', '🩺', '🚪',\n  '🛏️', '🛋️', '🪑', '🚽', '🚿', '🛁', '🧴', '🧷', '🧹', '🧺', '🧻', '🧼',\n  '🧽', '🧯', '🛒', '🚬', '⚰️', '⚱️', '🏺', '🔮', '📿', '🧿', '💈', '⚗️',\n  '🔭', '🔬', '🕳️', '💊', '💉', '🩸', '🩹', '🩺', '🚪', '🛏️', '🛋️', '🪑',\n  '🚽', '🚿', '🛁', '🧴', '🧷', '🧹', '🧺', '🧻', '🧼', '🧽', '🧯', '🛒',\n  '🚗', '🚕', '🚙', '🚌', '🚎', '🏎️', '🚓', '🚑', '🚒', '🚐', '🚚', '🚛',\n  '🚜', '🦯', '🦽', '🦼', '🛴', '🚲', '🛵', '🏍️', '🛺', '🚨', '🚔', '🚍',\n  '🚘', '🚖', '🚡', '🚠', '🚟', '🚃', '🚋', '🚞', '🚝', '🚄', '🚅', '🚈',\n  '🚂', '🚆', '🚇', '🚊', '🚉', '✈️', '🛫', '🛬', '🛩️', '💺', '🛰️', '🚀',\n  '🛸', '🚁', '🛶', '⛵', '🚤', '🛥️', '🛳️', '⛴️', '🚢', '⚓', '⛽', '🚧',\n  '🚦', '🚥', '🚏', '🗺️', '🗿', '🗽', '🗼', '🏰', '🏯', '🏟️', '🎡', '🎢',\n  '🎠', '⛲', '⛱️', '🏖️', '🏝️', '🏜️', '🌋', '⛰️', '🏔️', '🗻', '🏕️', '⛺',\n  '🏠', '🏡', '🏘️', '🏚️', '🏗️', '🏭', '🏢', '🏬', '🏣', '🏤', '🏥', '🏦',\n  '🏨', '🏪', '🏫', '🏩', '💒', '🏛️', '⛪', '🕌', '🕍', '🕋', '⛩️', '🛤️',\n  '🛣️', '🗾', '🎑', '🏞️', '🌅', '🌄', '🌠', '🎇', '🎆', '🌇', '🌆', '🏙️',\n  '🌃', '🌌', '🌉', '🌁', '⌚', '📱', '📲', '💻', '⌨️', '🖥️', '🖨️', '🖱️',\n  '🖲️', '🕹️', '🗜️', '💽', '💾', '💿', '📀', '📼', '📷', '📸', '📹', '🎥',\n  '📽️', '🎞️', '📞', '☎️', '📟', '📠', '📺', '📻', '🎙️', '🎚️', '🎛️', '🧭',\n  '⏱️', '⏲️', '⏰', '🕰️', '⌛', '⏳', '📡', '🔋', '🔌', '💡', '🔦', '🕯️',\n  '🧯', '🛢️', '💸', '💵', '💴', '💶', '💷', '💰', '💳', '💎', '⚖️', '🧰',\n  '🔧', '🔨', '⚒️', '🛠️', '⛏️', '🔩', '⚙️', '🧱', '⛓️', '🧲', '🔫', '💣',\n  '🧨', '🪓', '🔪', '🗡️', '⚔️', '🛡️', '🚬', '⚰️', '⚱️', '🏺', '🔮', '📿',\n  '🧿', '💈', '⚗️', '🔭', '🔬', '🕳️', '💊', '💉', '🩸', '🩹', '🩺', '🚪',\n  '🛏️', '🛋️', '🪑', '🚽', '🚿', '🛁', '🧴', '🧷', '🧹', '🧺', '🧻', '🧼',\n  '🧽', '🧯', '🛒', '🚬', '⚰️', '⚱️', '🏺', '🔮', '📿', '🧿', '💈', '⚗️',\n  '🔭', '🔬', '🕳️', '💊', '💉', '🩸', '🩹', '🩺', '🚪', '🛏️', '🛋️', '🪑',\n  '🚽', '🚿', '🛁', '🧴', '🧷', '🧹', '🧺', '🧻', '🧼', '🧽', '🧯', '🛒'\n];\n\n// Most commonly used emojis for groups\nconst POPULAR_EMOJIS = ['👥', '👨‍👩‍👧‍👦', '🫂', '🤝', '🏢', '🏫', '🏭', '🏠', '📱', '💻', '💰', '📊', '📈', '🔍', '🎯', '🚀', '⭐', '🌟', '💡', '📝', '📚', '🎓', '🏆', '🎮', '🎨', '🎬', '🎵', '🍔', '🍕', '🍷', '🏀', '⚽', '🏈', '⚾', '🎾', '🏐', '🏉', '🎱', '🏓', '🏸', '🥊', '🥋', '🏋️', '🤸', '🤼', '🤽', '🤾', '🤺', '⛷️', '🏂', '🏊', '🚴', '🧘', '🎪', '🎭', '🎨', '🎬', '🎤', '🎧', '🎼', '🎹', '🥁', '🎷', '🎺', '🎸', '🎻', '🎲', '🎯', '🎳', '🎮', '🎰', '🚗', '🚕', '🚙', '🚌', '🚎', '🏎️', '🚓', '🚑', '🚒', '🚐', '🚚', '🚛', '🚜', '🛴', '🚲', '🛵', '🏍️', '🛺', '🚨', '🚔', '🚍', '🚘', '🚖', '🚡', '🚠', '🚟', '🚃', '🚋', '🚞', '🚝', '🚄', '🚅', '🚈', '🚂', '🚆', '🚇', '🚊', '🚉', '✈️', '🛫', '🛬', '🛩️', '💺', '🛰️', '🚀', '🛸', '🚁', '🛶', '⛵', '🚤', '🛥️', '🛳️', '⛴️', '🚢', '⚓', '⛽', '🚧', '🚦', '🚥', '🚏', '🗺️', '🗿', '🗽', '🗼', '🏰', '🏯', '🏟️', '🎡', '🎢', '🎠', '⛲', '⛱️', '🏖️', '🏝️', '🏜️', '🌋', '⛰️', '🏔️', '🗻', '🏕️', '⛺', '🏠', '🏡', '🏘️', '🏚️', '🏗️', '🏭', '🏢', '🏬', '🏣', '🏤', '🏥', '🏦', '🏨', '🏪', '🏫', '🏩', '💒', '🏛️', '⛪', '🕌', '🕍', '🕋', '⛩️', '🛤️', '🛣️', '🗾', '🎑', '🏞️', '🌅', '🌄', '🌠', '🎇', '🎆', '🌇', '🌆', '🏙️', '🌃', '🌌', '🌉', '🌁'];\n\nexport function QuickCreateGroupButton() {\n  const [isOpen, setIsOpen] = useState(false);\n  const [isCreating, setIsCreating] = useState(false);\n  const [groupName, setGroupName] = useState('');\n  const [selectedEmoji, setSelectedEmoji] = useState('👥');\n  const [searchTerm, setSearchTerm] = useState('');\n  const [filteredEmojis, setFilteredEmojis] = useState(POPULAR_EMOJIS);\n  const router = useRouter();\n  const utils = api.useUtils();\n\n  // Filter emojis based on search term\n  useEffect(() => {\n    if (!searchTerm) {\n      setFilteredEmojis(POPULAR_EMOJIS);\n      return;\n    }\n\n    const filtered = COMMON_EMOJIS.filter(emoji => {\n      // This is a simple search - in a real app, you might want to use a more sophisticated\n      // search that includes emoji descriptions/keywords\n      return emoji.includes(searchTerm);\n    });\n    \n    setFilteredEmojis(filtered.length > 0 ? filtered : POPULAR_EMOJIS);\n  }, [searchTerm]);\n\n  const handleCreateGroup = async () => {\n    if (!groupName.trim()) {\n      toast.error('Group name is required');\n      return;\n    }\n\n    try {\n      setIsCreating(true);\n\n      // Get the current user ID\n      const {\n        data: { user },\n      } = await supabase.auth.getUser();\n\n      if (!user) {\n        console.error('No authenticated user found');\n        toast.error('Authentication Error', {\n          description: 'You must be logged in to create a group.',\n        });\n        return;\n      }\n\n      // Direct insertion to the groups table\n      const { data, error } = await supabase\n        .from('groups')\n        .insert({\n          name: groupName.trim(),\n          color: '#c084fc', // Default purple color\n          emoji: selectedEmoji,\n          user_id: user.id,\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString(),\n        })\n        .select()\n        .single();\n\n      if (error) {\n        console.error('Error creating group:', error);\n        toast.error('Failed to Create Group', {\n          description: error.message || 'An unexpected error occurred',\n        });\n        return;\n      }\n\n      console.log('Group created successfully:', data);\n\n      // Show success toast\n      toast.success('Group Created', {\n        description: `\"${groupName}\" has been created successfully.`,\n      });\n\n      // Reset form\n      setGroupName('');\n      setSelectedEmoji('👥');\n      setSearchTerm('');\n      setIsOpen(false);\n\n      // Invalidate groups cache to refresh the list\n      utils.groups.list.invalidate();\n      utils.groups.list.refetch();\n    } catch (error) {\n      console.error('Failed to create group:', error);\n      toast.error('Error', {\n        description: 'Failed to create group. Please try again.',\n      });\n    } finally {\n      setIsCreating(false);\n    }\n  };\n\n  return (\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\n      <PopoverTrigger asChild>\n        <Button\n          className=\"bg-teal-400 hover:bg-teal-500 text-white\"\n          size=\"sm\"\n        >\n          <PlusCircle className=\"mr-2 h-4 w-4\" />\n          Quick Create Group\n        </Button>\n      </PopoverTrigger>\n      <PopoverContent className=\"w-80 p-4\">\n        <div className=\"space-y-4\">\n          <div className=\"flex justify-between items-center\">\n            <h3 className=\"text-lg font-medium\">Create New Group</h3>\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              className=\"h-8 w-8 p-0\"\n              onClick={() => setIsOpen(false)}\n            >\n              <X className=\"h-4 w-4\" />\n            </Button>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"emoji-select\">Emoji</Label>\n            <div className=\"flex items-center space-x-2 mb-2\">\n              <div\n                className=\"flex items-center justify-center h-10 w-10 rounded-md border border-gray-300 text-2xl\"\n              >\n                {selectedEmoji}\n              </div>\n              <div className=\"flex-1\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-2 top-2.5 h-4 w-4 text-gray-400\" />\n                  <Input\n                    id=\"emoji-search\"\n                    placeholder=\"Search emoji...\"\n                    className=\"pl-8\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"h-32 overflow-y-auto border rounded-md p-2 grid grid-cols-8 gap-1\">\n              {filteredEmojis.map((emoji, index) => (\n                <button\n                  key={index}\n                  type=\"button\"\n                  className={`text-xl p-1 rounded hover:bg-gray-100 ${\n                    selectedEmoji === emoji ? 'bg-gray-200' : ''\n                  }`}\n                  onClick={() => setSelectedEmoji(emoji)}\n                >\n                  {emoji}\n                </button>\n              ))}\n            </div>\n          </div>\n          \n          <div className=\"space-y-2\">\n            <Label htmlFor=\"group-name\">Group Name</Label>\n            <Input\n              id=\"group-name\"\n              placeholder=\"Enter group name\"\n              value={groupName}\n              onChange={(e) => setGroupName(e.target.value)}\n            />\n          </div>\n          \n          <Button\n            className=\"w-full\"\n            onClick={handleCreateGroup}\n            disabled={isCreating || !groupName.trim()}\n          >\n            {isCreating ? (\n              <>\n                <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                Creating...\n              </>\n            ) : (\n              'Save Group'\n            )}\n          </Button>\n        </div>\n      </PopoverContent>\n    </Popover>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/AppContent.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'DASHBOARD_PATH' is defined but never used.","line":8,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":36}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { usePathname, useRouter } from 'next/navigation';\nimport { useEffect } from 'react';\n\n// Import hooks and constants from your shared packages\nimport { useAuth } from '@codexcrm/auth';\nimport { AUTH_PAGES, DASHBOARD_PATH, LOG_IN_PATH } from '@codexcrm/config';\n\n// Import UI components\nimport { LoadingSpinner } from '@codexcrm/ui';\nimport MainLayout from '@/components/layout/MainLayout'; \n/**\n * AppContent - The Client-Side Brains of the Layout\n *\n * This component is rendered within the server-side RootLayout. It is responsible for:\n * 1. Consuming the authentication state from `useAuth`.\n * 2. Showing a loading spinner while the auth state is being determined.\n * 3. Handling routing logic:\n *    - Redirecting unauthenticated users from protected pages to the sign-in page.\n *    - Redirecting authenticated users from auth pages to the dashboard.\n * 4. Conditionally rendering the `MainLayout` for authenticated users or the raw `children` for public/auth pages.\n */\nexport function AppContent({ children }: { children: React.ReactNode }) {\n  // 1. Consume the global authentication state\n  const { user, isLoading } = useAuth();\n  const pathname = usePathname();\n  const router = useRouter();\n\n  // 2. Determine the type of page based on the current path\n  // Check if the current path is in the AUTH_PAGES array\n  const isAuthPage = (AUTH_PAGES as readonly string[]).includes(pathname);\n  \n  // Any page that is NOT an auth page is considered a protected page\n  const isProtectedPage = !isAuthPage;\n\n  // 3. Effect hook to handle all redirection logic\n  useEffect(() => {\n    // Do nothing until the authentication state is resolved\n    if (isLoading) {\n      return;\n    }\n\n    // Scenario 1: User is logged in but is on an authentication page (e.g., /log-in).\n    // Redirect them to the main application dashboard.\n    if (user && isAuthPage) {\n      router.replace('/');\n    }\n\n    // Scenario 2: User is not logged in and is trying to access a protected page.\n    // Redirect them to the login page.\n    if (!user && isProtectedPage) {\n      router.replace(LOG_IN_PATH);\n    }\n  }, [isLoading, user, isAuthPage, isProtectedPage, router]);\n\n  // 4. Render a loading spinner during critical state transitions to prevent flicker.\n  // This covers:\n  // - The initial load while checking the session.\n  // - The brief moment before a redirect is executed.\n  if (isLoading || (!user && isProtectedPage) || (user && isAuthPage)) {\n    return <LoadingSpinner />;\n  }\n\n  // 5. If the user is authenticated and on a protected page, render the main app shell.\n  // The `user` object is now available to any component inside MainLayout via the `useAuth()` hook.\n  if (user && isProtectedPage) {\n    return (\n        <MainLayout>{children}</MainLayout>\n    );\n  }\n\n  // 6. For all other cases (e.g., an unauthenticated user on an auth page),\n  // render the page content directly without the main layout.\n  return <>{children}</>;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/AppSidebarController.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/Header.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/MainLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/MainSectionNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/MobileMenu.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createRoute' is defined but never used.","line":6,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { usePathname } from 'next/navigation';\nimport Link from 'next/link';\nimport type { Route } from 'next';\nimport { createRoute } from '@/lib/utils/routes';\nimport * as React from 'react';\n\n// UI and Icon Imports\nimport { Button } from '@/components/ui/button';\nimport {\n  Sheet,\n  SheetContent,\n  SheetTrigger,\n  SheetClose,\n} from '@/components/ui/sheet';\nimport {\n  Menu,\n  Home,\n  Users,\n  CheckSquare,\n  Calendar,\n  MessageSquare,\n  BarChart,\n} from 'lucide-react';\nimport { cn } from '@/lib/utils';\n\nconst mainNavItems = [\n  { title: 'Dashboard', href: '/dashboard', icon: Home },\n  { title: 'Contacts', href: '/contacts', icon: Users },\n  { title: 'Tasks', href: '/tasks', icon: CheckSquare },\n  { title: 'Calendar', href: '/calendar', icon: Calendar },\n  { title: 'Messages', href: '/messages', icon: MessageSquare },\n  { title: 'Analytics', href: '/analytics', icon: BarChart },\n];\n\n/**\n * MobileMenu provides the slide-out navigation panel for smaller viewports.\n * It is triggered by a hamburger icon and contains the primary navigation links.\n * It does NOT contain its own logo, as the main header is always visible.\n */\nexport function MobileMenu() {\n  const pathname = usePathname();\n\n  return (\n    <div className=\"md:hidden\">\n      <Sheet>\n        <SheetTrigger asChild>\n          <Button variant=\"outline\" size=\"icon\">\n            <Menu className=\"h-5 w-5\" />\n            <span className=\"sr-only\">Toggle main menu</span>\n          </Button>\n        </SheetTrigger>\n        <SheetContent side=\"left\" className=\"w-[260px] pt-10\"> {/* Added top padding */}\n          {/* The SheetHeader with the logo has been REMOVED. */}\n          \n          <nav className=\"flex flex-col p-4 space-y-1\">\n            {mainNavItems.map((item) => (\n              <SheetClose asChild key={item.href}>\n                <Link\n                  href={item.href as Route}\n                  className={cn(\n                    'flex items-center gap-3 rounded-md px-3 py-2 text-lg font-medium transition-colors', // Made text slightly larger for mobile tap targets\n                    pathname.startsWith(item.href)\n                      ? 'bg-primary/10 text-primary'\n                      : 'text-muted-foreground hover:bg-muted'\n                  )}\n                >\n                  <item.icon className=\"h-5 w-5\" />\n                  {item.title}\n                </Link>\n              </SheetClose>\n            ))}\n          </nav>\n        </SheetContent>\n      </Sheet>\n    </div>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/OmniBotFloat.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/ProjectLinksNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/QuickLinksNav.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/SidebarGroupLink.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/SidebarNavLink.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'createRoute' is defined but never used.","line":5,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":5,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport type { Route } from 'next';\nimport { createRoute } from '@/lib/utils/routes';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '@/components/ui/tooltip';\nimport { cn } from '@/lib/utils';\n\ninterface SidebarNavLinkProps {\n  href: string;\n  isCollapsed: boolean;\n  title: string;\n  icon: React.ReactNode;\n  isActive: boolean;\n  badgeContent?: string | number;\n}\n\nexport function SidebarNavLink({ isCollapsed, href, title, icon, isActive, badgeContent }: SidebarNavLinkProps) {\n  return (\n    <TooltipProvider delayDuration={0}>\n      <Tooltip>\n        <TooltipTrigger asChild>\n          <Link\n            href={href as Route}\n            className={cn(\n              'flex items-center gap-3 rounded-lg px-3 py-2 text-muted-foreground transition-all hover:text-primary',\n              isActive && 'bg-muted text-primary'\n            )}\n          >\n            {icon}\n            <span className={cn('overflow-hidden transition-all', isCollapsed ? 'w-0' : 'w-auto ml-1')}>\n              {title}\n            </span>\n            {badgeContent && !isCollapsed && (\n              <span className=\"ml-auto flex h-6 w-6 shrink-0 items-center justify-center rounded-full bg-primary text-primary-foreground text-xs\">\n                {badgeContent}\n              </span>\n            )}\n          </Link>\n        </TooltipTrigger>\n        {isCollapsed && (\n          <TooltipContent side=\"right\">\n            {title}\n          </TooltipContent>\n        )}\n      </Tooltip>\n    </TooltipProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/UserNav.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":72,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1748,1751],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1748,1751],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":74,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1853,1856],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1853,1856],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/rules-of-hooks","severity":2,"message":"React Hook \"useSidebar\" is called conditionally. React Hooks must be called in the exact same order in every component render. Did you accidentally call a React Hook after an early return?","line":78,"column":24,"nodeType":"Identifier","endLine":78,"endColumn":34}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useAuth } from '@codexcrm/auth';\nimport { createClient } from '@/lib/supabase/client';\nimport { useRouter } from 'next/navigation';\n\n// UI and Icon Imports\nimport {\n  BadgeCheck,\n  Bell,\n  ChevronsUpDown,\n  CreditCard,\n  LogOut,\n  Sparkles,\n  ShieldCheck,\n} from 'lucide-react';\nimport { Avatar, AvatarFallback, AvatarImage } from '@/components/ui/avatar';\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuGroup,\n  DropdownMenuItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuTrigger,\n} from '@/components/ui/dropdown-menu';\nimport {\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  useSidebar\n} from '@/components/ui/sidebar';\n\nimport { Skeleton } from '@/components/ui/skeleton';\n\nexport function UserNav() { \n  // 1. Fetch user data internally using the useAuth hook\n  const { user, isLoading } = useAuth();\n  const router = useRouter();\n  const supabase = createClient();\n\n  const handleSignOut = async () => {\n    await supabase.auth.signOut();\n    router.push('/log-in');\n    router.refresh();\n  };\n\n  // 2. Handle the loading state gracefully\n  if (isLoading) {\n    return (\n      <SidebarMenu>\n        <SidebarMenuItem>\n          <div className=\"flex items-center gap-3 p-2 w-full\">\n            <Skeleton className=\"h-8 w-8 rounded-lg\" />\n            <div className=\"flex-1 space-y-2\">\n              <Skeleton className=\"h-3 w-3/4\" />\n              <Skeleton className=\"h-3 w-1/2\" />\n            </div>\n          </div>\n        </SidebarMenuItem>\n      </SidebarMenu>\n    );\n  }\n\n  // If there's no user, don't render anything\n  if (!user) {\n    return null;\n  }\n\n  // 3. Derive user details from the fetched user object\n  const userDetails = {\n    name: (user.user_metadata as any)?.full_name || user.email || 'User',\n    email: user.email || '',\n    avatar: (user.user_metadata as any)?.avatar_url || '',\n  };\n  const userInitial = (userDetails.name[0] || 'U').toUpperCase();\n\n  const { isMobile } = useSidebar();\n\n  return (\n    <SidebarMenu>\n      <SidebarMenuItem>\n        <DropdownMenu>\n          <DropdownMenuTrigger asChild>\n            <SidebarMenuButton\n              size=\"lg\"\n              className=\"data-[state=open]:bg-sidebar-accent data-[state=open]:text-sidebar-accent-foreground\"\n            >\n              <Avatar className=\"h-8 w-8 rounded-lg\">\n                <AvatarImage src={userDetails.avatar} alt={userDetails.name} />\n                <AvatarFallback className=\"rounded-lg\">{userInitial}</AvatarFallback>\n              </Avatar>\n              <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                <span className=\"truncate font-medium\">{userDetails.name}</span>\n                <span className=\"truncate text-xs\">{userDetails.email}</span>\n              </div>\n              <ChevronsUpDown className=\"ml-auto size-4\" />\n            </SidebarMenuButton>\n          </DropdownMenuTrigger>\n          <DropdownMenuContent\n            className=\"w-[var(--radix-dropdown-menu-trigger-width)] min-w-56 rounded-lg\"\n            side={isMobile ? \"bottom\" : \"right\"}\n            align=\"end\"\n            sideOffset={4}\n          >\n            {/* ... Dropdown content remains mostly the same, just using userDetails ... */}\n            <DropdownMenuLabel className=\"p-0 font-normal\">\n              <div className=\"flex items-center gap-2 px-1 py-1.5 text-left text-sm\">\n                <Avatar className=\"h-8 w-8 rounded-lg\">\n                  <AvatarImage src={userDetails.avatar} alt={userDetails.name} />\n                  <AvatarFallback className=\"rounded-lg\">{userInitial}</AvatarFallback>\n                </Avatar>\n                <div className=\"grid flex-1 text-left text-sm leading-tight\">\n                  <span className=\"truncate font-semibold\">{userDetails.name}</span>\n                  <span className=\"truncate text-xs\">{userDetails.email}</span>\n                </div>\n              </div>\n            </DropdownMenuLabel>\n            <DropdownMenuSeparator />\n            <DropdownMenuGroup>\n            <DropdownMenuItem onClick={() => router.push('/account')}>\n              <Sparkles className=\"mr-2 h-4 w-4\" />\n              <span>Upgrade to Pro</span>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuGroup>\n            <DropdownMenuItem onClick={() => router.push('/account')}>\n              <BadgeCheck className=\"mr-2 h-4 w-4\" />\n              <span>Account</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => router.push('/account')}>\n              <CreditCard className=\"mr-2 h-4 w-4\" />\n              <span>Billing</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => router.push('/account')}>\n              <Bell className=\"mr-2 h-4 w-4\" />\n              <span>Notifications</span>\n            </DropdownMenuItem>\n            <DropdownMenuItem onClick={() => router.push('/account')}>\n              <ShieldCheck className=\"mr-2 h-4 w-4\" />\n              <span>Security</span>\n            </DropdownMenuItem>\n          </DropdownMenuGroup>\n          <DropdownMenuSeparator />\n          <DropdownMenuItem onClick={handleSignOut}>\n            <LogOut className=\"mr-2 h-4 w-4\" />\n            <span>Log out</span>\n          </DropdownMenuItem>\n        </DropdownMenuContent>\n      </DropdownMenu>\n    </SidebarMenuItem>\n    </SidebarMenu>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/AnalyticsSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/CalendarSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/ContactsSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'cn' is defined but never used.","line":8,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":8,"endColumn":12},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'pathname' is assigned a value but never used.","line":45,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'searchParams' is assigned a value but never used.","line":46,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'router' is assigned a value but never used.","line":47,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":15},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'utils' is assigned a value but never used.","line":48,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isGroupsOpen' is assigned a value but never used.","line":50,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsGroupsOpen' is assigned a value but never used.","line":50,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":50,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isAddContactModalOpen' is assigned a value but never used.","line":51,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setIsAddContactModalOpen' is assigned a value but never used.","line":51,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalContacts' is assigned a value but never used.","line":65,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":65,"endColumn":22},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":87,"column":13,"nodeType":"JSXOpeningElement","endLine":87,"endColumn":78}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport { useState } from \"react\"\nimport { Users, UserPlus, Upload } from \"lucide-react\"\nimport { UserNav } from \"@/components/layout/UserNav\"\nimport { api } from \"@/lib/trpc\"\nimport Link from \"next/link\"\nimport { cn } from \"@/lib/utils\"\nimport * as React from \"react\"\nimport { usePathname, useSearchParams, useRouter } from 'next/navigation';\nimport { Badge } from \"@/components/ui/badge\"\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarRail\n} from \"@/components/ui/sidebar\"\n\n// Define the Group type based on the expected structure\ninterface Group {\n  id: string\n  name: string\n  emoji?: string\n  memberCount?: number\n  contactCount?: number\n}\n\ninterface ContactsSidebarProps extends React.ComponentProps<typeof Sidebar> {\n  selectedGroupId?: string | null;\n  onGroupSelect?: (groupId: string | null) => void;\n}\n\nexport function ContactsSidebar({ \n  selectedGroupId, \n  onGroupSelect,\n  ...props \n}: ContactsSidebarProps) {\n  const pathname = usePathname();\n  const searchParams = useSearchParams();\n  const router = useRouter();\n  const utils = api.useUtils();\n  \n  const [isGroupsOpen, setIsGroupsOpen] = useState(true);\n  const [isAddContactModalOpen, setIsAddContactModalOpen] = useState(false);\n  \n  // Fetch contacts for count\n  const { data: contacts = [] } = api.contacts.list.useQuery(\n    {\n      search: \"\",\n      groupId: undefined,\n    },\n    {\n      staleTime: 30000,\n      refetchOnWindowFocus: false,\n    }\n  );\n  \n  const totalContacts = contacts.length;\n\n  // Fetch groups data with contact counts\n  const { data: groupsData = [] } = api.groups.list.useQuery(undefined, {\n    staleTime: 30000,\n    refetchOnWindowFocus: false,\n  });\n\n  const groups: Group[] = groupsData as Group[];\n\n  // Handler for group selection\n  const handleGroupSelect = (groupId: string) => {\n    if (onGroupSelect) {\n      onGroupSelect(groupId);\n    }\n  };\n\n  return (\n    <Sidebar collapsible=\"icon\" {...props}>\n      <SidebarHeader>\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center gap-2 font-semibold\">\n            <img src=\"/images/logo.png\" alt=\"OmniCRM Logo\" className=\"h-7\" />\n            <div className=\"flex flex-col\">\n              <span>OmniCRM</span>\n              <span className=\"text-xs\">\n                by{' '}\n                <span className=\"text-teal-500\">Omnipotency ai</span>\n              </span>\n            </div>\n          </Link>\n        </div>\n      </SidebarHeader>\n\n      <SidebarContent>\n        {/* Contacts Navigation */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Contacts</SidebarGroupLabel>\n          <SidebarMenu>\n            {/* All Contacts link */}\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild>\n                <Link href=\"/contacts\" className=\"flex items-center w-full\">\n                  <Users className=\"w-4 h-4 mr-3\" />\n                  <span className=\"font-medium\">Contacts</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n            {/* Groups link */}\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild>\n                <Link href=\"/contacts/groups\" className=\"flex items-center w-full\">\n                  <Users className=\"w-4 h-4 mr-3\" />\n                  <span className=\"font-medium\">Groups</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n            {/* Import link */}\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild>\n                <Link href=\"/contacts/import\" className=\"flex items-center w-full\">\n                  <Upload className=\"w-4 h-4 mr-2\" />\n                  <span className=\"font-medium\">Import Contacts</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarGroup>\n\n        {/* Quick Actions */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Quick Actions</SidebarGroupLabel>\n          <SidebarMenu>\n            {/* Manage Groups link */}\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild size=\"sm\">\n                <Link href={\"/contacts/groups\"} className=\"flex items-center w-full\">\n                  <span>Manage Groups</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n            {/* Create Group link */}\n            <SidebarMenuItem>\n              <SidebarMenuButton asChild>\n                <Link href=\"/contacts/groups/new\" className=\"flex items-center w-full\">\n                  <UserPlus />\n                  <span>Create Group</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          </SidebarMenu>\n        </SidebarGroup>\n\n        {/* Groups List */}\n        <SidebarGroup>\n          <SidebarGroupLabel>Groups</SidebarGroupLabel>\n          <SidebarMenu>\n            {groups?.map((group: Group) => (\n              <SidebarMenuItem key={group.id}>\n                <SidebarMenuButton \n                  asChild \n                  isActive={selectedGroupId === group.id}\n                >\n                  <button\n                    onClick={() => handleGroupSelect(group.id)}\n                    className=\"flex items-center justify-between w-full\"\n                  >\n                    <div className=\"flex items-center\">\n                      <span className=\"mr-2\">{group.emoji || '📁'}</span>\n                      <span>{group.name}</span>\n                    </div>\n                    <Badge variant=\"secondary\" className=\"ml-auto\">\n                      {group.contactCount || group.memberCount || 0}\n                    </Badge>\n                  </button>\n                </SidebarMenuButton>\n              </SidebarMenuItem>\n            ))}\n          </SidebarMenu>\n        </SidebarGroup>\n      </SidebarContent>\n\n      <SidebarFooter>\n        <UserNav />\n      </SidebarFooter>\n      <SidebarRail />\n    </Sidebar>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/DashboardSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'Calendar' is defined but never used.","line":27,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'MessageSquare' is defined but never used.","line":32,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TrendingUp' is defined but never used.","line":33,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":33,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setProjects' is assigned a value but never used.","line":162,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":162,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used.","line":163,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":29},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":197,"column":13,"nodeType":"JSXOpeningElement","endLine":197,"endColumn":78}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport Link from 'next/link';\n\n// 1. Import the placeholder navigation components from the v0 block\n// These will be replaced later with real, data-driven components.\nimport { NavMain } from '@/components/layout/QuickLinksNav';\nimport { NavProjects } from '@/components/layout/ProjectLinksNav';\n// Import the types needed for the navigation components\nimport { NavItem } from '@/components/layout/QuickLinksNav';\nimport { ProjectItem } from '@/components/layout/ProjectLinksNav';\n\n// 2. Import our existing, refactored UserNav component\nimport { UserNav } from '@/components/layout/UserNav';\n\n// 3. Import the structural primitives from our sidebar system\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarRail,\n} from '@/components/ui/sidebar';\n\nimport { Settings2, \n  Calendar, \n  CloudLightning, \n  BatteryFull, \n  NotebookPenIcon,\n  Users,\n  MessageSquare,\n  TrendingUp,\n  Megaphone,\n  Hammer,\n  FileText\n } from 'lucide-react';\n\n// This is the demo data required by the placeholder nav components.\n// We keep it here temporarily for the demo to function.\n// In a real implementation, this data would be fetched or passed via props.\n\n// Define your actual navigation structure\nconst quickLinksData: NavItem[] = [\n  {\n    title: \"Quick Actions\",\n    url: \"#\",\n    icon: CloudLightning,\n    isActive: true,\n    items: [\n      {\n        title: \"Add Contact\",\n        url: \"/contacts/new\",\n      },\n      {\n        title: \"Create Group\",\n        url: \"/contacts/groups/new\",\n      },\n      {\n        title: \"Add Task\",\n        url: \"/tasks/new\",\n      },\n    ],\n  },\n  {\n    title: \"Business Goals\",\n    url: \"#\",\n    icon: BatteryFull,\n    items: [     \n      {\n      title: \"📢 Content Calendar\",       \n      url: \"#\",       \n      },\n      {\n      title: \"🛠️ Workshops\",       \n      url: \"#\",       \n      },\n      {\n      title: \"🗓️ Plan Schedule\",       \n      url: \"#\",       \n      },\n    ],\n  },\n    {\n    title: \"Schedule\",\n    url: \"#\",\n    icon: NotebookPenIcon,\n    items: [\n      {\n        title: \"📅 Next 5 Appointments\",\n        url: \"/calendar/upcoming\",\n      },\n      {\n        title: \"🚀 New Appointment\",\n        url: \"/calendar/new\",\n      },\n      {\n        title: \"📄 Add Quick Note\",\n        url: \"/calendar/notes\",\n      },\n      {\n        title: \"👍 See Next Free Slot\",\n        url: \"/calendar/availability\",\n      },\n    ],\n  },\n  {\n    title: \"Settings\",\n    url: \"#\",\n    icon: Settings2,\n    items: [\n      {\n        title: \"🤖 Help\",\n        url: \"/help\",\n      },\n      {\n        title: \"⬆ Upgrade\",\n        url: \"/billing/upgrade\",\n      },\n      {\n        title: \"📞 Contact Support\",\n        url: \"/support\",\n      },\n      {\n        title: \"👤 Account Settings\",\n        url: \"/settings/account\",\n      },\n    ],\n  },\n];\n\n// Example project data - in real app, this would come from your API/database\nconst projectsData: ProjectItem[] = [\n  {\n    id: \"content-calendar\",\n    name: \"Content Calendar\",\n    url: \"/tasks?project=content-calendar\",\n    icon: Megaphone,\n  },\n  {\n    id: \"workshops\",\n    name: \"Workshops\",\n    url: \"/tasks?project=workshops\",\n    icon: Hammer,\n  },\n  {\n    id: \"client-onboarding\",\n    name: \"Client Onboarding\",\n    url: \"/tasks?project=client-onboarding\",\n    icon: Users,\n  },\n  {\n    id: \"quarterly-review\",\n    name: \"Quarterly Review\",\n    url: \"/tasks?project=quarterly-review\",\n    icon: FileText,\n  },\n];\n\n// Hook to fetch projects from your API\nfunction useProjects() {\n  const [projects, setProjects] = React.useState<ProjectItem[]>(projectsData);\n  const [loading, setLoading] = React.useState(false);\n\n  // In a real app, you'd fetch from your API here\n  React.useEffect(() => {\n    // Example API call structure:\n    // async function fetchProjects() {\n    //   setLoading(true);\n    //   try {\n    //     const response = await fetch('/api/projects');\n    //     const data: { navMain: NavItem[], projects: ProjectItem[] } = await response.json();\n    //     setProjects(data.projects);\n    //   } catch (error) {\n    //     console.error('Failed to fetch projects:', error);\n    //   } finally {\n    //     setLoading(false);\n    //   }\n    // }\n    // fetchProjects();\n  }, []);\n\n  return { projects, loading };\n}\n\n/**\n * DashboardSidebar provides the contextual navigation for the main dashboard area.\n */\nexport function DashboardSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  const { projects, loading } = useProjects();\n\n  return (\n      <Sidebar collapsible=\"icon\" {...props}>\n      <SidebarHeader>\n        <div className=\"flex items-center justify-between\">\n          <Link href=\"/\" className=\"flex items-center gap-2 font-semibold\">\n            <img src=\"/images/logo.png\" alt=\"OmniCRM Logo\" className=\"h-7\" />\n            <div className=\"flex flex-col\">\n              <span>OmniCRM</span>\n              <span className=\"text-xs\">\n                by{' '}\n                <span className=\"text-teal-500\">Omnipotency ai</span>\n              </span>\n            </div>\n          </Link>\n        </div>\n      </SidebarHeader>\n\n      {/* The main scrollable content area of the sidebar */}\n      <SidebarContent>\n        {/* Quick Links Navigation */}\n        <NavMain items={quickLinksData} />\n        \n        {/* Projects Navigation */}\n        {!loading && <NavProjects projects={projects} />}\n      </SidebarContent>\n\n      {/* The footer is pinned to the bottom */}\n      <SidebarFooter>\n        <UserNav />\n      </SidebarFooter>\n      <SidebarRail />\n      </Sidebar>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/MarketingSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/MessagesSidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/SettingsSidebar.tsx","messages":[{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":38,"column":15,"nodeType":"JSXOpeningElement","endLine":38,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport Link from 'next/link';\nimport { usePathname } from 'next/navigation';\n\nimport { UserNav } from '@/components/layout/UserNav';\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarHeader,\n  SidebarRail,\n} from '@/components/ui/sidebar'\nimport { cn } from '@/lib/utils';\nimport { SidebarProvider } from '@/components/ui/sidebar';\n\n// Icons for the settings navigation\nimport { User, CreditCard, Bell, Sparkles, ShieldCheck } from 'lucide-react';\n\n// Navigation items for the settings section\nconst settingsNavItems = [\n  { title: 'Account', href: '/account', icon: User },\n  { title: 'Billing', href: '/billing', icon: CreditCard },\n  { title: 'Upgrade', href: '/upgrade', icon: Sparkles },\n  { title: 'Notifications', href: '/notifications', icon: Bell },\n  { title: 'Security', href: '/security', icon: ShieldCheck },\n];\n\nexport function SettingsSidebar() {\n  const pathname = usePathname();\n\n  return (\n    <SidebarProvider>\n      <Sidebar collapsible=\"icon\">\n        <SidebarHeader>\n          <div className=\"flex items-center justify-between\">\n            <Link href=\"/\" className=\"flex items-center gap-2 font-semibold\">\n              <img src=\"/images/logo.png\" alt=\"OmniCRM Logo\" className=\"h-7\" />\n              <div className=\"flex flex-col\">\n                <span>OmniCRM</span>\n                <span className=\"text-xs\">\n                  by\n                  <span className=\"text-teal-500\">Omnipotency ai</span>\n                </span>\n              </div>\n            </Link>\n          </div>\n        </SidebarHeader>\n      <SidebarContent>\n      <nav className=\"flex-1 p-2 space-y-1\">\n          {settingsNavItems.map((item) => (\n            <Link\n              key={item.href}\n              href={{ pathname: item.href }}\n              className={cn(\n                'flex items-center gap-3 rounded-md px-3 py-2 text-sm font-medium transition-colors',\n                pathname === item.href\n                  ? 'bg-muted text-foreground'\n                  : 'text-muted-foreground hover:bg-muted/50'\n              )}\n            >\n              <item.icon className=\"h-4 w-4\" />\n              <span>{item.title}</span>\n            </Link>\n          ))}\n        </nav>\n        <aside className=\"flex flex-col h-full border-r bg-card text-card-foreground\">\n          <div className=\"p-4 border-b\">\n            <h2 className=\"text-lg font-semibold tracking-tight\">Settings</h2>\n          </div>      \n        </aside>\n      </SidebarContent>\n      <SidebarFooter>\n        <UserNav />\n      </SidebarFooter>\n      <SidebarRail />\n    </Sidebar>\n    </SidebarProvider>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/layout/sidebars/TasksSidebar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'projects' is assigned a value but never used.","line":31,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":31,"endColumn":15},{"ruleId":"@next/next/no-img-element","severity":1,"message":"Using `<img>` could result in slower LCP and higher bandwidth. Consider using `<Image />` from `next/image` or a custom image loader to automatically optimize images. This may incur additional usage or cost from your provider. See: https://nextjs.org/docs/messages/no-img-element","line":45,"column":17,"nodeType":"JSXOpeningElement","endLine":45,"endColumn":82}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport * as React from 'react';\nimport { usePathname } from 'next/navigation';\nimport Link from 'next/link';\nimport { Inbox, Star, Calendar, Sun, Moon, Book } from 'lucide-react';\nimport { UserNav } from '@/components/layout/UserNav';\nimport { createRoute } from '@/lib/utils/routes';\n\nimport {\n  Sidebar,\n  SidebarContent,\n  SidebarHeader,\n  SidebarMenu,\n  SidebarMenuItem,\n  SidebarMenuButton,\n  SidebarFooter,\n  SidebarRail,\n} from '@/components/ui/sidebar';\n\n// Define our navigation sections\nconst smartLists = [\n  { title: 'Inbox', href: '/tasks/inbox', icon: <Inbox className=\"h-4 w-4\" />, badge: 2 },\n  { title: 'Today', href: '/tasks/today', icon: <Star className=\"h-4 w-4\" />, badge: 8 },\n  { title: 'Upcoming', href: '/tasks/upcoming', icon: <Calendar className=\"h-4 w-4\" /> },\n  { title: 'Anytime', href: '/tasks/anytime', icon: <Sun className=\"h-4 w-4\" /> },\n  { title: 'Someday', href: '/tasks/someday', icon: <Moon className=\"h-4 w-4\" /> },\n  { title: 'Logbook', href: '/tasks/logbook', icon: <Book className=\"h-4 w-4\" /> },\n];\n\nconst projects = [\n  // This would be fetched from your database\n  { title: 'Social Media', href: '/tasks/projects/1', icon: <div className=\"h-2.5 w-2.5 rounded-full bg-blue-500\" /> },\n  { title: 'Product Launch', href: '/tasks/projects/2', icon: <div className=\"h-2.5 w-2.5 rounded-full bg-red-500\" /> },\n];\n\nexport function TasksSidebar({ ...props }: React.ComponentProps<typeof Sidebar>) {\n  const pathname = usePathname();\n\n  return (\n    <Sidebar collapsible=\"icon\" {...props}>\n          <SidebarHeader>\n            <div className=\"flex items-center justify-between\">\n              <Link href={createRoute(\"/\")} className=\"flex items-center gap-2 font-semibold\">\n                <img src=\"/images/logo.png\" alt=\"OmniCRM Logo\" className=\"h-7\" />\n                <div className=\"flex flex-col\">\n                  <span>OmniCRM</span>\n                  <span className=\"text-xs\">\n                    by{' '}\n                    <span className=\"text-teal-500\">Omnipotency ai</span>\n                  </span>\n                </div>\n              </Link>\n            </div>\n          </SidebarHeader>\n    \n          {/* The main scrollable content area of the sidebar */}\n          <SidebarContent>\n        <SidebarMenu>\n          {smartLists.map((item) => (\n            <SidebarMenuItem key={item.href}>\n              {/* Use the SidebarMenuButton for links */}\n              <SidebarMenuButton \n                asChild\n                isActive={pathname.startsWith(item.href)}\n                // The tooltip is handled automatically when collapsed!\n                tooltip={item.title} \n              >\n                <Link href={createRoute(item.href)}>\n                  {item.icon}\n                  <span>{item.title}</span>\n                </Link>\n              </SidebarMenuButton>\n            </SidebarMenuItem>\n          ))}\n        </SidebarMenu>\n      </SidebarContent>\n\n      <SidebarFooter>\n        <UserNav />\n      </SidebarFooter>\n      <SidebarRail />\n      </Sidebar>\n  );\n}","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/nav-main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/nav-projects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/nav-user.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/omni-bot/OmniBot.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/app/dashboard/page.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/app/layout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/app-sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/nav-main.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/nav-projects.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/nav-user.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/team-switcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/theme-provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/calendar.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":57,"column":25,"nodeType":null,"messageId":"unusedVar","endLine":57,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'props' is defined but never used.","line":58,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":58,"endColumn":31}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ ...props }) => <ChevronLeft className=\"h-4 w-4\" />,\n        IconRight: ({ ...props }) => <ChevronRight className=\"h-4 w-4\" />,\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/chart.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":72,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":8}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([_, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/input-otp.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/toast.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/toaster.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/components/ui/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actionTypes' is assigned a value but only used as a type.","line":21,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/hooks/use-mobile.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/hooks/use-toast.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'actionTypes' is assigned a value but only used as a type.","line":21,"column":7,"nodeType":null,"messageId":"usedOnlyAsType","endLine":21,"endColumn":18}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"\"use client\"\n\n// Inspired by react-hot-toast library\nimport * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/shadcn-blocks/sidebar-07/tailwind.config.ts","messages":[{"ruleId":"@typescript-eslint/no-require-imports","severity":2,"message":"A `require()` style import is forbidden.","line":94,"column":13,"nodeType":"CallExpression","messageId":"noRequireImports","endLine":94,"endColumn":43}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Config } from \"tailwindcss\";\n\nconst config: Config = {\n    darkMode: [\"class\"],\n    content: [\n    \"./pages/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./components/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"./app/**/*.{js,ts,jsx,tsx,mdx}\",\n    \"*.{js,ts,jsx,tsx,mdx}\"\n  ],\n  theme: {\n  \textend: {\n  \t\tcolors: {\n  \t\t\tbackground: 'hsl(var(--background))',\n  \t\t\tforeground: 'hsl(var(--foreground))',\n  \t\t\tcard: {\n  \t\t\t\tDEFAULT: 'hsl(var(--card))',\n  \t\t\t\tforeground: 'hsl(var(--card-foreground))'\n  \t\t\t},\n  \t\t\tpopover: {\n  \t\t\t\tDEFAULT: 'hsl(var(--popover))',\n  \t\t\t\tforeground: 'hsl(var(--popover-foreground))'\n  \t\t\t},\n  \t\t\tprimary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--primary))',\n  \t\t\t\tforeground: 'hsl(var(--primary-foreground))'\n  \t\t\t},\n  \t\t\tsecondary: {\n  \t\t\t\tDEFAULT: 'hsl(var(--secondary))',\n  \t\t\t\tforeground: 'hsl(var(--secondary-foreground))'\n  \t\t\t},\n  \t\t\tmuted: {\n  \t\t\t\tDEFAULT: 'hsl(var(--muted))',\n  \t\t\t\tforeground: 'hsl(var(--muted-foreground))'\n  \t\t\t},\n  \t\t\taccent: {\n  \t\t\t\tDEFAULT: 'hsl(var(--accent))',\n  \t\t\t\tforeground: 'hsl(var(--accent-foreground))'\n  \t\t\t},\n  \t\t\tdestructive: {\n  \t\t\t\tDEFAULT: 'hsl(var(--destructive))',\n  \t\t\t\tforeground: 'hsl(var(--destructive-foreground))'\n  \t\t\t},\n  \t\t\tborder: 'hsl(var(--border))',\n  \t\t\tinput: 'hsl(var(--input))',\n  \t\t\tring: 'hsl(var(--ring))',\n  \t\t\tchart: {\n  \t\t\t\t'1': 'hsl(var(--chart-1))',\n  \t\t\t\t'2': 'hsl(var(--chart-2))',\n  \t\t\t\t'3': 'hsl(var(--chart-3))',\n  \t\t\t\t'4': 'hsl(var(--chart-4))',\n  \t\t\t\t'5': 'hsl(var(--chart-5))'\n  \t\t\t},\n  \t\t\tsidebar: {\n  \t\t\t\tDEFAULT: 'hsl(var(--sidebar-background))',\n  \t\t\t\tforeground: 'hsl(var(--sidebar-foreground))',\n  \t\t\t\tprimary: 'hsl(var(--sidebar-primary))',\n  \t\t\t\t'primary-foreground': 'hsl(var(--sidebar-primary-foreground))',\n  \t\t\t\taccent: 'hsl(var(--sidebar-accent))',\n  \t\t\t\t'accent-foreground': 'hsl(var(--sidebar-accent-foreground))',\n  \t\t\t\tborder: 'hsl(var(--sidebar-border))',\n  \t\t\t\tring: 'hsl(var(--sidebar-ring))'\n  \t\t\t}\n  \t\t},\n  \t\tborderRadius: {\n  \t\t\tlg: 'var(--radius)',\n  \t\t\tmd: 'calc(var(--radius) - 2px)',\n  \t\t\tsm: 'calc(var(--radius) - 4px)'\n  \t\t},\n  \t\tkeyframes: {\n  \t\t\t'accordion-down': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t}\n  \t\t\t},\n  \t\t\t'accordion-up': {\n  \t\t\t\tfrom: {\n  \t\t\t\t\theight: 'var(--radix-accordion-content-height)'\n  \t\t\t\t},\n  \t\t\t\tto: {\n  \t\t\t\t\theight: '0'\n  \t\t\t\t}\n  \t\t\t}\n  \t\t},\n  \t\tanimation: {\n  \t\t\t'accordion-down': 'accordion-down 0.2s ease-out',\n  \t\t\t'accordion-up': 'accordion-up 0.2s ease-out'\n  \t\t}\n  \t}\n  },\n  plugins: [require(\"tailwindcss-animate\")],\n};\nexport default config;\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/tasks/TasksWidgets.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'useState' is defined but never used.","line":3,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":3,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'CardDescription' is defined but never used.","line":6,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":6,"endColumn":44},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskStatus' is defined but never used.","line":10,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'TaskPriority' is defined but never used.","line":10,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":10,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isLoading' is assigned a value but never used.","line":13,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":37},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":66,"column":25,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2587,2633],"text":"\n              View Today&apos;s Tasks\n            "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2587,2633],"text":"\n              View Today&lsquo;s Tasks\n            "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2587,2633],"text":"\n              View Today&#39;s Tasks\n            "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2587,2633],"text":"\n              View Today&rsquo;s Tasks\n            "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { useState } from 'react';\nimport Link from 'next/link';\nimport { createRoute } from '@/lib/utils/routes';\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\nimport { Button } from '@/components/ui/button';\nimport { CheckCircle, Clock, AlertTriangle, Calendar, Plus } from 'lucide-react';\nimport { api } from '@/lib/trpc/client';\nimport { TaskStatus, TaskPriority } from '@codexcrm/db/src/models/Task';\n\nexport function TasksWidgets() {\n  const { data: taskStats, isLoading } = api.task.getStats.useQuery();\n  \n  // Default stats in case the query is loading or fails\n  const stats = {\n    total: taskStats?.total || 0,\n    completed: taskStats?.completed || 0,\n    overdue: taskStats?.overdue || 0,\n    dueToday: taskStats?.dueToday || 0,\n    highPriority: taskStats?.highPriority || 0\n  };\n\n  // Calculate completion percentage\n  const completionPercentage = stats.total > 0 \n    ? Math.round((stats.completed / stats.total) * 100) \n    : 0;\n\n  return (\n    <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-4\">\n      {/* Task Completion Card */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Task Completion</CardTitle>\n          <CheckCircle className=\"h-4 w-4 text-green-500\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{completionPercentage}%</div>\n          <p className=\"text-xs text-muted-foreground\">\n            {stats.completed} of {stats.total} tasks completed\n          </p>\n          <div className=\"mt-4 h-2 w-full bg-gray-100 rounded-full overflow-hidden\">\n            <div \n              className=\"h-full bg-green-500 rounded-full\" \n              style={{ width: `${completionPercentage}%` }}\n            />\n          </div>\n        </CardContent>\n      </Card>\n\n      {/* Due Today Card */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Due Today</CardTitle>\n          <Calendar className=\"h-4 w-4 text-blue-500\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{stats.dueToday}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            Tasks due today\n          </p>\n        </CardContent>\n        <CardFooter>\n          <Link href={createRoute(\"/tasks/today\")} className=\"w-full\">\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              View Today's Tasks\n            </Button>\n          </Link>\n        </CardFooter>\n      </Card>\n\n      {/* Overdue Tasks Card */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">Overdue</CardTitle>\n          <AlertTriangle className=\"h-4 w-4 text-red-500\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{stats.overdue}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            Tasks past their due date\n          </p>\n        </CardContent>\n        <CardFooter>\n          <Link href={createRoute(\"/tasks/overdue\")} className=\"w-full\">\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              View Overdue Tasks\n            </Button>\n          </Link>\n        </CardFooter>\n      </Card>\n\n      {/* High Priority Card */}\n      <Card>\n        <CardHeader className=\"flex flex-row items-center justify-between space-y-0 pb-2\">\n          <CardTitle className=\"text-sm font-medium\">High Priority</CardTitle>\n          <Clock className=\"h-4 w-4 text-orange-500\" />\n        </CardHeader>\n        <CardContent>\n          <div className=\"text-2xl font-bold\">{stats.highPriority}</div>\n          <p className=\"text-xs text-muted-foreground\">\n            Tasks marked as high priority\n          </p>\n        </CardContent>\n        <CardFooter>\n          <Link href={createRoute(\"/tasks/new\")} className=\"w-full\">\n            <Button variant=\"outline\" size=\"sm\" className=\"w-full\">\n              <Plus className=\"mr-2 h-4 w-4\" />\n              Create New Task\n            </Button>\n          </Link>\n        </CardFooter>\n      </Card>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/team-switcher.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/avatar-image.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":59,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":59,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { UserCircle } from 'lucide-react';\nimport Image from 'next/image';\nimport { useState, useEffect, useMemo } from 'react';\n\nimport { api } from '@/lib/trpc';\n\ninterface AvatarImageProps {\n  src: string | null;\n  alt: string;\n  size?: 'sm' | 'md' | 'lg' | 'xl';\n  className?: string;\n}\n\nfunction getInitials(alt: string): string {\n  return alt\n    .split(' ')\n    .map((word) => word.charAt(0))\n    .join('')\n    .toUpperCase()\n    .slice(0, 2);\n}\n\nexport function AvatarImage({\n  src,\n  alt,\n  size = 'md',\n  className = '',\n}: AvatarImageProps) {\n  const [imageUrl, setImageUrl] = useState<string | null>(src);\n  const [error, setError] = useState(false);\n\n  // Calculate dimensions based on size\n  const dimensions = {\n    sm: { width: 32, height: 32 },\n    md: { width: 40, height: 40 },\n    lg: { width: 96, height: 96 },\n    xl: { width: 128, height: 128 },\n  }[size] || { width: 40, height: 40 };\n\n  const getPathForQuery = (currentSrc: string | null): string => {\n    if (!currentSrc) return '';\n    // Check if it's a full URL that we might need to parse\n    if (currentSrc.startsWith('http')) {\n      try {\n        const url = new URL(currentSrc);\n        const parts = url.pathname.split('/');\n        // Assuming path is like /storage/v1/object/public/BUCKET_NAME/ACTUAL_PATH\n        // BUCKET_NAME could be 'contact-profile-photo'\n        const bucketMarker = 'contact-profile-photo'; \n        const markerIndex = parts.indexOf(bucketMarker);\n        if (markerIndex !== -1 && markerIndex < parts.length - 1) {\n          return parts.slice(markerIndex + 1).join('/');\n        }\n        // If it's a URL but doesn't match the expected structure for extraction, \n        // return empty string to disable the query for a signed URL.\n        return ''; \n      } catch (e) {\n        // Not a valid URL, or some other error during parsing.\n        return ''; // Disable query\n      }\n    }\n    // If not starting with http, assume it's already a relative path or an invalid value.\n    // The enabled condition below will further filter.\n    return currentSrc; \n  };\n\n  const pathForQuery = useMemo(() => getPathForQuery(src), [src]);\n\n  const { data: fileUrlData, isLoading: isLoadingSignedUrl } = api.storage.getFileUrl.useQuery(\n    { filePath: pathForQuery }, // Use the processed path\n    {\n      // Enable if pathForQuery is non-empty, and src (original prop) indicates it's a path that might need signing.\n      enabled: !!pathForQuery && !pathForQuery.includes('?token='),\n      staleTime: 55 * 60 * 1000, // 55 minutes (URLs valid for 1 hour)\n    }\n  );\n\n  const actualImageUrl = useMemo(() => {\n    if (isLoadingSignedUrl && pathForQuery) {\n      return null; // Don't show anything while actively fetching a signed URL for a valid path\n    }\n    if (fileUrlData?.signedUrl) {\n      return fileUrlData.signedUrl; // Use signed URL if available (for private/relative paths)\n    }\n    // If src is a full URL (http/https) and we didn't get/need a signed URL (e.g. public, or pathForQuery was empty)\n    if (src && src.startsWith('http')) {\n      return src;\n    }\n    // If src is not a URL, and we didn't get a signed URL (e.g. it was an invalid relative path or empty)\n    // it might be a broken link or meant to be a local placeholder not handled here.\n    // For safety, if src is present but no signed URL and not a full URL, return src to see what happens (or null if preferred)\n    if (src && !pathForQuery && !src.startsWith('http')) {\n       // This case means getPathForQuery returned empty for a non-http src, which implies src itself was deemed not a valid relative path.\n       // Or, src was http but didn't match parseable structure.\n       // If src is short and not http, it might be an invalid path. If long, could be data URI.\n       // Let's return src to allow data URIs or other direct values to pass through if they are not http and not needing signing.\n       return src;\n    }\n    return null; // Fallback: no image or still loading initial src that wasn't a direct URL\n  }, [src, fileUrlData, pathForQuery, isLoadingSignedUrl]);\n\n  // Update imageUrl when actualImageUrl changes\n  useEffect(() => {\n    setImageUrl(actualImageUrl);\n    setError(false);\n  }, [actualImageUrl]);\n\n  const handleError = () => {\n    setError(true);\n  };\n\n  return (\n    <div\n      className={`relative overflow-hidden bg-gray-100 flex items-center justify-center rounded-full ${className}`}\n      style={{ width: dimensions.width, height: dimensions.height }}\n    >\n      {error || !imageUrl ? (\n        <div className=\"flex items-center justify-center h-full w-full\">\n          {alt ? (\n            <span className=\"font-medium text-gray-600\">\n              {getInitials(alt)}\n            </span>\n          ) : (\n            <UserCircle\n              className=\"text-gray-400\"\n              style={{\n                width: dimensions.width * 0.7,\n                height: dimensions.height * 0.7,\n              }}\n            />\n          )}\n        </div>\n      ) : imageUrl &&\n        (imageUrl.startsWith('http://') || imageUrl.startsWith('https://')) ? (\n        <Image\n          src={imageUrl}\n          alt={alt}\n          fill\n          sizes={`${dimensions.width}px`}\n          className=\"object-cover\"\n          onError={handleError}\n        />\n      ) : (\n        <div className=\"flex items-center justify-center h-full bg-gray-200 text-gray-600 font-medium\">\n          {getInitials(alt)}\n        </div>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/badge.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/button.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/carousel.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/csv-upload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileRejections' is assigned a value but never used.","line":73,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":73,"endColumn":19},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":135,"column":18,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4636,4714],"text":"\n            Drag &apos;n' drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4636,4714],"text":"\n            Drag &lsquo;n' drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4636,4714],"text":"\n            Drag &#39;n' drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4636,4714],"text":"\n            Drag &rsquo;n' drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":135,"column":20,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[4636,4714],"text":"\n            Drag 'n&apos; drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[4636,4714],"text":"\n            Drag 'n&lsquo; drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[4636,4714],"text":"\n            Drag 'n&#39; drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[4636,4714],"text":"\n            Drag 'n&rsquo; drop a CSV file here, or click to select file\n          "},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { UploadCloud, AlertTriangle, Loader2 } from 'lucide-react'; // Added AlertTriangle for errors and Loader2 for processing\nimport React, { useCallback, useState } from 'react';\nimport { useDropzone, FileWithPath, FileRejection } from 'react-dropzone';\n\nconst TEN_MB_IN_BYTES = 10 * 1024 * 1024;\n\ninterface CsvUploadProps {\n  onFilesAccepted: (files: FileWithPath[]) => void;\n  maxSize?: number; // Optional prop for max file size in bytes\n}\n\nexport function CsvUpload({\n  onFilesAccepted,\n  maxSize = TEN_MB_IN_BYTES,\n}: CsvUploadProps) {\n  const [isHovering, setIsHovering] = useState(false);\n  const [rejectionError, setRejectionError] = useState<string | null>(null);\n  const [isProcessing, setIsProcessing] = useState(false);\n\n  const onDrop = useCallback(\n    (acceptedUploadFiles: FileWithPath[], fileRejections: FileRejection[]) => {\n      setIsHovering(false);\n      setRejectionError(null); // Clear previous errors\n      setIsProcessing(false); // Reset processing state\n\n      if (fileRejections.length > 0) {\n        const firstRejection = fileRejections[0];\n        if (\n          firstRejection.errors.some((err) => err.code === 'file-too-large')\n        ) {\n          setRejectionError(\n            `File is too large. Maximum size is ${maxSize / (1024 * 1024)}MB.`\n          );\n        } else if (\n          firstRejection.errors.some((err) => err.code === 'file-invalid-type')\n        ) {\n          setRejectionError('Invalid file type. Only .csv files are accepted.');\n        } else {\n          setRejectionError('File rejected. Please try another file.');\n        }\n        // Clear accepted files if there were rejections, as we only allow one file\n        // and react-dropzone might still populate acceptedFiles if one file is good and another is bad (if multiple=true)\n        // Though with multiple=false, this is more of a safeguard.\n        onFilesAccepted([]);\n        setIsProcessing(false);\n        return;\n      }\n\n      if (acceptedUploadFiles.length > 0) {\n        console.log('Accepted files in CsvUpload:', acceptedUploadFiles);\n        setIsProcessing(true);\n        // Simulate processing delay\n        setTimeout(() => {\n          onFilesAccepted(acceptedUploadFiles);\n          setIsProcessing(false);\n        }, 1500); // Simulate 1.5 seconds processing time\n      } else {\n        // Handle cases where no files are accepted and no rejections (e.g., user cancels dialog)\n        onFilesAccepted([]);\n        setIsProcessing(false);\n      }\n    },\n    [onFilesAccepted, maxSize]\n  );\n\n  const {\n    getRootProps,\n    getInputProps,\n    isDragActive,\n    acceptedFiles,\n    fileRejections,\n  } = useDropzone({\n    onDrop,\n    accept: {\n      'text/csv': ['.csv'],\n    },\n    multiple: false,\n    maxSize, // Use the maxSize prop\n    onDragEnter: () => {\n      setIsHovering(true);\n      setRejectionError(null);\n    }, // Clear error on new drag\n    onDragLeave: () => setIsHovering(false),\n    onDropAccepted: () => setIsHovering(false), // Handled in onDrop\n    // onDropRejected is not strictly needed as onDrop receives fileRejections\n  });\n\n  const selectedFile =\n    acceptedFiles.length > 0 && !rejectionError && !isProcessing\n      ? acceptedFiles[0]\n      : null;\n  const isError = !!rejectionError;\n\n  return (\n    <div\n      {...getRootProps()}\n      className={`\n        border-2 border-dashed rounded-lg p-8 text-center cursor-pointer\n        transition-colors duration-200 ease-in-out\n        ${\n          isError\n            ? 'border-destructive bg-destructive/10'\n            : isDragActive || isHovering\n              ? 'border-primary bg-primary/10'\n              : 'border-border hover:border-primary/70'\n        }\n      `}\n    >\n      <input {...getInputProps()} />\n      <div className=\"flex flex-col items-center justify-center space-y-2\">\n        {isError ? (\n          <AlertTriangle className=\"w-12 h-12 mb-2 text-destructive\" />\n        ) : isProcessing ? (\n          <Loader2 className=\"w-12 h-12 mb-2 text-primary animate-spin\" />\n        ) : (\n          <UploadCloud\n            className={`w-12 h-12 mb-2 ${isDragActive || isHovering ? 'text-primary' : 'text-muted-foreground'}`}\n          />\n        )}\n\n        {isError ? (\n          <p className=\"text-destructive font-semibold\">{rejectionError}</p>\n        ) : isProcessing ? (\n          <p className=\"text-lg font-semibold text-primary\">\n            Processing file...\n          </p>\n        ) : isDragActive ? (\n          <p className=\"text-lg font-semibold text-primary\">\n            Drop the CSV file here ...\n          </p>\n        ) : (\n          <p className=\"text-muted-foreground\">\n            Drag 'n' drop a CSV file here, or click to select file\n          </p>\n        )}\n\n        {selectedFile && !isDragActive && !isError && !isProcessing && (\n          <div className=\"mt-3 text-sm text-muted-foreground\">\n            Selected file: {selectedFile.name}\n          </div>\n        )}\n        {!isError && !isProcessing && (\n          <p className=\"text-xs text-muted-foreground mt-2\">\n            Maximum file size: {maxSize / (1024 * 1024)}MB. Accepted format:\n            .csv\n          </p>\n        )}\n      </div>\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/form.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/image-upload.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'e' is defined but never used.","line":48,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":48,"endColumn":17},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'fileData' is assigned a value but never used.","line":134,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'publicUrl' is assigned a value but never used.","line":147,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":147,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":153,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":153,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5173,5176],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5173,5176],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"'use client';\n\nimport { createBrowserClient } from '@supabase/ssr';\nimport { Loader2, Upload, X, UserCircle } from 'lucide-react';\nimport Image from 'next/image';\nimport { useState, useCallback, useEffect } from 'react';\nimport { useDropzone } from 'react-dropzone';\nimport { v4 as uuidv4 } from 'uuid';\n\nimport { api } from '@/lib/trpc';\n\ninterface ImageUploadProps {\n  value: string | null;\n  onChange: (value: string | null) => void;\n  disabled?: boolean;\n  contactId?: string;\n}\n\nexport function ImageUpload({\n  value,\n  onChange,\n  disabled = false,\n  contactId,\n}: ImageUploadProps) {\n  const [isUploading, setIsUploading] = useState(false);\n  const [uploadError, setUploadError] = useState<string | null>(null);\n  const [previewUrl, setPreviewUrl] = useState<string | null>(value);\n  const [imageError, setImageError] = useState(false);\n\n  // Initialize Supabase client\n  const supabase = createBrowserClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL || '',\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY || ''\n  );\n\n  const getPathForQueryFromValue = (currentValue: string | null): string => {\n    if (!currentValue) return '';\n    if (currentValue.startsWith('http')) {\n      try {\n        const url = new URL(currentValue);\n        const parts = url.pathname.split('/');\n        const bucketMarker = 'contact-profile-photo';\n        const markerIndex = parts.indexOf(bucketMarker);\n        if (markerIndex !== -1 && markerIndex < parts.length - 1) {\n          return parts.slice(markerIndex + 1).join('/');\n        }\n        return ''; \n      } catch (e) {\n        return ''; \n      }\n    }\n    return currentValue; \n  };\n\n  const pathForFileUrlQuery = getPathForQueryFromValue(value);\n\n  // Generate signed URL for profile photos from Supabase Storage\n  const { data: fileUrlData } = api.storage.getFileUrl.useQuery(\n    { filePath: pathForFileUrlQuery }, // Use processed path\n    {\n      enabled: !!pathForFileUrlQuery && !pathForFileUrlQuery.includes('?token='),\n      staleTime: 55 * 60 * 1000, // 55 minutes (URLs valid for 1 hour)\n    }\n  );\n\n  // Update preview URL when signed URL is fetched\n  useEffect(() => {\n    if (fileUrlData?.signedUrl) {\n      setPreviewUrl(fileUrlData.signedUrl);\n      setImageError(false);\n    }\n  }, [fileUrlData]);\n\n  // Update preview URL when value changes\n  useEffect(() => {\n    // Only clear the preview if value is explicitly null\n    // (for initial load, we want to wait for the signed URL)\n    if (value === null) {\n      setPreviewUrl(null);\n    }\n    setImageError(false);\n  }, [value]);\n\n  // Use tRPC mutation to get signed upload URL\n  const getUploadUrlMutation = api.storage.getUploadUrl.useMutation();\n\n  const onDrop = useCallback(\n    async (acceptedFiles: File[]) => {\n      try {\n        if (acceptedFiles.length === 0) return;\n\n        setIsUploading(true);\n        setUploadError(null);\n\n        const file = acceptedFiles[0]; // Only use the first file\n\n        // Validate file size (max 2MB for Supabase free tier)\n        if (file.size > 2 * 1024 * 1024) {\n          throw new Error('File size must be less than 2MB');\n        }\n\n        // Validate file type\n        if (!file.type.startsWith('image/')) {\n          throw new Error('Only image files are allowed');\n        }\n\n        // Create unique filename\n        const fileExt = file.name.split('.').pop();\n        const fileName = `${contactId || uuidv4()}-${Date.now()}.${fileExt}`;\n\n        // Get signed upload URL from backend\n        const { signedUrl, path } = await getUploadUrlMutation.mutateAsync({\n          fileName,\n          contentType: file.type,\n          folderPath: 'contacts',\n        });\n\n        // Upload file directly to Storage using the signed URL\n        const uploadResponse = await fetch(signedUrl, {\n          method: 'PUT',\n          headers: {\n            'Content-Type': file.type,\n          },\n          body: file,\n        });\n        if (!uploadResponse.ok) {\n          const errorText = await uploadResponse.text();\n          const errorMessage = `Upload failed: ${uploadResponse.status} ${uploadResponse.statusText} - ${errorText}`;\n          console.error(errorMessage, { status: uploadResponse.status, statusText: uploadResponse.statusText, errorText });\n          throw new Error(errorMessage);\n        }\n\n        // Get the URL for the file\n        const { data: fileData, error: urlError } = await supabase.storage\n          .from('contact-profile-photo')\n          .createSignedUrl(path, 3600); // URL valid for 1 hour\n\n        if (urlError) {\n          let specificMessage = `Error creating signed URL: ${urlError.message}`;\n          if (urlError.message?.includes('bucket') || urlError.message?.includes('not found')) {\n            specificMessage = 'Storage bucket not set up. Please contact administrator to set up contact photo storage.';\n          }\n          console.error(specificMessage, urlError);\n          throw new Error(specificMessage);\n        }\n\n        const publicUrl = supabase.storage\n          .from('contact-profile-photo')\n          .getPublicUrl(path).data.publicUrl;\n\n        onChange(path); // Store the relative path\n        setUploadError(null);\n      } catch (error: any) {\n        let message = 'An unknown error occurred during upload.';\n        if (error instanceof Error) {\n          message = error.message;\n        } else if (typeof error === 'string') {\n          message = error;\n        } else if (error && typeof error.message === 'string') {\n          message = error.message; // Attempt to get message from object\n        }\n        console.error('Error during upload process:', message, error);\n        setUploadError(message);\n        // onChange(null); // Consider if this is desired UX\n      } finally {\n        setIsUploading(false);\n      }\n    },\n    [getUploadUrlMutation, supabase, onChange, contactId]\n  );\n\n  const { getRootProps, getInputProps, isDragActive } = useDropzone({\n    onDrop,\n    accept: {\n      'image/*': ['.jpeg', '.jpg', '.png', '.gif', '.webp'],\n    },\n    maxFiles: 1,\n    disabled: isUploading || disabled,\n  });\n\n  // Delete file mutation\n  const deleteFileMutation = api.storage.deleteFile.useMutation();\n\n  const handleRemove = useCallback(\n    async (e: React.MouseEvent) => {\n      e.stopPropagation();\n\n      // If the value is a storage path, delete the file\n      if (value && value.includes('contact-profile-photo')) {\n        try {\n          // Extract the path part from the URL if needed\n          const path = value.includes('?') ? value.split('?')[0] : value;\n          await deleteFileMutation.mutateAsync({ filePath: path });\n        } catch (error) {\n          console.error('Error deleting file:', error);\n        }\n      }\n\n      setPreviewUrl(null);\n      onChange(null);\n    },\n    [onChange, value, deleteFileMutation]\n  );\n\n  const handleImageError = () => {\n    setImageError(true);\n  };\n\n  return (\n    <div className=\"space-y-2\">\n      <div\n        {...getRootProps()}\n        className={`\n          relative\n          cursor-pointer\n          border-2\n          border-dashed\n          rounded-md\n          p-4\n          transition\n          ${isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300'}\n          ${isUploading ? 'opacity-50 cursor-not-allowed' : ''}\n          ${\n            disabled ? 'opacity-50 cursor-not-allowed' : 'hover:border-blue-400'\n          }\n        `}\n      >\n        <input {...getInputProps()} />\n\n        {isUploading ? (\n          <div className=\"flex flex-col items-center justify-center p-4\">\n            <Loader2 className=\"h-10 w-10 text-blue-500 animate-spin mb-2\" />\n            <p className=\"text-sm text-gray-500\">Uploading image...</p>\n          </div>\n        ) : previewUrl ? (\n          <div className=\"relative flex justify-center\">\n            <div className=\"relative h-32 w-32 rounded-full overflow-hidden\">\n              {imageError ? (\n                <div className=\"flex items-center justify-center h-full w-full bg-gray-100\">\n                  <UserCircle className=\"h-16 w-16 text-gray-400\" />\n                </div>\n              ) : (\n                <Image\n                  src={previewUrl?.startsWith('/') || previewUrl?.startsWith('http') ? previewUrl : `/${previewUrl}`}\n                  alt=\"Contact avatar\"\n                  fill\n                  style={{ objectFit: 'cover' }}\n                  sizes=\"128px\"\n                  onError={handleImageError}\n                />\n              )}\n            </div>\n            {!disabled && (\n              <button\n                type=\"button\"\n                onClick={handleRemove}\n                className=\"absolute top-0 right-0 bg-red-500 text-white p-1 rounded-full hover:bg-red-600 transition-colors\"\n              >\n                <X className=\"h-4 w-4\" />\n              </button>\n            )}\n          </div>\n        ) : (\n          <div className=\"flex flex-col items-center justify-center p-4\">\n            <Upload className=\"h-10 w-10 text-gray-400 mb-2\" />\n            <p className=\"text-sm text-center text-gray-500 mb-1\">\n              {isDragActive ? 'Drop the image here' : 'Upload a profile photo'}\n            </p>\n            <p className=\"text-xs text-center text-gray-400\">\n              Drag & drop or click to select\n              <br />\n              Supported formats: JPG, PNG, GIF, WEBP (max 2MB)\n            </p>\n          </div>\n        )}\n      </div>\n\n      {uploadError && (\n        <p className=\"text-sm text-red-600 mt-2\">{uploadError}</p>\n      )}\n    </div>\n  );\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/components/ui/tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/google.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/hooks/use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/instrumentation-client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/instrumentation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/auth/service.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":13,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":13,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[327,330],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[327,330],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":2,"message":"Unexpected any. Specify a different type.","line":29,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[672,675],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[672,675],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { User } from '@supabase/supabase-js';\n\nimport { createClient } from '@/lib/supabase/client';\n\nconst supabase = createClient();\n\n/**\n * Fetches the current authenticated user\n * @returns Object containing user data and any error\n */\nexport async function fetchCurrentUser(): Promise<{\n  user: User | null;\n  error: any | null;\n}> {\n  const {\n    data: { user },\n    error,\n  } = await supabase.auth.getUser();\n  return { user, error };\n}\n\n/**\n * Updates the current user's password\n * @param password New password to set\n * @returns Object containing any error that occurred\n */\nexport async function updateUserPassword(\n  password: string\n): Promise<{ error: any | null }> {\n  const { error } = await supabase.auth.updateUser({ password });\n  return { error };\n}\n\n/**\n * Maps common Supabase error messages to user-friendly messages\n * @param errorMessage Original error message from Supabase\n * @returns User-friendly error message\n */\nexport function mapAuthErrorMessage(errorMessage: string): string {\n  if (errorMessage.includes('Password should be at least')) {\n    return 'Password must be at least 6 characters long.';\n  }\n  if (errorMessage.includes('rate limited')) {\n    return 'Too many attempts. Please try again later.';\n  }\n  // Add more mappings as needed\n  return errorMessage;\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/csv-utils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ParseError' is defined but never used.","line":1,"column":29,"nodeType":null,"messageId":"unusedVar","endLine":1,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'parsedFile' is defined but never used.","line":44,"column":54,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":64}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import Papa, { ParseResult, ParseError, ParseLocalConfig } from 'papaparse';\n\nexport interface ParsedCsvRow {\n  [key: string]: string | number | boolean | null | undefined;\n}\n\nexport interface ValidatedContactData {\n  full_name: string;\n  email: string | null;\n  phone?: string | null;\n  company?: string | null;\n  job_title?: string | null;\n  website?: string | null;\n  notes?: string | null;\n  lead_source?: string | null;\n  tags?: string | null;\n}\n\nexport interface ParseCsvFileResult {\n  data: ParsedCsvRow[];\n  errors: Papa.ParseError[];\n  meta: Papa.ParseMeta;\n}\n\n/**\n * Parses a CSV file using Papa Parse.\n * @param file The CSV file to parse.\n * @param options Optional Papa Parse configuration.\n * @returns A Promise that resolves with the parsed data, errors, and metadata.\n */\nexport function parseCsvFile(\n  file: File,\n  options?: Omit<ParseLocalConfig<ParsedCsvRow, File>, 'complete' | 'error'>\n): Promise<ParseCsvFileResult> {\n  return new Promise((resolve, reject) => {\n    const papaConfig: ParseLocalConfig<ParsedCsvRow, File> = {\n      // Default settings that can be overridden by options\n      header: true,\n      skipEmptyLines: true,\n      dynamicTyping: true,\n      ...options, // User-provided options override defaults but not complete/error\n\n      // Explicitly defined complete and error for local file parsing\n      complete: (results: ParseResult<ParsedCsvRow>, parsedFile: File) => {\n        resolve({\n          data: results.data,\n          errors: results.errors,\n          meta: results.meta,\n        });\n      },\n      error: (error: Error, parsedFile: File) => {\n        console.error('Error parsing CSV file:', error, parsedFile);\n        const err = new Error(error.message);\n        // You could attach the original PapaError to the new Error if needed:\n        // (err as any).papaErrorDetails = error;\n        reject(err);\n      },\n    };\n\n    Papa.parse(file, papaConfig);\n  });\n}\n\n// Example usage (can be tested in a component or another script):\n/*\nasync function handleFile(selectedFile: File) {\n  try {\n    const result = await parseCsvFile(selectedFile);\n    console.log('Parsed Data:', result.data);\n    if (result.errors.length > 0) {\n      console.warn('Parsing Errors:', result.errors);\n    }\n    console.log('Metadata:', result.meta);\n  } catch (error) {\n    console.error('Failed to parse CSV:', error);\n  }\n}\n*/\n\nexport interface CsvValidationError {\n  row?: number; // Row number in the CSV (1-indexed for data rows)\n  field?: string;\n  message: string;\n  type: 'header' | 'data' | 'email_format';\n}\n\nconst REQUIRED_HEADERS: string[] = ['full_name', 'email'];\nconst EMAIL_REGEX = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/; // Basic email format validation\nconst URL_REGEX =\n  /^(https?:\\/\\/)?([\\da-z.-]+)\\.([a-z.]{2,6})([\\/\\w .-]*)*\\/?$/;\n\nexport function validateCsvData(parsedResult: ParseCsvFileResult): {\n  validatedData: ValidatedContactData[];\n  errors: CsvValidationError[];\n} {\n  const errors: CsvValidationError[] = [];\n  const headers = parsedResult.meta.fields;\n\n  if (!headers || headers.length === 0) {\n    errors.push({\n      message: 'CSV is empty or headers are missing.',\n      type: 'header',\n    });\n    return { validatedData: [], errors }; // Stop validation if no headers\n  }\n\n  // 1. Validate Headers\n  for (const requiredHeader of REQUIRED_HEADERS) {\n    if (!headers.includes(requiredHeader)) {\n      errors.push({\n        message: `Required header \"${requiredHeader}\" is missing.`,\n        type: 'header',\n        field: requiredHeader,\n      });\n    }\n  }\n\n  // If critical header errors exist, perhaps return early\n  if (\n    errors.some(\n      (err) =>\n        err.type === 'header' && REQUIRED_HEADERS.includes(err.field || '')\n    )\n  ) {\n    // Optionally, return only header errors if essential headers are missing\n    // return errors;\n  }\n\n  // 2. Validate Data Rows and Transform Missing Names\n  const validatedData: ValidatedContactData[] = [];\n  parsedResult.data.forEach((originalRow, index) => {\n    const row = { ...originalRow }; // Work on a copy\n    const csvRowNumber = index + 2; // PapaParse data is 0-indexed, CSV rows are 1-indexed, +1 for header\n\n    // Trim whitespace from all string values in the row\n    for (const key in row) {\n      if (typeof row[key] === 'string') {\n        row[key] = (row[key] as string).trim();\n      }\n    }\n    let emailIsValid = false;\n\n    // Check for email presence and basic format\n    const emailValue = row.email;\n    if (\n      emailValue === null ||\n      emailValue === undefined ||\n      String(emailValue).trim() === ''\n    ) {\n      errors.push({\n        row: csvRowNumber,\n        field: 'email',\n        message: 'Email is missing.',\n        type: 'data',\n      });\n    } else if (\n      typeof emailValue === 'string' &&\n      !EMAIL_REGEX.test(emailValue.trim())\n    ) {\n      errors.push({\n        row: csvRowNumber,\n        field: 'email',\n        message: `Invalid email format: \"${emailValue}\".`,\n        type: 'email_format',\n      });\n    } else {\n      emailIsValid = true;\n    }\n\n    // Handle full_name\n    const fullNameValue = row.full_name;\n    if (\n      fullNameValue === null ||\n      fullNameValue === undefined ||\n      String(fullNameValue).trim() === ''\n    ) {\n      if (emailIsValid && typeof emailValue === 'string') {\n        const emailLocalPart = emailValue.split('@')[0];\n        const nameParts = emailLocalPart\n          .split(/[._-]/) // Split by common separators like '.', '_', '-'\n          .map(\n            (part) => part.charAt(0).toUpperCase() + part.slice(1).toLowerCase()\n          )\n          .filter((part) => part !== ''); // Remove empty parts\n\n        if (nameParts.length > 0) {\n          row.full_name = nameParts.join(' ');\n        } else {\n          row.full_name = 'Imported Contact'; // Fallback if email local part is unusual\n        }\n      } else {\n        row.full_name = 'Imported Contact'; // Fallback if email is not valid for derivation\n        // Only add an error if email was also missing/invalid, otherwise we've provided a fallback.\n        if (!emailIsValid) {\n          errors.push({\n            row: csvRowNumber,\n            field: 'full_name',\n            message:\n              'Full name is missing and cannot be derived (invalid or missing email).',\n            type: 'data',\n          });\n        }\n      }\n    }\n    // Ensure first_name and last_name are not present on the row object before casting\n    delete row.first_name;\n    delete row.last_name;\n\n    // Validate website if present\n    const websiteValue = row.website;\n    if (\n      websiteValue !== null &&\n      websiteValue !== undefined &&\n      String(websiteValue).trim() !== ''\n    ) {\n      if (\n        typeof websiteValue !== 'string' ||\n        !URL_REGEX.test(String(websiteValue).trim())\n      ) {\n        errors.push({\n          row: csvRowNumber,\n          field: 'website',\n          message: `Invalid URL format for website: \"${websiteValue}\".`,\n          type: 'data',\n        });\n      }\n    }\n\n    // After all transformations and validations for the row\n    validatedData.push(row as unknown as ValidatedContactData); // Cast to ValidatedContactData after processing\n  });\n\n  return { validatedData, errors };\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/dateUtils.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_options' is assigned a value but never used.","line":27,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":27,"endColumn":17}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// apps/web/src/lib/dateUtils.ts\n\n/**\n * Safely parses a date string or Date object.\n * @param dateInput The date string or Date object.\n * @returns A Date object if parsing is successful, otherwise null.\n */\nfunction safeParseDate(\n  dateInput: string | Date | null | undefined\n): Date | null {\n  if (!dateInput) return null;\n  const date = dateInput instanceof Date ? dateInput : new Date(dateInput);\n  return isNaN(date.getTime()) ? null : date;\n}\n\n/**\n * Formats a date for display (e.g., MM/DD/YYYY, HH:mm).\n * @param dateInput The date string or Date object.\n * @returns Formatted date string or '—' if invalid.\n */\nexport function formatDateForDisplay(\n  dateInput: string | Date | null | undefined\n): string {\n  const date = safeParseDate(dateInput);\n  if (!date) return '—';\n\n  const _options: Intl.DateTimeFormatOptions = {\n    year: 'numeric',\n    month: '2-digit',\n    day: '2-digit',\n    hour: '2-digit',\n    minute: '2-digit',\n    hour12: false, // Use 24-hour format for consistency with datetime-local\n  };\n  // Adjust to a common display format, e.g., 07/11/2022, 02:02\n  // Intl.DateTimeFormat can be locale-sensitive. For DD/MM/YYYY HH:mm:\n  const day = String(date.getDate()).padStart(2, '0');\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\n  const year = date.getFullYear();\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n\n  return `${day}/${month}/${year}, ${hours}:${minutes}`;\n}\n\n/**\n * Formats a date for the value of a datetime-local input (YYYY-MM-DDTHH:mm).\n * @param dateInput The date string or Date object.\n * @returns Formatted date string for input or empty string if invalid.\n */\nexport function formatDateForInput(\n  dateInput: string | Date | null | undefined\n): string {\n  const date = safeParseDate(dateInput);\n  if (!date) return '';\n\n  const year = date.getFullYear();\n  const month = String(date.getMonth() + 1).padStart(2, '0'); // Month is 0-indexed\n  const day = String(date.getDate()).padStart(2, '0');\n  const hours = String(date.getHours()).padStart(2, '0');\n  const minutes = String(date.getMinutes()).padStart(2, '0');\n\n  return `${year}-${month}-${day}T${hours}:${minutes}`;\n}\n\n/**\n * Parses a datetime-local input string (YYYY-MM-DDTHH:mm) into a full ISO string.\n * @param inputDateString The date string from datetime-local input.\n * @returns Full ISO string or null if input is invalid/empty.\n */\nexport function parseInputDateString(\n  inputDateString: string | null | undefined\n): string | null {\n  if (!inputDateString) return null;\n  // Input is YYYY-MM-DDTHH:mm. Convert to Date object then to full ISO string.\n  const date = new Date(inputDateString);\n  if (isNaN(date.getTime())) return null;\n  return date.toISOString();\n}\n\n/**\n * Formats a date for display in a more user-friendly way, e.g., 'November 7, 2022, 2:02 AM'.\n * Uses Intl.DateTimeFormat for better localization if needed in the future.\n * @param dateInput The date string or Date object.\n * @returns Formatted date string or '—' if invalid.\n */\nexport function formatDateTime(\n  dateInput: string | Date | null | undefined\n): string {\n  const date = safeParseDate(dateInput);\n  if (!date) return '—';\n\n  return new Intl.DateTimeFormat(undefined, {\n    // undefined locale uses browser's default\n    year: 'numeric',\n    month: 'long',\n    day: 'numeric',\n    hour: 'numeric',\n    minute: '2-digit',\n    // timeZoneName: 'short' // Optional: if you want to display timezone\n  }).format(date);\n}\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/debug-helper.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/supabase/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/supabase/server.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":25,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":25,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// apps/web/src/lib/supabase/server.ts\n\nimport { createServerClient } from '@supabase/ssr'\nimport { cookies } from 'next/headers'\nimport { Database } from '@codexcrm/db'\n\n// This is now an async function since cookies() returns a Promise\nexport async function createClient() {\n  // `cookies()` is now async, so we need to await it\n  const cookieStore = await cookies()\n\n  return createServerClient<Database>(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return cookieStore.getAll()\n        },\n        setAll(cookiesToSet) {\n          try {\n            cookiesToSet.forEach(({ name, value, options }) => {\n              cookieStore.set(name, value, options)\n            })\n          } catch (error) {\n            // The `setAll` method was called from a Server Component.\n            // This can be ignored if you have middleware refreshing\n            // user sessions, but is kept for safety.\n          }\n        },\n      },\n    }\n  )\n}\n\n\n","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/supabase/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/trpc.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/trpc/client.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/lib/utils/routes.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/middleware.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'options' is defined but never used.","line":32,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":55}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// apps/web/middleware.ts\n\nimport * as Sentry from '@sentry/nextjs';\nimport { createServerClient } from '@supabase/ssr';\nimport { NextResponse, type NextRequest } from 'next/server';\n\nconst protectedPaths = ['/', '/dashboard', '/contacts', '/groups'];\nconst publicOnlyPaths = [\n  '/log-in',\n  '/sign-up',\n  '/forgot-password',\n  '/reset-password',\n  '/sign-up/confirmation',\n];\n\nexport async function middleware(request: NextRequest) {\n  let response = NextResponse.next({\n    request: { headers: request.headers },\n  });\n\n  // 1. Use the modern, non-deprecated cookie handling for middleware\n  const supabase = createServerClient(\n    process.env.NEXT_PUBLIC_SUPABASE_URL!,\n    process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,\n    {\n      cookies: {\n        getAll() {\n          return request.cookies.getAll();\n        },\n        // The `setAll` function is required for the new API\n        setAll(cookiesToSet) {\n          cookiesToSet.forEach(({ name, value, options }) => request.cookies.set(name, value));\n          response = NextResponse.next({\n            request: { headers: request.headers },\n          });\n          cookiesToSet.forEach(({ name, value, options }) => response.cookies.set(name, value, options));\n        },\n      },\n    }\n  );\n\n  // 2. Use only `getUser()`. It efficiently handles session refresh and is the source of truth.\n  const { data: { user } } = await supabase.auth.getUser();\n\n  const { pathname } = request.nextUrl;\n  const isProtectedPath = protectedPaths.some(\n    (path) => path === '/' ? pathname === path : pathname.startsWith(path)\n  );\n  const isPublicOnlyPath = publicOnlyPaths.includes(pathname);\n\n  // 3. Handle redirects with focused logging\n  if (isProtectedPath && !user) {\n    const redirectUrl = new URL('/log-in', request.url);\n    Sentry.captureMessage(`Redirecting unauthenticated user from ${pathname} to /log-in`, 'warning');\n    return NextResponse.redirect(redirectUrl);\n  }\n\n  if (isPublicOnlyPath && user) {\n    const redirectUrl = new URL('/dashboard', request.url);\n    Sentry.captureMessage(`Redirecting authenticated user (ID: ${user.id}) from ${pathname} to /dashboard`, 'warning');\n    return NextResponse.redirect(redirectUrl);\n  }\n\n  // If no redirect, return the response. Any updated auth cookies are already set.\n  return response;\n}\n\nexport const config = {\n  matcher: [\n    /*\n     * Match all request paths except for the ones starting with:\n     * - api (API routes, e.g., tRPC)\n     * - _next/static (static files)\n     * - _next/image (image optimization files)\n     * - favicon.ico (favicon file)\n     * - etc.\n     */\n    '/((?!api|_next/static|_next/image|favicon.ico|.*\\\\.(?:svg|png|jpg|jpeg|gif|webp)$).*)',\n  ],\n};","usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/next-env.d.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/next.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/provider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/sentry.edge.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"/Users/peterjamesblizzard/projects/app_codexcrmapp/apps/web/sentry.server.config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]}]
