"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3";
exports.ids = ["vendor-chunks/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/TRPCClientError-CjKyS10w.mjs":
/*!***********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/TRPCClientError-CjKyS10w.mjs ***!
  \***********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* binding */ TRPCClientError),\n/* harmony export */   isTRPCClientError: () => (/* binding */ isTRPCClientError)\n/* harmony export */ });\n/* harmony import */ var _objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectSpread2-BvkFp-_Y.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n\n//#region src/TRPCClientError.ts\nvar import_defineProperty = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\nvar import_objectSpread2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nfunction isTRPCClientError(cause) {\n    return cause instanceof TRPCClientError;\n}\nfunction isTRPCErrorResponse(obj) {\n    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_1__.isObject)(obj) && (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_1__.isObject)(obj[\"error\"]) && typeof obj[\"error\"][\"code\"] === \"number\" && typeof obj[\"error\"][\"message\"] === \"string\";\n}\nfunction getMessageFromUnknownError(err, fallback) {\n    if (typeof err === \"string\") return err;\n    if ((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_1__.isObject)(err) && typeof err[\"message\"] === \"string\") return err[\"message\"];\n    return fallback;\n}\nvar TRPCClientError = class TRPCClientError extends Error {\n    constructor(message, opts){\n        var _opts$result, _opts$result2;\n        const cause = opts === null || opts === void 0 ? void 0 : opts.cause;\n        super(message, {\n            cause\n        });\n        (0, import_defineProperty.default)(this, \"cause\", void 0);\n        (0, import_defineProperty.default)(this, \"shape\", void 0);\n        (0, import_defineProperty.default)(this, \"data\", void 0);\n        (0, import_defineProperty.default)(this, \"meta\", void 0);\n        this.meta = opts === null || opts === void 0 ? void 0 : opts.meta;\n        this.cause = cause;\n        this.shape = opts === null || opts === void 0 || (_opts$result = opts.result) === null || _opts$result === void 0 ? void 0 : _opts$result.error;\n        this.data = opts === null || opts === void 0 || (_opts$result2 = opts.result) === null || _opts$result2 === void 0 ? void 0 : _opts$result2.error.data;\n        this.name = \"TRPCClientError\";\n        Object.setPrototypeOf(this, TRPCClientError.prototype);\n    }\n    static from(_cause, opts = {}) {\n        const cause = _cause;\n        if (isTRPCClientError(cause)) {\n            if (opts.meta) cause.meta = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, cause.meta), opts.meta);\n            return cause;\n        }\n        if (isTRPCErrorResponse(cause)) return new TRPCClientError(cause.error.message, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            result: cause\n        }));\n        return new TRPCClientError(getMessageFromUnknownError(cause, \"Unknown error\"), (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            cause\n        }));\n    }\n};\n//#endregion\n //# sourceMappingURL=TRPCClientError-CjKyS10w.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMS40LjJfQHRycGMrc2VydmVyQDExLjQuMl90eXBlc2NyaXB0QDUuOC4zX190eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9UUlBDQ2xpZW50RXJyb3ItQ2pLeVMxMHcubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7OztBQXFCQSxTQUFnQixrQkFDZEEsS0FBQUEsRUFDdUM7SUFDdkMsT0FBTyxpQkFBaUI7QUFDekI7QUFFRCxTQUFTLG9CQUFvQkMsR0FBQUEsRUFBNkM7SUFDeEUsT0FDRSxrRkFBUSxDQUFDLElBQUksSUFDYixrRkFBUSxDQUFDLElBQUksU0FBUyxXQUNmLElBQUksU0FBUyxZQUFZLG1CQUN6QixJQUFJLFNBQVMsZUFBZTtBQUV0QztBQUVELFNBQVMsMkJBQTJCQyxHQUFBQSxFQUFjQyxRQUFBQSxFQUEwQjtJQUMxRSxXQUFXLFFBQVEsU0FDakIsUUFBTztJQUVULElBQUksa0ZBQVEsQ0FBQyxJQUFJLFdBQVcsSUFBSSxlQUFlLFNBQzdDLFFBQU8sSUFBSTtJQUViLE9BQU87QUFDUjtBQUVELElBQWEsa0JBQWIsTUFBYSx3QkFDSCxNQUVWO0lBYUUsWUFDRUMsT0FBQUEsRUFDQUMsSUFBQUEsQ0FLQTs7UUFDQSxNQUFNLG9EQUFRLEtBQU07UUFJcEIsTUFBTSxTQUFTO1lBQUU7UUFBTyxFQUFDOzJDQTJDMUIsTUFqRXdCOzJDQWlFdkIsTUFoRWM7MkNBZ0ViLE1BL0RhOzJDQStEWixNQXpERztRQWdCTCxLQUFLLG1EQUFPLEtBQU07UUFFbEIsS0FBSyxRQUFRO1FBQ2IsS0FBSyw0REFBUSxLQUFNLG9FQUFRO1FBQzNCLEtBQUssNERBQU8sS0FBTSxzRUFBUSxNQUFNO1FBQ2hDLEtBQUssT0FBTztRQUVaLE9BQU8sZUFBZSxNQUFNLGdCQUFnQixVQUFVO0lBQ3ZEO0lBRUQsT0FBYyxLQUNaQyxNQUFBQSxFQUNBQyxPQUEyQyxDQUFFLEdBQ1I7UUFDckMsTUFBTSxRQUFRO1FBRWQsSUFBSSxrQkFBa0IsTUFBTSxFQUFFO1lBQzVCLElBQUksS0FBSyxLQUVQLE9BQU0sK0VBQ0QsTUFBTSxPQUNOLEtBQUs7WUFHWixPQUFPO1FBQ1I7UUFDRCxJQUFJLG9CQUFvQixNQUFNLENBQzVCLFFBQU8sSUFBSSxnQkFBZ0IsTUFBTSxNQUFNLGlGQUNsQztZQUNILFFBQVE7UUFBQTtRQUdaLE9BQU8sSUFBSSxnQkFDVCwyQkFBMkIsT0FBTyxnQkFBZ0IsMEVBRTdDO1lBQ0k7UUFBQTtJQUdaO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wZXRlcmphbWVzYmxpenphcmQvcHJvamVjdHMvYXBwX2NvZGV4Y3JtYXBwL2FwcHMvc3JjL1RSUENDbGllbnRFcnJvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIGluZmVyQ2xpZW50VHlwZXMsXG4gIEluZmVycmFibGVDbGllbnRUeXBlcyxcbiAgTWF5YmUsXG4gIFRSUENFcnJvclJlc3BvbnNlLFxufSBmcm9tICdAdHJwYy9zZXJ2ZXIvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0JztcbmltcG9ydCB7XG4gIGlzT2JqZWN0LFxuICB0eXBlIERlZmF1bHRFcnJvclNoYXBlLFxufSBmcm9tICdAdHJwYy9zZXJ2ZXIvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0JztcblxudHlwZSBpbmZlckVycm9yU2hhcGU8VEluZmVycmFibGUgZXh0ZW5kcyBJbmZlcnJhYmxlQ2xpZW50VHlwZXM+ID1cbiAgaW5mZXJDbGllbnRUeXBlczxUSW5mZXJyYWJsZT5bJ2Vycm9yU2hhcGUnXTtcbmV4cG9ydCBpbnRlcmZhY2UgVFJQQ0NsaWVudEVycm9yQmFzZTxUU2hhcGUgZXh0ZW5kcyBEZWZhdWx0RXJyb3JTaGFwZT4ge1xuICByZWFkb25seSBtZXNzYWdlOiBzdHJpbmc7XG4gIHJlYWRvbmx5IHNoYXBlOiBNYXliZTxUU2hhcGU+O1xuICByZWFkb25seSBkYXRhOiBNYXliZTxUU2hhcGVbJ2RhdGEnXT47XG59XG5leHBvcnQgdHlwZSBUUlBDQ2xpZW50RXJyb3JMaWtlPFRJbmZlcnJhYmxlIGV4dGVuZHMgSW5mZXJyYWJsZUNsaWVudFR5cGVzPiA9XG4gIFRSUENDbGllbnRFcnJvckJhc2U8aW5mZXJFcnJvclNoYXBlPFRJbmZlcnJhYmxlPj47XG5cbmV4cG9ydCBmdW5jdGlvbiBpc1RSUENDbGllbnRFcnJvcjxUSW5mZXJyYWJsZSBleHRlbmRzIEluZmVycmFibGVDbGllbnRUeXBlcz4oXG4gIGNhdXNlOiB1bmtub3duLFxuKTogY2F1c2UgaXMgVFJQQ0NsaWVudEVycm9yPFRJbmZlcnJhYmxlPiB7XG4gIHJldHVybiBjYXVzZSBpbnN0YW5jZW9mIFRSUENDbGllbnRFcnJvcjtcbn1cblxuZnVuY3Rpb24gaXNUUlBDRXJyb3JSZXNwb25zZShvYmo6IHVua25vd24pOiBvYmogaXMgVFJQQ0Vycm9yUmVzcG9uc2U8YW55PiB7XG4gIHJldHVybiAoXG4gICAgaXNPYmplY3Qob2JqKSAmJlxuICAgIGlzT2JqZWN0KG9ialsnZXJyb3InXSkgJiZcbiAgICB0eXBlb2Ygb2JqWydlcnJvciddWydjb2RlJ10gPT09ICdudW1iZXInICYmXG4gICAgdHlwZW9mIG9ialsnZXJyb3InXVsnbWVzc2FnZSddID09PSAnc3RyaW5nJ1xuICApO1xufVxuXG5mdW5jdGlvbiBnZXRNZXNzYWdlRnJvbVVua25vd25FcnJvcihlcnI6IHVua25vd24sIGZhbGxiYWNrOiBzdHJpbmcpOiBzdHJpbmcge1xuICBpZiAodHlwZW9mIGVyciA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyO1xuICB9XG4gIGlmIChpc09iamVjdChlcnIpICYmIHR5cGVvZiBlcnJbJ21lc3NhZ2UnXSA9PT0gJ3N0cmluZycpIHtcbiAgICByZXR1cm4gZXJyWydtZXNzYWdlJ107XG4gIH1cbiAgcmV0dXJuIGZhbGxiYWNrO1xufVxuXG5leHBvcnQgY2xhc3MgVFJQQ0NsaWVudEVycm9yPFRSb3V0ZXJPclByb2NlZHVyZSBleHRlbmRzIEluZmVycmFibGVDbGllbnRUeXBlcz5cbiAgZXh0ZW5kcyBFcnJvclxuICBpbXBsZW1lbnRzIFRSUENDbGllbnRFcnJvckJhc2U8aW5mZXJFcnJvclNoYXBlPFRSb3V0ZXJPclByb2NlZHVyZT4+XG57XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvYmFuLXRzLWNvbW1lbnRcbiAgLy8gQHRzLWlnbm9yZSBvdmVycmlkZSBkb2Vzbid0IHdvcmsgaW4gYWxsIGVudmlyb25tZW50cyBkdWUgdG8gXCJUaGlzIG1lbWJlciBjYW5ub3QgaGF2ZSBhbiAnb3ZlcnJpZGUnIG1vZGlmaWVyIGJlY2F1c2UgaXQgaXMgbm90IGRlY2xhcmVkIGluIHRoZSBiYXNlIGNsYXNzICdFcnJvcidcIlxuICBwdWJsaWMgb3ZlcnJpZGUgcmVhZG9ubHkgY2F1c2U7XG4gIHB1YmxpYyByZWFkb25seSBzaGFwZTogTWF5YmU8aW5mZXJFcnJvclNoYXBlPFRSb3V0ZXJPclByb2NlZHVyZT4+O1xuICBwdWJsaWMgcmVhZG9ubHkgZGF0YTogTWF5YmU8aW5mZXJFcnJvclNoYXBlPFRSb3V0ZXJPclByb2NlZHVyZT5bJ2RhdGEnXT47XG5cbiAgLyoqXG4gICAqIEFkZGl0aW9uYWwgbWV0YSBkYXRhIGFib3V0IHRoZSBlcnJvclxuICAgKiBJbiB0aGUgY2FzZSBvZiBIVFRQLWVycm9ycywgd2UnbGwgaGF2ZSBgcmVzcG9uc2VgIGFuZCBwb3RlbnRpYWxseSBgcmVzcG9uc2VKU09OYCBoZXJlXG4gICAqL1xuICBwdWJsaWMgbWV0YTtcblxuICBjb25zdHJ1Y3RvcihcbiAgICBtZXNzYWdlOiBzdHJpbmcsXG4gICAgb3B0cz86IHtcbiAgICAgIHJlc3VsdD86IE1heWJlPFRSUENFcnJvclJlc3BvbnNlPGluZmVyRXJyb3JTaGFwZTxUUm91dGVyT3JQcm9jZWR1cmU+Pj47XG4gICAgICBjYXVzZT86IEVycm9yO1xuICAgICAgbWV0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+O1xuICAgIH0sXG4gICkge1xuICAgIGNvbnN0IGNhdXNlID0gb3B0cz8uY2F1c2U7XG5cbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L2Jhbi10cy1jb21tZW50XG4gICAgLy8gQHRzLWlnbm9yZSBodHRwczovL2dpdGh1Yi5jb20vdGMzOS9wcm9wb3NhbC1lcnJvci1jYXVzZVxuICAgIHN1cGVyKG1lc3NhZ2UsIHsgY2F1c2UgfSk7XG5cbiAgICB0aGlzLm1ldGEgPSBvcHRzPy5tZXRhO1xuXG4gICAgdGhpcy5jYXVzZSA9IGNhdXNlO1xuICAgIHRoaXMuc2hhcGUgPSBvcHRzPy5yZXN1bHQ/LmVycm9yO1xuICAgIHRoaXMuZGF0YSA9IG9wdHM/LnJlc3VsdD8uZXJyb3IuZGF0YTtcbiAgICB0aGlzLm5hbWUgPSAnVFJQQ0NsaWVudEVycm9yJztcblxuICAgIE9iamVjdC5zZXRQcm90b3R5cGVPZih0aGlzLCBUUlBDQ2xpZW50RXJyb3IucHJvdG90eXBlKTtcbiAgfVxuXG4gIHB1YmxpYyBzdGF0aWMgZnJvbTxUUm91dGVyT3JQcm9jZWR1cmUgZXh0ZW5kcyBJbmZlcnJhYmxlQ2xpZW50VHlwZXM+KFxuICAgIF9jYXVzZTogRXJyb3IgfCBUUlBDRXJyb3JSZXNwb25zZTxhbnk+IHwgb2JqZWN0LFxuICAgIG9wdHM6IHsgbWV0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+IH0gPSB7fSxcbiAgKTogVFJQQ0NsaWVudEVycm9yPFRSb3V0ZXJPclByb2NlZHVyZT4ge1xuICAgIGNvbnN0IGNhdXNlID0gX2NhdXNlIGFzIHVua25vd247XG5cbiAgICBpZiAoaXNUUlBDQ2xpZW50RXJyb3IoY2F1c2UpKSB7XG4gICAgICBpZiAob3B0cy5tZXRhKSB7XG4gICAgICAgIC8vIERlY29yYXRlIHdpdGggbWV0YSBlcnJvciBkYXRhXG4gICAgICAgIGNhdXNlLm1ldGEgPSB7XG4gICAgICAgICAgLi4uY2F1c2UubWV0YSxcbiAgICAgICAgICAuLi5vcHRzLm1ldGEsXG4gICAgICAgIH07XG4gICAgICB9XG4gICAgICByZXR1cm4gY2F1c2U7XG4gICAgfVxuICAgIGlmIChpc1RSUENFcnJvclJlc3BvbnNlKGNhdXNlKSkge1xuICAgICAgcmV0dXJuIG5ldyBUUlBDQ2xpZW50RXJyb3IoY2F1c2UuZXJyb3IubWVzc2FnZSwge1xuICAgICAgICAuLi5vcHRzLFxuICAgICAgICByZXN1bHQ6IGNhdXNlLFxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgVFJQQ0NsaWVudEVycm9yKFxuICAgICAgZ2V0TWVzc2FnZUZyb21Vbmtub3duRXJyb3IoY2F1c2UsICdVbmtub3duIGVycm9yJyksXG4gICAgICB7XG4gICAgICAgIC4uLm9wdHMsXG4gICAgICAgIGNhdXNlOiBjYXVzZSBhcyBhbnksXG4gICAgICB9LFxuICAgICk7XG4gIH1cbn1cbiJdLCJuYW1lcyI6WyJjYXVzZTogdW5rbm93biIsIm9iajogdW5rbm93biIsImVycjogdW5rbm93biIsImZhbGxiYWNrOiBzdHJpbmciLCJtZXNzYWdlOiBzdHJpbmciLCJvcHRzPzoge1xuICAgICAgcmVzdWx0PzogTWF5YmU8VFJQQ0Vycm9yUmVzcG9uc2U8aW5mZXJFcnJvclNoYXBlPFRSb3V0ZXJPclByb2NlZHVyZT4+PjtcbiAgICAgIGNhdXNlPzogRXJyb3I7XG4gICAgICBtZXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj47XG4gICAgfSIsIl9jYXVzZTogRXJyb3IgfCBUUlBDRXJyb3JSZXNwb25zZTxhbnk+IHwgb2JqZWN0Iiwib3B0czogeyBtZXRhPzogUmVjb3JkPHN0cmluZywgdW5rbm93bj4gfSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/TRPCClientError-CjKyS10w.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpBatchLink-CA96-gnJ.mjs":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpBatchLink-CA96-gnJ.mjs ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   abortSignalToPromise: () => (/* binding */ abortSignalToPromise),\n/* harmony export */   allAbortSignals: () => (/* binding */ allAbortSignals),\n/* harmony export */   dataLoader: () => (/* binding */ dataLoader),\n/* harmony export */   httpBatchLink: () => (/* binding */ httpBatchLink),\n/* harmony export */   raceAbortSignals: () => (/* binding */ raceAbortSignals)\n/* harmony export */ });\n/* harmony import */ var _objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectSpread2-BvkFp-_Y.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\");\n/* harmony import */ var _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCClientError-CjKyS10w.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/TRPCClientError-CjKyS10w.mjs\");\n/* harmony import */ var _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./httpUtils-Bkv1johT.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpUtils-Bkv1johT.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\");\n\n\n\n\n\n//#region src/internals/dataLoader.ts\n/**\n* A function that should never be called unless we messed something up.\n*/ const throwFatalError = ()=>{\n    throw new Error(\"Something went wrong. Please submit an issue at https://github.com/trpc/trpc/issues/new\");\n};\n/**\n* Dataloader that's very inspired by https://github.com/graphql/dataloader\n* Less configuration, no caching, and allows you to cancel requests\n* When cancelling a single fetch the whole batch will be cancelled only when _all_ items are cancelled\n*/ function dataLoader(batchLoader) {\n    let pendingItems = null;\n    let dispatchTimer = null;\n    const destroyTimerAndPendingItems = ()=>{\n        clearTimeout(dispatchTimer);\n        dispatchTimer = null;\n        pendingItems = null;\n    };\n    /**\n\t* Iterate through the items and split them into groups based on the `batchLoader`'s validate function\n\t*/ function groupItems(items) {\n        const groupedItems = [\n            []\n        ];\n        let index = 0;\n        while(true){\n            const item = items[index];\n            if (!item) break;\n            const lastGroup = groupedItems[groupedItems.length - 1];\n            if (item.aborted) {\n                var _item$reject;\n                (_item$reject = item.reject) === null || _item$reject === void 0 || _item$reject.call(item, new Error(\"Aborted\"));\n                index++;\n                continue;\n            }\n            const isValid = batchLoader.validate(lastGroup.concat(item).map((it)=>it.key));\n            if (isValid) {\n                lastGroup.push(item);\n                index++;\n                continue;\n            }\n            if (lastGroup.length === 0) {\n                var _item$reject2;\n                (_item$reject2 = item.reject) === null || _item$reject2 === void 0 || _item$reject2.call(item, new Error(\"Input is too big for a single dispatch\"));\n                index++;\n                continue;\n            }\n            groupedItems.push([]);\n        }\n        return groupedItems;\n    }\n    function dispatch() {\n        const groupedItems = groupItems(pendingItems);\n        destroyTimerAndPendingItems();\n        for (const items of groupedItems){\n            if (!items.length) continue;\n            const batch = {\n                items\n            };\n            for (const item of items)item.batch = batch;\n            const promise = batchLoader.fetch(batch.items.map((_item)=>_item.key));\n            promise.then(async (result)=>{\n                await Promise.all(result.map(async (valueOrPromise, index)=>{\n                    const item = batch.items[index];\n                    try {\n                        var _item$resolve;\n                        const value = await Promise.resolve(valueOrPromise);\n                        (_item$resolve = item.resolve) === null || _item$resolve === void 0 || _item$resolve.call(item, value);\n                    } catch (cause) {\n                        var _item$reject3;\n                        (_item$reject3 = item.reject) === null || _item$reject3 === void 0 || _item$reject3.call(item, cause);\n                    }\n                    item.batch = null;\n                    item.reject = null;\n                    item.resolve = null;\n                }));\n                for (const item of batch.items){\n                    var _item$reject4;\n                    (_item$reject4 = item.reject) === null || _item$reject4 === void 0 || _item$reject4.call(item, new Error(\"Missing result\"));\n                    item.batch = null;\n                }\n            }).catch((cause)=>{\n                for (const item of batch.items){\n                    var _item$reject5;\n                    (_item$reject5 = item.reject) === null || _item$reject5 === void 0 || _item$reject5.call(item, cause);\n                    item.batch = null;\n                }\n            });\n        }\n    }\n    function load(key) {\n        var _dispatchTimer;\n        const item = {\n            aborted: false,\n            key,\n            batch: null,\n            resolve: throwFatalError,\n            reject: throwFatalError\n        };\n        const promise = new Promise((resolve, reject)=>{\n            var _pendingItems;\n            item.reject = reject;\n            item.resolve = resolve;\n            (_pendingItems = pendingItems) !== null && _pendingItems !== void 0 || (pendingItems = []);\n            pendingItems.push(item);\n        });\n        (_dispatchTimer = dispatchTimer) !== null && _dispatchTimer !== void 0 || (dispatchTimer = setTimeout(dispatch));\n        return promise;\n    }\n    return {\n        load\n    };\n}\n//#endregion\n//#region src/internals/signals.ts\n/**\n* Like `Promise.all()` but for abort signals\n* - When all signals have been aborted, the merged signal will be aborted\n* - If one signal is `null`, no signal will be aborted\n*/ function allAbortSignals(...signals) {\n    const ac = new AbortController();\n    const count = signals.length;\n    let abortedCount = 0;\n    const onAbort = ()=>{\n        if (++abortedCount === count) ac.abort();\n    };\n    for (const signal of signals)if (signal === null || signal === void 0 ? void 0 : signal.aborted) onAbort();\n    else signal === null || signal === void 0 || signal.addEventListener(\"abort\", onAbort, {\n        once: true\n    });\n    return ac.signal;\n}\n/**\n* Like `Promise.race` but for abort signals\n*\n* Basically, a ponyfill for\n* [`AbortSignal.any`](https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/any_static).\n*/ function raceAbortSignals(...signals) {\n    const ac = new AbortController();\n    for (const signal of signals)if (signal === null || signal === void 0 ? void 0 : signal.aborted) ac.abort();\n    else signal === null || signal === void 0 || signal.addEventListener(\"abort\", ()=>ac.abort(), {\n        once: true\n    });\n    return ac.signal;\n}\nfunction abortSignalToPromise(signal) {\n    return new Promise((_, reject)=>{\n        if (signal.aborted) {\n            reject(signal.reason);\n            return;\n        }\n        signal.addEventListener(\"abort\", ()=>{\n            reject(signal.reason);\n        }, {\n            once: true\n        });\n    });\n}\n//#endregion\n//#region src/links/httpBatchLink.ts\nvar import_objectSpread2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* @see https://trpc.io/docs/client/links/httpBatchLink\n*/ function httpBatchLink(opts) {\n    var _opts$maxURLLength, _opts$maxItems;\n    const resolvedOpts = (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.resolveHTTPLinkOptions)(opts);\n    const maxURLLength = (_opts$maxURLLength = opts.maxURLLength) !== null && _opts$maxURLLength !== void 0 ? _opts$maxURLLength : Infinity;\n    const maxItems = (_opts$maxItems = opts.maxItems) !== null && _opts$maxItems !== void 0 ? _opts$maxItems : Infinity;\n    return ()=>{\n        const batchLoader = (type)=>{\n            return {\n                validate (batchOps) {\n                    if (maxURLLength === Infinity && maxItems === Infinity) return true;\n                    if (batchOps.length > maxItems) return false;\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.getUrl)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, resolvedOpts), {}, {\n                        type,\n                        path,\n                        inputs,\n                        signal: null\n                    }));\n                    return url.length <= maxURLLength;\n                },\n                async fetch (batchOps) {\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const signal = allAbortSignals(...batchOps.map((op)=>op.signal));\n                    const res = await (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.jsonHttpRequester)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, resolvedOpts), {}, {\n                        path,\n                        inputs,\n                        type,\n                        headers () {\n                            if (!opts.headers) return {};\n                            if (typeof opts.headers === \"function\") return opts.headers({\n                                opList: batchOps\n                            });\n                            return opts.headers;\n                        },\n                        signal\n                    }));\n                    const resJSON = Array.isArray(res.json) ? res.json : batchOps.map(()=>res.json);\n                    const result = resJSON.map((item)=>({\n                            meta: res.meta,\n                            json: item\n                        }));\n                    return result;\n                }\n            };\n        };\n        const query = dataLoader(batchLoader(\"query\"));\n        const mutation = dataLoader(batchLoader(\"mutation\"));\n        const loaders = {\n            query,\n            mutation\n        };\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_3__.observable)((observer)=>{\n                /* istanbul ignore if -- @preserve */ if (op.type === \"subscription\") throw new Error(\"Subscriptions are unsupported by `httpLink` - use `httpSubscriptionLink` or `wsLink`\");\n                const loader = loaders[op.type];\n                const promise = loader.load(op);\n                let _res = void 0;\n                promise.then((res)=>{\n                    _res = res;\n                    const transformed = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__.transformResult)(res.json, resolvedOpts.transformer.output);\n                    if (!transformed.ok) {\n                        observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(transformed.error, {\n                            meta: res.meta\n                        }));\n                        return;\n                    }\n                    observer.next({\n                        context: res.meta,\n                        result: transformed.result\n                    });\n                    observer.complete();\n                }).catch((err)=>{\n                    observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(err, {\n                        meta: _res === null || _res === void 0 ? void 0 : _res.meta\n                    }));\n                });\n                return ()=>{};\n            });\n        };\n    };\n}\n//#endregion\n //# sourceMappingURL=httpBatchLink-CA96-gnJ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpBatchLink-CA96-gnJ.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpLink-CYOcG9kQ.mjs":
/*!****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpLink-CYOcG9kQ.mjs ***!
  \****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   httpLink: () => (/* binding */ httpLink),\n/* harmony export */   isFormData: () => (/* binding */ isFormData),\n/* harmony export */   isNonJsonSerializable: () => (/* binding */ isNonJsonSerializable),\n/* harmony export */   isOctetType: () => (/* binding */ isOctetType)\n/* harmony export */ });\n/* harmony import */ var _objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectSpread2-BvkFp-_Y.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\");\n/* harmony import */ var _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCClientError-CjKyS10w.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/TRPCClientError-CjKyS10w.mjs\");\n/* harmony import */ var _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./httpUtils-Bkv1johT.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpUtils-Bkv1johT.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\");\n\n\n\n\n\n//#region src/links/internals/contentTypes.ts\nfunction isOctetType(input) {\n    return input instanceof Uint8Array || input instanceof Blob;\n}\nfunction isFormData(input) {\n    return input instanceof FormData;\n}\nfunction isNonJsonSerializable(input) {\n    return isOctetType(input) || isFormData(input);\n}\n//#endregion\n//#region src/links/httpLink.ts\nvar import_objectSpread2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nconst universalRequester = (opts)=>{\n    if (\"input\" in opts) {\n        const { input } = opts;\n        if (isFormData(input)) {\n            if (opts.type !== \"mutation\" && opts.methodOverride !== \"POST\") throw new Error(\"FormData is only supported for mutations\");\n            return (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.httpRequest)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n                contentTypeHeader: void 0,\n                getUrl: _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.getUrl,\n                getBody: ()=>input\n            }));\n        }\n        if (isOctetType(input)) {\n            if (opts.type !== \"mutation\" && opts.methodOverride !== \"POST\") throw new Error(\"Octet type input is only supported for mutations\");\n            return (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.httpRequest)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n                contentTypeHeader: \"application/octet-stream\",\n                getUrl: _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.getUrl,\n                getBody: ()=>input\n            }));\n        }\n    }\n    return (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.jsonHttpRequester)(opts);\n};\n/**\n* @see https://trpc.io/docs/client/links/httpLink\n*/ function httpLink(opts) {\n    const resolvedOpts = (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_2__.resolveHTTPLinkOptions)(opts);\n    return ()=>{\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_3__.observable)((observer)=>{\n                const { path, input, type } = op;\n                /* istanbul ignore if -- @preserve */ if (type === \"subscription\") throw new Error(\"Subscriptions are unsupported by `httpLink` - use `httpSubscriptionLink` or `wsLink`\");\n                const request = universalRequester((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, resolvedOpts), {}, {\n                    type,\n                    path,\n                    input,\n                    signal: op.signal,\n                    headers () {\n                        if (!opts.headers) return {};\n                        if (typeof opts.headers === \"function\") return opts.headers({\n                            op\n                        });\n                        return opts.headers;\n                    }\n                }));\n                let meta = void 0;\n                request.then((res)=>{\n                    meta = res.meta;\n                    const transformed = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__.transformResult)(res.json, resolvedOpts.transformer.output);\n                    if (!transformed.ok) {\n                        observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(transformed.error, {\n                            meta\n                        }));\n                        return;\n                    }\n                    observer.next({\n                        context: res.meta,\n                        result: transformed.result\n                    });\n                    observer.complete();\n                }).catch((cause)=>{\n                    observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(cause, {\n                        meta\n                    }));\n                });\n                return ()=>{};\n            });\n        };\n    };\n}\n//#endregion\n //# sourceMappingURL=httpLink-CYOcG9kQ.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpLink-CYOcG9kQ.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpUtils-Bkv1johT.mjs":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpUtils-Bkv1johT.mjs ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   fetchHTTPResponse: () => (/* binding */ fetchHTTPResponse),\n/* harmony export */   getBody: () => (/* binding */ getBody),\n/* harmony export */   getFetch: () => (/* binding */ getFetch),\n/* harmony export */   getUrl: () => (/* binding */ getUrl),\n/* harmony export */   httpRequest: () => (/* binding */ httpRequest),\n/* harmony export */   jsonHttpRequester: () => (/* binding */ jsonHttpRequester),\n/* harmony export */   resolveHTTPLinkOptions: () => (/* binding */ resolveHTTPLinkOptions)\n/* harmony export */ });\n/* harmony import */ var _objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectSpread2-BvkFp-_Y.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\");\n/* harmony import */ var _unstable_internals_Bg7n9BBj_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./unstable-internals-Bg7n9BBj.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/unstable-internals-Bg7n9BBj.mjs\");\n\n\n//#region src/getFetch.ts\nconst isFunction = (fn)=>typeof fn === \"function\";\nfunction getFetch(customFetchImpl) {\n    if (customFetchImpl) return customFetchImpl;\n    if (false) {}\n    if (typeof globalThis !== \"undefined\" && isFunction(globalThis.fetch)) return globalThis.fetch;\n    throw new Error(\"No fetch implementation found\");\n}\n//#endregion\n//#region src/links/internals/httpUtils.ts\nvar import_objectSpread2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nfunction resolveHTTPLinkOptions(opts) {\n    return {\n        url: opts.url.toString(),\n        fetch: opts.fetch,\n        transformer: (0,_unstable_internals_Bg7n9BBj_mjs__WEBPACK_IMPORTED_MODULE_1__.getTransformer)(opts.transformer),\n        methodOverride: opts.methodOverride\n    };\n}\nfunction arrayToDict(array) {\n    const dict = {};\n    for(let index = 0; index < array.length; index++){\n        const element = array[index];\n        dict[index] = element;\n    }\n    return dict;\n}\nconst METHOD = {\n    query: \"GET\",\n    mutation: \"POST\",\n    subscription: \"PATCH\"\n};\nfunction getInput(opts) {\n    return \"input\" in opts ? opts.transformer.input.serialize(opts.input) : arrayToDict(opts.inputs.map((_input)=>opts.transformer.input.serialize(_input)));\n}\nconst getUrl = (opts)=>{\n    const parts = opts.url.split(\"?\");\n    const base = parts[0].replace(/\\/$/, \"\");\n    let url = base + \"/\" + opts.path;\n    const queryParts = [];\n    if (parts[1]) queryParts.push(parts[1]);\n    if (\"inputs\" in opts) queryParts.push(\"batch=1\");\n    if (opts.type === \"query\" || opts.type === \"subscription\") {\n        const input = getInput(opts);\n        if (input !== void 0 && opts.methodOverride !== \"POST\") queryParts.push(`input=${encodeURIComponent(JSON.stringify(input))}`);\n    }\n    if (queryParts.length) url += \"?\" + queryParts.join(\"&\");\n    return url;\n};\nconst getBody = (opts)=>{\n    if (opts.type === \"query\" && opts.methodOverride !== \"POST\") return void 0;\n    const input = getInput(opts);\n    return input !== void 0 ? JSON.stringify(input) : void 0;\n};\nconst jsonHttpRequester = (opts)=>{\n    return httpRequest((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n        contentTypeHeader: \"application/json\",\n        getUrl,\n        getBody\n    }));\n};\n/**\n* Polyfill for DOMException with AbortError name\n*/ var AbortError = class extends Error {\n    constructor(){\n        const name = \"AbortError\";\n        super(name);\n        this.name = name;\n        this.message = name;\n    }\n};\n/**\n* Polyfill for `signal.throwIfAborted()`\n*\n* @see https://developer.mozilla.org/en-US/docs/Web/API/AbortSignal/throwIfAborted\n*/ const throwIfAborted = (signal)=>{\n    var _signal$throwIfAborte;\n    if (!(signal === null || signal === void 0 ? void 0 : signal.aborted)) return;\n    (_signal$throwIfAborte = signal.throwIfAborted) === null || _signal$throwIfAborte === void 0 || _signal$throwIfAborte.call(signal);\n    if (typeof DOMException !== \"undefined\") throw new DOMException(\"AbortError\", \"AbortError\");\n    throw new AbortError();\n};\nasync function fetchHTTPResponse(opts) {\n    var _opts$methodOverride;\n    throwIfAborted(opts.signal);\n    const url = opts.getUrl(opts);\n    const body = opts.getBody(opts);\n    const { type } = opts;\n    const resolvedHeaders = await (async ()=>{\n        const heads = await opts.headers();\n        if (Symbol.iterator in heads) return Object.fromEntries(heads);\n        return heads;\n    })();\n    const headers = (0, import_objectSpread2.default)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts.contentTypeHeader ? {\n        \"content-type\": opts.contentTypeHeader\n    } : {}), opts.trpcAcceptHeader ? {\n        \"trpc-accept\": opts.trpcAcceptHeader\n    } : void 0), resolvedHeaders);\n    return getFetch(opts.fetch)(url, {\n        method: (_opts$methodOverride = opts.methodOverride) !== null && _opts$methodOverride !== void 0 ? _opts$methodOverride : METHOD[type],\n        signal: opts.signal,\n        body,\n        headers\n    });\n}\nasync function httpRequest(opts) {\n    const meta = {};\n    const res = await fetchHTTPResponse(opts);\n    meta.response = res;\n    const json = await res.json();\n    meta.responseJSON = json;\n    return {\n        json,\n        meta\n    };\n}\n//#endregion\n //# sourceMappingURL=httpUtils-Bkv1johT.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpUtils-Bkv1johT.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/index.mjs":
/*!****************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/index.mjs ***!
  \****************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError),\n/* harmony export */   TRPCUntypedClient: () => (/* binding */ TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* binding */ clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* binding */ createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* binding */ createTRPCClient),\n/* harmony export */   createTRPCUntypedClient: () => (/* binding */ createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _wsLink_H5IjZfJW_mjs__WEBPACK_IMPORTED_MODULE_8__.createWSClient),\n/* harmony export */   experimental_localLink: () => (/* binding */ experimental_localLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__.getFetch),\n/* harmony export */   getUntypedClient: () => (/* binding */ getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.httpBatchLink),\n/* harmony export */   httpBatchStreamLink: () => (/* binding */ httpBatchStreamLink),\n/* harmony export */   httpLink: () => (/* reexport safe */ _httpLink_CYOcG9kQ_mjs__WEBPACK_IMPORTED_MODULE_4__.httpLink),\n/* harmony export */   httpSubscriptionLink: () => (/* binding */ httpSubscriptionLink),\n/* harmony export */   isFormData: () => (/* reexport safe */ _httpLink_CYOcG9kQ_mjs__WEBPACK_IMPORTED_MODULE_4__.isFormData),\n/* harmony export */   isNonJsonSerializable: () => (/* reexport safe */ _httpLink_CYOcG9kQ_mjs__WEBPACK_IMPORTED_MODULE_4__.isNonJsonSerializable),\n/* harmony export */   isOctetType: () => (/* reexport safe */ _httpLink_CYOcG9kQ_mjs__WEBPACK_IMPORTED_MODULE_4__.isOctetType),\n/* harmony export */   isTRPCClientError: () => (/* reexport safe */ _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.isTRPCClientError),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _loggerLink_ineCN1PO_mjs__WEBPACK_IMPORTED_MODULE_7__.loggerLink),\n/* harmony export */   retryLink: () => (/* binding */ retryLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _splitLink_B7Cuf2c_mjs__WEBPACK_IMPORTED_MODULE_1__.splitLink),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* binding */ unstable_httpBatchStreamLink),\n/* harmony export */   unstable_httpSubscriptionLink: () => (/* binding */ unstable_httpSubscriptionLink),\n/* harmony export */   unstable_localLink: () => (/* binding */ unstable_localLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _wsLink_H5IjZfJW_mjs__WEBPACK_IMPORTED_MODULE_8__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectSpread2-BvkFp-_Y.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\");\n/* harmony import */ var _splitLink_B7Cuf2c_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./splitLink-B7Cuf2c_.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/splitLink-B7Cuf2c_.mjs\");\n/* harmony import */ var _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./TRPCClientError-CjKyS10w.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/TRPCClientError-CjKyS10w.mjs\");\n/* harmony import */ var _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./httpUtils-Bkv1johT.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpUtils-Bkv1johT.mjs\");\n/* harmony import */ var _httpLink_CYOcG9kQ_mjs__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./httpLink-CYOcG9kQ.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpLink-CYOcG9kQ.mjs\");\n/* harmony import */ var _httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./httpBatchLink-CA96-gnJ.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/httpBatchLink-CA96-gnJ.mjs\");\n/* harmony import */ var _unstable_internals_Bg7n9BBj_mjs__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./unstable-internals-Bg7n9BBj.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/unstable-internals-Bg7n9BBj.mjs\");\n/* harmony import */ var _loggerLink_ineCN1PO_mjs__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./loggerLink-ineCN1PO.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/loggerLink-ineCN1PO.mjs\");\n/* harmony import */ var _wsLink_H5IjZfJW_mjs__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ./wsLink-H5IjZfJW.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/wsLink-H5IjZfJW.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CUiPknO-.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @trpc/server */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/resolveResponse-CzlbRpCI.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @trpc/server/rpc */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @trpc/server */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\");\n\n\n\n\n\n\n\n\n\n\n\n\n\n//#region src/internals/TRPCUntypedClient.ts\nvar import_defineProperty = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\nvar import_objectSpread2$4 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nvar TRPCUntypedClient = class {\n    constructor(opts){\n        (0, import_defineProperty.default)(this, \"links\", void 0);\n        (0, import_defineProperty.default)(this, \"runtime\", void 0);\n        (0, import_defineProperty.default)(this, \"requestId\", void 0);\n        this.requestId = 0;\n        this.runtime = {};\n        this.links = opts.links.map((link)=>link(this.runtime));\n    }\n    $request(opts) {\n        var _opts$context;\n        const chain$ = (0,_splitLink_B7Cuf2c_mjs__WEBPACK_IMPORTED_MODULE_1__.createChain)({\n            links: this.links,\n            op: (0, import_objectSpread2$4.default)((0, import_objectSpread2$4.default)({}, opts), {}, {\n                context: (_opts$context = opts.context) !== null && _opts$context !== void 0 ? _opts$context : {},\n                id: ++this.requestId\n            })\n        });\n        return chain$.pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_9__.share)());\n    }\n    async requestAsPromise(opts) {\n        var _this = this;\n        try {\n            const req$ = _this.$request(opts);\n            const envelope = await (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_10__.observableToPromise)(req$);\n            const data = envelope.result.data;\n            return data;\n        } catch (err) {\n            throw _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from(err);\n        }\n    }\n    query(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"query\",\n            path,\n            input,\n            context: opts === null || opts === void 0 ? void 0 : opts.context,\n            signal: opts === null || opts === void 0 ? void 0 : opts.signal\n        });\n    }\n    mutation(path, input, opts) {\n        return this.requestAsPromise({\n            type: \"mutation\",\n            path,\n            input,\n            context: opts === null || opts === void 0 ? void 0 : opts.context,\n            signal: opts === null || opts === void 0 ? void 0 : opts.signal\n        });\n    }\n    subscription(path, input, opts) {\n        const observable$ = this.$request({\n            type: \"subscription\",\n            path,\n            input,\n            context: opts.context,\n            signal: opts.signal\n        });\n        return observable$.subscribe({\n            next (envelope) {\n                switch(envelope.result.type){\n                    case \"state\":\n                        {\n                            var _opts$onConnectionSta;\n                            (_opts$onConnectionSta = opts.onConnectionStateChange) === null || _opts$onConnectionSta === void 0 || _opts$onConnectionSta.call(opts, envelope.result);\n                            break;\n                        }\n                    case \"started\":\n                        {\n                            var _opts$onStarted;\n                            (_opts$onStarted = opts.onStarted) === null || _opts$onStarted === void 0 || _opts$onStarted.call(opts, {\n                                context: envelope.context\n                            });\n                            break;\n                        }\n                    case \"stopped\":\n                        {\n                            var _opts$onStopped;\n                            (_opts$onStopped = opts.onStopped) === null || _opts$onStopped === void 0 || _opts$onStopped.call(opts);\n                            break;\n                        }\n                    case \"data\":\n                    case void 0:\n                        {\n                            var _opts$onData;\n                            (_opts$onData = opts.onData) === null || _opts$onData === void 0 || _opts$onData.call(opts, envelope.result.data);\n                            break;\n                        }\n                }\n            },\n            error (err) {\n                var _opts$onError;\n                (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, err);\n            },\n            complete () {\n                var _opts$onComplete;\n                (_opts$onComplete = opts.onComplete) === null || _opts$onComplete === void 0 || _opts$onComplete.call(opts);\n            }\n        });\n    }\n};\n//#endregion\n//#region src/createTRPCUntypedClient.ts\nfunction createTRPCUntypedClient(opts) {\n    return new TRPCUntypedClient(opts);\n}\n//#endregion\n//#region src/createTRPCClient.ts\nconst untypedClientSymbol = Symbol.for(\"trpc_untypedClient\");\nconst clientCallTypeMap = {\n    query: \"query\",\n    mutate: \"mutation\",\n    subscribe: \"subscription\"\n};\n/** @internal */ const clientCallTypeToProcedureType = (clientCallType)=>{\n    return clientCallTypeMap[clientCallType];\n};\n/**\n* @internal\n*/ function createTRPCClientProxy(client) {\n    const proxy = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_11__.createRecursiveProxy)(({ path, args })=>{\n        const pathCopy = [\n            ...path\n        ];\n        const procedureType = clientCallTypeToProcedureType(pathCopy.pop());\n        const fullPath = pathCopy.join(\".\");\n        return client[procedureType](fullPath, ...args);\n    });\n    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_11__.createFlatProxy)((key)=>{\n        if (key === untypedClientSymbol) return client;\n        return proxy[key];\n    });\n}\nfunction createTRPCClient(opts) {\n    const client = new TRPCUntypedClient(opts);\n    const proxy = createTRPCClientProxy(client);\n    return proxy;\n}\n/**\n* Get an untyped client from a proxy client\n* @internal\n*/ function getUntypedClient(client) {\n    return client[untypedClientSymbol];\n}\n//#endregion\n//#region src/links/httpBatchStreamLink.ts\nvar import_objectSpread2$3 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* @see https://trpc.io/docs/client/links/httpBatchStreamLink\n*/ function httpBatchStreamLink(opts) {\n    var _opts$maxURLLength, _opts$maxItems;\n    const resolvedOpts = (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__.resolveHTTPLinkOptions)(opts);\n    const maxURLLength = (_opts$maxURLLength = opts.maxURLLength) !== null && _opts$maxURLLength !== void 0 ? _opts$maxURLLength : Infinity;\n    const maxItems = (_opts$maxItems = opts.maxItems) !== null && _opts$maxItems !== void 0 ? _opts$maxItems : Infinity;\n    return ()=>{\n        const batchLoader = (type)=>{\n            return {\n                validate (batchOps) {\n                    if (maxURLLength === Infinity && maxItems === Infinity) return true;\n                    if (batchOps.length > maxItems) return false;\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const url = (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__.getUrl)((0, import_objectSpread2$3.default)((0, import_objectSpread2$3.default)({}, resolvedOpts), {}, {\n                        type,\n                        path,\n                        inputs,\n                        signal: null\n                    }));\n                    return url.length <= maxURLLength;\n                },\n                async fetch (batchOps) {\n                    const path = batchOps.map((op)=>op.path).join(\",\");\n                    const inputs = batchOps.map((op)=>op.input);\n                    const batchSignals = (0,_httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.allAbortSignals)(...batchOps.map((op)=>op.signal));\n                    const abortController = new AbortController();\n                    const responsePromise = (0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__.fetchHTTPResponse)((0, import_objectSpread2$3.default)((0, import_objectSpread2$3.default)({}, resolvedOpts), {}, {\n                        signal: (0,_httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.raceAbortSignals)(batchSignals, abortController.signal),\n                        type,\n                        contentTypeHeader: \"application/json\",\n                        trpcAcceptHeader: \"application/jsonl\",\n                        getUrl: _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__.getUrl,\n                        getBody: _httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__.getBody,\n                        inputs,\n                        path,\n                        headers () {\n                            if (!opts.headers) return {};\n                            if (typeof opts.headers === \"function\") return opts.headers({\n                                opList: batchOps\n                            });\n                            return opts.headers;\n                        }\n                    }));\n                    const res = await responsePromise;\n                    const [head] = await (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.jsonlStreamConsumer)({\n                        from: res.body,\n                        deserialize: resolvedOpts.transformer.output.deserialize,\n                        formatError (opts$1) {\n                            const error = opts$1.error;\n                            return _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from({\n                                error\n                            });\n                        },\n                        abortController\n                    });\n                    const promises = Object.keys(batchOps).map(async (key)=>{\n                        let json = await Promise.resolve(head[key]);\n                        if (\"result\" in json) {\n                            /**\n\t\t\t\t\t\t\t* Not very pretty, but we need to unwrap nested data as promises\n\t\t\t\t\t\t\t* Our stream producer will only resolve top-level async values or async values that are directly nested in another async value\n\t\t\t\t\t\t\t*/ const result = await Promise.resolve(json.result);\n                            json = {\n                                result: {\n                                    data: await Promise.resolve(result.data)\n                                }\n                            };\n                        }\n                        return {\n                            json,\n                            meta: {\n                                response: res\n                            }\n                        };\n                    });\n                    return promises;\n                }\n            };\n        };\n        const query = (0,_httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.dataLoader)(batchLoader(\"query\"));\n        const mutation = (0,_httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.dataLoader)(batchLoader(\"mutation\"));\n        const loaders = {\n            query,\n            mutation\n        };\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_10__.observable)((observer)=>{\n                /* istanbul ignore if -- @preserve */ if (op.type === \"subscription\") throw new Error(\"Subscriptions are unsupported by `httpBatchStreamLink` - use `httpSubscriptionLink` or `wsLink`\");\n                const loader = loaders[op.type];\n                const promise = loader.load(op);\n                let _res = void 0;\n                promise.then((res)=>{\n                    _res = res;\n                    if (\"error\" in res.json) {\n                        observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from(res.json, {\n                            meta: res.meta\n                        }));\n                        return;\n                    } else if (\"result\" in res.json) {\n                        observer.next({\n                            context: res.meta,\n                            result: res.json.result\n                        });\n                        observer.complete();\n                        return;\n                    }\n                    observer.complete();\n                }).catch((err)=>{\n                    observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from(err, {\n                        meta: _res === null || _res === void 0 ? void 0 : _res.meta\n                    }));\n                });\n                return ()=>{};\n            });\n        };\n    };\n}\n/**\n* @deprecated use {@link httpBatchStreamLink} instead\n*/ const unstable_httpBatchStreamLink = httpBatchStreamLink;\n//#endregion\n//#region src/internals/inputWithTrackedEventId.ts\nvar import_objectSpread2$2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nfunction inputWithTrackedEventId(input, lastEventId) {\n    if (!lastEventId) return input;\n    if (input != null && typeof input !== \"object\") return input;\n    return (0, import_objectSpread2$2.default)((0, import_objectSpread2$2.default)({}, input !== null && input !== void 0 ? input : {}), {}, {\n        lastEventId\n    });\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\nvar require_asyncIterator = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\" (exports, module) {\n        function _asyncIterator$1(r) {\n            var n, t, o, e = 2;\n            for(\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;){\n                if (t && null != (n = r[t])) return n.call(r);\n                if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));\n                t = \"@@asyncIterator\", o = \"@@iterator\";\n            }\n            throw new TypeError(\"Object is not async iterable\");\n        }\n        function AsyncFromSyncIterator(r) {\n            function AsyncFromSyncIteratorContinuation(r$1) {\n                if (Object(r$1) !== r$1) return Promise.reject(new TypeError(r$1 + \" is not an object.\"));\n                var n = r$1.done;\n                return Promise.resolve(r$1.value).then(function(r$2) {\n                    return {\n                        value: r$2,\n                        done: n\n                    };\n                });\n            }\n            return AsyncFromSyncIterator = function AsyncFromSyncIterator$1(r$1) {\n                this.s = r$1, this.n = r$1.next;\n            }, AsyncFromSyncIterator.prototype = {\n                s: null,\n                n: null,\n                next: function next() {\n                    return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n                },\n                \"return\": function _return(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.resolve({\n                        value: r$1,\n                        done: !0\n                    }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                },\n                \"throw\": function _throw(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.reject(r$1) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                }\n            }, new AsyncFromSyncIterator(r);\n        }\n        module.exports = _asyncIterator$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/links/httpSubscriptionLink.ts\nvar import_asyncIterator = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)(require_asyncIterator(), 1);\nasync function urlWithConnectionParams(opts) {\n    let url = await (0,_wsLink_H5IjZfJW_mjs__WEBPACK_IMPORTED_MODULE_8__.resultOf)(opts.url);\n    if (opts.connectionParams) {\n        const params = await (0,_wsLink_H5IjZfJW_mjs__WEBPACK_IMPORTED_MODULE_8__.resultOf)(opts.connectionParams);\n        const prefix = url.includes(\"?\") ? \"&\" : \"?\";\n        url += prefix + \"connectionParams=\" + encodeURIComponent(JSON.stringify(params));\n    }\n    return url;\n}\n/**\n* @see https://trpc.io/docs/client/links/httpSubscriptionLink\n*/ function httpSubscriptionLink(opts) {\n    const transformer = (0,_unstable_internals_Bg7n9BBj_mjs__WEBPACK_IMPORTED_MODULE_6__.getTransformer)(opts.transformer);\n    return ()=>{\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_10__.observable)((observer)=>{\n                var _opts$EventSource;\n                const { type, path, input } = op;\n                /* istanbul ignore if -- @preserve */ if (type !== \"subscription\") throw new Error(\"httpSubscriptionLink only supports subscriptions\");\n                let lastEventId = void 0;\n                const ac = new AbortController();\n                const signal = (0,_httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.raceAbortSignals)(op.signal, ac.signal);\n                const eventSourceStream = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.sseStreamConsumer)({\n                    url: async ()=>(0,_httpUtils_Bkv1johT_mjs__WEBPACK_IMPORTED_MODULE_3__.getUrl)({\n                            transformer,\n                            url: await urlWithConnectionParams(opts),\n                            input: inputWithTrackedEventId(input, lastEventId),\n                            path,\n                            type,\n                            signal: null\n                        }),\n                    init: ()=>(0,_wsLink_H5IjZfJW_mjs__WEBPACK_IMPORTED_MODULE_8__.resultOf)(opts.eventSourceOptions, {\n                            op\n                        }),\n                    signal,\n                    deserialize: transformer.output.deserialize,\n                    EventSource: (_opts$EventSource = opts.EventSource) !== null && _opts$EventSource !== void 0 ? _opts$EventSource : globalThis.EventSource\n                });\n                const connectionState = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_9__.behaviorSubject)({\n                    type: \"state\",\n                    state: \"connecting\",\n                    error: null\n                });\n                const connectionSub = connectionState.subscribe({\n                    next (state) {\n                        observer.next({\n                            result: state\n                        });\n                    }\n                });\n                (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__.run)(async ()=>{\n                    var _iteratorAbruptCompletion = false;\n                    var _didIteratorError = false;\n                    var _iteratorError;\n                    try {\n                        for(var _iterator = (0, import_asyncIterator.default)(eventSourceStream), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false){\n                            const chunk = _step.value;\n                            switch(chunk.type){\n                                case \"ping\":\n                                    break;\n                                case \"data\":\n                                    const chunkData = chunk.data;\n                                    let result;\n                                    if (chunkData.id) {\n                                        lastEventId = chunkData.id;\n                                        result = {\n                                            id: chunkData.id,\n                                            data: chunkData\n                                        };\n                                    } else result = {\n                                        data: chunkData.data\n                                    };\n                                    observer.next({\n                                        result,\n                                        context: {\n                                            eventSource: chunk.eventSource\n                                        }\n                                    });\n                                    break;\n                                case \"connected\":\n                                    {\n                                        observer.next({\n                                            result: {\n                                                type: \"started\"\n                                            },\n                                            context: {\n                                                eventSource: chunk.eventSource\n                                            }\n                                        });\n                                        connectionState.next({\n                                            type: \"state\",\n                                            state: \"pending\",\n                                            error: null\n                                        });\n                                        break;\n                                    }\n                                case \"serialized-error\":\n                                    {\n                                        const error = _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from({\n                                            error: chunk.error\n                                        });\n                                        if (_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__.retryableRpcCodes.includes(chunk.error.code)) {\n                                            connectionState.next({\n                                                type: \"state\",\n                                                state: \"connecting\",\n                                                error\n                                            });\n                                            break;\n                                        }\n                                        throw error;\n                                    }\n                                case \"connecting\":\n                                    {\n                                        const lastState = connectionState.get();\n                                        const error = chunk.event && _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from(chunk.event);\n                                        if (!error && lastState.state === \"connecting\") break;\n                                        connectionState.next({\n                                            type: \"state\",\n                                            state: \"connecting\",\n                                            error\n                                        });\n                                        break;\n                                    }\n                                case \"timeout\":\n                                    connectionState.next({\n                                        type: \"state\",\n                                        state: \"connecting\",\n                                        error: new _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError(`Timeout of ${chunk.ms}ms reached while waiting for a response`)\n                                    });\n                            }\n                        }\n                    } catch (err) {\n                        _didIteratorError = true;\n                        _iteratorError = err;\n                    } finally{\n                        try {\n                            if (_iteratorAbruptCompletion && _iterator.return != null) await _iterator.return();\n                        } finally{\n                            if (_didIteratorError) throw _iteratorError;\n                        }\n                    }\n                    observer.next({\n                        result: {\n                            type: \"stopped\"\n                        }\n                    });\n                    connectionState.next({\n                        type: \"state\",\n                        state: \"idle\",\n                        error: null\n                    });\n                    observer.complete();\n                }).catch((error)=>{\n                    observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from(error));\n                });\n                return ()=>{\n                    observer.complete();\n                    ac.abort();\n                    connectionSub.unsubscribe();\n                };\n            });\n        };\n    };\n}\n/**\n* @deprecated use {@link httpSubscriptionLink} instead\n*/ const unstable_httpSubscriptionLink = httpSubscriptionLink;\n//#endregion\n//#region src/links/retryLink.ts\nvar import_objectSpread2$1 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* @see https://trpc.io/docs/v11/client/links/retryLink\n*/ function retryLink(opts) {\n    return ()=>{\n        return (callOpts)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_10__.observable)((observer)=>{\n                let next$;\n                let callNextTimeout = void 0;\n                let lastEventId = void 0;\n                attempt(1);\n                function opWithLastEventId() {\n                    const op = callOpts.op;\n                    if (!lastEventId) return op;\n                    return (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, op), {}, {\n                        input: inputWithTrackedEventId(op.input, lastEventId)\n                    });\n                }\n                function attempt(attempts) {\n                    const op = opWithLastEventId();\n                    next$ = callOpts.next(op).subscribe({\n                        error (error) {\n                            var _opts$retryDelayMs, _opts$retryDelayMs2;\n                            const shouldRetry = opts.retry({\n                                op,\n                                attempts,\n                                error\n                            });\n                            if (!shouldRetry) {\n                                observer.error(error);\n                                return;\n                            }\n                            const delayMs = (_opts$retryDelayMs = (_opts$retryDelayMs2 = opts.retryDelayMs) === null || _opts$retryDelayMs2 === void 0 ? void 0 : _opts$retryDelayMs2.call(opts, attempts)) !== null && _opts$retryDelayMs !== void 0 ? _opts$retryDelayMs : 0;\n                            if (delayMs <= 0) {\n                                attempt(attempts + 1);\n                                return;\n                            }\n                            callNextTimeout = setTimeout(()=>attempt(attempts + 1), delayMs);\n                        },\n                        next (envelope) {\n                            if ((!envelope.result.type || envelope.result.type === \"data\") && envelope.result.id) lastEventId = envelope.result.id;\n                            observer.next(envelope);\n                        },\n                        complete () {\n                            observer.complete();\n                        }\n                    });\n                }\n                return ()=>{\n                    next$.unsubscribe();\n                    clearTimeout(callNextTimeout);\n                };\n            });\n        };\n    };\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\nvar require_usingCtx = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/usingCtx.js\" (exports, module) {\n        function _usingCtx() {\n            var r = \"function\" == typeof SuppressedError ? SuppressedError : function(r$1, e$1) {\n                var n$1 = Error();\n                return n$1.name = \"SuppressedError\", n$1.error = r$1, n$1.suppressed = e$1, n$1;\n            }, e = {}, n = [];\n            function using(r$1, e$1) {\n                if (null != e$1) {\n                    if (Object(e$1) !== e$1) throw new TypeError(\"using declarations can only be used with objects, functions, null, or undefined.\");\n                    if (r$1) var o = e$1[Symbol.asyncDispose || Symbol[\"for\"](\"Symbol.asyncDispose\")];\n                    if (void 0 === o && (o = e$1[Symbol.dispose || Symbol[\"for\"](\"Symbol.dispose\")], r$1)) var t = o;\n                    if (\"function\" != typeof o) throw new TypeError(\"Object is not disposable.\");\n                    t && (o = function o$1() {\n                        try {\n                            t.call(e$1);\n                        } catch (r$2) {\n                            return Promise.reject(r$2);\n                        }\n                    }), n.push({\n                        v: e$1,\n                        d: o,\n                        a: r$1\n                    });\n                } else r$1 && n.push({\n                    d: e$1,\n                    a: r$1\n                });\n                return e$1;\n            }\n            return {\n                e,\n                u: using.bind(null, !1),\n                a: using.bind(null, !0),\n                d: function d() {\n                    var o, t = this.e, s = 0;\n                    function next() {\n                        for(; o = n.pop();)try {\n                            if (!o.a && 1 === s) return s = 0, n.push(o), Promise.resolve().then(next);\n                            if (o.d) {\n                                var r$1 = o.d.call(o.v);\n                                if (o.a) return s |= 2, Promise.resolve(r$1).then(next, err);\n                            } else s |= 1;\n                        } catch (r$2) {\n                            return err(r$2);\n                        }\n                        if (1 === s) return t !== e ? Promise.reject(t) : Promise.resolve();\n                        if (t !== e) throw t;\n                    }\n                    function err(n$1) {\n                        return t = t !== e ? new r(n$1, t) : n$1, next();\n                    }\n                    return next();\n                }\n            };\n        }\n        module.exports = _usingCtx, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/OverloadYield.js\nvar require_OverloadYield = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/OverloadYield.js\" (exports, module) {\n        function _OverloadYield(e, d) {\n            this.v = e, this.k = d;\n        }\n        module.exports = _OverloadYield, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/awaitAsyncGenerator.js\nvar require_awaitAsyncGenerator = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/awaitAsyncGenerator.js\" (exports, module) {\n        var OverloadYield$1 = require_OverloadYield();\n        function _awaitAsyncGenerator$1(e) {\n            return new OverloadYield$1(e, 0);\n        }\n        module.exports = _awaitAsyncGenerator$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/wrapAsyncGenerator.js\nvar require_wrapAsyncGenerator = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/wrapAsyncGenerator.js\" (exports, module) {\n        var OverloadYield = require_OverloadYield();\n        function _wrapAsyncGenerator$1(e) {\n            return function() {\n                return new AsyncGenerator(e.apply(this, arguments));\n            };\n        }\n        function AsyncGenerator(e) {\n            var r, t;\n            function resume(r$1, t$1) {\n                try {\n                    var n = e[r$1](t$1), o = n.value, u = o instanceof OverloadYield;\n                    Promise.resolve(u ? o.v : o).then(function(t$2) {\n                        if (u) {\n                            var i = \"return\" === r$1 ? \"return\" : \"next\";\n                            if (!o.k || t$2.done) return resume(i, t$2);\n                            t$2 = e[i](t$2).value;\n                        }\n                        settle(n.done ? \"return\" : \"normal\", t$2);\n                    }, function(e$1) {\n                        resume(\"throw\", e$1);\n                    });\n                } catch (e$1) {\n                    settle(\"throw\", e$1);\n                }\n            }\n            function settle(e$1, n) {\n                switch(e$1){\n                    case \"return\":\n                        r.resolve({\n                            value: n,\n                            done: !0\n                        });\n                        break;\n                    case \"throw\":\n                        r.reject(n);\n                        break;\n                    default:\n                        r.resolve({\n                            value: n,\n                            done: !1\n                        });\n                }\n                (r = r.next) ? resume(r.key, r.arg) : t = null;\n            }\n            this._invoke = function(e$1, n) {\n                return new Promise(function(o, u) {\n                    var i = {\n                        key: e$1,\n                        arg: n,\n                        resolve: o,\n                        reject: u,\n                        next: null\n                    };\n                    t ? t = t.next = i : (r = t = i, resume(e$1, n));\n                });\n            }, \"function\" != typeof e[\"return\"] && (this[\"return\"] = void 0);\n        }\n        AsyncGenerator.prototype[\"function\" == typeof Symbol && Symbol.asyncIterator || \"@@asyncIterator\"] = function() {\n            return this;\n        }, AsyncGenerator.prototype.next = function(e) {\n            return this._invoke(\"next\", e);\n        }, AsyncGenerator.prototype[\"throw\"] = function(e) {\n            return this._invoke(\"throw\", e);\n        }, AsyncGenerator.prototype[\"return\"] = function(e) {\n            return this._invoke(\"return\", e);\n        };\n        module.exports = _wrapAsyncGenerator$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/links/localLink.ts\nvar import_usingCtx = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)(require_usingCtx(), 1);\nvar import_awaitAsyncGenerator = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)(require_awaitAsyncGenerator(), 1);\nvar import_wrapAsyncGenerator = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)(require_wrapAsyncGenerator(), 1);\nvar import_objectSpread2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* localLink is a terminating link that allows you to make tRPC procedure calls directly in your application without going through HTTP.\n*\n* @see https://trpc.io/docs/links/localLink\n*/ function unstable_localLink(opts) {\n    const transformer = (0,_unstable_internals_Bg7n9BBj_mjs__WEBPACK_IMPORTED_MODULE_6__.getTransformer)(opts.transformer);\n    const transformChunk = (chunk)=>{\n        if (opts.transformer) return chunk;\n        if (chunk === void 0) return chunk;\n        const serialized = JSON.stringify(transformer.input.serialize(chunk));\n        const deserialized = JSON.parse(transformer.output.deserialize(serialized));\n        return deserialized;\n    };\n    return ()=>({ op })=>(0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_10__.observable)((observer)=>{\n                let ctx = void 0;\n                const ac = new AbortController();\n                const signal = (0,_httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.raceAbortSignals)(op.signal, ac.signal);\n                const signalPromise = (0,_httpBatchLink_CA96_gnJ_mjs__WEBPACK_IMPORTED_MODULE_5__.abortSignalToPromise)(signal);\n                signalPromise.catch(()=>{});\n                let input = op.input;\n                async function runProcedure(newInput) {\n                    input = newInput;\n                    ctx = await opts.createContext();\n                    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_14__.callProcedure)({\n                        router: opts.router,\n                        path: op.path,\n                        getRawInput: async ()=>newInput,\n                        ctx,\n                        type: op.type,\n                        signal\n                    });\n                }\n                function onErrorCallback(cause) {\n                    var _opts$onError;\n                    if ((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.isAbortError)(cause)) return;\n                    (_opts$onError = opts.onError) === null || _opts$onError === void 0 || _opts$onError.call(opts, {\n                        error: (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_14__.getTRPCErrorFromUnknown)(cause),\n                        type: op.type,\n                        path: op.path,\n                        input,\n                        ctx\n                    });\n                }\n                function coerceToTRPCClientError(cause) {\n                    if ((0,_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.isTRPCClientError)(cause)) return cause;\n                    const error = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_14__.getTRPCErrorFromUnknown)(cause);\n                    const shape = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_11__.getErrorShape)({\n                        config: opts.router._def._config,\n                        ctx,\n                        error,\n                        input,\n                        path: op.path,\n                        type: op.type\n                    });\n                    return _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_2__.TRPCClientError.from({\n                        error: transformChunk(shape)\n                    });\n                }\n                (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__.run)(async ()=>{\n                    switch(op.type){\n                        case \"query\":\n                        case \"mutation\":\n                            {\n                                const result = await runProcedure(op.input);\n                                if (!(0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__.isAsyncIterable)(result)) {\n                                    observer.next({\n                                        result: {\n                                            data: transformChunk(result)\n                                        }\n                                    });\n                                    observer.complete();\n                                    break;\n                                }\n                                observer.next({\n                                    result: {\n                                        data: (0, import_wrapAsyncGenerator.default)(function*() {\n                                            try {\n                                                var _usingCtx$1 = (0, import_usingCtx.default)();\n                                                const iterator = _usingCtx$1.a((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.iteratorResource)(result));\n                                                const _finally = _usingCtx$1.u((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.makeResource)({}, ()=>{\n                                                    observer.complete();\n                                                }));\n                                                try {\n                                                    while(true){\n                                                        const res = yield (0, import_awaitAsyncGenerator.default)(Promise.race([\n                                                            iterator.next(),\n                                                            signalPromise\n                                                        ]));\n                                                        if (res.done) return transformChunk(res.value);\n                                                        yield transformChunk(res.value);\n                                                    }\n                                                } catch (cause) {\n                                                    onErrorCallback(cause);\n                                                    throw coerceToTRPCClientError(cause);\n                                                }\n                                            } catch (_) {\n                                                _usingCtx$1.e = _;\n                                            } finally{\n                                                yield (0, import_awaitAsyncGenerator.default)(_usingCtx$1.d());\n                                            }\n                                        })()\n                                    }\n                                });\n                                break;\n                            }\n                        case \"subscription\":\n                            try {\n                                var _usingCtx3 = (0, import_usingCtx.default)();\n                                const connectionState = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_9__.behaviorSubject)({\n                                    type: \"state\",\n                                    state: \"connecting\",\n                                    error: null\n                                });\n                                const connectionSub = connectionState.subscribe({\n                                    next (state) {\n                                        observer.next({\n                                            result: state\n                                        });\n                                    }\n                                });\n                                let lastEventId = void 0;\n                                const _finally = _usingCtx3.u((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.makeResource)({}, async ()=>{\n                                    observer.complete();\n                                    connectionState.next({\n                                        type: \"state\",\n                                        state: \"idle\",\n                                        error: null\n                                    });\n                                    connectionSub.unsubscribe();\n                                }));\n                                while(true)try {\n                                    var _usingCtx4 = (0, import_usingCtx.default)();\n                                    const result = await runProcedure(inputWithTrackedEventId(op.input, lastEventId));\n                                    if (!(0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__.isAsyncIterable)(result)) throw new Error(\"Expected an async iterable\");\n                                    const iterator = _usingCtx4.a((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.iteratorResource)(result));\n                                    observer.next({\n                                        result: {\n                                            type: \"started\"\n                                        }\n                                    });\n                                    connectionState.next({\n                                        type: \"state\",\n                                        state: \"pending\",\n                                        error: null\n                                    });\n                                    while(true){\n                                        let res;\n                                        try {\n                                            res = await Promise.race([\n                                                iterator.next(),\n                                                signalPromise\n                                            ]);\n                                        } catch (cause) {\n                                            if ((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_12__.isAbortError)(cause)) return;\n                                            const error = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_14__.getTRPCErrorFromUnknown)(cause);\n                                            if (!_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__.retryableRpcCodes.includes(_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_13__.TRPC_ERROR_CODES_BY_KEY[error.code])) throw coerceToTRPCClientError(error);\n                                            onErrorCallback(error);\n                                            connectionState.next({\n                                                type: \"state\",\n                                                state: \"connecting\",\n                                                error: coerceToTRPCClientError(error)\n                                            });\n                                            break;\n                                        }\n                                        if (res.done) return;\n                                        let chunk;\n                                        if ((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_14__.isTrackedEnvelope)(res.value)) {\n                                            lastEventId = res.value[0];\n                                            chunk = {\n                                                id: res.value[0],\n                                                data: {\n                                                    id: res.value[0],\n                                                    data: res.value[1]\n                                                }\n                                            };\n                                        } else chunk = {\n                                            data: res.value\n                                        };\n                                        observer.next({\n                                            result: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, chunk), {}, {\n                                                data: transformChunk(chunk.data)\n                                            })\n                                        });\n                                    }\n                                } catch (_) {\n                                    _usingCtx4.e = _;\n                                } finally{\n                                    await _usingCtx4.d();\n                                }\n                                break;\n                            } catch (_) {\n                                _usingCtx3.e = _;\n                            } finally{\n                                _usingCtx3.d();\n                            }\n                    }\n                }).catch((cause)=>{\n                    onErrorCallback(cause);\n                    observer.error(coerceToTRPCClientError(cause));\n                });\n                return ()=>{\n                    ac.abort();\n                };\n            });\n}\n/**\n* @deprecated Renamed to `unstable_localLink`. This alias will be removed in a future major release.\n*/ const experimental_localLink = unstable_localLink;\n//#endregion\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMS40LjJfQHRycGMrc2VydmVyQDExLjQuMl90eXBlc2NyaXB0QDUuOC4zX190eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9pbmRleC5tanMiLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBOENBLElBQWEsb0JBQWIsTUFBMEU7SUFLeEUsWUFBWUEsSUFBQUEsQ0FBNEM7MkNBK0d2RCxNQW5IZ0I7MkNBbUhmLE1BbEhjOzJDQWtIYixNQWpISztRQUdOLEtBQUssWUFBWTtRQUVqQixLQUFLLFVBQVUsQ0FBRTtRQUdqQixLQUFLLFFBQVEsS0FBSyxNQUFNLElBQUksQ0FBQyxPQUFTLEtBQUssS0FBSyxRQUFRLENBQUM7SUFDMUQ7SUFFTyxTQUE4Q0MsSUFBQUEsRUFNbkQ7O1FBQ0QsTUFBTSxTQUFTLG1FQUFXLENBQTZCO1lBQ3JELE9BQU8sS0FBSztZQUNaLGdGQUNLO2dCQUNILDBCQUFTLEtBQUssZ0VBQVcsQ0FBRTtnQkFDM0IsSUFBSSxFQUFFLEtBQUs7O1FBRWQsRUFBQztRQUNGLE9BQU8sT0FBTyxLQUFLLDhEQUFLLEVBQUUsQ0FBQztJQUM1QjtJQUVELE1BQWMsaUJBQXNEQSxJQUFBQSxFQU0vQztvQkE4RWpCO1FBN0VGLElBQUk7WUFDRixNQUFNLE9BQU8sTUFBSyxTQUEwQixLQUFLO1lBR2pELE1BQU0sV0FBVyxNQUFNLDZFQUFtQixDQUFTLEtBQUs7WUFDeEQsTUFBTSxPQUFRLFNBQVMsT0FBZTtZQUN0QyxPQUFPO1FBQ1IsU0FBUSxLQUFLO1lBQ1osTUFBTSwwRUFBZSxDQUFDLEtBQUssSUFBYTtRQUN6QztJQUNGO0lBQ00sTUFBTUMsSUFBQUEsRUFBY0MsS0FBQUEsRUFBaUJDLElBQUFBLEVBQTJCO1FBQ3JFLE9BQU8sS0FBSyxpQkFBbUM7WUFD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NENBQ3RCLGdCQUFnQixLQUFLO2dEQUNuQixNQUFNO2dEQUNOLE9BQU87Z0RBQ1AsT0FBTyx3QkFBd0IsTUFBTTs0Q0FDdEMsRUFBQzs0Q0FFRjt3Q0FDRDt3Q0FFRCxJQUFJLElBQUksS0FDTjt3Q0FFRixJQUFJdUI7d0NBQ0osSUFBSSw0RkFBaUIsQ0FBQyxJQUFJLE1BQU0sRUFBRTs0Q0FDaEMsY0FBYyxJQUFJLE1BQU07NENBRXhCLFFBQVE7Z0RBQ04sSUFBSSxJQUFJLE1BQU07Z0RBQ2QsTUFBTTtvREFDSixJQUFJLElBQUksTUFBTTtvREFDZCxNQUFNLElBQUksTUFBTTtnREFDakI7NENBQ0Y7d0NBQ0YsTUFDQyxTQUFROzRDQUNOLE1BQU0sSUFBSTt3Q0FDWDt3Q0FHSCxTQUFTLEtBQUs7NENBQ1osZ0ZBQ0s7Z0RBQ0gsTUFBTSxlQUFlLE1BQU0sS0FBSzs0Q0FBQTt3Q0FFbkMsRUFBQztvQ0FDSDs7Ozs7O2dDQUVIOzs7Ozs7b0JBRUg7Z0JBQ0YsRUFBQyxDQUFDLE1BQU0sQ0FBQztvQkFDUixnQkFBZ0IsTUFBTTtvQkFDdEIsU0FBUyxNQUFNLHdCQUF3QixNQUFNLENBQUM7Z0JBQy9DLEVBQUM7Z0JBRUYsT0FBTztvQkFDTCxHQUFHLE9BQU87Z0JBQ1g7WUFDRixFQUFDO0FBQ1A7OztHQUlELE1BQWFDLHlCQUNYIiwic291cmNlcyI6WyIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL2FwcF9jb2RleGNybWFwcC9hcHBzL3NyYy9pbnRlcm5hbHMvVFJQQ1VudHlwZWRDbGllbnQudHMiLCIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL2FwcF9jb2RleGNybWFwcC9hcHBzL3NyYy9jcmVhdGVUUlBDVW50eXBlZENsaWVudC50cyIsIi9Vc2Vycy9wZXRlcmphbWVzYmxpenphcmQvcHJvamVjdHMvYXBwX2NvZGV4Y3JtYXBwL2FwcHMvc3JjL2NyZWF0ZVRSUENDbGllbnQudHMiLCIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL2FwcF9jb2RleGNybWFwcC9hcHBzL3NyYy9saW5rcy9odHRwQmF0Y2hTdHJlYW1MaW5rLnRzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9hcHBfY29kZXhjcm1hcHAvYXBwcy9zcmMvaW50ZXJuYWxzL2lucHV0V2l0aFRyYWNrZWRFdmVudElkLnRzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9ub2RlX21vZHVsZXMvLnBucG0vQG94Yy1wcm9qZWN0K3J1bnRpbWVAMC43Mi4yL25vZGVfbW9kdWxlcy9Ab3hjLXByb2plY3QvcnVudGltZS9zcmMvaGVscGVycy9hc3luY0l0ZXJhdG9yLmpzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9hcHBfY29kZXhjcm1hcHAvYXBwcy9zcmMvbGlua3MvaHR0cFN1YnNjcmlwdGlvbkxpbmsudHMiLCIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL2FwcF9jb2RleGNybWFwcC9hcHBzL3NyYy9saW5rcy9yZXRyeUxpbmsudHMiLCIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3hjLXByb2plY3QrcnVudGltZUAwLjcyLjIvbm9kZV9tb2R1bGVzL0BveGMtcHJvamVjdC9ydW50aW1lL3NyYy9oZWxwZXJzL3VzaW5nQ3R4LmpzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9ub2RlX21vZHVsZXMvLnBucG0vQG94Yy1wcm9qZWN0K3J1bnRpbWVAMC43Mi4yL25vZGVfbW9kdWxlcy9Ab3hjLXByb2plY3QvcnVudGltZS9zcmMvaGVscGVycy9PdmVybG9hZFlpZWxkLmpzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9ub2RlX21vZHVsZXMvLnBucG0vQG94Yy1wcm9qZWN0K3J1bnRpbWVAMC43Mi4yL25vZGVfbW9kdWxlcy9Ab3hjLXByb2plY3QvcnVudGltZS9zcmMvaGVscGVycy9hd2FpdEFzeW5jR2VuZXJhdG9yLmpzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9ub2RlX21vZHVsZXMvLnBucG0vQG94Yy1wcm9qZWN0K3J1bnRpbWVAMC43Mi4yL25vZGVfbW9kdWxlcy9Ab3hjLXByb2plY3QvcnVudGltZS9zcmMvaGVscGVycy93cmFwQXN5bmNHZW5lcmF0b3IuanMiLCIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL2FwcF9jb2RleGNybWFwcC9hcHBzL3NyYy9saW5rcy9sb2NhbExpbmsudHMiXSwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHR5cGUge1xuICBpbmZlck9ic2VydmFibGVWYWx1ZSxcbiAgVW5zdWJzY3JpYmFibGUsXG59IGZyb20gJ0B0cnBjL3NlcnZlci9vYnNlcnZhYmxlJztcbmltcG9ydCB7IG9ic2VydmFibGVUb1Byb21pc2UsIHNoYXJlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHR5cGUge1xuICBBbnlSb3V0ZXIsXG4gIGluZmVyQXN5bmNJdGVyYWJsZVlpZWxkLFxuICBJbmZlcnJhYmxlQ2xpZW50VHlwZXMsXG4gIE1heWJlLFxuICBUeXBlRXJyb3IsXG59IGZyb20gJ0B0cnBjL3NlcnZlci91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQnO1xuaW1wb3J0IHsgY3JlYXRlQ2hhaW4gfSBmcm9tICcuLi9saW5rcy9pbnRlcm5hbHMvY3JlYXRlQ2hhaW4nO1xuaW1wb3J0IHR5cGUgeyBUUlBDQ29ubmVjdGlvblN0YXRlIH0gZnJvbSAnLi4vbGlua3MvaW50ZXJuYWxzL3N1YnNjcmlwdGlvbnMnO1xuaW1wb3J0IHR5cGUge1xuICBPcGVyYXRpb25Db250ZXh0LFxuICBPcGVyYXRpb25MaW5rLFxuICBUUlBDQ2xpZW50UnVudGltZSxcbiAgVFJQQ0xpbmssXG59IGZyb20gJy4uL2xpbmtzL3R5cGVzJztcbmltcG9ydCB7IFRSUENDbGllbnRFcnJvciB9IGZyb20gJy4uL1RSUENDbGllbnRFcnJvcic7XG5cbnR5cGUgVFJQQ1R5cGUgPSAnbXV0YXRpb24nIHwgJ3F1ZXJ5JyB8ICdzdWJzY3JpcHRpb24nO1xuZXhwb3J0IGludGVyZmFjZSBUUlBDUmVxdWVzdE9wdGlvbnMge1xuICAvKipcbiAgICogUGFzcyBhZGRpdGlvbmFsIGNvbnRleHQgdG8gbGlua3NcbiAgICovXG4gIGNvbnRleHQ/OiBPcGVyYXRpb25Db250ZXh0O1xuICBzaWduYWw/OiBBYm9ydFNpZ25hbDtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBUUlBDU3Vic2NyaXB0aW9uT2JzZXJ2ZXI8VFZhbHVlLCBURXJyb3I+IHtcbiAgb25TdGFydGVkOiAob3B0czogeyBjb250ZXh0OiBPcGVyYXRpb25Db250ZXh0IHwgdW5kZWZpbmVkIH0pID0+IHZvaWQ7XG4gIG9uRGF0YTogKHZhbHVlOiBpbmZlckFzeW5jSXRlcmFibGVZaWVsZDxUVmFsdWU+KSA9PiB2b2lkO1xuICBvbkVycm9yOiAoZXJyOiBURXJyb3IpID0+IHZvaWQ7XG4gIG9uU3RvcHBlZDogKCkgPT4gdm9pZDtcbiAgb25Db21wbGV0ZTogKCkgPT4gdm9pZDtcbiAgb25Db25uZWN0aW9uU3RhdGVDaGFuZ2U6IChzdGF0ZTogVFJQQ0Nvbm5lY3Rpb25TdGF0ZTxURXJyb3I+KSA9PiB2b2lkO1xufVxuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBDcmVhdGVUUlBDQ2xpZW50T3B0aW9uczxUUm91dGVyIGV4dGVuZHMgSW5mZXJyYWJsZUNsaWVudFR5cGVzPiA9IHtcbiAgbGlua3M6IFRSUENMaW5rPFRSb3V0ZXI+W107XG4gIHRyYW5zZm9ybWVyPzogVHlwZUVycm9yPCdUaGUgdHJhbnNmb3JtZXIgcHJvcGVydHkgaGFzIG1vdmVkIHRvIGh0dHBMaW5rL2h0dHBCYXRjaExpbmsvd3NMaW5rJz47XG59O1xuXG5leHBvcnQgY2xhc3MgVFJQQ1VudHlwZWRDbGllbnQ8VEluZmVycmFibGUgZXh0ZW5kcyBJbmZlcnJhYmxlQ2xpZW50VHlwZXM+IHtcbiAgcHJpdmF0ZSByZWFkb25seSBsaW5rczogT3BlcmF0aW9uTGluazxUSW5mZXJyYWJsZT5bXTtcbiAgcHVibGljIHJlYWRvbmx5IHJ1bnRpbWU6IFRSUENDbGllbnRSdW50aW1lO1xuICBwcml2YXRlIHJlcXVlc3RJZDogbnVtYmVyO1xuXG4gIGNvbnN0cnVjdG9yKG9wdHM6IENyZWF0ZVRSUENDbGllbnRPcHRpb25zPFRJbmZlcnJhYmxlPikge1xuICAgIHRoaXMucmVxdWVzdElkID0gMDtcblxuICAgIHRoaXMucnVudGltZSA9IHt9O1xuXG4gICAgLy8gSW5pdGlhbGl6ZSB0aGUgbGlua3NcbiAgICB0aGlzLmxpbmtzID0gb3B0cy5saW5rcy5tYXAoKGxpbmspID0+IGxpbmsodGhpcy5ydW50aW1lKSk7XG4gIH1cblxuICBwcml2YXRlICRyZXF1ZXN0PFRJbnB1dCA9IHVua25vd24sIFRPdXRwdXQgPSB1bmtub3duPihvcHRzOiB7XG4gICAgdHlwZTogVFJQQ1R5cGU7XG4gICAgaW5wdXQ6IFRJbnB1dDtcbiAgICBwYXRoOiBzdHJpbmc7XG4gICAgY29udGV4dD86IE9wZXJhdGlvbkNvbnRleHQ7XG4gICAgc2lnbmFsOiBNYXliZTxBYm9ydFNpZ25hbD47XG4gIH0pIHtcbiAgICBjb25zdCBjaGFpbiQgPSBjcmVhdGVDaGFpbjxBbnlSb3V0ZXIsIFRJbnB1dCwgVE91dHB1dD4oe1xuICAgICAgbGlua3M6IHRoaXMubGlua3MgYXMgT3BlcmF0aW9uTGluazxhbnksIGFueSwgYW55PltdLFxuICAgICAgb3A6IHtcbiAgICAgICAgLi4ub3B0cyxcbiAgICAgICAgY29udGV4dDogb3B0cy5jb250ZXh0ID8/IHt9LFxuICAgICAgICBpZDogKyt0aGlzLnJlcXVlc3RJZCxcbiAgICAgIH0sXG4gICAgfSk7XG4gICAgcmV0dXJuIGNoYWluJC5waXBlKHNoYXJlKCkpO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyByZXF1ZXN0QXNQcm9taXNlPFRJbnB1dCA9IHVua25vd24sIFRPdXRwdXQgPSB1bmtub3duPihvcHRzOiB7XG4gICAgdHlwZTogVFJQQ1R5cGU7XG4gICAgaW5wdXQ6IFRJbnB1dDtcbiAgICBwYXRoOiBzdHJpbmc7XG4gICAgY29udGV4dD86IE9wZXJhdGlvbkNvbnRleHQ7XG4gICAgc2lnbmFsOiBNYXliZTxBYm9ydFNpZ25hbD47XG4gIH0pOiBQcm9taXNlPFRPdXRwdXQ+IHtcbiAgICB0cnkge1xuICAgICAgY29uc3QgcmVxJCA9IHRoaXMuJHJlcXVlc3Q8VElucHV0LCBUT3V0cHV0PihvcHRzKTtcbiAgICAgIHR5cGUgVFZhbHVlID0gaW5mZXJPYnNlcnZhYmxlVmFsdWU8dHlwZW9mIHJlcSQ+O1xuXG4gICAgICBjb25zdCBlbnZlbG9wZSA9IGF3YWl0IG9ic2VydmFibGVUb1Byb21pc2U8VFZhbHVlPihyZXEkKTtcbiAgICAgIGNvbnN0IGRhdGEgPSAoZW52ZWxvcGUucmVzdWx0IGFzIGFueSkuZGF0YTtcbiAgICAgIHJldHVybiBkYXRhO1xuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgdGhyb3cgVFJQQ0NsaWVudEVycm9yLmZyb20oZXJyIGFzIEVycm9yKTtcbiAgICB9XG4gIH1cbiAgcHVibGljIHF1ZXJ5KHBhdGg6IHN0cmluZywgaW5wdXQ/OiB1bmtub3duLCBvcHRzPzogVFJQQ1JlcXVlc3RPcHRpb25zKSB7XG4gICAgcmV0dXJuIHRoaXMucmVxdWVzdEFzUHJvbWlzZTx1bmtub3duLCB1bmtub3duPih7XG4gICAgICB0eXBlOiAncXVlcnknLFxuICAgICAgcGF0aCxcbiAgICAgIGlucHV0LFxuICAgICAgY29udGV4dDogb3B0cz8uY29udGV4dCxcbiAgICAgIHNpZ25hbDogb3B0cz8uc2lnbmFsLFxuICAgIH0pO1xuICB9XG4gIHB1YmxpYyBtdXRhdGlvbihwYXRoOiBzdHJpbmcsIGlucHV0PzogdW5rbm93biwgb3B0cz86IFRSUENSZXF1ZXN0T3B0aW9ucykge1xuICAgIHJldHVybiB0aGlzLnJlcXVlc3RBc1Byb21pc2U8dW5rbm93biwgdW5rbm93bj4oe1xuICAgICAgdHlwZTogJ211dGF0aW9uJyxcbiAgICAgIHBhdGgsXG4gICAgICBpbnB1dCxcbiAgICAgIGNvbnRleHQ6IG9wdHM/LmNvbnRleHQsXG4gICAgICBzaWduYWw6IG9wdHM/LnNpZ25hbCxcbiAgICB9KTtcbiAgfVxuICBwdWJsaWMgc3Vic2NyaXB0aW9uKFxuICAgIHBhdGg6IHN0cmluZyxcbiAgICBpbnB1dDogdW5rbm93bixcbiAgICBvcHRzOiBQYXJ0aWFsPFxuICAgICAgVFJQQ1N1YnNjcmlwdGlvbk9ic2VydmVyPHVua25vd24sIFRSUENDbGllbnRFcnJvcjxBbnlSb3V0ZXI+PlxuICAgID4gJlxuICAgICAgVFJQQ1JlcXVlc3RPcHRpb25zLFxuICApOiBVbnN1YnNjcmliYWJsZSB7XG4gICAgY29uc3Qgb2JzZXJ2YWJsZSQgPSB0aGlzLiRyZXF1ZXN0KHtcbiAgICAgIHR5cGU6ICdzdWJzY3JpcHRpb24nLFxuICAgICAgcGF0aCxcbiAgICAgIGlucHV0LFxuICAgICAgY29udGV4dDogb3B0cy5jb250ZXh0LFxuICAgICAgc2lnbmFsOiBvcHRzLnNpZ25hbCxcbiAgICB9KTtcbiAgICByZXR1cm4gb2JzZXJ2YWJsZSQuc3Vic2NyaWJlKHtcbiAgICAgIG5leHQoZW52ZWxvcGUpIHtcbiAgICAgICAgc3dpdGNoIChlbnZlbG9wZS5yZXN1bHQudHlwZSkge1xuICAgICAgICAgIGNhc2UgJ3N0YXRlJzoge1xuICAgICAgICAgICAgb3B0cy5vbkNvbm5lY3Rpb25TdGF0ZUNoYW5nZT8uKGVudmVsb3BlLnJlc3VsdCk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnc3RhcnRlZCc6IHtcbiAgICAgICAgICAgIG9wdHMub25TdGFydGVkPy4oe1xuICAgICAgICAgICAgICBjb250ZXh0OiBlbnZlbG9wZS5jb250ZXh0LFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgICAgY2FzZSAnc3RvcHBlZCc6IHtcbiAgICAgICAgICAgIG9wdHMub25TdG9wcGVkPy4oKTtcbiAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgIH1cbiAgICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICBjYXNlIHVuZGVmaW5lZDoge1xuICAgICAgICAgICAgb3B0cy5vbkRhdGE/LihlbnZlbG9wZS5yZXN1bHQuZGF0YSk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0sXG4gICAgICBlcnJvcihlcnIpIHtcbiAgICAgICAgb3B0cy5vbkVycm9yPy4oZXJyKTtcbiAgICAgIH0sXG4gICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgb3B0cy5vbkNvbXBsZXRlPy4oKTtcbiAgICAgIH0sXG4gICAgfSk7XG4gIH1cbn1cbiIsImltcG9ydCB0eXBlIHsgQW55Um91dGVyIH0gZnJvbSAnQHRycGMvc2VydmVyL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydCc7XG5pbXBvcnQgdHlwZSB7IENyZWF0ZVRSUENDbGllbnRPcHRpb25zIH0gZnJvbSAnLi9pbnRlcm5hbHMvVFJQQ1VudHlwZWRDbGllbnQnO1xuaW1wb3J0IHsgVFJQQ1VudHlwZWRDbGllbnQgfSBmcm9tICcuL2ludGVybmFscy9UUlBDVW50eXBlZENsaWVudCc7XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUUlBDVW50eXBlZENsaWVudDxUUm91dGVyIGV4dGVuZHMgQW55Um91dGVyPihcbiAgb3B0czogQ3JlYXRlVFJQQ0NsaWVudE9wdGlvbnM8VFJvdXRlcj4sXG4pOiBUUlBDVW50eXBlZENsaWVudDxUUm91dGVyPiB7XG4gIHJldHVybiBuZXcgVFJQQ1VudHlwZWRDbGllbnQob3B0cyk7XG59XG5cbmV4cG9ydCB0eXBlIHtcbiAgQ3JlYXRlVFJQQ0NsaWVudE9wdGlvbnMsXG4gIFRSUENSZXF1ZXN0T3B0aW9ucyxcbn0gZnJvbSAnLi9pbnRlcm5hbHMvVFJQQ1VudHlwZWRDbGllbnQnO1xuZXhwb3J0IHsgVFJQQ1VudHlwZWRDbGllbnQgfSBmcm9tICcuL2ludGVybmFscy9UUlBDVW50eXBlZENsaWVudCc7XG4iLCIvKiBlc2xpbnQtZGlzYWJsZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tbm9uLW51bGwtYXNzZXJ0aW9uICovXG5pbXBvcnQgdHlwZSB7IFVuc3Vic2NyaWJhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHR5cGUge1xuICBBbnlQcm9jZWR1cmUsXG4gIEFueVJvdXRlcixcbiAgaW5mZXJDbGllbnRUeXBlcyxcbiAgaW5mZXJQcm9jZWR1cmVJbnB1dCxcbiAgSW5mZXJyYWJsZUNsaWVudFR5cGVzLFxuICBpbmZlclRyYW5zZm9ybWVkUHJvY2VkdXJlT3V0cHV0LFxuICBQcm9jZWR1cmVUeXBlLFxuICBSb3V0ZXJSZWNvcmQsXG59IGZyb20gJ0B0cnBjL3NlcnZlci91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQnO1xuaW1wb3J0IHtcbiAgY3JlYXRlRmxhdFByb3h5LFxuICBjcmVhdGVSZWN1cnNpdmVQcm94eSxcbn0gZnJvbSAnQHRycGMvc2VydmVyL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydCc7XG5pbXBvcnQgdHlwZSB7IENyZWF0ZVRSUENDbGllbnRPcHRpb25zIH0gZnJvbSAnLi9jcmVhdGVUUlBDVW50eXBlZENsaWVudCc7XG5pbXBvcnQgdHlwZSB7IFRSUENTdWJzY3JpcHRpb25PYnNlcnZlciB9IGZyb20gJy4vaW50ZXJuYWxzL1RSUENVbnR5cGVkQ2xpZW50JztcbmltcG9ydCB7IFRSUENVbnR5cGVkQ2xpZW50IH0gZnJvbSAnLi9pbnRlcm5hbHMvVFJQQ1VudHlwZWRDbGllbnQnO1xuaW1wb3J0IHR5cGUgeyBUUlBDUHJvY2VkdXJlT3B0aW9ucyB9IGZyb20gJy4vaW50ZXJuYWxzL3R5cGVzJztcbmltcG9ydCB0eXBlIHsgVFJQQ0NsaWVudEVycm9yIH0gZnJvbSAnLi9UUlBDQ2xpZW50RXJyb3InO1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgVFJQQ0NsaWVudH0gaW5zdGVhZCwgd2lsbCBiZSByZW1vdmVkIGluIHYxMlxuICoqL1xuZXhwb3J0IHR5cGUgaW5mZXJSb3V0ZXJDbGllbnQ8VFJvdXRlciBleHRlbmRzIEFueVJvdXRlcj4gPSBUUlBDQ2xpZW50PFRSb3V0ZXI+O1xuXG4vKipcbiAqIEBwdWJsaWNcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgVFJQQ0NsaWVudH0gaW5zdGVhZCwgd2lsbCBiZSByZW1vdmVkIGluIHYxMlxuICoqL1xuZXhwb3J0IHR5cGUgQ3JlYXRlVFJQQ0NsaWVudDxUUm91dGVyIGV4dGVuZHMgQW55Um91dGVyPiA9IFRSUENDbGllbnQ8VFJvdXRlcj47XG5cbmNvbnN0IHVudHlwZWRDbGllbnRTeW1ib2wgPSBTeW1ib2wuZm9yKCd0cnBjX3VudHlwZWRDbGllbnQnKTtcblxuLyoqXG4gKiBAcHVibGljXG4gKiovXG5leHBvcnQgdHlwZSBUUlBDQ2xpZW50PFRSb3V0ZXIgZXh0ZW5kcyBBbnlSb3V0ZXI+ID0gRGVjb3JhdGVkUHJvY2VkdXJlUmVjb3JkPFxuICB7XG4gICAgdHJhbnNmb3JtZXI6IFRSb3V0ZXJbJ19kZWYnXVsnX2NvbmZpZyddWyckdHlwZXMnXVsndHJhbnNmb3JtZXInXTtcbiAgICBlcnJvclNoYXBlOiBUUm91dGVyWydfZGVmJ11bJ19jb25maWcnXVsnJHR5cGVzJ11bJ2Vycm9yU2hhcGUnXTtcbiAgfSxcbiAgVFJvdXRlclsnX2RlZiddWydyZWNvcmQnXVxuPiAmIHtcbiAgW3VudHlwZWRDbGllbnRTeW1ib2xdOiBUUlBDVW50eXBlZENsaWVudDxUUm91dGVyPjtcbn07XG5cbnR5cGUgUmVzb2x2ZXJEZWYgPSB7XG4gIGlucHV0OiBhbnk7XG4gIG91dHB1dDogYW55O1xuICB0cmFuc2Zvcm1lcjogYm9vbGVhbjtcbiAgZXJyb3JTaGFwZTogYW55O1xufTtcblxudHlwZSBjb2VyY2VBc3luY0dlbmVyYXRvclRvSXRlcmFibGU8VD4gPVxuICBUIGV4dGVuZHMgQXN5bmNHZW5lcmF0b3I8aW5mZXIgJFQsIGluZmVyICRSZXR1cm4sIGluZmVyICROZXh0PlxuICAgID8gQXN5bmNJdGVyYWJsZTwkVCwgJFJldHVybiwgJE5leHQ+XG4gICAgOiBUO1xuXG4vKiogQGludGVybmFsICovXG5leHBvcnQgdHlwZSBSZXNvbHZlcjxURGVmIGV4dGVuZHMgUmVzb2x2ZXJEZWY+ID0gKFxuICBpbnB1dDogVERlZlsnaW5wdXQnXSxcbiAgb3B0cz86IFRSUENQcm9jZWR1cmVPcHRpb25zLFxuKSA9PiBQcm9taXNlPGNvZXJjZUFzeW5jR2VuZXJhdG9yVG9JdGVyYWJsZTxURGVmWydvdXRwdXQnXT4+O1xuXG50eXBlIFN1YnNjcmlwdGlvblJlc29sdmVyPFREZWYgZXh0ZW5kcyBSZXNvbHZlckRlZj4gPSAoXG4gIGlucHV0OiBURGVmWydpbnB1dCddLFxuICBvcHRzOiBQYXJ0aWFsPFxuICAgIFRSUENTdWJzY3JpcHRpb25PYnNlcnZlcjxURGVmWydvdXRwdXQnXSwgVFJQQ0NsaWVudEVycm9yPFREZWY+PlxuICA+ICZcbiAgICBUUlBDUHJvY2VkdXJlT3B0aW9ucyxcbikgPT4gVW5zdWJzY3JpYmFibGU7XG5cbnR5cGUgRGVjb3JhdGVQcm9jZWR1cmU8XG4gIFRUeXBlIGV4dGVuZHMgUHJvY2VkdXJlVHlwZSxcbiAgVERlZiBleHRlbmRzIFJlc29sdmVyRGVmLFxuPiA9IFRUeXBlIGV4dGVuZHMgJ3F1ZXJ5J1xuICA/IHtcbiAgICAgIHF1ZXJ5OiBSZXNvbHZlcjxURGVmPjtcbiAgICB9XG4gIDogVFR5cGUgZXh0ZW5kcyAnbXV0YXRpb24nXG4gICAgPyB7XG4gICAgICAgIG11dGF0ZTogUmVzb2x2ZXI8VERlZj47XG4gICAgICB9XG4gICAgOiBUVHlwZSBleHRlbmRzICdzdWJzY3JpcHRpb24nXG4gICAgICA/IHtcbiAgICAgICAgICBzdWJzY3JpYmU6IFN1YnNjcmlwdGlvblJlc29sdmVyPFREZWY+O1xuICAgICAgICB9XG4gICAgICA6IG5ldmVyO1xuXG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG50eXBlIERlY29yYXRlZFByb2NlZHVyZVJlY29yZDxcbiAgVFJvb3QgZXh0ZW5kcyBJbmZlcnJhYmxlQ2xpZW50VHlwZXMsXG4gIFRSZWNvcmQgZXh0ZW5kcyBSb3V0ZXJSZWNvcmQsXG4+ID0ge1xuICBbVEtleSBpbiBrZXlvZiBUUmVjb3JkXTogVFJlY29yZFtUS2V5XSBleHRlbmRzIGluZmVyICRWYWx1ZVxuICAgID8gJFZhbHVlIGV4dGVuZHMgQW55UHJvY2VkdXJlXG4gICAgICA/IERlY29yYXRlUHJvY2VkdXJlPFxuICAgICAgICAgICRWYWx1ZVsnX2RlZiddWyd0eXBlJ10sXG4gICAgICAgICAge1xuICAgICAgICAgICAgaW5wdXQ6IGluZmVyUHJvY2VkdXJlSW5wdXQ8JFZhbHVlPjtcbiAgICAgICAgICAgIG91dHB1dDogaW5mZXJUcmFuc2Zvcm1lZFByb2NlZHVyZU91dHB1dDxcbiAgICAgICAgICAgICAgaW5mZXJDbGllbnRUeXBlczxUUm9vdD4sXG4gICAgICAgICAgICAgICRWYWx1ZVxuICAgICAgICAgICAgPjtcbiAgICAgICAgICAgIGVycm9yU2hhcGU6IGluZmVyQ2xpZW50VHlwZXM8VFJvb3Q+WydlcnJvclNoYXBlJ107XG4gICAgICAgICAgICB0cmFuc2Zvcm1lcjogaW5mZXJDbGllbnRUeXBlczxUUm9vdD5bJ3RyYW5zZm9ybWVyJ107XG4gICAgICAgICAgfVxuICAgICAgICA+XG4gICAgICA6ICRWYWx1ZSBleHRlbmRzIFJvdXRlclJlY29yZFxuICAgICAgICA/IERlY29yYXRlZFByb2NlZHVyZVJlY29yZDxUUm9vdCwgJFZhbHVlPlxuICAgICAgICA6IG5ldmVyXG4gICAgOiBuZXZlcjtcbn07XG5cbmNvbnN0IGNsaWVudENhbGxUeXBlTWFwOiBSZWNvcmQ8XG4gIGtleW9mIERlY29yYXRlUHJvY2VkdXJlPGFueSwgYW55PixcbiAgUHJvY2VkdXJlVHlwZVxuPiA9IHtcbiAgcXVlcnk6ICdxdWVyeScsXG4gIG11dGF0ZTogJ211dGF0aW9uJyxcbiAgc3Vic2NyaWJlOiAnc3Vic2NyaXB0aW9uJyxcbn07XG5cbi8qKiBAaW50ZXJuYWwgKi9cbmV4cG9ydCBjb25zdCBjbGllbnRDYWxsVHlwZVRvUHJvY2VkdXJlVHlwZSA9IChcbiAgY2xpZW50Q2FsbFR5cGU6IHN0cmluZyxcbik6IFByb2NlZHVyZVR5cGUgPT4ge1xuICByZXR1cm4gY2xpZW50Q2FsbFR5cGVNYXBbY2xpZW50Q2FsbFR5cGUgYXMga2V5b2YgdHlwZW9mIGNsaWVudENhbGxUeXBlTWFwXTtcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUUlBDQ2xpZW50UHJveHk8VFJvdXRlciBleHRlbmRzIEFueVJvdXRlcj4oXG4gIGNsaWVudDogVFJQQ1VudHlwZWRDbGllbnQ8VFJvdXRlcj4sXG4pOiBUUlBDQ2xpZW50PFRSb3V0ZXI+IHtcbiAgY29uc3QgcHJveHkgPSBjcmVhdGVSZWN1cnNpdmVQcm94eTxUUlBDQ2xpZW50PFRSb3V0ZXI+PigoeyBwYXRoLCBhcmdzIH0pID0+IHtcbiAgICBjb25zdCBwYXRoQ29weSA9IFsuLi5wYXRoXTtcbiAgICBjb25zdCBwcm9jZWR1cmVUeXBlID0gY2xpZW50Q2FsbFR5cGVUb1Byb2NlZHVyZVR5cGUocGF0aENvcHkucG9wKCkhKTtcblxuICAgIGNvbnN0IGZ1bGxQYXRoID0gcGF0aENvcHkuam9pbignLicpO1xuXG4gICAgcmV0dXJuIChjbGllbnRbcHJvY2VkdXJlVHlwZV0gYXMgYW55KShmdWxsUGF0aCwgLi4uKGFyZ3MgYXMgYW55KSk7XG4gIH0pO1xuICByZXR1cm4gY3JlYXRlRmxhdFByb3h5PFRSUENDbGllbnQ8VFJvdXRlcj4+KChrZXkpID0+IHtcbiAgICBpZiAoa2V5ID09PSB1bnR5cGVkQ2xpZW50U3ltYm9sKSB7XG4gICAgICByZXR1cm4gY2xpZW50O1xuICAgIH1cbiAgICByZXR1cm4gcHJveHlba2V5XTtcbiAgfSk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjcmVhdGVUUlBDQ2xpZW50PFRSb3V0ZXIgZXh0ZW5kcyBBbnlSb3V0ZXI+KFxuICBvcHRzOiBDcmVhdGVUUlBDQ2xpZW50T3B0aW9uczxUUm91dGVyPixcbik6IFRSUENDbGllbnQ8VFJvdXRlcj4ge1xuICBjb25zdCBjbGllbnQgPSBuZXcgVFJQQ1VudHlwZWRDbGllbnQob3B0cyk7XG4gIGNvbnN0IHByb3h5ID0gY3JlYXRlVFJQQ0NsaWVudFByb3h5PFRSb3V0ZXI+KGNsaWVudCk7XG4gIHJldHVybiBwcm94eTtcbn1cblxuLyoqXG4gKiBHZXQgYW4gdW50eXBlZCBjbGllbnQgZnJvbSBhIHByb3h5IGNsaWVudFxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRVbnR5cGVkQ2xpZW50PFRSb3V0ZXIgZXh0ZW5kcyBBbnlSb3V0ZXI+KFxuICBjbGllbnQ6IFRSUENDbGllbnQ8VFJvdXRlcj4sXG4pOiBUUlBDVW50eXBlZENsaWVudDxUUm91dGVyPiB7XG4gIHJldHVybiBjbGllbnRbdW50eXBlZENsaWVudFN5bWJvbF07XG59XG4iLCJpbXBvcnQgdHlwZSB7IEFueVJvdXRlciwgUHJvY2VkdXJlVHlwZSB9IGZyb20gJ0B0cnBjL3NlcnZlcic7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHR5cGUgeyBUUlBDRXJyb3JTaGFwZSwgVFJQQ1Jlc3BvbnNlIH0gZnJvbSAnQHRycGMvc2VydmVyL3JwYyc7XG5pbXBvcnQgeyBqc29ubFN0cmVhbUNvbnN1bWVyIH0gZnJvbSAnQHRycGMvc2VydmVyL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydCc7XG5pbXBvcnQgdHlwZSB7IEJhdGNoTG9hZGVyIH0gZnJvbSAnLi4vaW50ZXJuYWxzL2RhdGFMb2FkZXInO1xuaW1wb3J0IHsgZGF0YUxvYWRlciB9IGZyb20gJy4uL2ludGVybmFscy9kYXRhTG9hZGVyJztcbmltcG9ydCB7IGFsbEFib3J0U2lnbmFscywgcmFjZUFib3J0U2lnbmFscyB9IGZyb20gJy4uL2ludGVybmFscy9zaWduYWxzJztcbmltcG9ydCB0eXBlIHsgTm9uRW1wdHlBcnJheSB9IGZyb20gJy4uL2ludGVybmFscy90eXBlcyc7XG5pbXBvcnQgeyBUUlBDQ2xpZW50RXJyb3IgfSBmcm9tICcuLi9UUlBDQ2xpZW50RXJyb3InO1xuaW1wb3J0IHR5cGUgeyBIVFRQQmF0Y2hMaW5rT3B0aW9ucyB9IGZyb20gJy4vSFRUUEJhdGNoTGlua09wdGlvbnMnO1xuaW1wb3J0IHR5cGUgeyBIVFRQUmVzdWx0IH0gZnJvbSAnLi9pbnRlcm5hbHMvaHR0cFV0aWxzJztcbmltcG9ydCB7XG4gIGZldGNoSFRUUFJlc3BvbnNlLFxuICBnZXRCb2R5LFxuICBnZXRVcmwsXG4gIHJlc29sdmVIVFRQTGlua09wdGlvbnMsXG59IGZyb20gJy4vaW50ZXJuYWxzL2h0dHBVdGlscyc7XG5pbXBvcnQgdHlwZSB7IE9wZXJhdGlvbiwgVFJQQ0xpbmsgfSBmcm9tICcuL3R5cGVzJztcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL2NsaWVudC9saW5rcy9odHRwQmF0Y2hTdHJlYW1MaW5rXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBodHRwQmF0Y2hTdHJlYW1MaW5rPFRSb3V0ZXIgZXh0ZW5kcyBBbnlSb3V0ZXI+KFxuICBvcHRzOiBIVFRQQmF0Y2hMaW5rT3B0aW9uczxUUm91dGVyWydfZGVmJ11bJ19jb25maWcnXVsnJHR5cGVzJ10+LFxuKTogVFJQQ0xpbms8VFJvdXRlcj4ge1xuICBjb25zdCByZXNvbHZlZE9wdHMgPSByZXNvbHZlSFRUUExpbmtPcHRpb25zKG9wdHMpO1xuICBjb25zdCBtYXhVUkxMZW5ndGggPSBvcHRzLm1heFVSTExlbmd0aCA/PyBJbmZpbml0eTtcbiAgY29uc3QgbWF4SXRlbXMgPSBvcHRzLm1heEl0ZW1zID8/IEluZmluaXR5O1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgY29uc3QgYmF0Y2hMb2FkZXIgPSAoXG4gICAgICB0eXBlOiBQcm9jZWR1cmVUeXBlLFxuICAgICk6IEJhdGNoTG9hZGVyPE9wZXJhdGlvbiwgSFRUUFJlc3VsdD4gPT4ge1xuICAgICAgcmV0dXJuIHtcbiAgICAgICAgdmFsaWRhdGUoYmF0Y2hPcHMpIHtcbiAgICAgICAgICBpZiAobWF4VVJMTGVuZ3RoID09PSBJbmZpbml0eSAmJiBtYXhJdGVtcyA9PT0gSW5maW5pdHkpIHtcbiAgICAgICAgICAgIC8vIGVzY2FwZSBoYXRjaCBmb3IgcXVpY2sgY2FsY3NcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoYmF0Y2hPcHMubGVuZ3RoID4gbWF4SXRlbXMpIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgcGF0aCA9IGJhdGNoT3BzLm1hcCgob3ApID0+IG9wLnBhdGgpLmpvaW4oJywnKTtcbiAgICAgICAgICBjb25zdCBpbnB1dHMgPSBiYXRjaE9wcy5tYXAoKG9wKSA9PiBvcC5pbnB1dCk7XG5cbiAgICAgICAgICBjb25zdCB1cmwgPSBnZXRVcmwoe1xuICAgICAgICAgICAgLi4ucmVzb2x2ZWRPcHRzLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgIHBhdGgsXG4gICAgICAgICAgICBpbnB1dHMsXG4gICAgICAgICAgICBzaWduYWw6IG51bGwsXG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgICByZXR1cm4gdXJsLmxlbmd0aCA8PSBtYXhVUkxMZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGFzeW5jIGZldGNoKGJhdGNoT3BzKSB7XG4gICAgICAgICAgY29uc3QgcGF0aCA9IGJhdGNoT3BzLm1hcCgob3ApID0+IG9wLnBhdGgpLmpvaW4oJywnKTtcbiAgICAgICAgICBjb25zdCBpbnB1dHMgPSBiYXRjaE9wcy5tYXAoKG9wKSA9PiBvcC5pbnB1dCk7XG5cbiAgICAgICAgICBjb25zdCBiYXRjaFNpZ25hbHMgPSBhbGxBYm9ydFNpZ25hbHMoXG4gICAgICAgICAgICAuLi5iYXRjaE9wcy5tYXAoKG9wKSA9PiBvcC5zaWduYWwpLFxuICAgICAgICAgICk7XG4gICAgICAgICAgY29uc3QgYWJvcnRDb250cm9sbGVyID0gbmV3IEFib3J0Q29udHJvbGxlcigpO1xuXG4gICAgICAgICAgY29uc3QgcmVzcG9uc2VQcm9taXNlID0gZmV0Y2hIVFRQUmVzcG9uc2Uoe1xuICAgICAgICAgICAgLi4ucmVzb2x2ZWRPcHRzLFxuICAgICAgICAgICAgc2lnbmFsOiByYWNlQWJvcnRTaWduYWxzKGJhdGNoU2lnbmFscywgYWJvcnRDb250cm9sbGVyLnNpZ25hbCksXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgY29udGVudFR5cGVIZWFkZXI6ICdhcHBsaWNhdGlvbi9qc29uJyxcbiAgICAgICAgICAgIHRycGNBY2NlcHRIZWFkZXI6ICdhcHBsaWNhdGlvbi9qc29ubCcsXG4gICAgICAgICAgICBnZXRVcmwsXG4gICAgICAgICAgICBnZXRCb2R5LFxuICAgICAgICAgICAgaW5wdXRzLFxuICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgIGhlYWRlcnMoKSB7XG4gICAgICAgICAgICAgIGlmICghb3B0cy5oZWFkZXJzKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGlmICh0eXBlb2Ygb3B0cy5oZWFkZXJzID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9wdHMuaGVhZGVycyh7XG4gICAgICAgICAgICAgICAgICBvcExpc3Q6IGJhdGNoT3BzIGFzIE5vbkVtcHR5QXJyYXk8T3BlcmF0aW9uPixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICByZXR1cm4gb3B0cy5oZWFkZXJzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IHJlcyA9IGF3YWl0IHJlc3BvbnNlUHJvbWlzZTtcbiAgICAgICAgICBjb25zdCBbaGVhZF0gPSBhd2FpdCBqc29ubFN0cmVhbUNvbnN1bWVyPFxuICAgICAgICAgICAgUmVjb3JkPHN0cmluZywgUHJvbWlzZTxhbnk+PlxuICAgICAgICAgID4oe1xuICAgICAgICAgICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby1ub24tbnVsbC1hc3NlcnRpb25cbiAgICAgICAgICAgIGZyb206IHJlcy5ib2R5ISxcbiAgICAgICAgICAgIGRlc2VyaWFsaXplOiByZXNvbHZlZE9wdHMudHJhbnNmb3JtZXIub3V0cHV0LmRlc2VyaWFsaXplLFxuICAgICAgICAgICAgLy8gb25FcnJvcjogY29uc29sZS5lcnJvcixcbiAgICAgICAgICAgIGZvcm1hdEVycm9yKG9wdHMpIHtcbiAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBvcHRzLmVycm9yIGFzIFRSUENFcnJvclNoYXBlO1xuICAgICAgICAgICAgICByZXR1cm4gVFJQQ0NsaWVudEVycm9yLmZyb20oe1xuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBhYm9ydENvbnRyb2xsZXIsXG4gICAgICAgICAgfSk7XG4gICAgICAgICAgY29uc3QgcHJvbWlzZXMgPSBPYmplY3Qua2V5cyhiYXRjaE9wcykubWFwKFxuICAgICAgICAgICAgYXN5bmMgKGtleSk6IFByb21pc2U8SFRUUFJlc3VsdD4gPT4ge1xuICAgICAgICAgICAgICBsZXQganNvbjogVFJQQ1Jlc3BvbnNlID0gYXdhaXQgUHJvbWlzZS5yZXNvbHZlKGhlYWRba2V5XSk7XG5cbiAgICAgICAgICAgICAgaWYgKCdyZXN1bHQnIGluIGpzb24pIHtcbiAgICAgICAgICAgICAgICAvKipcbiAgICAgICAgICAgICAgICAgKiBOb3QgdmVyeSBwcmV0dHksIGJ1dCB3ZSBuZWVkIHRvIHVud3JhcCBuZXN0ZWQgZGF0YSBhcyBwcm9taXNlc1xuICAgICAgICAgICAgICAgICAqIE91ciBzdHJlYW0gcHJvZHVjZXIgd2lsbCBvbmx5IHJlc29sdmUgdG9wLWxldmVsIGFzeW5jIHZhbHVlcyBvciBhc3luYyB2YWx1ZXMgdGhhdCBhcmUgZGlyZWN0bHkgbmVzdGVkIGluIGFub3RoZXIgYXN5bmMgdmFsdWVcbiAgICAgICAgICAgICAgICAgKi9cbiAgICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBQcm9taXNlLnJlc29sdmUoanNvbi5yZXN1bHQpO1xuICAgICAgICAgICAgICAgIGpzb24gPSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZGF0YTogYXdhaXQgUHJvbWlzZS5yZXNvbHZlKHJlc3VsdC5kYXRhKSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAganNvbixcbiAgICAgICAgICAgICAgICBtZXRhOiB7XG4gICAgICAgICAgICAgICAgICByZXNwb25zZTogcmVzLFxuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICk7XG4gICAgICAgICAgcmV0dXJuIHByb21pc2VzO1xuICAgICAgICB9LFxuICAgICAgfTtcbiAgICB9O1xuXG4gICAgY29uc3QgcXVlcnkgPSBkYXRhTG9hZGVyKGJhdGNoTG9hZGVyKCdxdWVyeScpKTtcbiAgICBjb25zdCBtdXRhdGlvbiA9IGRhdGFMb2FkZXIoYmF0Y2hMb2FkZXIoJ211dGF0aW9uJykpO1xuXG4gICAgY29uc3QgbG9hZGVycyA9IHsgcXVlcnksIG11dGF0aW9uIH07XG4gICAgcmV0dXJuICh7IG9wIH0pID0+IHtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLS0gQHByZXNlcnZlICovXG4gICAgICAgIGlmIChvcC50eXBlID09PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgICdTdWJzY3JpcHRpb25zIGFyZSB1bnN1cHBvcnRlZCBieSBgaHR0cEJhdGNoU3RyZWFtTGlua2AgLSB1c2UgYGh0dHBTdWJzY3JpcHRpb25MaW5rYCBvciBgd3NMaW5rYCcsXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBsb2FkZXIgPSBsb2FkZXJzW29wLnR5cGVdO1xuICAgICAgICBjb25zdCBwcm9taXNlID0gbG9hZGVyLmxvYWQob3ApO1xuXG4gICAgICAgIGxldCBfcmVzID0gdW5kZWZpbmVkIGFzIEhUVFBSZXN1bHQgfCB1bmRlZmluZWQ7XG4gICAgICAgIHByb21pc2VcbiAgICAgICAgICAudGhlbigocmVzKSA9PiB7XG4gICAgICAgICAgICBfcmVzID0gcmVzO1xuICAgICAgICAgICAgaWYgKCdlcnJvcicgaW4gcmVzLmpzb24pIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoXG4gICAgICAgICAgICAgICAgVFJQQ0NsaWVudEVycm9yLmZyb20ocmVzLmpzb24sIHtcbiAgICAgICAgICAgICAgICAgIG1ldGE6IHJlcy5tZXRhLFxuICAgICAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICB9IGVsc2UgaWYgKCdyZXN1bHQnIGluIHJlcy5qc29uKSB7XG4gICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICAgIGNvbnRleHQ6IHJlcy5tZXRhLFxuICAgICAgICAgICAgICAgIHJlc3VsdDogcmVzLmpzb24ucmVzdWx0LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgIH0pXG4gICAgICAgICAgLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKFxuICAgICAgICAgICAgICBUUlBDQ2xpZW50RXJyb3IuZnJvbShlcnIsIHtcbiAgICAgICAgICAgICAgICBtZXRhOiBfcmVzPy5tZXRhLFxuICAgICAgICAgICAgICB9KSxcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICAvLyBub29wXG4gICAgICAgIH07XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuXG4vKipcbiAqIEBkZXByZWNhdGVkIHVzZSB7QGxpbmsgaHR0cEJhdGNoU3RyZWFtTGlua30gaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgdW5zdGFibGVfaHR0cEJhdGNoU3RyZWFtTGluayA9IGh0dHBCYXRjaFN0cmVhbUxpbms7XG4iLCJleHBvcnQgZnVuY3Rpb24gaW5wdXRXaXRoVHJhY2tlZEV2ZW50SWQoXG4gIGlucHV0OiB1bmtub3duLFxuICBsYXN0RXZlbnRJZDogc3RyaW5nIHwgdW5kZWZpbmVkLFxuKSB7XG4gIGlmICghbGFzdEV2ZW50SWQpIHtcbiAgICByZXR1cm4gaW5wdXQ7XG4gIH1cbiAgaWYgKGlucHV0ICE9IG51bGwgJiYgdHlwZW9mIGlucHV0ICE9PSAnb2JqZWN0Jykge1xuICAgIHJldHVybiBpbnB1dDtcbiAgfVxuICByZXR1cm4ge1xuICAgIC4uLihpbnB1dCA/PyB7fSksXG4gICAgbGFzdEV2ZW50SWQsXG4gIH07XG59XG4iLCJmdW5jdGlvbiBfYXN5bmNJdGVyYXRvcihyKSB7XG4gIHZhciBuLFxuICAgIHQsXG4gICAgbyxcbiAgICBlID0gMjtcbiAgZm9yIChcInVuZGVmaW5lZFwiICE9IHR5cGVvZiBTeW1ib2wgJiYgKHQgPSBTeW1ib2wuYXN5bmNJdGVyYXRvciwgbyA9IFN5bWJvbC5pdGVyYXRvcik7IGUtLTspIHtcbiAgICBpZiAodCAmJiBudWxsICE9IChuID0gclt0XSkpIHJldHVybiBuLmNhbGwocik7XG4gICAgaWYgKG8gJiYgbnVsbCAhPSAobiA9IHJbb10pKSByZXR1cm4gbmV3IEFzeW5jRnJvbVN5bmNJdGVyYXRvcihuLmNhbGwocikpO1xuICAgIHQgPSBcIkBAYXN5bmNJdGVyYXRvclwiLCBvID0gXCJAQGl0ZXJhdG9yXCI7XG4gIH1cbiAgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBpcyBub3QgYXN5bmMgaXRlcmFibGVcIik7XG59XG5mdW5jdGlvbiBBc3luY0Zyb21TeW5jSXRlcmF0b3Iocikge1xuICBmdW5jdGlvbiBBc3luY0Zyb21TeW5jSXRlcmF0b3JDb250aW51YXRpb24ocikge1xuICAgIGlmIChPYmplY3QocikgIT09IHIpIHJldHVybiBQcm9taXNlLnJlamVjdChuZXcgVHlwZUVycm9yKHIgKyBcIiBpcyBub3QgYW4gb2JqZWN0LlwiKSk7XG4gICAgdmFyIG4gPSByLmRvbmU7XG4gICAgcmV0dXJuIFByb21pc2UucmVzb2x2ZShyLnZhbHVlKS50aGVuKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICB2YWx1ZTogcixcbiAgICAgICAgZG9uZTogblxuICAgICAgfTtcbiAgICB9KTtcbiAgfVxuICByZXR1cm4gQXN5bmNGcm9tU3luY0l0ZXJhdG9yID0gZnVuY3Rpb24gQXN5bmNGcm9tU3luY0l0ZXJhdG9yKHIpIHtcbiAgICB0aGlzLnMgPSByLCB0aGlzLm4gPSByLm5leHQ7XG4gIH0sIEFzeW5jRnJvbVN5bmNJdGVyYXRvci5wcm90b3R5cGUgPSB7XG4gICAgczogbnVsbCxcbiAgICBuOiBudWxsLFxuICAgIG5leHQ6IGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICByZXR1cm4gQXN5bmNGcm9tU3luY0l0ZXJhdG9yQ29udGludWF0aW9uKHRoaXMubi5hcHBseSh0aGlzLnMsIGFyZ3VtZW50cykpO1xuICAgIH0sXG4gICAgXCJyZXR1cm5cIjogZnVuY3Rpb24gX3JldHVybihyKSB7XG4gICAgICB2YXIgbiA9IHRoaXMuc1tcInJldHVyblwiXTtcbiAgICAgIHJldHVybiB2b2lkIDAgPT09IG4gPyBQcm9taXNlLnJlc29sdmUoe1xuICAgICAgICB2YWx1ZTogcixcbiAgICAgICAgZG9uZTogITBcbiAgICAgIH0pIDogQXN5bmNGcm9tU3luY0l0ZXJhdG9yQ29udGludWF0aW9uKG4uYXBwbHkodGhpcy5zLCBhcmd1bWVudHMpKTtcbiAgICB9LFxuICAgIFwidGhyb3dcIjogZnVuY3Rpb24gX3Rocm93KHIpIHtcbiAgICAgIHZhciBuID0gdGhpcy5zW1wicmV0dXJuXCJdO1xuICAgICAgcmV0dXJuIHZvaWQgMCA9PT0gbiA/IFByb21pc2UucmVqZWN0KHIpIDogQXN5bmNGcm9tU3luY0l0ZXJhdG9yQ29udGludWF0aW9uKG4uYXBwbHkodGhpcy5zLCBhcmd1bWVudHMpKTtcbiAgICB9XG4gIH0sIG5ldyBBc3luY0Zyb21TeW5jSXRlcmF0b3Iocik7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9hc3luY0l0ZXJhdG9yLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwiaW1wb3J0IHsgYmVoYXZpb3JTdWJqZWN0LCBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHR5cGUgeyBUUlBDRXJyb3JTaGFwZSwgVFJQQ1Jlc3VsdCB9IGZyb20gJ0B0cnBjL3NlcnZlci9ycGMnO1xuaW1wb3J0IHR5cGUge1xuICBBbnlDbGllbnRUeXBlcyxcbiAgRXZlbnRTb3VyY2VMaWtlLFxuICBpbmZlckNsaWVudFR5cGVzLFxuICBJbmZlcnJhYmxlQ2xpZW50VHlwZXMsXG59IGZyb20gJ0B0cnBjL3NlcnZlci91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQnO1xuaW1wb3J0IHtcbiAgcmV0cnlhYmxlUnBjQ29kZXMsXG4gIHJ1bixcbiAgc3NlU3RyZWFtQ29uc3VtZXIsXG59IGZyb20gJ0B0cnBjL3NlcnZlci91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQnO1xuaW1wb3J0IHsgaW5wdXRXaXRoVHJhY2tlZEV2ZW50SWQgfSBmcm9tICcuLi9pbnRlcm5hbHMvaW5wdXRXaXRoVHJhY2tlZEV2ZW50SWQnO1xuaW1wb3J0IHsgcmFjZUFib3J0U2lnbmFscyB9IGZyb20gJy4uL2ludGVybmFscy9zaWduYWxzJztcbmltcG9ydCB7IFRSUENDbGllbnRFcnJvciB9IGZyb20gJy4uL1RSUENDbGllbnRFcnJvcic7XG5pbXBvcnQgdHlwZSB7IFRSUENDb25uZWN0aW9uU3RhdGUgfSBmcm9tICcuLi91bnN0YWJsZS1pbnRlcm5hbHMnO1xuaW1wb3J0IHsgZ2V0VHJhbnNmb3JtZXIsIHR5cGUgVHJhbnNmb3JtZXJPcHRpb25zIH0gZnJvbSAnLi4vdW5zdGFibGUtaW50ZXJuYWxzJztcbmltcG9ydCB7IGdldFVybCB9IGZyb20gJy4vaW50ZXJuYWxzL2h0dHBVdGlscyc7XG5pbXBvcnQge1xuICByZXN1bHRPZixcbiAgdHlwZSBVcmxPcHRpb25zV2l0aENvbm5lY3Rpb25QYXJhbXMsXG59IGZyb20gJy4vaW50ZXJuYWxzL3VybFdpdGhDb25uZWN0aW9uUGFyYW1zJztcbmltcG9ydCB0eXBlIHsgT3BlcmF0aW9uLCBUUlBDTGluayB9IGZyb20gJy4vdHlwZXMnO1xuXG5hc3luYyBmdW5jdGlvbiB1cmxXaXRoQ29ubmVjdGlvblBhcmFtcyhcbiAgb3B0czogVXJsT3B0aW9uc1dpdGhDb25uZWN0aW9uUGFyYW1zLFxuKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgbGV0IHVybCA9IGF3YWl0IHJlc3VsdE9mKG9wdHMudXJsKTtcbiAgaWYgKG9wdHMuY29ubmVjdGlvblBhcmFtcykge1xuICAgIGNvbnN0IHBhcmFtcyA9IGF3YWl0IHJlc3VsdE9mKG9wdHMuY29ubmVjdGlvblBhcmFtcyk7XG5cbiAgICBjb25zdCBwcmVmaXggPSB1cmwuaW5jbHVkZXMoJz8nKSA/ICcmJyA6ICc/JztcbiAgICB1cmwgKz1cbiAgICAgIHByZWZpeCArICdjb25uZWN0aW9uUGFyYW1zPScgKyBlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkocGFyYW1zKSk7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufVxuXG50eXBlIEhUVFBTdWJzY3JpcHRpb25MaW5rT3B0aW9uczxcbiAgVFJvb3QgZXh0ZW5kcyBBbnlDbGllbnRUeXBlcyxcbiAgVEV2ZW50U291cmNlIGV4dGVuZHMgRXZlbnRTb3VyY2VMaWtlLkFueUNvbnN0cnVjdG9yID0gdHlwZW9mIEV2ZW50U291cmNlLFxuPiA9IHtcbiAgLyoqXG4gICAqIEV2ZW50U291cmNlIHBvbnlmaWxsXG4gICAqL1xuICBFdmVudFNvdXJjZT86IFRFdmVudFNvdXJjZTtcbiAgLyoqXG4gICAqIEV2ZW50U291cmNlIG9wdGlvbnMgb3IgYSBjYWxsYmFjayB0aGF0IHJldHVybnMgdGhlbVxuICAgKi9cbiAgZXZlbnRTb3VyY2VPcHRpb25zPzpcbiAgICB8IEV2ZW50U291cmNlTGlrZS5Jbml0RGljdE9mPFRFdmVudFNvdXJjZT5cbiAgICB8ICgob3B0czoge1xuICAgICAgICBvcDogT3BlcmF0aW9uO1xuICAgICAgfSkgPT5cbiAgICAgICAgfCBFdmVudFNvdXJjZUxpa2UuSW5pdERpY3RPZjxURXZlbnRTb3VyY2U+XG4gICAgICAgIHwgUHJvbWlzZTxFdmVudFNvdXJjZUxpa2UuSW5pdERpY3RPZjxURXZlbnRTb3VyY2U+Pik7XG59ICYgVHJhbnNmb3JtZXJPcHRpb25zPFRSb290PiAmXG4gIFVybE9wdGlvbnNXaXRoQ29ubmVjdGlvblBhcmFtcztcblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL2NsaWVudC9saW5rcy9odHRwU3Vic2NyaXB0aW9uTGlua1xuICovXG5leHBvcnQgZnVuY3Rpb24gaHR0cFN1YnNjcmlwdGlvbkxpbms8XG4gIFRJbmZlcnJhYmxlIGV4dGVuZHMgSW5mZXJyYWJsZUNsaWVudFR5cGVzLFxuICBURXZlbnRTb3VyY2UgZXh0ZW5kcyBFdmVudFNvdXJjZUxpa2UuQW55Q29uc3RydWN0b3IsXG4+KFxuICBvcHRzOiBIVFRQU3Vic2NyaXB0aW9uTGlua09wdGlvbnM8XG4gICAgaW5mZXJDbGllbnRUeXBlczxUSW5mZXJyYWJsZT4sXG4gICAgVEV2ZW50U291cmNlXG4gID4sXG4pOiBUUlBDTGluazxUSW5mZXJyYWJsZT4ge1xuICBjb25zdCB0cmFuc2Zvcm1lciA9IGdldFRyYW5zZm9ybWVyKG9wdHMudHJhbnNmb3JtZXIpO1xuXG4gIHJldHVybiAoKSA9PiB7XG4gICAgcmV0dXJuICh7IG9wIH0pID0+IHtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICBjb25zdCB7IHR5cGUsIHBhdGgsIGlucHV0IH0gPSBvcDtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgLS0gQHByZXNlcnZlICovXG4gICAgICAgIGlmICh0eXBlICE9PSAnc3Vic2NyaXB0aW9uJykge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcignaHR0cFN1YnNjcmlwdGlvbkxpbmsgb25seSBzdXBwb3J0cyBzdWJzY3JpcHRpb25zJyk7XG4gICAgICAgIH1cblxuICAgICAgICBsZXQgbGFzdEV2ZW50SWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgYWMgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG4gICAgICAgIGNvbnN0IHNpZ25hbCA9IHJhY2VBYm9ydFNpZ25hbHMob3Auc2lnbmFsLCBhYy5zaWduYWwpO1xuICAgICAgICBjb25zdCBldmVudFNvdXJjZVN0cmVhbSA9IHNzZVN0cmVhbUNvbnN1bWVyPHtcbiAgICAgICAgICBFdmVudFNvdXJjZTogVEV2ZW50U291cmNlO1xuICAgICAgICAgIGRhdGE6IFBhcnRpYWw8e1xuICAgICAgICAgICAgaWQ/OiBzdHJpbmc7XG4gICAgICAgICAgICBkYXRhOiB1bmtub3duO1xuICAgICAgICAgIH0+O1xuICAgICAgICAgIGVycm9yOiBUUlBDRXJyb3JTaGFwZTtcbiAgICAgICAgfT4oe1xuICAgICAgICAgIHVybDogYXN5bmMgKCkgPT5cbiAgICAgICAgICAgIGdldFVybCh7XG4gICAgICAgICAgICAgIHRyYW5zZm9ybWVyLFxuICAgICAgICAgICAgICB1cmw6IGF3YWl0IHVybFdpdGhDb25uZWN0aW9uUGFyYW1zKG9wdHMpLFxuICAgICAgICAgICAgICBpbnB1dDogaW5wdXRXaXRoVHJhY2tlZEV2ZW50SWQoaW5wdXQsIGxhc3RFdmVudElkKSxcbiAgICAgICAgICAgICAgcGF0aCxcbiAgICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICAgICAgc2lnbmFsOiBudWxsLFxuICAgICAgICAgICAgfSksXG4gICAgICAgICAgaW5pdDogKCkgPT4gcmVzdWx0T2Yob3B0cy5ldmVudFNvdXJjZU9wdGlvbnMsIHsgb3AgfSksXG4gICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgIGRlc2VyaWFsaXplOiB0cmFuc2Zvcm1lci5vdXRwdXQuZGVzZXJpYWxpemUsXG4gICAgICAgICAgRXZlbnRTb3VyY2U6XG4gICAgICAgICAgICBvcHRzLkV2ZW50U291cmNlID8/XG4gICAgICAgICAgICAoZ2xvYmFsVGhpcy5FdmVudFNvdXJjZSBhcyBuZXZlciBhcyBURXZlbnRTb3VyY2UpLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjb25uZWN0aW9uU3RhdGUgPSBiZWhhdmlvclN1YmplY3Q8XG4gICAgICAgICAgVFJQQ0Nvbm5lY3Rpb25TdGF0ZTxUUlBDQ2xpZW50RXJyb3I8YW55Pj5cbiAgICAgICAgPih7XG4gICAgICAgICAgdHlwZTogJ3N0YXRlJyxcbiAgICAgICAgICBzdGF0ZTogJ2Nvbm5lY3RpbmcnLFxuICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICB9KTtcblxuICAgICAgICBjb25zdCBjb25uZWN0aW9uU3ViID0gY29ubmVjdGlvblN0YXRlLnN1YnNjcmliZSh7XG4gICAgICAgICAgbmV4dChzdGF0ZSkge1xuICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7XG4gICAgICAgICAgICAgIHJlc3VsdDogc3RhdGUsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9LFxuICAgICAgICB9KTtcbiAgICAgICAgcnVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICBmb3IgYXdhaXQgKGNvbnN0IGNodW5rIG9mIGV2ZW50U291cmNlU3RyZWFtKSB7XG4gICAgICAgICAgICBzd2l0Y2ggKGNodW5rLnR5cGUpIHtcbiAgICAgICAgICAgICAgY2FzZSAncGluZyc6XG4gICAgICAgICAgICAgICAgLy8gZG8gbm90aGluZ1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICBjYXNlICdkYXRhJzpcbiAgICAgICAgICAgICAgICBjb25zdCBjaHVua0RhdGEgPSBjaHVuay5kYXRhO1xuXG4gICAgICAgICAgICAgICAgbGV0IHJlc3VsdDogVFJQQ1Jlc3VsdDx1bmtub3duPjtcbiAgICAgICAgICAgICAgICBpZiAoY2h1bmtEYXRhLmlkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBpZiB0aGUgYHRyYWNrZWQoKWAtaGVscGVyIGlzIHVzZWQsIHdlIGFsd2F5cyBoYXZlIGFuIGBpZGAgZmllbGRcbiAgICAgICAgICAgICAgICAgIGxhc3RFdmVudElkID0gY2h1bmtEYXRhLmlkO1xuICAgICAgICAgICAgICAgICAgcmVzdWx0ID0ge1xuICAgICAgICAgICAgICAgICAgICBpZDogY2h1bmtEYXRhLmlkLFxuICAgICAgICAgICAgICAgICAgICBkYXRhOiBjaHVua0RhdGEsXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgICByZXN1bHQgPSB7XG4gICAgICAgICAgICAgICAgICAgIGRhdGE6IGNodW5rRGF0YS5kYXRhLFxuICAgICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdCxcbiAgICAgICAgICAgICAgICAgIGNvbnRleHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgZXZlbnRTb3VyY2U6IGNodW5rLmV2ZW50U291cmNlLFxuICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgY2FzZSAnY29ubmVjdGVkJzoge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICAgICAgcmVzdWx0OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdGFydGVkJyxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICBjb250ZXh0OiB7XG4gICAgICAgICAgICAgICAgICAgIGV2ZW50U291cmNlOiBjaHVuay5ldmVudFNvdXJjZSxcbiAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgY29ubmVjdGlvblN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0YXRlJyxcbiAgICAgICAgICAgICAgICAgIHN0YXRlOiAncGVuZGluZycsXG4gICAgICAgICAgICAgICAgICBlcnJvcjogbnVsbCxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlICdzZXJpYWxpemVkLWVycm9yJzoge1xuICAgICAgICAgICAgICAgIGNvbnN0IGVycm9yID0gVFJQQ0NsaWVudEVycm9yLmZyb20oeyBlcnJvcjogY2h1bmsuZXJyb3IgfSk7XG5cbiAgICAgICAgICAgICAgICBpZiAocmV0cnlhYmxlUnBjQ29kZXMuaW5jbHVkZXMoY2h1bmsuZXJyb3IuY29kZSkpIHtcbiAgICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgICBjb25uZWN0aW9uU3RhdGUubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdGF0ZScsXG4gICAgICAgICAgICAgICAgICAgIHN0YXRlOiAnY29ubmVjdGluZycsXG4gICAgICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy9cbiAgICAgICAgICAgICAgICAvLyBub24tcmV0cnlhYmxlIGVycm9yLCBjYW5jZWwgdGhlIHN1YnNjcmlwdGlvblxuICAgICAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGNhc2UgJ2Nvbm5lY3RpbmcnOiB7XG4gICAgICAgICAgICAgICAgY29uc3QgbGFzdFN0YXRlID0gY29ubmVjdGlvblN0YXRlLmdldCgpO1xuXG4gICAgICAgICAgICAgICAgY29uc3QgZXJyb3IgPSBjaHVuay5ldmVudCAmJiBUUlBDQ2xpZW50RXJyb3IuZnJvbShjaHVuay5ldmVudCk7XG4gICAgICAgICAgICAgICAgaWYgKCFlcnJvciAmJiBsYXN0U3RhdGUuc3RhdGUgPT09ICdjb25uZWN0aW5nJykge1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgY29ubmVjdGlvblN0YXRlLm5leHQoe1xuICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0YXRlJyxcbiAgICAgICAgICAgICAgICAgIHN0YXRlOiAnY29ubmVjdGluZycsXG4gICAgICAgICAgICAgICAgICBlcnJvcixcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBjYXNlICd0aW1lb3V0Jzoge1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25TdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdGF0ZScsXG4gICAgICAgICAgICAgICAgICBzdGF0ZTogJ2Nvbm5lY3RpbmcnLFxuICAgICAgICAgICAgICAgICAgZXJyb3I6IG5ldyBUUlBDQ2xpZW50RXJyb3IoXG4gICAgICAgICAgICAgICAgICAgIGBUaW1lb3V0IG9mICR7Y2h1bmsubXN9bXMgcmVhY2hlZCB3aGlsZSB3YWl0aW5nIGZvciBhIHJlc3BvbnNlYCxcbiAgICAgICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7XG4gICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ3N0b3BwZWQnLFxuICAgICAgICAgICAgfSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBjb25uZWN0aW9uU3RhdGUubmV4dCh7XG4gICAgICAgICAgICB0eXBlOiAnc3RhdGUnLFxuICAgICAgICAgICAgc3RhdGU6ICdpZGxlJyxcbiAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgIH0pLmNhdGNoKChlcnJvcikgPT4ge1xuICAgICAgICAgIG9ic2VydmVyLmVycm9yKFRSUENDbGllbnRFcnJvci5mcm9tKGVycm9yKSk7XG4gICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiAoKSA9PiB7XG4gICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICBhYy5hYm9ydCgpO1xuICAgICAgICAgIGNvbm5lY3Rpb25TdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgfTtcbiAgICAgIH0pO1xuICAgIH07XG4gIH07XG59XG5cbi8qKlxuICogQGRlcHJlY2F0ZWQgdXNlIHtAbGluayBodHRwU3Vic2NyaXB0aW9uTGlua30gaW5zdGVhZFxuICovXG5leHBvcnQgY29uc3QgdW5zdGFibGVfaHR0cFN1YnNjcmlwdGlvbkxpbmsgPSBodHRwU3Vic2NyaXB0aW9uTGluaztcbiIsIi8qIGlzdGFuYnVsIGlnbm9yZSBmaWxlIC0tIEBwcmVzZXJ2ZSAqL1xuLy8gV2UncmUgbm90IGFjdHVhbGx5IGV4cG9ydGluZyB0aGlzIGxpbmtcbmltcG9ydCB0eXBlIHsgVW5zdWJzY3JpYmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHR5cGUgeyBJbmZlcnJhYmxlQ2xpZW50VHlwZXMgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0JztcbmltcG9ydCB7IGlucHV0V2l0aFRyYWNrZWRFdmVudElkIH0gZnJvbSAnLi4vaW50ZXJuYWxzL2lucHV0V2l0aFRyYWNrZWRFdmVudElkJztcbmltcG9ydCB0eXBlIHsgVFJQQ0NsaWVudEVycm9yIH0gZnJvbSAnLi4vVFJQQ0NsaWVudEVycm9yJztcbmltcG9ydCB0eXBlIHsgT3BlcmF0aW9uLCBUUlBDTGluayB9IGZyb20gJy4vdHlwZXMnO1xuXG5pbnRlcmZhY2UgUmV0cnlMaW5rT3B0aW9uczxUSW5mZXJyYWJsZSBleHRlbmRzIEluZmVycmFibGVDbGllbnRUeXBlcz4ge1xuICAvKipcbiAgICogVGhlIHJldHJ5IGZ1bmN0aW9uXG4gICAqL1xuICByZXRyeTogKG9wdHM6IFJldHJ5Rm5PcHRpb25zPFRJbmZlcnJhYmxlPikgPT4gYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSBkZWxheSBiZXR3ZWVuIHJldHJpZXMgaW4gbXMgKGRlZmF1bHRzIHRvIDApXG4gICAqL1xuICByZXRyeURlbGF5TXM/OiAoYXR0ZW1wdDogbnVtYmVyKSA9PiBudW1iZXI7XG59XG5cbmludGVyZmFjZSBSZXRyeUZuT3B0aW9uczxUSW5mZXJyYWJsZSBleHRlbmRzIEluZmVycmFibGVDbGllbnRUeXBlcz4ge1xuICAvKipcbiAgICogVGhlIG9wZXJhdGlvbiB0aGF0IGZhaWxlZFxuICAgKi9cbiAgb3A6IE9wZXJhdGlvbjtcbiAgLyoqXG4gICAqIFRoZSBlcnJvciB0aGF0IG9jY3VycmVkXG4gICAqL1xuICBlcnJvcjogVFJQQ0NsaWVudEVycm9yPFRJbmZlcnJhYmxlPjtcbiAgLyoqXG4gICAqIFRoZSBudW1iZXIgb2YgYXR0ZW1wdHMgdGhhdCBoYXZlIGJlZW4gbWFkZSAoaW5jbHVkaW5nIHRoZSBmaXJzdCBjYWxsKVxuICAgKi9cbiAgYXR0ZW1wdHM6IG51bWJlcjtcbn1cblxuLyoqXG4gKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL3YxMS9jbGllbnQvbGlua3MvcmV0cnlMaW5rXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiByZXRyeUxpbms8VEluZmVycmFibGUgZXh0ZW5kcyBJbmZlcnJhYmxlQ2xpZW50VHlwZXM+KFxuICBvcHRzOiBSZXRyeUxpbmtPcHRpb25zPFRJbmZlcnJhYmxlPixcbik6IFRSUENMaW5rPFRJbmZlcnJhYmxlPiB7XG4gIC8vIGluaXRpYWxpemVkIGNvbmZpZ1xuICByZXR1cm4gKCkgPT4ge1xuICAgIC8vIGluaXRpYWxpemVkIGluIGFwcFxuICAgIHJldHVybiAoY2FsbE9wdHMpID0+IHtcbiAgICAgIC8vIGluaXRpYWxpemVkIGZvciByZXF1ZXN0XG4gICAgICByZXR1cm4gb2JzZXJ2YWJsZSgob2JzZXJ2ZXIpID0+IHtcbiAgICAgICAgbGV0IG5leHQkOiBVbnN1YnNjcmliYWJsZTtcbiAgICAgICAgbGV0IGNhbGxOZXh0VGltZW91dDogUmV0dXJuVHlwZTx0eXBlb2Ygc2V0VGltZW91dD4gfCB1bmRlZmluZWQgPVxuICAgICAgICAgIHVuZGVmaW5lZDtcblxuICAgICAgICBsZXQgbGFzdEV2ZW50SWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICBhdHRlbXB0KDEpO1xuXG4gICAgICAgIGZ1bmN0aW9uIG9wV2l0aExhc3RFdmVudElkKCkge1xuICAgICAgICAgIGNvbnN0IG9wID0gY2FsbE9wdHMub3A7XG4gICAgICAgICAgaWYgKCFsYXN0RXZlbnRJZCkge1xuICAgICAgICAgICAgcmV0dXJuIG9wO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAuLi5vcCxcbiAgICAgICAgICAgIGlucHV0OiBpbnB1dFdpdGhUcmFja2VkRXZlbnRJZChvcC5pbnB1dCwgbGFzdEV2ZW50SWQpLFxuICAgICAgICAgIH07XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBhdHRlbXB0KGF0dGVtcHRzOiBudW1iZXIpIHtcbiAgICAgICAgICBjb25zdCBvcCA9IG9wV2l0aExhc3RFdmVudElkKCk7XG5cbiAgICAgICAgICBuZXh0JCA9IGNhbGxPcHRzLm5leHQob3ApLnN1YnNjcmliZSh7XG4gICAgICAgICAgICBlcnJvcihlcnJvcikge1xuICAgICAgICAgICAgICBjb25zdCBzaG91bGRSZXRyeSA9IG9wdHMucmV0cnkoe1xuICAgICAgICAgICAgICAgIG9wLFxuICAgICAgICAgICAgICAgIGF0dGVtcHRzLFxuICAgICAgICAgICAgICAgIGVycm9yLFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgaWYgKCFzaG91bGRSZXRyeSkge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmVycm9yKGVycm9yKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY29uc3QgZGVsYXlNcyA9IG9wdHMucmV0cnlEZWxheU1zPy4oYXR0ZW1wdHMpID8/IDA7XG5cbiAgICAgICAgICAgICAgaWYgKGRlbGF5TXMgPD0gMCkge1xuICAgICAgICAgICAgICAgIGF0dGVtcHQoYXR0ZW1wdHMgKyAxKTtcbiAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgY2FsbE5leHRUaW1lb3V0ID0gc2V0VGltZW91dChcbiAgICAgICAgICAgICAgICAoKSA9PiBhdHRlbXB0KGF0dGVtcHRzICsgMSksXG4gICAgICAgICAgICAgICAgZGVsYXlNcyxcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBuZXh0KGVudmVsb3BlKSB7XG4gICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgIGlmIChcbiAgICAgICAgICAgICAgICAoIWVudmVsb3BlLnJlc3VsdC50eXBlIHx8IGVudmVsb3BlLnJlc3VsdC50eXBlID09PSAnZGF0YScpICYmXG4gICAgICAgICAgICAgICAgZW52ZWxvcGUucmVzdWx0LmlkXG4gICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgIC8vXG4gICAgICAgICAgICAgICAgbGFzdEV2ZW50SWQgPSBlbnZlbG9wZS5yZXN1bHQuaWQ7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KGVudmVsb3BlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBjb21wbGV0ZSgpIHtcbiAgICAgICAgICAgICAgb2JzZXJ2ZXIuY29tcGxldGUoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBuZXh0JC51bnN1YnNjcmliZSgpO1xuICAgICAgICAgIGNsZWFyVGltZW91dChjYWxsTmV4dFRpbWVvdXQpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG4gICAgfTtcbiAgfTtcbn1cbiIsImZ1bmN0aW9uIF91c2luZ0N0eCgpIHtcbiAgdmFyIHIgPSBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN1cHByZXNzZWRFcnJvciA/IFN1cHByZXNzZWRFcnJvciA6IGZ1bmN0aW9uIChyLCBlKSB7XG4gICAgICB2YXIgbiA9IEVycm9yKCk7XG4gICAgICByZXR1cm4gbi5uYW1lID0gXCJTdXBwcmVzc2VkRXJyb3JcIiwgbi5lcnJvciA9IHIsIG4uc3VwcHJlc3NlZCA9IGUsIG47XG4gICAgfSxcbiAgICBlID0ge30sXG4gICAgbiA9IFtdO1xuICBmdW5jdGlvbiB1c2luZyhyLCBlKSB7XG4gICAgaWYgKG51bGwgIT0gZSkge1xuICAgICAgaWYgKE9iamVjdChlKSAhPT0gZSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcInVzaW5nIGRlY2xhcmF0aW9ucyBjYW4gb25seSBiZSB1c2VkIHdpdGggb2JqZWN0cywgZnVuY3Rpb25zLCBudWxsLCBvciB1bmRlZmluZWQuXCIpO1xuICAgICAgaWYgKHIpIHZhciBvID0gZVtTeW1ib2wuYXN5bmNEaXNwb3NlIHx8IFN5bWJvbFtcImZvclwiXShcIlN5bWJvbC5hc3luY0Rpc3Bvc2VcIildO1xuICAgICAgaWYgKHZvaWQgMCA9PT0gbyAmJiAobyA9IGVbU3ltYm9sLmRpc3Bvc2UgfHwgU3ltYm9sW1wiZm9yXCJdKFwiU3ltYm9sLmRpc3Bvc2VcIildLCByKSkgdmFyIHQgPSBvO1xuICAgICAgaWYgKFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgbykgdGhyb3cgbmV3IFR5cGVFcnJvcihcIk9iamVjdCBpcyBub3QgZGlzcG9zYWJsZS5cIik7XG4gICAgICB0ICYmIChvID0gZnVuY3Rpb24gbygpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICB0LmNhbGwoZSk7XG4gICAgICAgIH0gY2F0Y2ggKHIpIHtcbiAgICAgICAgICByZXR1cm4gUHJvbWlzZS5yZWplY3Qocik7XG4gICAgICAgIH1cbiAgICAgIH0pLCBuLnB1c2goe1xuICAgICAgICB2OiBlLFxuICAgICAgICBkOiBvLFxuICAgICAgICBhOiByXG4gICAgICB9KTtcbiAgICB9IGVsc2UgciAmJiBuLnB1c2goe1xuICAgICAgZDogZSxcbiAgICAgIGE6IHJcbiAgICB9KTtcbiAgICByZXR1cm4gZTtcbiAgfVxuICByZXR1cm4ge1xuICAgIGU6IGUsXG4gICAgdTogdXNpbmcuYmluZChudWxsLCAhMSksXG4gICAgYTogdXNpbmcuYmluZChudWxsLCAhMCksXG4gICAgZDogZnVuY3Rpb24gZCgpIHtcbiAgICAgIHZhciBvLFxuICAgICAgICB0ID0gdGhpcy5lLFxuICAgICAgICBzID0gMDtcbiAgICAgIGZ1bmN0aW9uIG5leHQoKSB7XG4gICAgICAgIGZvciAoOyBvID0gbi5wb3AoKTspIHRyeSB7XG4gICAgICAgICAgaWYgKCFvLmEgJiYgMSA9PT0gcykgcmV0dXJuIHMgPSAwLCBuLnB1c2gobyksIFByb21pc2UucmVzb2x2ZSgpLnRoZW4obmV4dCk7XG4gICAgICAgICAgaWYgKG8uZCkge1xuICAgICAgICAgICAgdmFyIHIgPSBvLmQuY2FsbChvLnYpO1xuICAgICAgICAgICAgaWYgKG8uYSkgcmV0dXJuIHMgfD0gMiwgUHJvbWlzZS5yZXNvbHZlKHIpLnRoZW4obmV4dCwgZXJyKTtcbiAgICAgICAgICB9IGVsc2UgcyB8PSAxO1xuICAgICAgICB9IGNhdGNoIChyKSB7XG4gICAgICAgICAgcmV0dXJuIGVycihyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoMSA9PT0gcykgcmV0dXJuIHQgIT09IGUgPyBQcm9taXNlLnJlamVjdCh0KSA6IFByb21pc2UucmVzb2x2ZSgpO1xuICAgICAgICBpZiAodCAhPT0gZSkgdGhyb3cgdDtcbiAgICAgIH1cbiAgICAgIGZ1bmN0aW9uIGVycihuKSB7XG4gICAgICAgIHJldHVybiB0ID0gdCAhPT0gZSA/IG5ldyByKG4sIHQpIDogbiwgbmV4dCgpO1xuICAgICAgfVxuICAgICAgcmV0dXJuIG5leHQoKTtcbiAgICB9XG4gIH07XG59XG5tb2R1bGUuZXhwb3J0cyA9IF91c2luZ0N0eCwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzOyIsImZ1bmN0aW9uIF9PdmVybG9hZFlpZWxkKGUsIGQpIHtcbiAgdGhpcy52ID0gZSwgdGhpcy5rID0gZDtcbn1cbm1vZHVsZS5leHBvcnRzID0gX092ZXJsb2FkWWllbGQsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgT3ZlcmxvYWRZaWVsZCA9IHJlcXVpcmUoXCIuL092ZXJsb2FkWWllbGQuanNcIik7XG5mdW5jdGlvbiBfYXdhaXRBc3luY0dlbmVyYXRvcihlKSB7XG4gIHJldHVybiBuZXcgT3ZlcmxvYWRZaWVsZChlLCAwKTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2F3YWl0QXN5bmNHZW5lcmF0b3IsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgT3ZlcmxvYWRZaWVsZCA9IHJlcXVpcmUoXCIuL092ZXJsb2FkWWllbGQuanNcIik7XG5mdW5jdGlvbiBfd3JhcEFzeW5jR2VuZXJhdG9yKGUpIHtcbiAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4gbmV3IEFzeW5jR2VuZXJhdG9yKGUuYXBwbHkodGhpcywgYXJndW1lbnRzKSk7XG4gIH07XG59XG5mdW5jdGlvbiBBc3luY0dlbmVyYXRvcihlKSB7XG4gIHZhciByLCB0O1xuICBmdW5jdGlvbiByZXN1bWUociwgdCkge1xuICAgIHRyeSB7XG4gICAgICB2YXIgbiA9IGVbcl0odCksXG4gICAgICAgIG8gPSBuLnZhbHVlLFxuICAgICAgICB1ID0gbyBpbnN0YW5jZW9mIE92ZXJsb2FkWWllbGQ7XG4gICAgICBQcm9taXNlLnJlc29sdmUodSA/IG8udiA6IG8pLnRoZW4oZnVuY3Rpb24gKHQpIHtcbiAgICAgICAgaWYgKHUpIHtcbiAgICAgICAgICB2YXIgaSA9IFwicmV0dXJuXCIgPT09IHIgPyBcInJldHVyblwiIDogXCJuZXh0XCI7XG4gICAgICAgICAgaWYgKCFvLmsgfHwgdC5kb25lKSByZXR1cm4gcmVzdW1lKGksIHQpO1xuICAgICAgICAgIHQgPSBlW2ldKHQpLnZhbHVlO1xuICAgICAgICB9XG4gICAgICAgIHNldHRsZShuLmRvbmUgPyBcInJldHVyblwiIDogXCJub3JtYWxcIiwgdCk7XG4gICAgICB9LCBmdW5jdGlvbiAoZSkge1xuICAgICAgICByZXN1bWUoXCJ0aHJvd1wiLCBlKTtcbiAgICAgIH0pO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHNldHRsZShcInRocm93XCIsIGUpO1xuICAgIH1cbiAgfVxuICBmdW5jdGlvbiBzZXR0bGUoZSwgbikge1xuICAgIHN3aXRjaCAoZSkge1xuICAgICAgY2FzZSBcInJldHVyblwiOlxuICAgICAgICByLnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiBuLFxuICAgICAgICAgIGRvbmU6ICEwXG4gICAgICAgIH0pO1xuICAgICAgICBicmVhaztcbiAgICAgIGNhc2UgXCJ0aHJvd1wiOlxuICAgICAgICByLnJlamVjdChuKTtcbiAgICAgICAgYnJlYWs7XG4gICAgICBkZWZhdWx0OlxuICAgICAgICByLnJlc29sdmUoe1xuICAgICAgICAgIHZhbHVlOiBuLFxuICAgICAgICAgIGRvbmU6ICExXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAociA9IHIubmV4dCkgPyByZXN1bWUoci5rZXksIHIuYXJnKSA6IHQgPSBudWxsO1xuICB9XG4gIHRoaXMuX2ludm9rZSA9IGZ1bmN0aW9uIChlLCBuKSB7XG4gICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChvLCB1KSB7XG4gICAgICB2YXIgaSA9IHtcbiAgICAgICAga2V5OiBlLFxuICAgICAgICBhcmc6IG4sXG4gICAgICAgIHJlc29sdmU6IG8sXG4gICAgICAgIHJlamVjdDogdSxcbiAgICAgICAgbmV4dDogbnVsbFxuICAgICAgfTtcbiAgICAgIHQgPyB0ID0gdC5uZXh0ID0gaSA6IChyID0gdCA9IGksIHJlc3VtZShlLCBuKSk7XG4gICAgfSk7XG4gIH0sIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZVtcInJldHVyblwiXSAmJiAodGhpc1tcInJldHVyblwiXSA9IHZvaWQgMCk7XG59XG5Bc3luY0dlbmVyYXRvci5wcm90b3R5cGVbXCJmdW5jdGlvblwiID09IHR5cGVvZiBTeW1ib2wgJiYgU3ltYm9sLmFzeW5jSXRlcmF0b3IgfHwgXCJAQGFzeW5jSXRlcmF0b3JcIl0gPSBmdW5jdGlvbiAoKSB7XG4gIHJldHVybiB0aGlzO1xufSwgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlLm5leHQgPSBmdW5jdGlvbiAoZSkge1xuICByZXR1cm4gdGhpcy5faW52b2tlKFwibmV4dFwiLCBlKTtcbn0sIEFzeW5jR2VuZXJhdG9yLnByb3RvdHlwZVtcInRocm93XCJdID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIHRoaXMuX2ludm9rZShcInRocm93XCIsIGUpO1xufSwgQXN5bmNHZW5lcmF0b3IucHJvdG90eXBlW1wicmV0dXJuXCJdID0gZnVuY3Rpb24gKGUpIHtcbiAgcmV0dXJuIHRoaXMuX2ludm9rZShcInJldHVyblwiLCBlKTtcbn07XG5tb2R1bGUuZXhwb3J0cyA9IF93cmFwQXN5bmNHZW5lcmF0b3IsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJpbXBvcnQge1xuICBnZXRUUlBDRXJyb3JGcm9tVW5rbm93bixcbiAgZ2V0VFJQQ0Vycm9yU2hhcGUsXG4gIGlzVHJhY2tlZEVudmVsb3BlLFxufSBmcm9tICdAdHJwYy9zZXJ2ZXInO1xuaW1wb3J0IHsgYmVoYXZpb3JTdWJqZWN0LCBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHsgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVksIHR5cGUgVFJQQ1Jlc3VsdCB9IGZyb20gJ0B0cnBjL3NlcnZlci9ycGMnO1xuaW1wb3J0IHtcbiAgY2FsbFByb2NlZHVyZSxcbiAgaXNBYm9ydEVycm9yLFxuICBpc0FzeW5jSXRlcmFibGUsXG4gIGl0ZXJhdG9yUmVzb3VyY2UsXG4gIG1ha2VSZXNvdXJjZSxcbiAgcmV0cnlhYmxlUnBjQ29kZXMsXG4gIHJ1bixcbiAgdHlwZSBBbnlSb3V0ZXIsXG4gIHR5cGUgRXJyb3JIYW5kbGVyT3B0aW9ucyxcbiAgdHlwZSBpbmZlckNsaWVudFR5cGVzLFxuICB0eXBlIGluZmVyUm91dGVyQ29udGV4dCxcbn0gZnJvbSAnQHRycGMvc2VydmVyL3Vuc3RhYmxlLWNvcmUtZG8tbm90LWltcG9ydCc7XG5pbXBvcnQgeyBpbnB1dFdpdGhUcmFja2VkRXZlbnRJZCB9IGZyb20gJy4uL2ludGVybmFscy9pbnB1dFdpdGhUcmFja2VkRXZlbnRJZCc7XG5pbXBvcnQgeyBhYm9ydFNpZ25hbFRvUHJvbWlzZSwgcmFjZUFib3J0U2lnbmFscyB9IGZyb20gJy4uL2ludGVybmFscy9zaWduYWxzJztcbmltcG9ydCB7IGdldFRyYW5zZm9ybWVyIH0gZnJvbSAnLi4vaW50ZXJuYWxzL3RyYW5zZm9ybWVyJztcbmltcG9ydCB0eXBlIHsgVHJhbnNmb3JtZXJPcHRpb25zIH0gZnJvbSAnLi4vaW50ZXJuYWxzL3RyYW5zZm9ybWVyJztcbmltcG9ydCB7IGlzVFJQQ0NsaWVudEVycm9yLCBUUlBDQ2xpZW50RXJyb3IgfSBmcm9tICcuLi9UUlBDQ2xpZW50RXJyb3InO1xuaW1wb3J0IHR5cGUgeyBUUlBDQ29ubmVjdGlvblN0YXRlIH0gZnJvbSAnLi9pbnRlcm5hbHMvc3Vic2NyaXB0aW9ucyc7XG5pbXBvcnQgdHlwZSB7IFRSUENMaW5rIH0gZnJvbSAnLi90eXBlcyc7XG5cbmV4cG9ydCB0eXBlIExvY2FsTGlua09wdGlvbnM8VFJvdXRlciBleHRlbmRzIEFueVJvdXRlcj4gPSB7XG4gIHJvdXRlcjogVFJvdXRlcjtcbiAgY3JlYXRlQ29udGV4dDogKCkgPT4gUHJvbWlzZTxpbmZlclJvdXRlckNvbnRleHQ8VFJvdXRlcj4+O1xuICBvbkVycm9yPzogKG9wdHM6IEVycm9ySGFuZGxlck9wdGlvbnM8aW5mZXJSb3V0ZXJDb250ZXh0PFRSb3V0ZXI+PikgPT4gdm9pZDtcbn0gJiBUcmFuc2Zvcm1lck9wdGlvbnM8aW5mZXJDbGllbnRUeXBlczxUUm91dGVyPj47XG5cbi8qKlxuICogbG9jYWxMaW5rIGlzIGEgdGVybWluYXRpbmcgbGluayB0aGF0IGFsbG93cyB5b3UgdG8gbWFrZSB0UlBDIHByb2NlZHVyZSBjYWxscyBkaXJlY3RseSBpbiB5b3VyIGFwcGxpY2F0aW9uIHdpdGhvdXQgZ29pbmcgdGhyb3VnaCBIVFRQLlxuICpcbiAqIEBzZWUgaHR0cHM6Ly90cnBjLmlvL2RvY3MvbGlua3MvbG9jYWxMaW5rXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiB1bnN0YWJsZV9sb2NhbExpbms8VFJvdXRlciBleHRlbmRzIEFueVJvdXRlcj4oXG4gIG9wdHM6IExvY2FsTGlua09wdGlvbnM8VFJvdXRlcj4sXG4pOiBUUlBDTGluazxUUm91dGVyPiB7XG4gIGNvbnN0IHRyYW5zZm9ybWVyID0gZ2V0VHJhbnNmb3JtZXIob3B0cy50cmFuc2Zvcm1lcik7XG5cbiAgY29uc3QgdHJhbnNmb3JtQ2h1bmsgPSAoY2h1bms6IHVua25vd24pID0+IHtcbiAgICBpZiAob3B0cy50cmFuc2Zvcm1lcikge1xuICAgICAgLy8gYXNzdW1lIHRyYW5zZm9ybWVyIHdpbGwgZG8gdGhlIHJpZ2h0IHRoaW5nXG4gICAgICByZXR1cm4gY2h1bms7XG4gICAgfVxuICAgIC8vIFNwZWNpYWwgY2FzZSBmb3IgdW5kZWZpbmVkLCBiZWNhdXNlIGBKU09OLnN0cmluZ2lmeSh1bmRlZmluZWQpYCB0aHJvd3NcbiAgICBpZiAoY2h1bmsgPT09IHVuZGVmaW5lZCkge1xuICAgICAgcmV0dXJuIGNodW5rO1xuICAgIH1cbiAgICBjb25zdCBzZXJpYWxpemVkID0gSlNPTi5zdHJpbmdpZnkodHJhbnNmb3JtZXIuaW5wdXQuc2VyaWFsaXplKGNodW5rKSk7XG4gICAgY29uc3QgZGVzZXJpYWxpemVkID0gSlNPTi5wYXJzZSh0cmFuc2Zvcm1lci5vdXRwdXQuZGVzZXJpYWxpemUoc2VyaWFsaXplZCkpO1xuICAgIHJldHVybiBkZXNlcmlhbGl6ZWQ7XG4gIH07XG5cbiAgcmV0dXJuICgpID0+XG4gICAgKHsgb3AgfSkgPT5cbiAgICAgIG9ic2VydmFibGUoKG9ic2VydmVyKSA9PiB7XG4gICAgICAgIGxldCBjdHg6IGluZmVyUm91dGVyQ29udGV4dDxUUm91dGVyPiB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcbiAgICAgICAgY29uc3QgYWMgPSBuZXcgQWJvcnRDb250cm9sbGVyKCk7XG5cbiAgICAgICAgY29uc3Qgc2lnbmFsID0gcmFjZUFib3J0U2lnbmFscyhvcC5zaWduYWwsIGFjLnNpZ25hbCk7XG4gICAgICAgIGNvbnN0IHNpZ25hbFByb21pc2UgPSBhYm9ydFNpZ25hbFRvUHJvbWlzZShzaWduYWwpO1xuXG4gICAgICAgIHNpZ25hbFByb21pc2UuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgIC8vIHByZXZlbnQgdW5oYW5kbGVkIHJlamVjdGlvblxuICAgICAgICB9KTtcblxuICAgICAgICBsZXQgaW5wdXQgPSBvcC5pbnB1dDtcbiAgICAgICAgYXN5bmMgZnVuY3Rpb24gcnVuUHJvY2VkdXJlKG5ld0lucHV0OiB1bmtub3duKTogUHJvbWlzZTx1bmtub3duPiB7XG4gICAgICAgICAgaW5wdXQgPSBuZXdJbnB1dDtcblxuICAgICAgICAgIGN0eCA9IGF3YWl0IG9wdHMuY3JlYXRlQ29udGV4dCgpO1xuXG4gICAgICAgICAgcmV0dXJuIGNhbGxQcm9jZWR1cmUoe1xuICAgICAgICAgICAgcm91dGVyOiBvcHRzLnJvdXRlcixcbiAgICAgICAgICAgIHBhdGg6IG9wLnBhdGgsXG4gICAgICAgICAgICBnZXRSYXdJbnB1dDogYXN5bmMgKCkgPT4gbmV3SW5wdXQsXG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgICB0eXBlOiBvcC50eXBlLFxuICAgICAgICAgICAgc2lnbmFsLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgZnVuY3Rpb24gb25FcnJvckNhbGxiYWNrKGNhdXNlOiB1bmtub3duKSB7XG4gICAgICAgICAgaWYgKGlzQWJvcnRFcnJvcihjYXVzZSkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG4gICAgICAgICAgb3B0cy5vbkVycm9yPy4oe1xuICAgICAgICAgICAgZXJyb3I6IGdldFRSUENFcnJvckZyb21Vbmtub3duKGNhdXNlKSxcbiAgICAgICAgICAgIHR5cGU6IG9wLnR5cGUsXG4gICAgICAgICAgICBwYXRoOiBvcC5wYXRoLFxuICAgICAgICAgICAgaW5wdXQsXG4gICAgICAgICAgICBjdHgsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cblxuICAgICAgICBmdW5jdGlvbiBjb2VyY2VUb1RSUENDbGllbnRFcnJvcihjYXVzZTogdW5rbm93bikge1xuICAgICAgICAgIGlmIChpc1RSUENDbGllbnRFcnJvcjxUUm91dGVyPihjYXVzZSkpIHtcbiAgICAgICAgICAgIHJldHVybiBjYXVzZTtcbiAgICAgICAgICB9XG4gICAgICAgICAgY29uc3QgZXJyb3IgPSBnZXRUUlBDRXJyb3JGcm9tVW5rbm93bihjYXVzZSk7XG5cbiAgICAgICAgICBjb25zdCBzaGFwZSA9IGdldFRSUENFcnJvclNoYXBlKHtcbiAgICAgICAgICAgIGNvbmZpZzogb3B0cy5yb3V0ZXIuX2RlZi5fY29uZmlnLFxuICAgICAgICAgICAgY3R4LFxuICAgICAgICAgICAgZXJyb3IsXG4gICAgICAgICAgICBpbnB1dCxcbiAgICAgICAgICAgIHBhdGg6IG9wLnBhdGgsXG4gICAgICAgICAgICB0eXBlOiBvcC50eXBlLFxuICAgICAgICAgIH0pO1xuICAgICAgICAgIHJldHVybiBUUlBDQ2xpZW50RXJyb3IuZnJvbSh7XG4gICAgICAgICAgICBlcnJvcjogdHJhbnNmb3JtQ2h1bmsoc2hhcGUpLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgcnVuKGFzeW5jICgpID0+IHtcbiAgICAgICAgICBzd2l0Y2ggKG9wLnR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgJ3F1ZXJ5JzpcbiAgICAgICAgICAgIGNhc2UgJ211dGF0aW9uJzoge1xuICAgICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBydW5Qcm9jZWR1cmUob3AuaW5wdXQpO1xuICAgICAgICAgICAgICBpZiAoIWlzQXN5bmNJdGVyYWJsZShyZXN1bHQpKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIubmV4dCh7XG4gICAgICAgICAgICAgICAgICByZXN1bHQ6IHsgZGF0YTogdHJhbnNmb3JtQ2h1bmsocmVzdWx0KSB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAgIGRhdGE6IChhc3luYyBmdW5jdGlvbiogKCkge1xuICAgICAgICAgICAgICAgICAgICBhd2FpdCB1c2luZyBpdGVyYXRvciA9IGl0ZXJhdG9yUmVzb3VyY2UocmVzdWx0KTtcbiAgICAgICAgICAgICAgICAgICAgdXNpbmcgX2ZpbmFsbHkgPSBtYWtlUmVzb3VyY2Uoe30sICgpID0+IHtcbiAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlci5jb21wbGV0ZSgpO1xuICAgICAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc3QgcmVzID0gYXdhaXQgUHJvbWlzZS5yYWNlKFtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgaXRlcmF0b3IubmV4dCgpLFxuICAgICAgICAgICAgICAgICAgICAgICAgICBzaWduYWxQcm9taXNlLFxuICAgICAgICAgICAgICAgICAgICAgICAgXSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAocmVzLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRyYW5zZm9ybUNodW5rKHJlcy52YWx1ZSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICB5aWVsZCB0cmFuc2Zvcm1DaHVuayhyZXMudmFsdWUpO1xuICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfSBjYXRjaCAoY2F1c2UpIHtcbiAgICAgICAgICAgICAgICAgICAgICBvbkVycm9yQ2FsbGJhY2soY2F1c2UpO1xuICAgICAgICAgICAgICAgICAgICAgIHRocm93IGNvZXJjZVRvVFJQQ0NsaWVudEVycm9yKGNhdXNlKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgfSkoKSxcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXNlICdzdWJzY3JpcHRpb24nOiB7XG4gICAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb25TdGF0ZSA9IGJlaGF2aW9yU3ViamVjdDxcbiAgICAgICAgICAgICAgICBUUlBDQ29ubmVjdGlvblN0YXRlPFRSUENDbGllbnRFcnJvcjxhbnk+PlxuICAgICAgICAgICAgICA+KHtcbiAgICAgICAgICAgICAgICB0eXBlOiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgIHN0YXRlOiAnY29ubmVjdGluZycsXG4gICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgIGNvbnN0IGNvbm5lY3Rpb25TdWIgPSBjb25uZWN0aW9uU3RhdGUuc3Vic2NyaWJlKHtcbiAgICAgICAgICAgICAgICBuZXh0KHN0YXRlKSB7XG4gICAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgICAgICAgICAgcmVzdWx0OiBzdGF0ZSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICBsZXQgbGFzdEV2ZW50SWQ6IHN0cmluZyB8IHVuZGVmaW5lZCA9IHVuZGVmaW5lZDtcblxuICAgICAgICAgICAgICB1c2luZyBfZmluYWxseSA9IG1ha2VSZXNvdXJjZSh7fSwgYXN5bmMgKCkgPT4ge1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLmNvbXBsZXRlKCk7XG5cbiAgICAgICAgICAgICAgICBjb25uZWN0aW9uU3RhdGUubmV4dCh7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAnc3RhdGUnLFxuICAgICAgICAgICAgICAgICAgc3RhdGU6ICdpZGxlJyxcbiAgICAgICAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25TdWIudW5zdWJzY3JpYmUoKTtcbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgIHdoaWxlICh0cnVlKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgcnVuUHJvY2VkdXJlKFxuICAgICAgICAgICAgICAgICAgaW5wdXRXaXRoVHJhY2tlZEV2ZW50SWQob3AuaW5wdXQsIGxhc3RFdmVudElkKSxcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICAgIGlmICghaXNBc3luY0l0ZXJhYmxlKHJlc3VsdCkpIHtcbiAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignRXhwZWN0ZWQgYW4gYXN5bmMgaXRlcmFibGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgYXdhaXQgdXNpbmcgaXRlcmF0b3IgPSBpdGVyYXRvclJlc291cmNlKHJlc3VsdCk7XG5cbiAgICAgICAgICAgICAgICBvYnNlcnZlci5uZXh0KHtcbiAgICAgICAgICAgICAgICAgIHJlc3VsdDoge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiAnc3RhcnRlZCcsXG4gICAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIGNvbm5lY3Rpb25TdGF0ZS5uZXh0KHtcbiAgICAgICAgICAgICAgICAgIHR5cGU6ICdzdGF0ZScsXG4gICAgICAgICAgICAgICAgICBzdGF0ZTogJ3BlbmRpbmcnLFxuICAgICAgICAgICAgICAgICAgZXJyb3I6IG51bGwsXG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAvLyBVc2UgYSB3aGlsZSBsb29wIHRvIGhhbmRsZSBlcnJvcnMgYW5kIHJlY29ubmVjdHNcbiAgICAgICAgICAgICAgICB3aGlsZSAodHJ1ZSkge1xuICAgICAgICAgICAgICAgICAgbGV0IHJlcztcbiAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIHJlcyA9IGF3YWl0IFByb21pc2UucmFjZShbaXRlcmF0b3IubmV4dCgpLCBzaWduYWxQcm9taXNlXSk7XG4gICAgICAgICAgICAgICAgICB9IGNhdGNoIChjYXVzZSkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoaXNBYm9ydEVycm9yKGNhdXNlKSkge1xuICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBjb25zdCBlcnJvciA9IGdldFRSUENFcnJvckZyb21Vbmtub3duKGNhdXNlKTtcblxuICAgICAgICAgICAgICAgICAgICBpZiAoXG4gICAgICAgICAgICAgICAgICAgICAgIXJldHJ5YWJsZVJwY0NvZGVzLmluY2x1ZGVzKFxuICAgICAgICAgICAgICAgICAgICAgICAgVFJQQ19FUlJPUl9DT0RFU19CWV9LRVlbZXJyb3IuY29kZV0sXG4gICAgICAgICAgICAgICAgICAgICAgKVxuICAgICAgICAgICAgICAgICAgICApIHtcbiAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBjb2VyY2VUb1RSUENDbGllbnRFcnJvcihlcnJvcik7XG4gICAgICAgICAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgICAgICAgICBvbkVycm9yQ2FsbGJhY2soZXJyb3IpO1xuICAgICAgICAgICAgICAgICAgICBjb25uZWN0aW9uU3RhdGUubmV4dCh7XG4gICAgICAgICAgICAgICAgICAgICAgdHlwZTogJ3N0YXRlJyxcbiAgICAgICAgICAgICAgICAgICAgICBzdGF0ZTogJ2Nvbm5lY3RpbmcnLFxuICAgICAgICAgICAgICAgICAgICAgIGVycm9yOiBjb2VyY2VUb1RSUENDbGllbnRFcnJvcihlcnJvciksXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAgICAgICBpZiAocmVzLmRvbmUpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgbGV0IGNodW5rOiBUUlBDUmVzdWx0PHVua25vd24+O1xuICAgICAgICAgICAgICAgICAgaWYgKGlzVHJhY2tlZEVudmVsb3BlKHJlcy52YWx1ZSkpIHtcbiAgICAgICAgICAgICAgICAgICAgbGFzdEV2ZW50SWQgPSByZXMudmFsdWVbMF07XG5cbiAgICAgICAgICAgICAgICAgICAgY2h1bmsgPSB7XG4gICAgICAgICAgICAgICAgICAgICAgaWQ6IHJlcy52YWx1ZVswXSxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZDogcmVzLnZhbHVlWzBdLFxuICAgICAgICAgICAgICAgICAgICAgICAgZGF0YTogcmVzLnZhbHVlWzFdLFxuICAgICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBjaHVuayA9IHtcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiByZXMudmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICB9XG5cbiAgICAgICAgICAgICAgICAgIG9ic2VydmVyLm5leHQoe1xuICAgICAgICAgICAgICAgICAgICByZXN1bHQ6IHtcbiAgICAgICAgICAgICAgICAgICAgICAuLi5jaHVuayxcbiAgICAgICAgICAgICAgICAgICAgICBkYXRhOiB0cmFuc2Zvcm1DaHVuayhjaHVuay5kYXRhKSxcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH0pLmNhdGNoKChjYXVzZSkgPT4ge1xuICAgICAgICAgIG9uRXJyb3JDYWxsYmFjayhjYXVzZSk7XG4gICAgICAgICAgb2JzZXJ2ZXIuZXJyb3IoY29lcmNlVG9UUlBDQ2xpZW50RXJyb3IoY2F1c2UpKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuICgpID0+IHtcbiAgICAgICAgICBhYy5hYm9ydCgpO1xuICAgICAgICB9O1xuICAgICAgfSk7XG59XG4vKipcbiAqIEBkZXByZWNhdGVkIFJlbmFtZWQgdG8gYHVuc3RhYmxlX2xvY2FsTGlua2AuIFRoaXMgYWxpYXMgd2lsbCBiZSByZW1vdmVkIGluIGEgZnV0dXJlIG1ham9yIHJlbGVhc2UuXG4gKi9cbmV4cG9ydCBjb25zdCBleHBlcmltZW50YWxfbG9jYWxMaW5rOiB0eXBlb2YgdW5zdGFibGVfbG9jYWxMaW5rID1cbiAgdW5zdGFibGVfbG9jYWxMaW5rO1xuIl0sIm5hbWVzIjpbIm9wdHM6IENyZWF0ZVRSUENDbGllbnRPcHRpb25zPFRJbmZlcnJhYmxlPiIsIm9wdHM6IHtcbiAgICB0eXBlOiBUUlBDVHlwZTtcbiAgICBpbnB1dDogVElucHV0O1xuICAgIHBhdGg6IHN0cmluZztcbiAgICBjb250ZXh0PzogT3BlcmF0aW9uQ29udGV4dDtcbiAgICBzaWduYWw6IE1heWJlPEFib3J0U2lnbmFsPjtcbiAgfSIsInBhdGg6IHN0cmluZyIsImlucHV0PzogdW5rbm93biIsIm9wdHM/OiBUUlBDUmVxdWVzdE9wdGlvbnMiLCJpbnB1dDogdW5rbm93biIsIm9wdHM6IFBhcnRpYWw8XG4gICAgICBUUlBDU3Vic2NyaXB0aW9uT2JzZXJ2ZXI8dW5rbm93biwgVFJQQ0NsaWVudEVycm9yPEFueVJvdXRlcj4+XG4gICAgPiAmXG4gICAgICBUUlBDUmVxdWVzdE9wdGlvbnMiLCJvcHRzOiBDcmVhdGVUUlBDQ2xpZW50T3B0aW9uczxUUm91dGVyPiIsImNsaWVudENhbGxUeXBlTWFwOiBSZWNvcmQ8XG4gIGtleW9mIERlY29yYXRlUHJvY2VkdXJlPGFueSwgYW55PixcbiAgUHJvY2VkdXJlVHlwZVxuPiIsImNsaWVudENhbGxUeXBlOiBzdHJpbmciLCJjbGllbnQ6IFRSUENVbnR5cGVkQ2xpZW50PFRSb3V0ZXI+IiwiY2xpZW50OiBUUlBDQ2xpZW50PFRSb3V0ZXI+Iiwib3B0czogSFRUUEJhdGNoTGlua09wdGlvbnM8VFJvdXRlclsnX2RlZiddWydfY29uZmlnJ11bJyR0eXBlcyddPiIsInR5cGU6IFByb2NlZHVyZVR5cGUiLCJvcHRzIiwianNvbjogVFJQQ1Jlc3BvbnNlIiwibGFzdEV2ZW50SWQ6IHN0cmluZyB8IHVuZGVmaW5lZCIsIl9hc3luY0l0ZXJhdG9yIiwiciIsIkFzeW5jRnJvbVN5bmNJdGVyYXRvciIsIm9wdHM6IFVybE9wdGlvbnNXaXRoQ29ubmVjdGlvblBhcmFtcyIsIm9wdHM6IEhUVFBTdWJzY3JpcHRpb25MaW5rT3B0aW9uczxcbiAgICBpbmZlckNsaWVudFR5cGVzPFRJbmZlcnJhYmxlPixcbiAgICBURXZlbnRTb3VyY2VcbiAgPiIsInJlc3VsdDogVFJQQ1Jlc3VsdDx1bmtub3duPiIsIm9wdHM6IFJldHJ5TGlua09wdGlvbnM8VEluZmVycmFibGU+IiwibmV4dCQ6IFVuc3Vic2NyaWJhYmxlIiwiY2FsbE5leHRUaW1lb3V0OiBSZXR1cm5UeXBlPHR5cGVvZiBzZXRUaW1lb3V0PiB8IHVuZGVmaW5lZCIsImF0dGVtcHRzOiBudW1iZXIiLCJlIiwibiIsIm8iLCJPdmVybG9hZFlpZWxkIiwiX2F3YWl0QXN5bmNHZW5lcmF0b3IiLCJfd3JhcEFzeW5jR2VuZXJhdG9yIiwidCIsIm9wdHM6IExvY2FsTGlua09wdGlvbnM8VFJvdXRlcj4iLCJjaHVuazogdW5rbm93biIsImN0eDogaW5mZXJSb3V0ZXJDb250ZXh0PFRSb3V0ZXI+IHwgdW5kZWZpbmVkIiwibmV3SW5wdXQ6IHVua25vd24iLCJjYXVzZTogdW5rbm93biIsImNodW5rOiBUUlBDUmVzdWx0PHVua25vd24+IiwiZXhwZXJpbWVudGFsX2xvY2FsTGluazogdHlwZW9mIHVuc3RhYmxlX2xvY2FsTGluayJdLCJpZ25vcmVMaXN0IjpbNSw4LDksMTAsMTFdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/loggerLink-ineCN1PO.mjs":
/*!******************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/loggerLink-ineCN1PO.mjs ***!
  \******************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   loggerLink: () => (/* binding */ loggerLink)\n/* harmony export */ });\n/* harmony import */ var _objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectSpread2-BvkFp-_Y.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CUiPknO-.mjs\");\n\n\n//#region src/links/loggerLink.ts\nvar import_objectSpread2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\nfunction isFormData(value) {\n    if (typeof FormData === \"undefined\") return false;\n    return value instanceof FormData;\n}\nconst palettes = {\n    css: {\n        query: [\n            \"72e3ff\",\n            \"3fb0d8\"\n        ],\n        mutation: [\n            \"c5a3fc\",\n            \"904dfc\"\n        ],\n        subscription: [\n            \"ff49e1\",\n            \"d83fbe\"\n        ]\n    },\n    ansi: {\n        regular: {\n            query: [\n                \"\\x1B[30;46m\",\n                \"\\x1B[97;46m\"\n            ],\n            mutation: [\n                \"\\x1B[30;45m\",\n                \"\\x1B[97;45m\"\n            ],\n            subscription: [\n                \"\\x1B[30;42m\",\n                \"\\x1B[97;42m\"\n            ]\n        },\n        bold: {\n            query: [\n                \"\\x1B[1;30;46m\",\n                \"\\x1B[1;97;46m\"\n            ],\n            mutation: [\n                \"\\x1B[1;30;45m\",\n                \"\\x1B[1;97;45m\"\n            ],\n            subscription: [\n                \"\\x1B[1;30;42m\",\n                \"\\x1B[1;97;42m\"\n            ]\n        }\n    }\n};\nfunction constructPartsAndArgs(opts) {\n    const { direction, type, withContext, path, id, input } = opts;\n    const parts = [];\n    const args = [];\n    if (opts.colorMode === \"none\") parts.push(direction === \"up\" ? \">>\" : \"<<\", type, `#${id}`, path);\n    else if (opts.colorMode === \"ansi\") {\n        const [lightRegular, darkRegular] = palettes.ansi.regular[type];\n        const [lightBold, darkBold] = palettes.ansi.bold[type];\n        const reset = \"\\x1B[0m\";\n        parts.push(direction === \"up\" ? lightRegular : darkRegular, direction === \"up\" ? \">>\" : \"<<\", type, direction === \"up\" ? lightBold : darkBold, `#${id}`, path, reset);\n    } else {\n        const [light, dark] = palettes.css[type];\n        const css = `\n    background-color: #${direction === \"up\" ? light : dark};\n    color: ${direction === \"up\" ? \"black\" : \"white\"};\n    padding: 2px;\n  `;\n        parts.push(\"%c\", direction === \"up\" ? \">>\" : \"<<\", type, `#${id}`, `%c${path}%c`, \"%O\");\n        args.push(css, `${css}; font-weight: bold;`, `${css}; font-weight: normal;`);\n    }\n    if (direction === \"up\") args.push(withContext ? {\n        input,\n        context: opts.context\n    } : {\n        input\n    });\n    else args.push((0, import_objectSpread2.default)({\n        input,\n        result: opts.result,\n        elapsedMs: opts.elapsedMs\n    }, withContext && {\n        context: opts.context\n    }));\n    return {\n        parts,\n        args\n    };\n}\nconst defaultLogger = ({ c = console, colorMode = \"css\", withContext })=>(props)=>{\n        const rawInput = props.input;\n        const input = isFormData(rawInput) ? Object.fromEntries(rawInput) : rawInput;\n        const { parts, args } = constructPartsAndArgs((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, props), {}, {\n            colorMode,\n            input,\n            withContext\n        }));\n        const fn = props.direction === \"down\" && props.result && (props.result instanceof Error || \"error\" in props.result.result && props.result.result.error) ? \"error\" : \"log\";\n        c[fn].apply(null, [\n            parts.join(\" \")\n        ].concat(args));\n    };\n/**\n* @see https://trpc.io/docs/v11/client/links/loggerLink\n*/ function loggerLink(opts = {}) {\n    var _opts$colorMode, _opts$withContext;\n    const { enabled = ()=>true } = opts;\n    const colorMode = (_opts$colorMode = opts.colorMode) !== null && _opts$colorMode !== void 0 ? _opts$colorMode :  true ? \"ansi\" : 0;\n    const withContext = (_opts$withContext = opts.withContext) !== null && _opts$withContext !== void 0 ? _opts$withContext : colorMode === \"css\";\n    const { logger = defaultLogger({\n        c: opts.console,\n        colorMode,\n        withContext\n    }) } = opts;\n    return ()=>{\n        return ({ op, next })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_1__.observable)((observer)=>{\n                if (enabled((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, op), {}, {\n                    direction: \"up\"\n                }))) logger((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, op), {}, {\n                    direction: \"up\"\n                }));\n                const requestStartTime = Date.now();\n                function logResult(result) {\n                    const elapsedMs = Date.now() - requestStartTime;\n                    if (enabled((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, op), {}, {\n                        direction: \"down\",\n                        result\n                    }))) logger((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, op), {}, {\n                        direction: \"down\",\n                        elapsedMs,\n                        result\n                    }));\n                }\n                return next(op).pipe((0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_2__.tap)({\n                    next (result) {\n                        logResult(result);\n                    },\n                    error (result) {\n                        logResult(result);\n                    }\n                })).subscribe(observer);\n            });\n        };\n    };\n}\n//#endregion\n //# sourceMappingURL=loggerLink-ineCN1PO.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/loggerLink-ineCN1PO.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs":
/*!*********************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs ***!
  \*********************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __toESM: () => (/* binding */ __toESM),\n/* harmony export */   require_defineProperty: () => (/* binding */ require_defineProperty),\n/* harmony export */   require_objectSpread2: () => (/* binding */ require_objectSpread2)\n/* harmony export */ });\n//#region rolldown:runtime\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") for(var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++){\n        key = keys[i];\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ((k)=>from[k]).bind(null, key),\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\nvar require_typeof = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\" (exports, module) {\n        function _typeof$2(o) {\n            \"@babel/helpers - typeof\";\n            return module.exports = _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o$1) {\n                return typeof o$1;\n            } : function(o$1) {\n                return o$1 && \"function\" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? \"symbol\" : typeof o$1;\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof$2(o);\n        }\n        module.exports = _typeof$2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\nvar require_toPrimitive = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\" (exports, module) {\n        var _typeof$1 = require_typeof()[\"default\"];\n        function toPrimitive$1(t, r) {\n            if (\"object\" != _typeof$1(t) || !t) return t;\n            var e = t[Symbol.toPrimitive];\n            if (void 0 !== e) {\n                var i = e.call(t, r || \"default\");\n                if (\"object\" != _typeof$1(i)) return i;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (\"string\" === r ? String : Number)(t);\n        }\n        module.exports = toPrimitive$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\nvar require_toPropertyKey = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\" (exports, module) {\n        var _typeof = require_typeof()[\"default\"];\n        var toPrimitive = require_toPrimitive();\n        function toPropertyKey$1(t) {\n            var i = toPrimitive(t, \"string\");\n            return \"symbol\" == _typeof(i) ? i : i + \"\";\n        }\n        module.exports = toPropertyKey$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\nvar require_defineProperty = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\" (exports, module) {\n        var toPropertyKey = require_toPropertyKey();\n        function _defineProperty(e, r, t) {\n            return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n                value: t,\n                enumerable: !0,\n                configurable: !0,\n                writable: !0\n            }) : e[r] = t, e;\n        }\n        module.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\nvar require_objectSpread2 = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\" (exports, module) {\n        var defineProperty = require_defineProperty();\n        function ownKeys(e, r) {\n            var t = Object.keys(e);\n            if (Object.getOwnPropertySymbols) {\n                var o = Object.getOwnPropertySymbols(e);\n                r && (o = o.filter(function(r$1) {\n                    return Object.getOwnPropertyDescriptor(e, r$1).enumerable;\n                })), t.push.apply(t, o);\n            }\n            return t;\n        }\n        function _objectSpread2(e) {\n            for(var r = 1; r < arguments.length; r++){\n                var t = null != arguments[r] ? arguments[r] : {};\n                r % 2 ? ownKeys(Object(t), !0).forEach(function(r$1) {\n                    defineProperty(e, r$1, t[r$1]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r$1) {\n                    Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));\n                });\n            }\n            return e;\n        }\n        module.exports = _objectSpread2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n //# sourceMappingURL=objectSpread2-BvkFp-_Y.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMS40LjJfQHRycGMrc2VydmVyQDExLjQuMl90eXBlc2NyaXB0QDUuOC4zX190eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9vYmplY3RTcHJlYWQyLUJ2a0ZwLV9ZLm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O1FBQUEsU0FBU0EsVUFBUSxHQUFHO1lBQ2xCO1lBRUEsT0FBTyxPQUFPLFVBQVVBLFlBQVUscUJBQXFCLFVBQVUsbUJBQW1CLE9BQU8sV0FBVyxTQUFVQyxHQUFBQSxFQUFHO2dCQUNqSCxjQUFjQTtZQUNmLElBQUcsU0FBVUEsR0FBQUEsRUFBRztnQkFDZixPQUFPQSxPQUFLLHFCQUFxQixVQUFVQSxJQUFFLGdCQUFnQixVQUFVQSxRQUFNLE9BQU8sWUFBWSxrQkFBa0JBO1lBQ25ILEdBQUUsT0FBTyxRQUFRLGFBQWEsTUFBTSxPQUFPLFFBQVEsYUFBYSxPQUFPLFNBQVMsVUFBUSxFQUFFO1FBQzVGO1FBQ0QsT0FBTyxVQUFVRCxXQUFTLE9BQU8sUUFBUSxhQUFhLE1BQU0sT0FBTyxRQUFRLGFBQWEsT0FBTzs7Ozs7OztRQ1QvRixJQUFJQSxZQUFBQSxnQkFBQUEsQ0FBaUM7UUFDckMsU0FBU0UsY0FBWSxHQUFHLEdBQUc7WUFDekIsSUFBSSxZQUFZLFVBQVEsRUFBRSxLQUFLLEVBQUcsUUFBTztZQUN6QyxJQUFJLElBQUksRUFBRSxPQUFPO1lBQ2pCLFNBQVMsTUFBTSxHQUFHO2dCQUNoQixJQUFJLElBQUksRUFBRSxLQUFLLEdBQUcsS0FBSyxVQUFVO2dCQUNqQyxJQUFJLFlBQVksVUFBUSxFQUFFLENBQUUsUUFBTztnQkFDbkMsTUFBTSxJQUFJLFVBQVU7WUFDckI7WUFDRCxPQUFPLENBQUMsYUFBYSxJQUFJLFNBQVMsUUFBUSxFQUFFO1FBQzdDO1FBQ0QsT0FBTyxVQUFVQSxlQUFhLE9BQU8sUUFBUSxhQUFhLE1BQU0sT0FBTyxRQUFRLGFBQWEsT0FBTzs7Ozs7OztRQ1huRyxJQUFJLDJCQUFpQztRQUNyQyxJQUFJO1FBQ0osU0FBU0MsZ0JBQWMsR0FBRztZQUN4QixJQUFJLElBQUksWUFBWSxHQUFHLFNBQVM7WUFDaEMsT0FBTyxZQUFZLFFBQVEsRUFBRSxHQUFHLElBQUksSUFBSTtRQUN6QztRQUNELE9BQU8sVUFBVUEsaUJBQWUsT0FBTyxRQUFRLGFBQWEsTUFBTSxPQUFPLFFBQVEsYUFBYSxPQUFPOzs7Ozs7O1FDTnJHLElBQUk7UUFDSixTQUFTLGdCQUFnQixHQUFHLEdBQUcsR0FBRztZQUNoQyxRQUFRLElBQUksY0FBYyxHQUFFLElBQUssSUFBSSxPQUFPLGVBQWUsR0FBRyxHQUFHO2dCQUMvRCxPQUFPO2dCQUNQLGFBQWE7Z0JBQ2IsZUFBZTtnQkFDZixXQUFXO1lBQ1osRUFBQyxHQUFHLEVBQUUsS0FBSyxHQUFHO1FBQ2hCO1FBQ0QsT0FBTyxVQUFVLGlCQUFpQixPQUFPLFFBQVEsYUFBYSxNQUFNLE9BQU8sUUFBUSxhQUFhLE9BQU87Ozs7Ozs7UUNUdkcsSUFBSTtRQUNKLFNBQVMsUUFBUSxHQUFHLEdBQUc7WUFDckIsSUFBSSxJQUFJLE9BQU8sS0FBSyxFQUFFO1lBQ3RCLElBQUksT0FBTyx1QkFBdUI7Z0JBQ2hDLElBQUksSUFBSSxPQUFPLHNCQUFzQixFQUFFO2dCQUN2QyxNQUFNLElBQUksRUFBRSxPQUFPLFNBQVVDLEdBQUFBLEVBQUc7b0JBQzlCLE9BQU8sT0FBTyx5QkFBeUIsR0FBR0EsSUFBRSxDQUFDO2dCQUM5QyxHQUFDLEVBQUcsRUFBRSxLQUFLLE1BQU0sR0FBRyxFQUFFO1lBQ3hCO1lBQ0QsT0FBTztRQUNSO1FBQ0QsU0FBUyxlQUFlLEdBQUc7WUFDekIsSUFBSyxJQUFJLElBQUksR0FBRyxJQUFJLFVBQVUsUUFBUSxJQUFLO2dCQUN6QyxJQUFJLElBQUksUUFBUSxVQUFVLEtBQUssVUFBVSxLQUFLLENBQUU7Z0JBQ2hELElBQUksSUFBSSxRQUFRLE9BQU8sRUFBRSxHQUFHLEVBQUUsQ0FBQyxRQUFRLFNBQVVBLEdBQUFBLEVBQUc7b0JBQ2xELGVBQWUsR0FBR0EsS0FBRyxFQUFFQSxJQUFBQSxDQUFHO2dCQUMzQixFQUFDLEdBQUcsT0FBTyw0QkFBNEIsT0FBTyxpQkFBaUIsR0FBRyxPQUFPLDBCQUEwQixFQUFFLENBQUMsR0FBRyxRQUFRLE9BQU8sRUFBRSxDQUFDLENBQUMsUUFBUSxTQUFVQSxHQUFBQSxFQUFHO29CQUNoSixPQUFPLGVBQWUsR0FBR0EsS0FBRyxPQUFPLHlCQUF5QixHQUFHQSxJQUFFLENBQUM7Z0JBQ25FLEVBQUM7WUFDSDtZQUNELE9BQU87UUFDUjtRQUNELE9BQU8sVUFBVSxnQkFBZ0IsT0FBTyxRQUFRLGFBQWEsTUFBTSxPQUFPLFFBQVEsYUFBYSxPQUFPIiwic291cmNlcyI6WyIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3hjLXByb2plY3QrcnVudGltZUAwLjcyLjIvbm9kZV9tb2R1bGVzL0BveGMtcHJvamVjdC9ydW50aW1lL3NyYy9oZWxwZXJzL3R5cGVvZi5qcyIsIi9Vc2Vycy9wZXRlcmphbWVzYmxpenphcmQvcHJvamVjdHMvbm9kZV9tb2R1bGVzLy5wbnBtL0BveGMtcHJvamVjdCtydW50aW1lQDAuNzIuMi9ub2RlX21vZHVsZXMvQG94Yy1wcm9qZWN0L3J1bnRpbWUvc3JjL2hlbHBlcnMvdG9QcmltaXRpdmUuanMiLCIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3hjLXByb2plY3QrcnVudGltZUAwLjcyLjIvbm9kZV9tb2R1bGVzL0BveGMtcHJvamVjdC9ydW50aW1lL3NyYy9oZWxwZXJzL3RvUHJvcGVydHlLZXkuanMiLCIvVXNlcnMvcGV0ZXJqYW1lc2JsaXp6YXJkL3Byb2plY3RzL25vZGVfbW9kdWxlcy8ucG5wbS9Ab3hjLXByb2plY3QrcnVudGltZUAwLjcyLjIvbm9kZV9tb2R1bGVzL0BveGMtcHJvamVjdC9ydW50aW1lL3NyYy9oZWxwZXJzL2RlZmluZVByb3BlcnR5LmpzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9ub2RlX21vZHVsZXMvLnBucG0vQG94Yy1wcm9qZWN0K3J1bnRpbWVAMC43Mi4yL25vZGVfbW9kdWxlcy9Ab3hjLXByb2plY3QvcnVudGltZS9zcmMvaGVscGVycy9vYmplY3RTcHJlYWQyLmpzIl0sInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIF90eXBlb2Yobykge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgcmV0dXJuIG1vZHVsZS5leHBvcnRzID0gX3R5cGVvZiA9IFwiZnVuY3Rpb25cIiA9PSB0eXBlb2YgU3ltYm9sICYmIFwic3ltYm9sXCIgPT0gdHlwZW9mIFN5bWJvbC5pdGVyYXRvciA/IGZ1bmN0aW9uIChvKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBvO1xuICB9IDogZnVuY3Rpb24gKG8pIHtcbiAgICByZXR1cm4gbyAmJiBcImZ1bmN0aW9uXCIgPT0gdHlwZW9mIFN5bWJvbCAmJiBvLmNvbnN0cnVjdG9yID09PSBTeW1ib2wgJiYgbyAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2YgbztcbiAgfSwgbW9kdWxlLmV4cG9ydHMuX19lc01vZHVsZSA9IHRydWUsIG1vZHVsZS5leHBvcnRzW1wiZGVmYXVsdFwiXSA9IG1vZHVsZS5leHBvcnRzLCBfdHlwZW9mKG8pO1xufVxubW9kdWxlLmV4cG9ydHMgPSBfdHlwZW9mLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIF90eXBlb2YgPSByZXF1aXJlKFwiLi90eXBlb2YuanNcIilbXCJkZWZhdWx0XCJdO1xuZnVuY3Rpb24gdG9QcmltaXRpdmUodCwgcikge1xuICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKHQpIHx8ICF0KSByZXR1cm4gdDtcbiAgdmFyIGUgPSB0W1N5bWJvbC50b1ByaW1pdGl2ZV07XG4gIGlmICh2b2lkIDAgIT09IGUpIHtcbiAgICB2YXIgaSA9IGUuY2FsbCh0LCByIHx8IFwiZGVmYXVsdFwiKTtcbiAgICBpZiAoXCJvYmplY3RcIiAhPSBfdHlwZW9mKGkpKSByZXR1cm4gaTtcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQEB0b1ByaW1pdGl2ZSBtdXN0IHJldHVybiBhIHByaW1pdGl2ZSB2YWx1ZS5cIik7XG4gIH1cbiAgcmV0dXJuIChcInN0cmluZ1wiID09PSByID8gU3RyaW5nIDogTnVtYmVyKSh0KTtcbn1cbm1vZHVsZS5leHBvcnRzID0gdG9QcmltaXRpdmUsIG1vZHVsZS5leHBvcnRzLl9fZXNNb2R1bGUgPSB0cnVlLCBtb2R1bGUuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBtb2R1bGUuZXhwb3J0czsiLCJ2YXIgX3R5cGVvZiA9IHJlcXVpcmUoXCIuL3R5cGVvZi5qc1wiKVtcImRlZmF1bHRcIl07XG52YXIgdG9QcmltaXRpdmUgPSByZXF1aXJlKFwiLi90b1ByaW1pdGl2ZS5qc1wiKTtcbmZ1bmN0aW9uIHRvUHJvcGVydHlLZXkodCkge1xuICB2YXIgaSA9IHRvUHJpbWl0aXZlKHQsIFwic3RyaW5nXCIpO1xuICByZXR1cm4gXCJzeW1ib2xcIiA9PSBfdHlwZW9mKGkpID8gaSA6IGkgKyBcIlwiO1xufVxubW9kdWxlLmV4cG9ydHMgPSB0b1Byb3BlcnR5S2V5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIHRvUHJvcGVydHlLZXkgPSByZXF1aXJlKFwiLi90b1Byb3BlcnR5S2V5LmpzXCIpO1xuZnVuY3Rpb24gX2RlZmluZVByb3BlcnR5KGUsIHIsIHQpIHtcbiAgcmV0dXJuIChyID0gdG9Qcm9wZXJ0eUtleShyKSkgaW4gZSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCByLCB7XG4gICAgdmFsdWU6IHQsXG4gICAgZW51bWVyYWJsZTogITAsXG4gICAgY29uZmlndXJhYmxlOiAhMCxcbiAgICB3cml0YWJsZTogITBcbiAgfSkgOiBlW3JdID0gdCwgZTtcbn1cbm1vZHVsZS5leHBvcnRzID0gX2RlZmluZVByb3BlcnR5LCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7IiwidmFyIGRlZmluZVByb3BlcnR5ID0gcmVxdWlyZShcIi4vZGVmaW5lUHJvcGVydHkuanNcIik7XG5mdW5jdGlvbiBvd25LZXlzKGUsIHIpIHtcbiAgdmFyIHQgPSBPYmplY3Qua2V5cyhlKTtcbiAgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHtcbiAgICB2YXIgbyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoZSk7XG4gICAgciAmJiAobyA9IG8uZmlsdGVyKGZ1bmN0aW9uIChyKSB7XG4gICAgICByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCByKS5lbnVtZXJhYmxlO1xuICAgIH0pKSwgdC5wdXNoLmFwcGx5KHQsIG8pO1xuICB9XG4gIHJldHVybiB0O1xufVxuZnVuY3Rpb24gX29iamVjdFNwcmVhZDIoZSkge1xuICBmb3IgKHZhciByID0gMTsgciA8IGFyZ3VtZW50cy5sZW5ndGg7IHIrKykge1xuICAgIHZhciB0ID0gbnVsbCAhPSBhcmd1bWVudHNbcl0gPyBhcmd1bWVudHNbcl0gOiB7fTtcbiAgICByICUgMiA/IG93bktleXMoT2JqZWN0KHQpLCAhMCkuZm9yRWFjaChmdW5jdGlvbiAocikge1xuICAgICAgZGVmaW5lUHJvcGVydHkoZSwgciwgdFtyXSk7XG4gICAgfSkgOiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9ycyA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0aWVzKGUsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHQpKSA6IG93bktleXMoT2JqZWN0KHQpKS5mb3JFYWNoKGZ1bmN0aW9uIChyKSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoZSwgciwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcih0LCByKSk7XG4gICAgfSk7XG4gIH1cbiAgcmV0dXJuIGU7XG59XG5tb2R1bGUuZXhwb3J0cyA9IF9vYmplY3RTcHJlYWQyLCBtb2R1bGUuZXhwb3J0cy5fX2VzTW9kdWxlID0gdHJ1ZSwgbW9kdWxlLmV4cG9ydHNbXCJkZWZhdWx0XCJdID0gbW9kdWxlLmV4cG9ydHM7Il0sIm5hbWVzIjpbIl90eXBlb2YiLCJvIiwidG9QcmltaXRpdmUiLCJ0b1Byb3BlcnR5S2V5IiwiciJdLCJpZ25vcmVMaXN0IjpbMCwxLDIsMyw0XSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/splitLink-B7Cuf2c_.mjs":
/*!*****************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/splitLink-B7Cuf2c_.mjs ***!
  \*****************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createChain: () => (/* binding */ createChain),\n/* harmony export */   splitLink: () => (/* binding */ splitLink)\n/* harmony export */ });\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n\n//#region src/links/internals/createChain.ts\n/** @internal */ function createChain(opts) {\n    return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n        function execute(index = 0, op = opts.op) {\n            const next = opts.links[index];\n            if (!next) throw new Error(\"No more links to execute - did you forget to add an ending link?\");\n            const subscription = next({\n                op,\n                next (nextOp) {\n                    const nextObserver = execute(index + 1, nextOp);\n                    return nextObserver;\n                }\n            });\n            return subscription;\n        }\n        const obs$ = execute();\n        return obs$.subscribe(observer);\n    });\n}\n//#endregion\n//#region src/links/splitLink.ts\nfunction asArray(value) {\n    return Array.isArray(value) ? value : [\n        value\n    ];\n}\nfunction splitLink(opts) {\n    return (runtime)=>{\n        const yes = asArray(opts.true).map((link)=>link(runtime));\n        const no = asArray(opts.false).map((link)=>link(runtime));\n        return (props)=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_0__.observable)((observer)=>{\n                const links = opts.condition(props.op) ? yes : no;\n                return createChain({\n                    op: props.op,\n                    links\n                }).subscribe(observer);\n            });\n        };\n    };\n}\n//#endregion\n //# sourceMappingURL=splitLink-B7Cuf2c_.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMS40LjJfQHRycGMrc2VydmVyQDExLjQuMl90eXBlc2NyaXB0QDUuOC4zX190eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC9zcGxpdExpbmstQjdDdWYyY18ubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7O2lCQVNBLFNBQWdCLFlBSWRBLElBQUFBLEVBRzhDO0lBQzlDLE9BQU8sbUVBQVUsQ0FBQyxDQUFDO1FBQ2pCLFNBQVMsUUFBUSxRQUFRLEdBQUcsS0FBSyxLQUFLLElBQUk7WUFDeEMsTUFBTSxPQUFPLEtBQUssTUFBTTtZQUN4QixLQUFLLEtBQ0gsT0FBTSxJQUFJLE1BQ1I7WUFHSixNQUFNLGVBQWUsS0FBSztnQkFDeEI7Z0JBQ0EsTUFBSyxRQUFRO29CQUNYLE1BQU0sZUFBZSxRQUFRLFFBQVEsR0FBRyxPQUFPO29CQUUvQyxPQUFPO2dCQUNSO1lBQ0YsRUFBQztZQUNGLE9BQU87UUFDUjtRQUVELE1BQU0sT0FBTyxTQUFTO1FBQ3RCLE9BQU8sS0FBSyxVQUFVLFNBQVM7SUFDaEMsRUFBQztBQUNIOzs7QUNsQ0QsU0FBUyxRQUFlQyxLQUFBQSxFQUF3QjtJQUM5QyxPQUFPLE1BQU0sUUFBUSxNQUFNLEdBQUcsUUFBUTtRQUFDLEtBQU07S0FBQTtBQUM5QztBQUNELFNBQWdCLFVBQWlEQyxJQUFBQSxFQVUzQztJQUNwQixPQUFPLENBQUM7UUFDTixNQUFNLE1BQU0sUUFBUSxLQUFLLEtBQUssQ0FBQyxJQUFJLENBQUMsT0FBUyxLQUFLLFFBQVEsQ0FBQztRQUMzRCxNQUFNLEtBQUssUUFBUSxLQUFLLE1BQU0sQ0FBQyxJQUFJLENBQUMsT0FBUyxLQUFLLFFBQVEsQ0FBQztRQUMzRCxPQUFPLENBQUM7WUFDTixPQUFPLG1FQUFVLENBQUMsQ0FBQztnQkFDakIsTUFBTSxRQUFRLEtBQUssVUFBVSxNQUFNLEdBQUcsR0FBRyxNQUFNO2dCQUMvQyxPQUFPLFlBQVk7b0JBQUUsSUFBSSxNQUFNO29CQUFJO2dCQUFPLEVBQUMsQ0FBQyxVQUFVLFNBQVM7WUFDaEUsRUFBQztRQUNIO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9hcHBfY29kZXhjcm1hcHAvYXBwcy9zcmMvbGlua3MvaW50ZXJuYWxzL2NyZWF0ZUNoYWluLnRzIiwiL1VzZXJzL3BldGVyamFtZXNibGl6emFyZC9wcm9qZWN0cy9hcHBfY29kZXhjcm1hcHAvYXBwcy9zcmMvbGlua3Mvc3BsaXRMaW5rLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IG9ic2VydmFibGUgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvb2JzZXJ2YWJsZSc7XG5pbXBvcnQgdHlwZSB7IEFueVJvdXRlciB9IGZyb20gJ0B0cnBjL3NlcnZlci91bnN0YWJsZS1jb3JlLWRvLW5vdC1pbXBvcnQnO1xuaW1wb3J0IHR5cGUge1xuICBPcGVyYXRpb24sXG4gIE9wZXJhdGlvbkxpbmssXG4gIE9wZXJhdGlvblJlc3VsdE9ic2VydmFibGUsXG59IGZyb20gJy4uL3R5cGVzJztcblxuLyoqIEBpbnRlcm5hbCAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNoYWluPFxuICBUUm91dGVyIGV4dGVuZHMgQW55Um91dGVyLFxuICBUSW5wdXQgPSB1bmtub3duLFxuICBUT3V0cHV0ID0gdW5rbm93bixcbj4ob3B0czoge1xuICBsaW5rczogT3BlcmF0aW9uTGluazxUUm91dGVyLCBUSW5wdXQsIFRPdXRwdXQ+W107XG4gIG9wOiBPcGVyYXRpb248VElucHV0Pjtcbn0pOiBPcGVyYXRpb25SZXN1bHRPYnNlcnZhYmxlPFRSb3V0ZXIsIFRPdXRwdXQ+IHtcbiAgcmV0dXJuIG9ic2VydmFibGUoKG9ic2VydmVyKSA9PiB7XG4gICAgZnVuY3Rpb24gZXhlY3V0ZShpbmRleCA9IDAsIG9wID0gb3B0cy5vcCkge1xuICAgICAgY29uc3QgbmV4dCA9IG9wdHMubGlua3NbaW5kZXhdO1xuICAgICAgaWYgKCFuZXh0KSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnTm8gbW9yZSBsaW5rcyB0byBleGVjdXRlIC0gZGlkIHlvdSBmb3JnZXQgdG8gYWRkIGFuIGVuZGluZyBsaW5rPycsXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBjb25zdCBzdWJzY3JpcHRpb24gPSBuZXh0KHtcbiAgICAgICAgb3AsXG4gICAgICAgIG5leHQobmV4dE9wKSB7XG4gICAgICAgICAgY29uc3QgbmV4dE9ic2VydmVyID0gZXhlY3V0ZShpbmRleCArIDEsIG5leHRPcCk7XG5cbiAgICAgICAgICByZXR1cm4gbmV4dE9ic2VydmVyO1xuICAgICAgICB9LFxuICAgICAgfSk7XG4gICAgICByZXR1cm4gc3Vic2NyaXB0aW9uO1xuICAgIH1cblxuICAgIGNvbnN0IG9icyQgPSBleGVjdXRlKCk7XG4gICAgcmV0dXJuIG9icyQuc3Vic2NyaWJlKG9ic2VydmVyKTtcbiAgfSk7XG59XG4iLCJpbXBvcnQgeyBvYnNlcnZhYmxlIH0gZnJvbSAnQHRycGMvc2VydmVyL29ic2VydmFibGUnO1xuaW1wb3J0IHR5cGUgeyBBbnlSb3V0ZXIgfSBmcm9tICdAdHJwYy9zZXJ2ZXIvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0JztcbmltcG9ydCB7IGNyZWF0ZUNoYWluIH0gZnJvbSAnLi9pbnRlcm5hbHMvY3JlYXRlQ2hhaW4nO1xuaW1wb3J0IHR5cGUgeyBPcGVyYXRpb24sIFRSUENMaW5rIH0gZnJvbSAnLi90eXBlcyc7XG5cbmZ1bmN0aW9uIGFzQXJyYXk8VFR5cGU+KHZhbHVlOiBUVHlwZSB8IFRUeXBlW10pIHtcbiAgcmV0dXJuIEFycmF5LmlzQXJyYXkodmFsdWUpID8gdmFsdWUgOiBbdmFsdWVdO1xufVxuZXhwb3J0IGZ1bmN0aW9uIHNwbGl0TGluazxUUm91dGVyIGV4dGVuZHMgQW55Um91dGVyID0gQW55Um91dGVyPihvcHRzOiB7XG4gIGNvbmRpdGlvbjogKG9wOiBPcGVyYXRpb24pID0+IGJvb2xlYW47XG4gIC8qKlxuICAgKiBUaGUgbGluayB0byBleGVjdXRlIG5leHQgaWYgdGhlIHRlc3QgZnVuY3Rpb24gcmV0dXJucyBgdHJ1ZWAuXG4gICAqL1xuICB0cnVlOiBUUlBDTGluazxUUm91dGVyPiB8IFRSUENMaW5rPFRSb3V0ZXI+W107XG4gIC8qKlxuICAgKiBUaGUgbGluayB0byBleGVjdXRlIG5leHQgaWYgdGhlIHRlc3QgZnVuY3Rpb24gcmV0dXJucyBgZmFsc2VgLlxuICAgKi9cbiAgZmFsc2U6IFRSUENMaW5rPFRSb3V0ZXI+IHwgVFJQQ0xpbms8VFJvdXRlcj5bXTtcbn0pOiBUUlBDTGluazxUUm91dGVyPiB7XG4gIHJldHVybiAocnVudGltZSkgPT4ge1xuICAgIGNvbnN0IHllcyA9IGFzQXJyYXkob3B0cy50cnVlKS5tYXAoKGxpbmspID0+IGxpbmsocnVudGltZSkpO1xuICAgIGNvbnN0IG5vID0gYXNBcnJheShvcHRzLmZhbHNlKS5tYXAoKGxpbmspID0+IGxpbmsocnVudGltZSkpO1xuICAgIHJldHVybiAocHJvcHMpID0+IHtcbiAgICAgIHJldHVybiBvYnNlcnZhYmxlKChvYnNlcnZlcikgPT4ge1xuICAgICAgICBjb25zdCBsaW5rcyA9IG9wdHMuY29uZGl0aW9uKHByb3BzLm9wKSA/IHllcyA6IG5vO1xuICAgICAgICByZXR1cm4gY3JlYXRlQ2hhaW4oeyBvcDogcHJvcHMub3AsIGxpbmtzIH0pLnN1YnNjcmliZShvYnNlcnZlcik7XG4gICAgICB9KTtcbiAgICB9O1xuICB9O1xufVxuIl0sIm5hbWVzIjpbIm9wdHM6IHtcbiAgbGlua3M6IE9wZXJhdGlvbkxpbms8VFJvdXRlciwgVElucHV0LCBUT3V0cHV0PltdO1xuICBvcDogT3BlcmF0aW9uPFRJbnB1dD47XG59IiwidmFsdWU6IFRUeXBlIHwgVFR5cGVbXSIsIm9wdHM6IHtcbiAgY29uZGl0aW9uOiAob3A6IE9wZXJhdGlvbikgPT4gYm9vbGVhbjtcbiAgLyoqXG4gICAqIFRoZSBsaW5rIHRvIGV4ZWN1dGUgbmV4dCBpZiB0aGUgdGVzdCBmdW5jdGlvbiByZXR1cm5zIGB0cnVlYC5cbiAgICovXG4gIHRydWU6IFRSUENMaW5rPFRSb3V0ZXI+IHwgVFJQQ0xpbms8VFJvdXRlcj5bXTtcbiAgLyoqXG4gICAqIFRoZSBsaW5rIHRvIGV4ZWN1dGUgbmV4dCBpZiB0aGUgdGVzdCBmdW5jdGlvbiByZXR1cm5zIGBmYWxzZWAuXG4gICAqL1xuICBmYWxzZTogVFJQQ0xpbms8VFJvdXRlcj4gfCBUUlBDTGluazxUUm91dGVyPltdO1xufSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/splitLink-B7Cuf2c_.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/unstable-internals-Bg7n9BBj.mjs":
/*!**************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/unstable-internals-Bg7n9BBj.mjs ***!
  \**************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   getTransformer: () => (/* binding */ getTransformer)\n/* harmony export */ });\n//#region src/internals/transformer.ts\n/**\n* @internal\n*/ /**\n* @internal\n*/ function getTransformer(transformer) {\n    const _transformer = transformer;\n    if (!_transformer) return {\n        input: {\n            serialize: (data)=>data,\n            deserialize: (data)=>data\n        },\n        output: {\n            serialize: (data)=>data,\n            deserialize: (data)=>data\n        }\n    };\n    if (\"input\" in _transformer) return _transformer;\n    return {\n        input: _transformer,\n        output: _transformer\n    };\n}\n//#endregion\n //# sourceMappingURL=unstable-internals-Bg7n9BBj.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLi4vbm9kZV9tb2R1bGVzLy5wbnBtL0B0cnBjK2NsaWVudEAxMS40LjJfQHRycGMrc2VydmVyQDExLjQuMl90eXBlc2NyaXB0QDUuOC4zX190eXBlc2NyaXB0QDUuOC4zL25vZGVfbW9kdWxlcy9AdHJwYy9jbGllbnQvZGlzdC91bnN0YWJsZS1pbnRlcm5hbHMtQmc3bjlCQmoubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7OztHQWdEQSxTQUFnQixlQUNkQSxXQUFBQSxFQUl5QjtJQUN6QixNQUFNLGVBQ0o7SUFDRixLQUFLLGFBQ0gsUUFBTztRQUNMLE9BQU87WUFDTCxXQUFXLENBQUMsT0FBUztZQUNyQixhQUFhLENBQUMsT0FBUztRQUN4QjtRQUNELFFBQVE7WUFDTixXQUFXLENBQUMsT0FBUztZQUNyQixhQUFhLENBQUMsT0FBUztRQUN4QjtJQUNGO0lBRUgsSUFBSSxXQUFXLGFBQ2IsUUFBTztJQUVULE9BQU87UUFDTCxPQUFPO1FBQ1AsUUFBUTtJQUNUO0FBQ0YiLCJzb3VyY2VzIjpbIi9Vc2Vycy9wZXRlcmphbWVzYmxpenphcmQvcHJvamVjdHMvYXBwX2NvZGV4Y3JtYXBwL2FwcHMvc3JjL2ludGVybmFscy90cmFuc2Zvcm1lci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgdHlwZSB7XG4gIEFueUNsaWVudFR5cGVzLFxuICBDb21iaW5lZERhdGFUcmFuc2Zvcm1lcixcbiAgRGF0YVRyYW5zZm9ybWVyT3B0aW9ucyxcbiAgVHlwZUVycm9yLFxufSBmcm9tICdAdHJwYy9zZXJ2ZXIvdW5zdGFibGUtY29yZS1kby1ub3QtaW1wb3J0JztcblxuLyoqXG4gKiBAaW50ZXJuYWxcbiAqL1xuZXhwb3J0IHR5cGUgQ29lcmNlZFRyYW5zZm9ybWVyUGFyYW1ldGVycyA9IHtcbiAgdHJhbnNmb3JtZXI/OiBEYXRhVHJhbnNmb3JtZXJPcHRpb25zO1xufTtcblxudHlwZSBUcmFuc2Zvcm1lck9wdGlvblllcyA9IHtcbiAgLyoqXG4gICAqIERhdGEgdHJhbnNmb3JtZXJcbiAgICpcbiAgICogWW91IG11c3QgdXNlIHRoZSBzYW1lIHRyYW5zZm9ybWVyIG9uIHRoZSBiYWNrZW5kIGFuZCBmcm9udGVuZFxuICAgKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL3YxMS9kYXRhLXRyYW5zZm9ybWVyc1xuICAgKiovXG4gIHRyYW5zZm9ybWVyOiBEYXRhVHJhbnNmb3JtZXJPcHRpb25zO1xufTtcbnR5cGUgVHJhbnNmb3JtZXJPcHRpb25ObyA9IHtcbiAgLyoqXG4gICAqIERhdGEgdHJhbnNmb3JtZXJcbiAgICpcbiAgICogWW91IG11c3QgdXNlIHRoZSBzYW1lIHRyYW5zZm9ybWVyIG9uIHRoZSBiYWNrZW5kIGFuZCBmcm9udGVuZFxuICAgKiBAc2VlIGh0dHBzOi8vdHJwYy5pby9kb2NzL3YxMS9kYXRhLXRyYW5zZm9ybWVyc1xuICAgKiovXG4gIHRyYW5zZm9ybWVyPzogVHlwZUVycm9yPCdZb3UgbXVzdCBkZWZpbmUgYSB0cmFuc2Zvcm1lciBvbiB5b3VyIHlvdXIgYGluaXRUUlBDYC1vYmplY3QgZmlyc3QnPjtcbn07XG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCB0eXBlIFRyYW5zZm9ybWVyT3B0aW9uczxcbiAgVFJvb3QgZXh0ZW5kcyBQaWNrPEFueUNsaWVudFR5cGVzLCAndHJhbnNmb3JtZXInPixcbj4gPSBUUm9vdFsndHJhbnNmb3JtZXInXSBleHRlbmRzIHRydWVcbiAgPyBUcmFuc2Zvcm1lck9wdGlvblllc1xuICA6IFRyYW5zZm9ybWVyT3B0aW9uTm87XG4vKipcbiAqIEBpbnRlcm5hbFxuICovXG5cbi8qKlxuICogQGludGVybmFsXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXRUcmFuc2Zvcm1lcihcbiAgdHJhbnNmb3JtZXI6XG4gICAgfCBUcmFuc2Zvcm1lck9wdGlvbnM8eyB0cmFuc2Zvcm1lcjogZmFsc2UgfT5bJ3RyYW5zZm9ybWVyJ11cbiAgICB8IFRyYW5zZm9ybWVyT3B0aW9uczx7IHRyYW5zZm9ybWVyOiB0cnVlIH0+Wyd0cmFuc2Zvcm1lciddXG4gICAgfCB1bmRlZmluZWQsXG4pOiBDb21iaW5lZERhdGFUcmFuc2Zvcm1lciB7XG4gIGNvbnN0IF90cmFuc2Zvcm1lciA9XG4gICAgdHJhbnNmb3JtZXIgYXMgQ29lcmNlZFRyYW5zZm9ybWVyUGFyYW1ldGVyc1sndHJhbnNmb3JtZXInXTtcbiAgaWYgKCFfdHJhbnNmb3JtZXIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgaW5wdXQ6IHtcbiAgICAgICAgc2VyaWFsaXplOiAoZGF0YSkgPT4gZGF0YSxcbiAgICAgICAgZGVzZXJpYWxpemU6IChkYXRhKSA9PiBkYXRhLFxuICAgICAgfSxcbiAgICAgIG91dHB1dDoge1xuICAgICAgICBzZXJpYWxpemU6IChkYXRhKSA9PiBkYXRhLFxuICAgICAgICBkZXNlcmlhbGl6ZTogKGRhdGEpID0+IGRhdGEsXG4gICAgICB9LFxuICAgIH07XG4gIH1cbiAgaWYgKCdpbnB1dCcgaW4gX3RyYW5zZm9ybWVyKSB7XG4gICAgcmV0dXJuIF90cmFuc2Zvcm1lcjtcbiAgfVxuICByZXR1cm4ge1xuICAgIGlucHV0OiBfdHJhbnNmb3JtZXIsXG4gICAgb3V0cHV0OiBfdHJhbnNmb3JtZXIsXG4gIH07XG59XG4iXSwibmFtZXMiOlsidHJhbnNmb3JtZXI6XG4gICAgfCBUcmFuc2Zvcm1lck9wdGlvbnM8eyB0cmFuc2Zvcm1lcjogZmFsc2UgfT5bJ3RyYW5zZm9ybWVyJ11cbiAgICB8IFRyYW5zZm9ybWVyT3B0aW9uczx7IHRyYW5zZm9ybWVyOiB0cnVlIH0+Wyd0cmFuc2Zvcm1lciddXG4gICAgfCB1bmRlZmluZWQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/unstable-internals-Bg7n9BBj.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/wsLink-H5IjZfJW.mjs":
/*!**************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/wsLink-H5IjZfJW.mjs ***!
  \**************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   createWSClient: () => (/* binding */ createWSClient),\n/* harmony export */   resultOf: () => (/* binding */ resultOf),\n/* harmony export */   wsLink: () => (/* binding */ wsLink)\n/* harmony export */ });\n/* harmony import */ var _objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./objectSpread2-BvkFp-_Y.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/objectSpread2-BvkFp-_Y.mjs\");\n/* harmony import */ var _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./TRPCClientError-CjKyS10w.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/TRPCClientError-CjKyS10w.mjs\");\n/* harmony import */ var _unstable_internals_Bg7n9BBj_mjs__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./unstable-internals-Bg7n9BBj.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/unstable-internals-Bg7n9BBj.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-CUiPknO-.mjs\");\n/* harmony import */ var _trpc_server_observable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/observable */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/observable-UMO3vUa_.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/tracked-gU3ttYjg.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n\n\n\n\n//#region src/links/wsLink/wsClient/options.ts\nconst lazyDefaults = {\n    enabled: false,\n    closeMs: 0\n};\nconst keepAliveDefaults = {\n    enabled: false,\n    pongTimeoutMs: 1e3,\n    intervalMs: 5e3\n};\n/**\n* Calculates a delay for exponential backoff based on the retry attempt index.\n* The delay starts at 0 for the first attempt and doubles for each subsequent attempt,\n* capped at 30 seconds.\n*/ const exponentialBackoff = (attemptIndex)=>{\n    return attemptIndex === 0 ? 0 : Math.min(1e3 * 2 ** attemptIndex, 3e4);\n};\n//#endregion\n//#region src/links/internals/urlWithConnectionParams.ts\n/**\n* Get the result of a value or function that returns a value\n* It also optionally accepts typesafe arguments for the function\n*/ const resultOf = (value, ...args)=>{\n    return typeof value === \"function\" ? value(...args) : value;\n};\n//#endregion\n//#region src/links/wsLink/wsClient/utils.ts\nvar import_defineProperty$3 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\nvar TRPCWebSocketClosedError = class TRPCWebSocketClosedError extends Error {\n    constructor(opts){\n        super(opts.message, {\n            cause: opts.cause\n        });\n        this.name = \"TRPCWebSocketClosedError\";\n        Object.setPrototypeOf(this, TRPCWebSocketClosedError.prototype);\n    }\n};\n/**\n* Utility class for managing a timeout that can be started, stopped, and reset.\n* Useful for scenarios where the timeout duration is reset dynamically based on events.\n*/ var ResettableTimeout = class {\n    constructor(onTimeout, timeoutMs){\n        this.onTimeout = onTimeout;\n        this.timeoutMs = timeoutMs;\n        (0, import_defineProperty$3.default)(this, \"timeout\", void 0);\n    }\n    /**\n\t* Resets the current timeout, restarting it with the same duration.\n\t* Does nothing if no timeout is active.\n\t*/ reset() {\n        if (!this.timeout) return;\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(this.onTimeout, this.timeoutMs);\n    }\n    start() {\n        clearTimeout(this.timeout);\n        this.timeout = setTimeout(this.onTimeout, this.timeoutMs);\n    }\n    stop() {\n        clearTimeout(this.timeout);\n        this.timeout = void 0;\n    }\n};\nfunction withResolvers() {\n    let resolve;\n    let reject;\n    const promise = new Promise((res, rej)=>{\n        resolve = res;\n        reject = rej;\n    });\n    return {\n        promise,\n        resolve,\n        reject\n    };\n}\n/**\n* Resolves a WebSocket URL and optionally appends connection parameters.\n*\n* If connectionParams are provided, appends 'connectionParams=1' query parameter.\n*/ async function prepareUrl(urlOptions) {\n    const url = await resultOf(urlOptions.url);\n    if (!urlOptions.connectionParams) return url;\n    const prefix = url.includes(\"?\") ? \"&\" : \"?\";\n    const connectionParams = `${prefix}connectionParams=1`;\n    return url + connectionParams;\n}\nasync function buildConnectionMessage(connectionParams) {\n    const message = {\n        method: \"connectionParams\",\n        data: await resultOf(connectionParams)\n    };\n    return JSON.stringify(message);\n}\n//#endregion\n//#region src/links/wsLink/wsClient/requestManager.ts\nvar import_defineProperty$2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\n/**\n* Manages WebSocket requests, tracking their lifecycle and providing utility methods\n* for handling outgoing and pending requests.\n*\n* - **Outgoing requests**: Requests that are queued and waiting to be sent.\n* - **Pending requests**: Requests that have been sent and are in flight awaiting a response.\n*   For subscriptions, multiple responses may be received until the subscription is closed.\n*/ var RequestManager = class {\n    constructor(){\n        (0, import_defineProperty$2.default)(this, \"outgoingRequests\", new Array());\n        (0, import_defineProperty$2.default)(this, \"pendingRequests\", {});\n    }\n    /**\n\t* Registers a new request by adding it to the outgoing queue and setting up\n\t* callbacks for lifecycle events such as completion or error.\n\t*\n\t* @param message - The outgoing message to be sent.\n\t* @param callbacks - Callback functions to observe the request's state.\n\t* @returns A cleanup function to manually remove the request.\n\t*/ register(message, callbacks) {\n        const { promise: end, resolve } = withResolvers();\n        this.outgoingRequests.push({\n            id: String(message.id),\n            message,\n            end,\n            callbacks: {\n                next: callbacks.next,\n                complete: ()=>{\n                    callbacks.complete();\n                    resolve();\n                },\n                error: (e)=>{\n                    callbacks.error(e);\n                    resolve();\n                }\n            }\n        });\n        return ()=>{\n            this.delete(message.id);\n            callbacks.complete();\n            resolve();\n        };\n    }\n    /**\n\t* Deletes a request from both the outgoing and pending collections, if it exists.\n\t*/ delete(messageId) {\n        if (messageId === null) return;\n        this.outgoingRequests = this.outgoingRequests.filter(({ id })=>id !== String(messageId));\n        delete this.pendingRequests[String(messageId)];\n    }\n    /**\n\t* Moves all outgoing requests to the pending state and clears the outgoing queue.\n\t*\n\t* The caller is expected to handle the actual sending of the requests\n\t* (e.g., sending them over the network) after this method is called.\n\t*\n\t* @returns The list of requests that were transitioned to the pending state.\n\t*/ flush() {\n        const requests = this.outgoingRequests;\n        this.outgoingRequests = [];\n        for (const request of requests)this.pendingRequests[request.id] = request;\n        return requests;\n    }\n    /**\n\t* Retrieves all currently pending requests, which are in flight awaiting responses\n\t* or handling ongoing subscriptions.\n\t*/ getPendingRequests() {\n        return Object.values(this.pendingRequests);\n    }\n    /**\n\t* Retrieves a specific pending request by its message ID.\n\t*/ getPendingRequest(messageId) {\n        if (messageId === null) return null;\n        return this.pendingRequests[String(messageId)];\n    }\n    /**\n\t* Retrieves all outgoing requests, which are waiting to be sent.\n\t*/ getOutgoingRequests() {\n        return this.outgoingRequests;\n    }\n    /**\n\t* Retrieves all requests, both outgoing and pending, with their respective states.\n\t*\n\t* @returns An array of all requests with their state (\"outgoing\" or \"pending\").\n\t*/ getRequests() {\n        return [\n            ...this.getOutgoingRequests().map((request)=>({\n                    state: \"outgoing\",\n                    message: request.message,\n                    end: request.end,\n                    callbacks: request.callbacks\n                })),\n            ...this.getPendingRequests().map((request)=>({\n                    state: \"pending\",\n                    message: request.message,\n                    end: request.end,\n                    callbacks: request.callbacks\n                }))\n        ];\n    }\n    /**\n\t* Checks if there are any pending requests, including ongoing subscriptions.\n\t*/ hasPendingRequests() {\n        return this.getPendingRequests().length > 0;\n    }\n    /**\n\t* Checks if there are any pending subscriptions\n\t*/ hasPendingSubscriptions() {\n        return this.getPendingRequests().some((request)=>request.message.method === \"subscription\");\n    }\n    /**\n\t* Checks if there are any outgoing requests waiting to be sent.\n\t*/ hasOutgoingRequests() {\n        return this.outgoingRequests.length > 0;\n    }\n};\n//#endregion\n//#region src/links/wsLink/wsClient/wsConnection.ts\nvar import_defineProperty$1 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\n/**\n* Opens a WebSocket connection asynchronously and returns a promise\n* that resolves when the connection is successfully established.\n* The promise rejects if an error occurs during the connection attempt.\n*/ function asyncWsOpen(ws) {\n    const { promise, resolve, reject } = withResolvers();\n    ws.addEventListener(\"open\", ()=>{\n        ws.removeEventListener(\"error\", reject);\n        resolve();\n    });\n    ws.addEventListener(\"error\", reject);\n    return promise;\n}\n/**\n* Sets up a periodic ping-pong mechanism to keep the WebSocket connection alive.\n*\n* - Sends \"PING\" messages at regular intervals defined by `intervalMs`.\n* - If a \"PONG\" response is not received within the `pongTimeoutMs`, the WebSocket is closed.\n* - The ping timer resets upon receiving any message to maintain activity.\n* - Automatically starts the ping process when the WebSocket connection is opened.\n* - Cleans up timers when the WebSocket is closed.\n*\n* @param ws - The WebSocket instance to manage.\n* @param options - Configuration options for ping-pong intervals and timeouts.\n*/ function setupPingInterval(ws, { intervalMs, pongTimeoutMs }) {\n    let pingTimeout;\n    let pongTimeout;\n    function start() {\n        pingTimeout = setTimeout(()=>{\n            ws.send(\"PING\");\n            pongTimeout = setTimeout(()=>{\n                ws.close();\n            }, pongTimeoutMs);\n        }, intervalMs);\n    }\n    function reset() {\n        clearTimeout(pingTimeout);\n        start();\n    }\n    function pong() {\n        clearTimeout(pongTimeout);\n        reset();\n    }\n    ws.addEventListener(\"open\", start);\n    ws.addEventListener(\"message\", ({ data })=>{\n        clearTimeout(pingTimeout);\n        start();\n        if (data === \"PONG\") pong();\n    });\n    ws.addEventListener(\"close\", ()=>{\n        clearTimeout(pingTimeout);\n        clearTimeout(pongTimeout);\n    });\n}\n/**\n* Manages a WebSocket connection with support for reconnection, keep-alive mechanisms,\n* and observable state tracking.\n*/ var WsConnection = class WsConnection {\n    constructor(opts){\n        var _opts$WebSocketPonyfi;\n        (0, import_defineProperty$1.default)(this, \"id\", ++WsConnection.connectCount);\n        (0, import_defineProperty$1.default)(this, \"WebSocketPonyfill\", void 0);\n        (0, import_defineProperty$1.default)(this, \"urlOptions\", void 0);\n        (0, import_defineProperty$1.default)(this, \"keepAliveOpts\", void 0);\n        (0, import_defineProperty$1.default)(this, \"wsObservable\", (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_3__.behaviorSubject)(null));\n        (0, import_defineProperty$1.default)(this, \"openPromise\", null);\n        this.WebSocketPonyfill = (_opts$WebSocketPonyfi = opts.WebSocketPonyfill) !== null && _opts$WebSocketPonyfi !== void 0 ? _opts$WebSocketPonyfi : WebSocket;\n        if (!this.WebSocketPonyfill) throw new Error(\"No WebSocket implementation found - you probably don't want to use this on the server, but if you do you need to pass a `WebSocket`-ponyfill\");\n        this.urlOptions = opts.urlOptions;\n        this.keepAliveOpts = opts.keepAlive;\n    }\n    get ws() {\n        return this.wsObservable.get();\n    }\n    set ws(ws) {\n        this.wsObservable.next(ws);\n    }\n    /**\n\t* Checks if the WebSocket connection is open and ready to communicate.\n\t*/ isOpen() {\n        return !!this.ws && this.ws.readyState === this.WebSocketPonyfill.OPEN && !this.openPromise;\n    }\n    /**\n\t* Checks if the WebSocket connection is closed or in the process of closing.\n\t*/ isClosed() {\n        return !!this.ws && (this.ws.readyState === this.WebSocketPonyfill.CLOSING || this.ws.readyState === this.WebSocketPonyfill.CLOSED);\n    }\n    async open() {\n        var _this = this;\n        if (_this.openPromise) return _this.openPromise;\n        _this.id = ++WsConnection.connectCount;\n        const wsPromise = prepareUrl(_this.urlOptions).then((url)=>new _this.WebSocketPonyfill(url));\n        _this.openPromise = wsPromise.then(async (ws)=>{\n            _this.ws = ws;\n            ws.addEventListener(\"message\", function({ data }) {\n                if (data === \"PING\") this.send(\"PONG\");\n            });\n            if (_this.keepAliveOpts.enabled) setupPingInterval(ws, _this.keepAliveOpts);\n            ws.addEventListener(\"close\", ()=>{\n                if (_this.ws === ws) _this.ws = null;\n            });\n            await asyncWsOpen(ws);\n            if (_this.urlOptions.connectionParams) ws.send(await buildConnectionMessage(_this.urlOptions.connectionParams));\n        });\n        try {\n            await _this.openPromise;\n        } finally{\n            _this.openPromise = null;\n        }\n    }\n    /**\n\t* Closes the WebSocket connection gracefully.\n\t* Waits for any ongoing open operation to complete before closing.\n\t*/ async close() {\n        var _this2 = this;\n        try {\n            await _this2.openPromise;\n        } finally{\n            var _this$ws;\n            (_this$ws = _this2.ws) === null || _this$ws === void 0 || _this$ws.close();\n        }\n    }\n};\n(0, import_defineProperty$1.default)(WsConnection, \"connectCount\", 0);\n/**\n* Provides a backward-compatible representation of the connection state.\n*/ function backwardCompatibility(connection) {\n    if (connection.isOpen()) return {\n        id: connection.id,\n        state: \"open\",\n        ws: connection.ws\n    };\n    if (connection.isClosed()) return {\n        id: connection.id,\n        state: \"closed\",\n        ws: connection.ws\n    };\n    if (!connection.ws) return null;\n    return {\n        id: connection.id,\n        state: \"connecting\",\n        ws: connection.ws\n    };\n}\n//#endregion\n//#region src/links/wsLink/wsClient/wsClient.ts\nvar import_defineProperty = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_defineProperty)(), 1);\nvar import_objectSpread2 = (0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_objectSpread2_BvkFp_Y_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* A WebSocket client for managing TRPC operations, supporting lazy initialization,\n* reconnection, keep-alive, and request management.\n*/ var WsClient = class {\n    constructor(opts){\n        var _opts$retryDelayMs;\n        (0, import_defineProperty.default)(this, \"connectionState\", void 0);\n        (0, import_defineProperty.default)(this, \"allowReconnect\", false);\n        (0, import_defineProperty.default)(this, \"requestManager\", new RequestManager());\n        (0, import_defineProperty.default)(this, \"activeConnection\", void 0);\n        (0, import_defineProperty.default)(this, \"reconnectRetryDelay\", void 0);\n        (0, import_defineProperty.default)(this, \"inactivityTimeout\", void 0);\n        (0, import_defineProperty.default)(this, \"callbacks\", void 0);\n        (0, import_defineProperty.default)(this, \"lazyMode\", void 0);\n        (0, import_defineProperty.default)(this, \"reconnecting\", null);\n        this.callbacks = {\n            onOpen: opts.onOpen,\n            onClose: opts.onClose,\n            onError: opts.onError\n        };\n        const lazyOptions = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, lazyDefaults), opts.lazy);\n        this.inactivityTimeout = new ResettableTimeout(()=>{\n            if (this.requestManager.hasOutgoingRequests() || this.requestManager.hasPendingRequests()) {\n                this.inactivityTimeout.reset();\n                return;\n            }\n            this.close().catch(()=>null);\n        }, lazyOptions.closeMs);\n        this.activeConnection = new WsConnection({\n            WebSocketPonyfill: opts.WebSocket,\n            urlOptions: opts,\n            keepAlive: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, keepAliveDefaults), opts.keepAlive)\n        });\n        this.activeConnection.wsObservable.subscribe({\n            next: (ws)=>{\n                if (!ws) return;\n                this.setupWebSocketListeners(ws);\n            }\n        });\n        this.reconnectRetryDelay = (_opts$retryDelayMs = opts.retryDelayMs) !== null && _opts$retryDelayMs !== void 0 ? _opts$retryDelayMs : exponentialBackoff;\n        this.lazyMode = lazyOptions.enabled;\n        this.connectionState = (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_3__.behaviorSubject)({\n            type: \"state\",\n            state: lazyOptions.enabled ? \"idle\" : \"connecting\",\n            error: null\n        });\n        if (!this.lazyMode) this.open().catch(()=>null);\n    }\n    /**\n\t* Opens the WebSocket connection. Handles reconnection attempts and updates\n\t* the connection state accordingly.\n\t*/ async open() {\n        var _this = this;\n        _this.allowReconnect = true;\n        if (_this.connectionState.get().state !== \"connecting\") _this.connectionState.next({\n            type: \"state\",\n            state: \"connecting\",\n            error: null\n        });\n        try {\n            await _this.activeConnection.open();\n        } catch (error) {\n            _this.reconnect(new TRPCWebSocketClosedError({\n                message: \"Initialization error\",\n                cause: error\n            }));\n            return _this.reconnecting;\n        }\n    }\n    /**\n\t* Closes the WebSocket connection and stops managing requests.\n\t* Ensures all outgoing and pending requests are properly finalized.\n\t*/ async close() {\n        var _this2 = this;\n        _this2.allowReconnect = false;\n        _this2.inactivityTimeout.stop();\n        const requestsToAwait = [];\n        for (const request of _this2.requestManager.getRequests())if (request.message.method === \"subscription\") request.callbacks.complete();\n        else if (request.state === \"outgoing\") request.callbacks.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(new TRPCWebSocketClosedError({\n            message: \"Closed before connection was established\"\n        })));\n        else requestsToAwait.push(request.end);\n        await Promise.all(requestsToAwait).catch(()=>null);\n        await _this2.activeConnection.close().catch(()=>null);\n        _this2.connectionState.next({\n            type: \"state\",\n            state: \"idle\",\n            error: null\n        });\n    }\n    /**\n\t* Method to request the server.\n\t* Handles data transformation, batching of requests, and subscription lifecycle.\n\t*\n\t* @param op - The operation details including id, type, path, input and signal\n\t* @param transformer - Data transformer for serializing requests and deserializing responses\n\t* @param lastEventId - Optional ID of the last received event for subscriptions\n\t*\n\t* @returns An observable that emits operation results and handles cleanup\n\t*/ request({ op: { id, type, path, input, signal }, transformer, lastEventId }) {\n        return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_4__.observable)((observer)=>{\n            const abort = this.batchSend({\n                id,\n                method: type,\n                params: {\n                    input: transformer.input.serialize(input),\n                    path,\n                    lastEventId\n                }\n            }, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, observer), {}, {\n                next (event) {\n                    const transformed = (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_5__.transformResult)(event, transformer.output);\n                    if (!transformed.ok) {\n                        observer.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(transformed.error));\n                        return;\n                    }\n                    observer.next({\n                        result: transformed.result\n                    });\n                }\n            }));\n            return ()=>{\n                abort();\n                if (type === \"subscription\" && this.activeConnection.isOpen()) this.send({\n                    id,\n                    method: \"subscription.stop\"\n                });\n                signal === null || signal === void 0 || signal.removeEventListener(\"abort\", abort);\n            };\n        });\n    }\n    get connection() {\n        return backwardCompatibility(this.activeConnection);\n    }\n    reconnect(closedError) {\n        var _this3 = this;\n        this.connectionState.next({\n            type: \"state\",\n            state: \"connecting\",\n            error: _TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(closedError)\n        });\n        if (this.reconnecting) return;\n        const tryReconnect = async (attemptIndex)=>{\n            try {\n                await (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_6__.sleep)(_this3.reconnectRetryDelay(attemptIndex));\n                if (_this3.allowReconnect) {\n                    await _this3.activeConnection.close();\n                    await _this3.activeConnection.open();\n                    if (_this3.requestManager.hasPendingRequests()) _this3.send(_this3.requestManager.getPendingRequests().map(({ message })=>message));\n                }\n                _this3.reconnecting = null;\n            } catch (_unused) {\n                await tryReconnect(attemptIndex + 1);\n            }\n        };\n        this.reconnecting = tryReconnect(0);\n    }\n    setupWebSocketListeners(ws) {\n        var _this4 = this;\n        const handleCloseOrError = (cause)=>{\n            const reqs = this.requestManager.getPendingRequests();\n            for (const { message, callbacks } of reqs){\n                if (message.method === \"subscription\") continue;\n                callbacks.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(cause !== null && cause !== void 0 ? cause : new TRPCWebSocketClosedError({\n                    message: \"WebSocket closed\",\n                    cause\n                })));\n                this.requestManager.delete(message.id);\n            }\n        };\n        ws.addEventListener(\"open\", ()=>{\n            (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_6__.run)(async ()=>{\n                var _this$callbacks$onOpe, _this$callbacks;\n                if (_this4.lazyMode) _this4.inactivityTimeout.start();\n                (_this$callbacks$onOpe = (_this$callbacks = _this4.callbacks).onOpen) === null || _this$callbacks$onOpe === void 0 || _this$callbacks$onOpe.call(_this$callbacks);\n                _this4.connectionState.next({\n                    type: \"state\",\n                    state: \"pending\",\n                    error: null\n                });\n            }).catch((error)=>{\n                ws.close(3e3);\n                handleCloseOrError(error);\n            });\n        });\n        ws.addEventListener(\"message\", ({ data })=>{\n            this.inactivityTimeout.reset();\n            if (typeof data !== \"string\" || [\n                \"PING\",\n                \"PONG\"\n            ].includes(data)) return;\n            const incomingMessage = JSON.parse(data);\n            if (\"method\" in incomingMessage) {\n                this.handleIncomingRequest(incomingMessage);\n                return;\n            }\n            this.handleResponseMessage(incomingMessage);\n        });\n        ws.addEventListener(\"close\", (event)=>{\n            var _this$callbacks$onClo, _this$callbacks2;\n            handleCloseOrError(event);\n            (_this$callbacks$onClo = (_this$callbacks2 = this.callbacks).onClose) === null || _this$callbacks$onClo === void 0 || _this$callbacks$onClo.call(_this$callbacks2, event);\n            if (!this.lazyMode || this.requestManager.hasPendingSubscriptions()) this.reconnect(new TRPCWebSocketClosedError({\n                message: \"WebSocket closed\",\n                cause: event\n            }));\n        });\n        ws.addEventListener(\"error\", (event)=>{\n            var _this$callbacks$onErr, _this$callbacks3;\n            handleCloseOrError(event);\n            (_this$callbacks$onErr = (_this$callbacks3 = this.callbacks).onError) === null || _this$callbacks$onErr === void 0 || _this$callbacks$onErr.call(_this$callbacks3, event);\n            this.reconnect(new TRPCWebSocketClosedError({\n                message: \"WebSocket closed\",\n                cause: event\n            }));\n        });\n    }\n    handleResponseMessage(message) {\n        const request = this.requestManager.getPendingRequest(message.id);\n        if (!request) return;\n        request.callbacks.next(message);\n        let completed = true;\n        if (\"result\" in message && request.message.method === \"subscription\") {\n            if (message.result.type === \"data\") request.message.params.lastEventId = message.result.id;\n            if (message.result.type !== \"stopped\") completed = false;\n        }\n        if (completed) {\n            request.callbacks.complete();\n            this.requestManager.delete(message.id);\n        }\n    }\n    handleIncomingRequest(message) {\n        if (message.method === \"reconnect\") this.reconnect(new TRPCWebSocketClosedError({\n            message: \"Server requested reconnect\"\n        }));\n    }\n    /**\n\t* Sends a message or batch of messages directly to the server.\n\t*/ send(messageOrMessages) {\n        if (!this.activeConnection.isOpen()) throw new Error(\"Active connection is not open\");\n        const messages = messageOrMessages instanceof Array ? messageOrMessages : [\n            messageOrMessages\n        ];\n        this.activeConnection.ws.send(JSON.stringify(messages.length === 1 ? messages[0] : messages));\n    }\n    /**\n\t* Groups requests for batch sending.\n\t*\n\t* @returns A function to abort the batched request.\n\t*/ batchSend(message, callbacks) {\n        var _this5 = this;\n        this.inactivityTimeout.reset();\n        (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_6__.run)(async ()=>{\n            if (!_this5.activeConnection.isOpen()) await _this5.open();\n            await (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_6__.sleep)(0);\n            if (!_this5.requestManager.hasOutgoingRequests()) return;\n            _this5.send(_this5.requestManager.flush().map(({ message: message$1 })=>message$1));\n        }).catch((err)=>{\n            this.requestManager.delete(message.id);\n            callbacks.error(_TRPCClientError_CjKyS10w_mjs__WEBPACK_IMPORTED_MODULE_1__.TRPCClientError.from(err));\n        });\n        return this.requestManager.register(message, callbacks);\n    }\n};\n//#endregion\n//#region src/links/wsLink/createWsClient.ts\nfunction createWSClient(opts) {\n    return new WsClient(opts);\n}\n//#endregion\n//#region src/links/wsLink/wsLink.ts\nfunction wsLink(opts) {\n    const { client } = opts;\n    const transformer = (0,_unstable_internals_Bg7n9BBj_mjs__WEBPACK_IMPORTED_MODULE_2__.getTransformer)(opts.transformer);\n    return ()=>{\n        return ({ op })=>{\n            return (0,_trpc_server_observable__WEBPACK_IMPORTED_MODULE_4__.observable)((observer)=>{\n                const connStateSubscription = op.type === \"subscription\" ? client.connectionState.subscribe({\n                    next (result) {\n                        observer.next({\n                            result,\n                            context: op.context\n                        });\n                    }\n                }) : null;\n                const requestSubscription = client.request({\n                    op,\n                    transformer\n                }).subscribe(observer);\n                return ()=>{\n                    requestSubscription.unsubscribe();\n                    connStateSubscription === null || connStateSubscription === void 0 || connStateSubscription.unsubscribe();\n                };\n            });\n        };\n    };\n}\n//#endregion\n //# sourceMappingURL=wsLink-H5IjZfJW.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/wsLink-H5IjZfJW.mjs\n");

/***/ })

};
;