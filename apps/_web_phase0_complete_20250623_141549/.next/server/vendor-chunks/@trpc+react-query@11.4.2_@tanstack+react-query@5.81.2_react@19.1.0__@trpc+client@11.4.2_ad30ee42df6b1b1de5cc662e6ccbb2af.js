"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af";
exports.ids = ["vendor-chunks/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af"];
exports.modules = {

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/getQueryKey-BY58RNzP.mjs":
/*!**********************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/getQueryKey-BY58RNzP.mjs ***!
  \**********************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   __commonJS: () => (/* binding */ __commonJS),\n/* harmony export */   __toESM: () => (/* binding */ __toESM),\n/* harmony export */   getMutationKey: () => (/* binding */ getMutationKey),\n/* harmony export */   getMutationKeyInternal: () => (/* binding */ getMutationKeyInternal),\n/* harmony export */   getQueryKey: () => (/* binding */ getQueryKey),\n/* harmony export */   getQueryKeyInternal: () => (/* binding */ getQueryKeyInternal),\n/* harmony export */   require_objectSpread2: () => (/* binding */ require_objectSpread2),\n/* harmony export */   require_objectWithoutProperties: () => (/* binding */ require_objectWithoutProperties)\n/* harmony export */ });\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+query-core@5.81.2/node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n\n\n//#region rolldown:runtime\nvar __create = Object.create;\nvar __defProp = Object.defineProperty;\nvar __getOwnPropDesc = Object.getOwnPropertyDescriptor;\nvar __getOwnPropNames = Object.getOwnPropertyNames;\nvar __getProtoOf = Object.getPrototypeOf;\nvar __hasOwnProp = Object.prototype.hasOwnProperty;\nvar __commonJS = (cb, mod)=>function() {\n        return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = {\n            exports: {}\n        }).exports, mod), mod.exports;\n    };\nvar __copyProps = (to, from, except, desc)=>{\n    if (from && typeof from === \"object\" || typeof from === \"function\") for(var keys = __getOwnPropNames(from), i = 0, n = keys.length, key; i < n; i++){\n        key = keys[i];\n        if (!__hasOwnProp.call(to, key) && key !== except) __defProp(to, key, {\n            get: ((k)=>from[k]).bind(null, key),\n            enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable\n        });\n    }\n    return to;\n};\nvar __toESM = (mod, isNodeMode, target)=>(target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(isNodeMode || !mod || !mod.__esModule ? __defProp(target, \"default\", {\n        value: mod,\n        enumerable: true\n    }) : target, mod));\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutPropertiesLoose.js\nvar require_objectWithoutPropertiesLoose = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutPropertiesLoose.js\" (exports, module) {\n        function _objectWithoutPropertiesLoose(r, e) {\n            if (null == r) return {};\n            var t = {};\n            for(var n in r)if (({}).hasOwnProperty.call(r, n)) {\n                if (e.includes(n)) continue;\n                t[n] = r[n];\n            }\n            return t;\n        }\n        module.exports = _objectWithoutPropertiesLoose, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutProperties.js\nvar require_objectWithoutProperties = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectWithoutProperties.js\" (exports, module) {\n        var objectWithoutPropertiesLoose = require_objectWithoutPropertiesLoose();\n        function _objectWithoutProperties$1(e, t) {\n            if (null == e) return {};\n            var o, r, i = objectWithoutPropertiesLoose(e, t);\n            if (Object.getOwnPropertySymbols) {\n                var s = Object.getOwnPropertySymbols(e);\n                for(r = 0; r < s.length; r++)o = s[r], t.includes(o) || ({}).propertyIsEnumerable.call(e, o) && (i[o] = e[o]);\n            }\n            return i;\n        }\n        module.exports = _objectWithoutProperties$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\nvar require_typeof = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/typeof.js\" (exports, module) {\n        function _typeof$2(o) {\n            \"@babel/helpers - typeof\";\n            return module.exports = _typeof$2 = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function(o$1) {\n                return typeof o$1;\n            } : function(o$1) {\n                return o$1 && \"function\" == typeof Symbol && o$1.constructor === Symbol && o$1 !== Symbol.prototype ? \"symbol\" : typeof o$1;\n            }, module.exports.__esModule = true, module.exports[\"default\"] = module.exports, _typeof$2(o);\n        }\n        module.exports = _typeof$2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\nvar require_toPrimitive = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPrimitive.js\" (exports, module) {\n        var _typeof$1 = require_typeof()[\"default\"];\n        function toPrimitive$1(t, r) {\n            if (\"object\" != _typeof$1(t) || !t) return t;\n            var e = t[Symbol.toPrimitive];\n            if (void 0 !== e) {\n                var i = e.call(t, r || \"default\");\n                if (\"object\" != _typeof$1(i)) return i;\n                throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n            }\n            return (\"string\" === r ? String : Number)(t);\n        }\n        module.exports = toPrimitive$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\nvar require_toPropertyKey = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/toPropertyKey.js\" (exports, module) {\n        var _typeof = require_typeof()[\"default\"];\n        var toPrimitive = require_toPrimitive();\n        function toPropertyKey$1(t) {\n            var i = toPrimitive(t, \"string\");\n            return \"symbol\" == _typeof(i) ? i : i + \"\";\n        }\n        module.exports = toPropertyKey$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\nvar require_defineProperty = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/defineProperty.js\" (exports, module) {\n        var toPropertyKey = require_toPropertyKey();\n        function _defineProperty(e, r, t) {\n            return (r = toPropertyKey(r)) in e ? Object.defineProperty(e, r, {\n                value: t,\n                enumerable: !0,\n                configurable: !0,\n                writable: !0\n            }) : e[r] = t, e;\n        }\n        module.exports = _defineProperty, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\nvar require_objectSpread2 = __commonJS({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/objectSpread2.js\" (exports, module) {\n        var defineProperty = require_defineProperty();\n        function ownKeys(e, r) {\n            var t = Object.keys(e);\n            if (Object.getOwnPropertySymbols) {\n                var o = Object.getOwnPropertySymbols(e);\n                r && (o = o.filter(function(r$1) {\n                    return Object.getOwnPropertyDescriptor(e, r$1).enumerable;\n                })), t.push.apply(t, o);\n            }\n            return t;\n        }\n        function _objectSpread2(e) {\n            for(var r = 1; r < arguments.length; r++){\n                var t = null != arguments[r] ? arguments[r] : {};\n                r % 2 ? ownKeys(Object(t), !0).forEach(function(r$1) {\n                    defineProperty(e, r$1, t[r$1]);\n                }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function(r$1) {\n                    Object.defineProperty(e, r$1, Object.getOwnPropertyDescriptor(t, r$1));\n                });\n            }\n            return e;\n        }\n        module.exports = _objectSpread2, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/internals/getQueryKey.ts\nvar import_objectWithoutProperties = __toESM(require_objectWithoutProperties(), 1);\nvar import_objectSpread2 = __toESM(require_objectSpread2(), 1);\nconst _excluded = [\n    \"cursor\",\n    \"direction\"\n];\n/**\n* To allow easy interactions with groups of related queries, such as\n* invalidating all queries of a router, we use an array as the path when\n* storing in tanstack query.\n**/ function getQueryKeyInternal(path, input, type) {\n    const splitPath = path.flatMap((part)=>part.split(\".\"));\n    if (!input && (!type || type === \"any\")) return splitPath.length ? [\n        splitPath\n    ] : [];\n    if (type === \"infinite\" && (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_0__.isObject)(input) && (\"direction\" in input || \"cursor\" in input)) {\n        const { cursor: _, direction: __ } = input, inputWithoutCursorAndDirection = (0, import_objectWithoutProperties.default)(input, _excluded);\n        return [\n            splitPath,\n            {\n                input: inputWithoutCursorAndDirection,\n                type: \"infinite\"\n            }\n        ];\n    }\n    return [\n        splitPath,\n        (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, typeof input !== \"undefined\" && input !== _tanstack_react_query__WEBPACK_IMPORTED_MODULE_1__.skipToken && {\n            input\n        }), type && type !== \"any\" && {\n            type\n        })\n    ];\n}\nfunction getMutationKeyInternal(path) {\n    return getQueryKeyInternal(path, void 0, \"any\");\n}\n/**\n* Method to extract the query key for a procedure\n* @param procedureOrRouter - procedure or AnyRouter\n* @param input - input to procedureOrRouter\n* @param type - defaults to `any`\n* @see https://trpc.io/docs/v11/getQueryKey\n*/ function getQueryKey(procedureOrRouter, ..._params) {\n    const [input, type] = _params;\n    const path = procedureOrRouter._def().path;\n    const queryKey = getQueryKeyInternal(path, input, type !== null && type !== void 0 ? type : \"any\");\n    return queryKey;\n}\n/**\n* Method to extract the mutation key for a procedure\n* @param procedure - procedure\n* @see https://trpc.io/docs/v11/getQueryKey#mutations\n*/ function getMutationKey(procedure) {\n    const path = procedure._def().path;\n    return getMutationKeyInternal(path);\n}\n//#endregion\n //# sourceMappingURL=getQueryKey-BY58RNzP.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/getQueryKey-BY58RNzP.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/index.mjs":
/*!*******************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/index.mjs ***!
  \*******************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCClientError: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.TRPCClientError),\n/* harmony export */   TRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.TRPCUntypedClient),\n/* harmony export */   clientCallTypeToProcedureType: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.clientCallTypeToProcedureType),\n/* harmony export */   createTRPCClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.createTRPCClient),\n/* harmony export */   createTRPCClientProxy: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.createTRPCClientProxy),\n/* harmony export */   createTRPCProxyClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.createTRPCProxyClient),\n/* harmony export */   createTRPCQueryUtils: () => (/* binding */ createTRPCQueryUtils),\n/* harmony export */   createTRPCReact: () => (/* binding */ createTRPCReact),\n/* harmony export */   createTRPCUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.createTRPCUntypedClient),\n/* harmony export */   createWSClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.createWSClient),\n/* harmony export */   experimental_localLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.experimental_localLink),\n/* harmony export */   getFetch: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.getFetch),\n/* harmony export */   getMutationKey: () => (/* reexport safe */ _getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getMutationKey),\n/* harmony export */   getQueryKey: () => (/* reexport safe */ _getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKey),\n/* harmony export */   getUntypedClient: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.getUntypedClient),\n/* harmony export */   httpBatchLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.httpBatchLink),\n/* harmony export */   httpBatchStreamLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.httpBatchStreamLink),\n/* harmony export */   httpLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.httpLink),\n/* harmony export */   httpSubscriptionLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.httpSubscriptionLink),\n/* harmony export */   isFormData: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.isFormData),\n/* harmony export */   isNonJsonSerializable: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.isNonJsonSerializable),\n/* harmony export */   isOctetType: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.isOctetType),\n/* harmony export */   isTRPCClientError: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.isTRPCClientError),\n/* harmony export */   loggerLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.loggerLink),\n/* harmony export */   retryLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.retryLink),\n/* harmony export */   splitLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.splitLink),\n/* harmony export */   unstable_httpBatchStreamLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.unstable_httpBatchStreamLink),\n/* harmony export */   unstable_httpSubscriptionLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.unstable_httpSubscriptionLink),\n/* harmony export */   unstable_localLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.unstable_localLink),\n/* harmony export */   wsLink: () => (/* reexport safe */ _trpc_client__WEBPACK_IMPORTED_MODULE_3__.wsLink)\n/* harmony export */ });\n/* harmony import */ var _getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getQueryKey-BY58RNzP.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/getQueryKey-BY58RNzP.mjs\");\n/* harmony import */ var _shared_JtnEvJvB_mjs__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./shared-JtnEvJvB.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/shared-JtnEvJvB.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/.pnpm/next@15.3.1_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/index.mjs\");\n\n\n\n\n\n//#region src/createTRPCReact.tsx\n/**\n* @internal\n*/ function createHooksInternal(trpc) {\n    const proxy = (0,_shared_JtnEvJvB_mjs__WEBPACK_IMPORTED_MODULE_1__.createReactDecoration)(trpc);\n    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__.createFlatProxy)((key)=>{\n        if (key === \"useContext\" || key === \"useUtils\") return ()=>{\n            const context = trpc.useUtils();\n            return react__WEBPACK_IMPORTED_MODULE_2__.useMemo({\n                \"createHooksInternal.useMemo\": ()=>{\n                    return (0,_shared_JtnEvJvB_mjs__WEBPACK_IMPORTED_MODULE_1__.createReactQueryUtils)(context);\n                }\n            }[\"createHooksInternal.useMemo\"], [\n                context\n            ]);\n        };\n        if (trpc.hasOwnProperty(key)) return trpc[key];\n        return proxy[key];\n    });\n}\nfunction createTRPCReact(opts) {\n    const hooks = (0,_shared_JtnEvJvB_mjs__WEBPACK_IMPORTED_MODULE_1__.createRootHooks)(opts);\n    const proxy = createHooksInternal(hooks);\n    return proxy;\n}\n//#endregion\n//#region src/createTRPCQueryUtils.tsx\nfunction createTRPCQueryUtils(opts) {\n    const utils = (0,_shared_JtnEvJvB_mjs__WEBPACK_IMPORTED_MODULE_1__.createUtilityFunctions)(opts);\n    return (0,_shared_JtnEvJvB_mjs__WEBPACK_IMPORTED_MODULE_1__.createQueryUtilsProxy)(utils);\n}\n//#endregion\n //# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/shared-JtnEvJvB.mjs":
/*!*****************************************************************************************************************************************************************************************************************!*\
  !*** ../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/shared-JtnEvJvB.mjs ***!
  \*****************************************************************************************************************************************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("var react__WEBPACK_IMPORTED_MODULE_2___namespace_cache;\n__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TRPCContext: () => (/* binding */ TRPCContext),\n/* harmony export */   contextProps: () => (/* binding */ contextProps),\n/* harmony export */   createQueryUtilsProxy: () => (/* binding */ createQueryUtilsProxy),\n/* harmony export */   createReactDecoration: () => (/* binding */ createReactDecoration),\n/* harmony export */   createReactQueryUtils: () => (/* binding */ createReactQueryUtils),\n/* harmony export */   createRootHooks: () => (/* binding */ createRootHooks),\n/* harmony export */   createUseQueries: () => (/* binding */ createUseQueries),\n/* harmony export */   createUtilityFunctions: () => (/* binding */ createUtilityFunctions),\n/* harmony export */   getClientArgs: () => (/* binding */ getClientArgs),\n/* harmony export */   getQueryClient: () => (/* binding */ getQueryClient),\n/* harmony export */   getQueryType: () => (/* binding */ getQueryType)\n/* harmony export */ });\n/* harmony import */ var _getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./getQueryKey-BY58RNzP.mjs */ \"(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/getQueryKey-BY58RNzP.mjs\");\n/* harmony import */ var _trpc_client__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @trpc/client */ \"(ssr)/../../node_modules/.pnpm/@trpc+client@11.4.2_@trpc+server@11.4.2_typescript@5.8.3__typescript@5.8.3/node_modules/@trpc/client/dist/index.mjs\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+query-core@5.81.2/node_modules/@tanstack/query-core/build/modern/utils.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/infiniteQueryOptions.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/queryOptions.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/usePrefetchQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useSuspenseQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useMutation.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useInfiniteQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_14__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/usePrefetchInfiniteQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useSuspenseInfiniteQuery.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_16__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useQueries.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_17__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+react-query@5.81.2_react@19.1.0/node_modules/@tanstack/react-query/build/modern/useSuspenseQueries.js\");\n/* harmony import */ var _tanstack_react_query__WEBPACK_IMPORTED_MODULE_18__ = __webpack_require__(/*! @tanstack/react-query */ \"(ssr)/../../node_modules/.pnpm/@tanstack+query-core@5.81.2/node_modules/@tanstack/query-core/build/modern/queryClient.js\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/getErrorShape-Uhlrl4Bk.mjs\");\n/* harmony import */ var _trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! @trpc/server/unstable-core-do-not-import */ \"(ssr)/../../node_modules/.pnpm/@trpc+server@11.4.2_typescript@5.8.3/node_modules/@trpc/server/dist/utils-DdbbrDku.mjs\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(ssr)/../../node_modules/.pnpm/next@15.3.1_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! react/jsx-runtime */ \"(ssr)/../../node_modules/.pnpm/next@15.3.1_@babel+core@7.27.4_@opentelemetry+api@1.9.0_react-dom@19.1.0_react@19.1.0__react@19.1.0/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react-jsx-runtime.js\");\n\n\n\n\n\n\n\n\n//#region src/shared/proxy/decorationProxy.ts\n/**\n* Create proxy for decorating procedures\n* @internal\n*/ function createReactDecoration(hooks) {\n    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__.createRecursiveProxy)(({ path, args })=>{\n        var _rest$;\n        const pathCopy = [\n            ...path\n        ];\n        const lastArg = pathCopy.pop();\n        if (lastArg === \"useMutation\") return hooks[lastArg](pathCopy, ...args);\n        if (lastArg === \"_def\") return {\n            path: pathCopy\n        };\n        const [input, ...rest] = args;\n        const opts = (_rest$ = rest[0]) !== null && _rest$ !== void 0 ? _rest$ : {};\n        return hooks[lastArg](pathCopy, input, opts);\n    });\n}\n//#endregion\n//#region src/internals/context.tsx\nvar _React$createContext;\nconst contextProps = [\n    \"client\",\n    \"ssrContext\",\n    \"ssrState\",\n    \"abortOnUnmount\"\n];\nconst TRPCContext = (_React$createContext = react__WEBPACK_IMPORTED_MODULE_2__.createContext) === null || _React$createContext === void 0 ? void 0 : _React$createContext.call(/*#__PURE__*/ (react__WEBPACK_IMPORTED_MODULE_2___namespace_cache || (react__WEBPACK_IMPORTED_MODULE_2___namespace_cache = __webpack_require__.t(react__WEBPACK_IMPORTED_MODULE_2__, 2))), null);\n//#endregion\n//#region src/shared/proxy/utilsProxy.ts\nconst getQueryType = (utilName)=>{\n    switch(utilName){\n        case \"queryOptions\":\n        case \"fetch\":\n        case \"ensureData\":\n        case \"prefetch\":\n        case \"getData\":\n        case \"setData\":\n        case \"setQueriesData\":\n            return \"query\";\n        case \"infiniteQueryOptions\":\n        case \"fetchInfinite\":\n        case \"prefetchInfinite\":\n        case \"getInfiniteData\":\n        case \"setInfiniteData\":\n            return \"infinite\";\n        case \"setMutationDefaults\":\n        case \"getMutationDefaults\":\n        case \"isMutating\":\n        case \"cancel\":\n        case \"invalidate\":\n        case \"refetch\":\n        case \"reset\":\n            return \"any\";\n    }\n};\n/**\n* @internal\n*/ function createRecursiveUtilsProxy(context) {\n    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__.createRecursiveProxy)((opts)=>{\n        const path = [\n            ...opts.path\n        ];\n        const utilName = path.pop();\n        const args = [\n            ...opts.args\n        ];\n        const input = args.shift();\n        const queryType = getQueryType(utilName);\n        const queryKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, queryType);\n        const contextMap = {\n            infiniteQueryOptions: ()=>context.infiniteQueryOptions(path, queryKey, args[0]),\n            queryOptions: ()=>context.queryOptions(path, queryKey, ...args),\n            fetch: ()=>context.fetchQuery(queryKey, ...args),\n            fetchInfinite: ()=>context.fetchInfiniteQuery(queryKey, args[0]),\n            prefetch: ()=>context.prefetchQuery(queryKey, ...args),\n            prefetchInfinite: ()=>context.prefetchInfiniteQuery(queryKey, args[0]),\n            ensureData: ()=>context.ensureQueryData(queryKey, ...args),\n            invalidate: ()=>context.invalidateQueries(queryKey, ...args),\n            reset: ()=>context.resetQueries(queryKey, ...args),\n            refetch: ()=>context.refetchQueries(queryKey, ...args),\n            cancel: ()=>context.cancelQuery(queryKey, ...args),\n            setData: ()=>{\n                context.setQueryData(queryKey, args[0], args[1]);\n            },\n            setQueriesData: ()=>context.setQueriesData(queryKey, args[0], args[1], args[2]),\n            setInfiniteData: ()=>{\n                context.setInfiniteQueryData(queryKey, args[0], args[1]);\n            },\n            getData: ()=>context.getQueryData(queryKey),\n            getInfiniteData: ()=>context.getInfiniteQueryData(queryKey),\n            setMutationDefaults: ()=>context.setMutationDefaults((0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getMutationKeyInternal)(path), input),\n            getMutationDefaults: ()=>context.getMutationDefaults((0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getMutationKeyInternal)(path)),\n            isMutating: ()=>context.isMutating({\n                    mutationKey: (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getMutationKeyInternal)(path)\n                })\n        };\n        return contextMap[utilName]();\n    });\n}\n/**\n* @internal\n*/ function createReactQueryUtils(context) {\n    const clientProxy = (0,_trpc_client__WEBPACK_IMPORTED_MODULE_1__.createTRPCClientProxy)(context.client);\n    const proxy = createRecursiveUtilsProxy(context);\n    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__.createFlatProxy)((key)=>{\n        const contextName = key;\n        if (contextName === \"client\") return clientProxy;\n        if (contextProps.includes(contextName)) return context[contextName];\n        return proxy[key];\n    });\n}\n/**\n* @internal\n*/ function createQueryUtilsProxy(context) {\n    return createRecursiveUtilsProxy(context);\n}\n//#endregion\n//#region src/shared/proxy/useQueriesProxy.ts\nvar import_objectSpread2$3 = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* Create proxy for `useQueries` options\n* @internal\n*/ function createUseQueries(client) {\n    const untypedClient = client instanceof _trpc_client__WEBPACK_IMPORTED_MODULE_1__.TRPCUntypedClient ? client : (0,_trpc_client__WEBPACK_IMPORTED_MODULE_1__.getUntypedClient)(client);\n    return (0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_4__.createRecursiveProxy)((opts)=>{\n        const arrayPath = opts.path;\n        const dotPath = arrayPath.join(\".\");\n        const [input, _opts] = opts.args;\n        const options = (0, import_objectSpread2$3.default)({\n            queryKey: (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(arrayPath, input, \"query\"),\n            queryFn: ()=>{\n                return untypedClient.query(dotPath, input, _opts === null || _opts === void 0 ? void 0 : _opts.trpc);\n            }\n        }, _opts);\n        return options;\n    });\n}\n//#endregion\n//#region src/internals/getClientArgs.ts\nvar import_objectSpread2$2 = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* @internal\n*/ function getClientArgs(queryKey, opts, infiniteParams) {\n    var _queryKey$;\n    const path = queryKey[0];\n    let input = (_queryKey$ = queryKey[1]) === null || _queryKey$ === void 0 ? void 0 : _queryKey$.input;\n    if (infiniteParams) {\n        var _input;\n        input = (0, import_objectSpread2$2.default)((0, import_objectSpread2$2.default)((0, import_objectSpread2$2.default)({}, (_input = input) !== null && _input !== void 0 ? _input : {}), infiniteParams.pageParam ? {\n            cursor: infiniteParams.pageParam\n        } : {}), {}, {\n            direction: infiniteParams.direction\n        });\n    }\n    return [\n        path.join(\".\"),\n        input,\n        opts === null || opts === void 0 ? void 0 : opts.trpc\n    ];\n}\n//#endregion\n//#region ../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\nvar require_asyncIterator = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.__commonJS)({\n    \"../../node_modules/.pnpm/@oxc-project+runtime@0.72.2/node_modules/@oxc-project/runtime/src/helpers/asyncIterator.js\" (exports, module) {\n        function _asyncIterator$1(r) {\n            var n, t, o, e = 2;\n            for(\"undefined\" != typeof Symbol && (t = Symbol.asyncIterator, o = Symbol.iterator); e--;){\n                if (t && null != (n = r[t])) return n.call(r);\n                if (o && null != (n = r[o])) return new AsyncFromSyncIterator(n.call(r));\n                t = \"@@asyncIterator\", o = \"@@iterator\";\n            }\n            throw new TypeError(\"Object is not async iterable\");\n        }\n        function AsyncFromSyncIterator(r) {\n            function AsyncFromSyncIteratorContinuation(r$1) {\n                if (Object(r$1) !== r$1) return Promise.reject(new TypeError(r$1 + \" is not an object.\"));\n                var n = r$1.done;\n                return Promise.resolve(r$1.value).then(function(r$2) {\n                    return {\n                        value: r$2,\n                        done: n\n                    };\n                });\n            }\n            return AsyncFromSyncIterator = function AsyncFromSyncIterator$1(r$1) {\n                this.s = r$1, this.n = r$1.next;\n            }, AsyncFromSyncIterator.prototype = {\n                s: null,\n                n: null,\n                next: function next() {\n                    return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments));\n                },\n                \"return\": function _return(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.resolve({\n                        value: r$1,\n                        done: !0\n                    }) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                },\n                \"throw\": function _throw(r$1) {\n                    var n = this.s[\"return\"];\n                    return void 0 === n ? Promise.reject(r$1) : AsyncFromSyncIteratorContinuation(n.apply(this.s, arguments));\n                }\n            }, new AsyncFromSyncIterator(r);\n        }\n        module.exports = _asyncIterator$1, module.exports.__esModule = true, module.exports[\"default\"] = module.exports;\n    }\n});\n//#endregion\n//#region src/internals/trpcResult.ts\nvar import_asyncIterator = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)(require_asyncIterator(), 1);\nfunction createTRPCOptionsResult(value) {\n    const path = value.path.join(\".\");\n    return {\n        path\n    };\n}\n/**\n* Makes a stable reference of the `trpc` prop\n*/ function useHookResult(value) {\n    const result = createTRPCOptionsResult(value);\n    return react__WEBPACK_IMPORTED_MODULE_2__.useMemo({\n        \"useHookResult.useMemo\": ()=>result\n    }[\"useHookResult.useMemo\"], [\n        result\n    ]);\n}\n/**\n* @internal\n*/ async function buildQueryFromAsyncIterable(asyncIterable, queryClient, queryKey) {\n    const queryCache = queryClient.getQueryCache();\n    const query = queryCache.build(queryClient, {\n        queryKey\n    });\n    query.setState({\n        data: [],\n        status: \"success\"\n    });\n    const aggregate = [];\n    var _iteratorAbruptCompletion = false;\n    var _didIteratorError = false;\n    var _iteratorError;\n    try {\n        for(var _iterator = (0, import_asyncIterator.default)(asyncIterable), _step; _iteratorAbruptCompletion = !(_step = await _iterator.next()).done; _iteratorAbruptCompletion = false){\n            const value = _step.value;\n            {\n                aggregate.push(value);\n                query.setState({\n                    data: [\n                        ...aggregate\n                    ]\n                });\n            }\n        }\n    } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n    } finally{\n        try {\n            if (_iteratorAbruptCompletion && _iterator.return != null) await _iterator.return();\n        } finally{\n            if (_didIteratorError) throw _iteratorError;\n        }\n    }\n    return aggregate;\n}\n//#endregion\n//#region src/utils/createUtilityFunctions.ts\nvar import_objectSpread2$1 = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)(), 1);\n/**\n* Creates a set of utility functions that can be used to interact with `react-query`\n* @param opts the `TRPCClient` and `QueryClient` to use\n* @returns a set of utility functions that can be used to interact with `react-query`\n* @internal\n*/ function createUtilityFunctions(opts) {\n    const { client, queryClient } = opts;\n    const untypedClient = client instanceof _trpc_client__WEBPACK_IMPORTED_MODULE_1__.TRPCUntypedClient ? client : (0,_trpc_client__WEBPACK_IMPORTED_MODULE_1__.getUntypedClient)(client);\n    return {\n        infiniteQueryOptions: (path, queryKey, opts$1)=>{\n            var _queryKey$, _ref;\n            const inputIsSkipToken = ((_queryKey$ = queryKey[1]) === null || _queryKey$ === void 0 ? void 0 : _queryKey$.input) === _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken;\n            const queryFn = async (queryFnContext)=>{\n                var _opts$trpc;\n                const actualOpts = (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                    trpc: (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1 === null || opts$1 === void 0 ? void 0 : opts$1.trpc), (opts$1 === null || opts$1 === void 0 || (_opts$trpc = opts$1.trpc) === null || _opts$trpc === void 0 ? void 0 : _opts$trpc.abortOnUnmount) ? {\n                        signal: queryFnContext.signal\n                    } : {\n                        signal: null\n                    })\n                });\n                const result = await untypedClient.query(...getClientArgs(queryKey, actualOpts, {\n                    direction: queryFnContext.direction,\n                    pageParam: queryFnContext.pageParam\n                }));\n                return result;\n            };\n            return Object.assign((0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_6__.infiniteQueryOptions)((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                initialData: opts$1 === null || opts$1 === void 0 ? void 0 : opts$1.initialData,\n                queryKey,\n                queryFn: inputIsSkipToken ? _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken : queryFn,\n                initialPageParam: (_ref = opts$1 === null || opts$1 === void 0 ? void 0 : opts$1.initialCursor) !== null && _ref !== void 0 ? _ref : null\n            })), {\n                trpc: createTRPCOptionsResult({\n                    path\n                })\n            });\n        },\n        queryOptions: (path, queryKey, opts$1)=>{\n            var _queryKey$2;\n            const inputIsSkipToken = ((_queryKey$2 = queryKey[1]) === null || _queryKey$2 === void 0 ? void 0 : _queryKey$2.input) === _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken;\n            const queryFn = async (queryFnContext)=>{\n                var _opts$trpc2;\n                const actualOpts = (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                    trpc: (0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1 === null || opts$1 === void 0 ? void 0 : opts$1.trpc), (opts$1 === null || opts$1 === void 0 || (_opts$trpc2 = opts$1.trpc) === null || _opts$trpc2 === void 0 ? void 0 : _opts$trpc2.abortOnUnmount) ? {\n                        signal: queryFnContext.signal\n                    } : {\n                        signal: null\n                    })\n                });\n                const result = await untypedClient.query(...getClientArgs(queryKey, actualOpts));\n                if ((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_7__.isAsyncIterable)(result)) return buildQueryFromAsyncIterable(result, queryClient, queryKey);\n                return result;\n            };\n            return Object.assign((0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_8__.queryOptions)((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                initialData: opts$1 === null || opts$1 === void 0 ? void 0 : opts$1.initialData,\n                queryKey,\n                queryFn: inputIsSkipToken ? _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken : queryFn\n            })), {\n                trpc: createTRPCOptionsResult({\n                    path\n                })\n            });\n        },\n        fetchQuery: (queryKey, opts$1)=>{\n            return queryClient.fetchQuery((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                queryKey,\n                queryFn: ()=>untypedClient.query(...getClientArgs(queryKey, opts$1))\n            }));\n        },\n        fetchInfiniteQuery: (queryKey, opts$1)=>{\n            var _opts$initialCursor;\n            return queryClient.fetchInfiniteQuery((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                queryKey,\n                queryFn: ({ pageParam, direction })=>{\n                    return untypedClient.query(...getClientArgs(queryKey, opts$1, {\n                        pageParam,\n                        direction\n                    }));\n                },\n                initialPageParam: (_opts$initialCursor = opts$1 === null || opts$1 === void 0 ? void 0 : opts$1.initialCursor) !== null && _opts$initialCursor !== void 0 ? _opts$initialCursor : null\n            }));\n        },\n        prefetchQuery: (queryKey, opts$1)=>{\n            return queryClient.prefetchQuery((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                queryKey,\n                queryFn: ()=>untypedClient.query(...getClientArgs(queryKey, opts$1))\n            }));\n        },\n        prefetchInfiniteQuery: (queryKey, opts$1)=>{\n            var _opts$initialCursor2;\n            return queryClient.prefetchInfiniteQuery((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                queryKey,\n                queryFn: ({ pageParam, direction })=>{\n                    return untypedClient.query(...getClientArgs(queryKey, opts$1, {\n                        pageParam,\n                        direction\n                    }));\n                },\n                initialPageParam: (_opts$initialCursor2 = opts$1 === null || opts$1 === void 0 ? void 0 : opts$1.initialCursor) !== null && _opts$initialCursor2 !== void 0 ? _opts$initialCursor2 : null\n            }));\n        },\n        ensureQueryData: (queryKey, opts$1)=>{\n            return queryClient.ensureQueryData((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, opts$1), {}, {\n                queryKey,\n                queryFn: ()=>untypedClient.query(...getClientArgs(queryKey, opts$1))\n            }));\n        },\n        invalidateQueries: (queryKey, filters, options)=>{\n            return queryClient.invalidateQueries((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, filters), {}, {\n                queryKey\n            }), options);\n        },\n        resetQueries: (queryKey, filters, options)=>{\n            return queryClient.resetQueries((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, filters), {}, {\n                queryKey\n            }), options);\n        },\n        refetchQueries: (queryKey, filters, options)=>{\n            return queryClient.refetchQueries((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, filters), {}, {\n                queryKey\n            }), options);\n        },\n        cancelQuery: (queryKey, options)=>{\n            return queryClient.cancelQueries({\n                queryKey\n            }, options);\n        },\n        setQueryData: (queryKey, updater, options)=>{\n            return queryClient.setQueryData(queryKey, updater, options);\n        },\n        setQueriesData: (queryKey, filters, updater, options)=>{\n            return queryClient.setQueriesData((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, filters), {}, {\n                queryKey\n            }), updater, options);\n        },\n        getQueryData: (queryKey)=>{\n            return queryClient.getQueryData(queryKey);\n        },\n        setInfiniteQueryData: (queryKey, updater, options)=>{\n            return queryClient.setQueryData(queryKey, updater, options);\n        },\n        getInfiniteQueryData: (queryKey)=>{\n            return queryClient.getQueryData(queryKey);\n        },\n        setMutationDefaults: (mutationKey, options)=>{\n            const path = mutationKey[0];\n            const canonicalMutationFn = (input)=>{\n                return untypedClient.mutation(...getClientArgs([\n                    path,\n                    {\n                        input\n                    }\n                ], opts));\n            };\n            return queryClient.setMutationDefaults(mutationKey, typeof options === \"function\" ? options({\n                canonicalMutationFn\n            }) : options);\n        },\n        getMutationDefaults: (mutationKey)=>{\n            return queryClient.getMutationDefaults(mutationKey);\n        },\n        isMutating: (filters)=>{\n            return queryClient.isMutating((0, import_objectSpread2$1.default)((0, import_objectSpread2$1.default)({}, filters), {}, {\n                exact: true\n            }));\n        }\n    };\n}\n//#endregion\n//#region src/shared/hooks/createHooksInternal.tsx\nvar import_objectSpread2 = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.__toESM)((0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.require_objectSpread2)());\nconst trackResult = (result, onTrackResult)=>{\n    const trackedResult = new Proxy(result, {\n        get (target, prop) {\n            onTrackResult(prop);\n            return target[prop];\n        }\n    });\n    return trackedResult;\n};\n/**\n* @internal\n*/ function createRootHooks(config) {\n    var _config$overrides$use, _config$overrides, _config$context;\n    const mutationSuccessOverride = (_config$overrides$use = config === null || config === void 0 || (_config$overrides = config.overrides) === null || _config$overrides === void 0 || (_config$overrides = _config$overrides.useMutation) === null || _config$overrides === void 0 ? void 0 : _config$overrides.onSuccess) !== null && _config$overrides$use !== void 0 ? _config$overrides$use : (options)=>options.originalFn();\n    const Context = (_config$context = config === null || config === void 0 ? void 0 : config.context) !== null && _config$context !== void 0 ? _config$context : TRPCContext;\n    const createClient = _trpc_client__WEBPACK_IMPORTED_MODULE_1__.createTRPCClient;\n    const TRPCProvider = (props)=>{\n        var _props$ssrState;\n        const { abortOnUnmount = false, queryClient, ssrContext } = props;\n        const [ssrState, setSSRState] = react__WEBPACK_IMPORTED_MODULE_2__.useState((_props$ssrState = props.ssrState) !== null && _props$ssrState !== void 0 ? _props$ssrState : false);\n        const client = props.client instanceof _trpc_client__WEBPACK_IMPORTED_MODULE_1__.TRPCUntypedClient ? props.client : (0,_trpc_client__WEBPACK_IMPORTED_MODULE_1__.getUntypedClient)(props.client);\n        const fns = react__WEBPACK_IMPORTED_MODULE_2__.useMemo({\n            \"createRootHooks.TRPCProvider.useMemo[fns]\": ()=>createUtilityFunctions({\n                    client,\n                    queryClient\n                })\n        }[\"createRootHooks.TRPCProvider.useMemo[fns]\"], [\n            client,\n            queryClient\n        ]);\n        const contextValue = react__WEBPACK_IMPORTED_MODULE_2__.useMemo({\n            \"createRootHooks.TRPCProvider.useMemo[contextValue]\": ()=>(0, import_objectSpread2.default)({\n                    abortOnUnmount,\n                    queryClient,\n                    client,\n                    ssrContext: ssrContext !== null && ssrContext !== void 0 ? ssrContext : null,\n                    ssrState\n                }, fns)\n        }[\"createRootHooks.TRPCProvider.useMemo[contextValue]\"], [\n            abortOnUnmount,\n            client,\n            fns,\n            queryClient,\n            ssrContext,\n            ssrState\n        ]);\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect({\n            \"createRootHooks.TRPCProvider.useEffect\": ()=>{\n                setSSRState({\n                    \"createRootHooks.TRPCProvider.useEffect\": (state)=>state ? \"mounted\" : false\n                }[\"createRootHooks.TRPCProvider.useEffect\"]);\n            }\n        }[\"createRootHooks.TRPCProvider.useEffect\"], []);\n        return /* @__PURE__ */ (0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_3__.jsx)(Context.Provider, {\n            value: contextValue,\n            children: props.children\n        });\n    };\n    function useContext() {\n        const context = react__WEBPACK_IMPORTED_MODULE_2__.useContext(Context);\n        if (!context) throw new Error(\"Unable to find tRPC Context. Did you forget to wrap your App inside `withTRPC` HoC?\");\n        return context;\n    }\n    /**\n\t* Hack to make sure errors return `status`='error` when doing SSR\n\t* @see https://github.com/trpc/trpc/pull/1645\n\t*/ function useSSRQueryOptionsIfNeeded(queryKey, opts) {\n        var _queryClient$getQuery;\n        const { queryClient, ssrState } = useContext();\n        return ssrState && ssrState !== \"mounted\" && ((_queryClient$getQuery = queryClient.getQueryCache().find({\n            queryKey\n        })) === null || _queryClient$getQuery === void 0 ? void 0 : _queryClient$getQuery.state.status) === \"error\" ? (0, import_objectSpread2.default)({\n            retryOnMount: false\n        }, opts) : opts;\n    }\n    function useQuery$1(path, input, opts) {\n        var _opts$trpc, _opts$enabled, _ref, _opts$trpc$abortOnUnm, _opts$trpc2;\n        const context = useContext();\n        const { abortOnUnmount, client, ssrState, queryClient, prefetchQuery } = context;\n        const queryKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, \"query\");\n        const defaultOpts = queryClient.getQueryDefaults(queryKey);\n        const isInputSkipToken = input === _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken;\n        if ( true && ssrState === \"prepass\" && (opts === null || opts === void 0 || (_opts$trpc = opts.trpc) === null || _opts$trpc === void 0 ? void 0 : _opts$trpc.ssr) !== false && ((_opts$enabled = opts === null || opts === void 0 ? void 0 : opts.enabled) !== null && _opts$enabled !== void 0 ? _opts$enabled : defaultOpts === null || defaultOpts === void 0 ? void 0 : defaultOpts.enabled) !== false && !isInputSkipToken && !queryClient.getQueryCache().find({\n            queryKey\n        })) prefetchQuery(queryKey, opts);\n        const ssrOpts = useSSRQueryOptionsIfNeeded(queryKey, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, defaultOpts), opts));\n        const shouldAbortOnUnmount = (_ref = (_opts$trpc$abortOnUnm = opts === null || opts === void 0 || (_opts$trpc2 = opts.trpc) === null || _opts$trpc2 === void 0 ? void 0 : _opts$trpc2.abortOnUnmount) !== null && _opts$trpc$abortOnUnm !== void 0 ? _opts$trpc$abortOnUnm : config === null || config === void 0 ? void 0 : config.abortOnUnmount) !== null && _ref !== void 0 ? _ref : abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_9__.useQuery)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts), {}, {\n            queryKey,\n            queryFn: isInputSkipToken ? input : ({\n                \"createRootHooks.useQuery$1.useQuery[hook]\": async (queryFunctionContext)=>{\n                    const actualOpts = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts), {}, {\n                        trpc: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts === null || ssrOpts === void 0 ? void 0 : ssrOpts.trpc), shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {\n                            signal: null\n                        })\n                    });\n                    const result = await client.query(...getClientArgs(queryKey, actualOpts));\n                    if ((0,_trpc_server_unstable_core_do_not_import__WEBPACK_IMPORTED_MODULE_7__.isAsyncIterable)(result)) return buildQueryFromAsyncIterable(result, queryClient, queryKey);\n                    return result;\n                }\n            })[\"createRootHooks.useQuery$1.useQuery[hook]\"]\n        }), queryClient);\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    function usePrefetchQuery$1(path, input, opts) {\n        var _ref2, _opts$trpc$abortOnUnm2, _opts$trpc3;\n        const context = useContext();\n        const queryKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, \"query\");\n        const isInputSkipToken = input === _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken;\n        const shouldAbortOnUnmount = (_ref2 = (_opts$trpc$abortOnUnm2 = opts === null || opts === void 0 || (_opts$trpc3 = opts.trpc) === null || _opts$trpc3 === void 0 ? void 0 : _opts$trpc3.abortOnUnmount) !== null && _opts$trpc$abortOnUnm2 !== void 0 ? _opts$trpc$abortOnUnm2 : config === null || config === void 0 ? void 0 : config.abortOnUnmount) !== null && _ref2 !== void 0 ? _ref2 : context.abortOnUnmount;\n        (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_10__.usePrefetchQuery)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            queryKey,\n            queryFn: isInputSkipToken ? input : ({\n                \"createRootHooks.usePrefetchQuery$1.usePrefetchQuery\": (queryFunctionContext)=>{\n                    const actualOpts = {\n                        trpc: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts === null || opts === void 0 ? void 0 : opts.trpc), shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {})\n                    };\n                    return context.client.query(...getClientArgs(queryKey, actualOpts));\n                }\n            })[\"createRootHooks.usePrefetchQuery$1.usePrefetchQuery\"]\n        }));\n    }\n    function useSuspenseQuery$1(path, input, opts) {\n        var _ref3, _opts$trpc$abortOnUnm3, _opts$trpc4;\n        const context = useContext();\n        const queryKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, \"query\");\n        const shouldAbortOnUnmount = (_ref3 = (_opts$trpc$abortOnUnm3 = opts === null || opts === void 0 || (_opts$trpc4 = opts.trpc) === null || _opts$trpc4 === void 0 ? void 0 : _opts$trpc4.abortOnUnmount) !== null && _opts$trpc$abortOnUnm3 !== void 0 ? _opts$trpc$abortOnUnm3 : config === null || config === void 0 ? void 0 : config.abortOnUnmount) !== null && _ref3 !== void 0 ? _ref3 : context.abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_11__.useSuspenseQuery)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            queryKey,\n            queryFn: {\n                \"createRootHooks.useSuspenseQuery$1.useSuspenseQuery[hook]\": (queryFunctionContext)=>{\n                    const actualOpts = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n                        trpc: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts === null || opts === void 0 ? void 0 : opts.trpc), shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {\n                            signal: null\n                        })\n                    });\n                    return context.client.query(...getClientArgs(queryKey, actualOpts));\n                }\n            }[\"createRootHooks.useSuspenseQuery$1.useSuspenseQuery[hook]\"]\n        }), context.queryClient);\n        hook.trpc = useHookResult({\n            path\n        });\n        return [\n            hook.data,\n            hook\n        ];\n    }\n    function useMutation$1(path, opts) {\n        const { client, queryClient } = useContext();\n        const mutationKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getMutationKeyInternal)(path);\n        const defaultOpts = queryClient.defaultMutationOptions(queryClient.getMutationDefaults(mutationKey));\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_12__.useMutation)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            mutationKey,\n            mutationFn: {\n                \"createRootHooks.useMutation$1.useMutation[hook]\": (input)=>{\n                    return client.mutation(...getClientArgs([\n                        path,\n                        {\n                            input\n                        }\n                    ], opts));\n                }\n            }[\"createRootHooks.useMutation$1.useMutation[hook]\"],\n            onSuccess (...args) {\n                var _ref4, _opts$meta;\n                const originalFn = {\n                    \"createRootHooks.useMutation$1.useMutation[hook].originalFn\": ()=>{\n                        var _opts$onSuccess, _opts$onSuccess2, _defaultOpts$onSucces;\n                        return (_opts$onSuccess = opts === null || opts === void 0 || (_opts$onSuccess2 = opts.onSuccess) === null || _opts$onSuccess2 === void 0 ? void 0 : _opts$onSuccess2.call(opts, ...args)) !== null && _opts$onSuccess !== void 0 ? _opts$onSuccess : defaultOpts === null || defaultOpts === void 0 || (_defaultOpts$onSucces = defaultOpts.onSuccess) === null || _defaultOpts$onSucces === void 0 ? void 0 : _defaultOpts$onSucces.call(defaultOpts, ...args);\n                    }\n                }[\"createRootHooks.useMutation$1.useMutation[hook].originalFn\"];\n                return mutationSuccessOverride({\n                    originalFn,\n                    queryClient,\n                    meta: (_ref4 = (_opts$meta = opts === null || opts === void 0 ? void 0 : opts.meta) !== null && _opts$meta !== void 0 ? _opts$meta : defaultOpts === null || defaultOpts === void 0 ? void 0 : defaultOpts.meta) !== null && _ref4 !== void 0 ? _ref4 : {}\n                });\n            }\n        }), queryClient);\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    const initialStateIdle = {\n        data: void 0,\n        error: null,\n        status: \"idle\"\n    };\n    const initialStateConnecting = {\n        data: void 0,\n        error: null,\n        status: \"connecting\"\n    };\n    /* istanbul ignore next -- @preserve */ function useSubscription(path, input, opts) {\n        var _opts$enabled2;\n        const enabled = (_opts$enabled2 = opts === null || opts === void 0 ? void 0 : opts.enabled) !== null && _opts$enabled2 !== void 0 ? _opts$enabled2 : input !== _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken;\n        const queryKey = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.hashKey)((0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, \"any\"));\n        const { client } = useContext();\n        const optsRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(opts);\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect({\n            \"createRootHooks.useSubscription.useEffect\": ()=>{\n                optsRef.current = opts;\n            }\n        }[\"createRootHooks.useSubscription.useEffect\"]);\n        const [trackedProps] = react__WEBPACK_IMPORTED_MODULE_2__.useState(new Set([]));\n        const addTrackedProp = react__WEBPACK_IMPORTED_MODULE_2__.useCallback({\n            \"createRootHooks.useSubscription.useCallback[addTrackedProp]\": (key)=>{\n                trackedProps.add(key);\n            }\n        }[\"createRootHooks.useSubscription.useCallback[addTrackedProp]\"], [\n            trackedProps\n        ]);\n        const currentSubscriptionRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(null);\n        const updateState = react__WEBPACK_IMPORTED_MODULE_2__.useCallback({\n            \"createRootHooks.useSubscription.useCallback[updateState]\": (callback)=>{\n                const prev = resultRef.current;\n                const next = resultRef.current = callback(prev);\n                let shouldUpdate = false;\n                for (const key of trackedProps)if (prev[key] !== next[key]) {\n                    shouldUpdate = true;\n                    break;\n                }\n                if (shouldUpdate) setState(trackResult(next, addTrackedProp));\n            }\n        }[\"createRootHooks.useSubscription.useCallback[updateState]\"], [\n            addTrackedProp,\n            trackedProps\n        ]);\n        const reset = react__WEBPACK_IMPORTED_MODULE_2__.useCallback({\n            \"createRootHooks.useSubscription.useCallback[reset]\": ()=>{\n                var _currentSubscriptionR;\n                (_currentSubscriptionR = currentSubscriptionRef.current) === null || _currentSubscriptionR === void 0 || _currentSubscriptionR.unsubscribe();\n                if (!enabled) {\n                    updateState({\n                        \"createRootHooks.useSubscription.useCallback[reset]\": ()=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, initialStateIdle), {}, {\n                                reset\n                            })\n                    }[\"createRootHooks.useSubscription.useCallback[reset]\"]);\n                    return;\n                }\n                updateState({\n                    \"createRootHooks.useSubscription.useCallback[reset]\": ()=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, initialStateConnecting), {}, {\n                            reset\n                        })\n                }[\"createRootHooks.useSubscription.useCallback[reset]\"]);\n                const subscription = client.subscription(path.join(\".\"), input !== null && input !== void 0 ? input : void 0, {\n                    onStarted: {\n                        \"createRootHooks.useSubscription.useCallback[reset].subscription\": ()=>{\n                            var _optsRef$current$onSt, _optsRef$current;\n                            (_optsRef$current$onSt = (_optsRef$current = optsRef.current).onStarted) === null || _optsRef$current$onSt === void 0 || _optsRef$current$onSt.call(_optsRef$current);\n                            updateState({\n                                \"createRootHooks.useSubscription.useCallback[reset].subscription\": (prev)=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, prev), {}, {\n                                        status: \"pending\",\n                                        error: null\n                                    })\n                            }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"]);\n                        }\n                    }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"],\n                    onData: {\n                        \"createRootHooks.useSubscription.useCallback[reset].subscription\": (data)=>{\n                            var _optsRef$current$onDa, _optsRef$current2;\n                            (_optsRef$current$onDa = (_optsRef$current2 = optsRef.current).onData) === null || _optsRef$current$onDa === void 0 || _optsRef$current$onDa.call(_optsRef$current2, data);\n                            updateState({\n                                \"createRootHooks.useSubscription.useCallback[reset].subscription\": (prev)=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, prev), {}, {\n                                        status: \"pending\",\n                                        data,\n                                        error: null\n                                    })\n                            }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"]);\n                        }\n                    }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"],\n                    onError: {\n                        \"createRootHooks.useSubscription.useCallback[reset].subscription\": (error)=>{\n                            var _optsRef$current$onEr, _optsRef$current3;\n                            (_optsRef$current$onEr = (_optsRef$current3 = optsRef.current).onError) === null || _optsRef$current$onEr === void 0 || _optsRef$current$onEr.call(_optsRef$current3, error);\n                            updateState({\n                                \"createRootHooks.useSubscription.useCallback[reset].subscription\": (prev)=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, prev), {}, {\n                                        status: \"error\",\n                                        error\n                                    })\n                            }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"]);\n                        }\n                    }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"],\n                    onConnectionStateChange: {\n                        \"createRootHooks.useSubscription.useCallback[reset].subscription\": (result)=>{\n                            updateState({\n                                \"createRootHooks.useSubscription.useCallback[reset].subscription\": (prev)=>{\n                                    switch(result.state){\n                                        case \"idle\":\n                                            return (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, prev), {}, {\n                                                status: result.state,\n                                                error: null,\n                                                data: void 0\n                                            });\n                                        case \"connecting\":\n                                            return (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, prev), {}, {\n                                                error: result.error,\n                                                status: result.state\n                                            });\n                                        case \"pending\":\n                                            return prev;\n                                    }\n                                }\n                            }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"]);\n                        }\n                    }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"],\n                    onComplete: {\n                        \"createRootHooks.useSubscription.useCallback[reset].subscription\": ()=>{\n                            var _optsRef$current$onCo, _optsRef$current4;\n                            (_optsRef$current$onCo = (_optsRef$current4 = optsRef.current).onComplete) === null || _optsRef$current$onCo === void 0 || _optsRef$current$onCo.call(_optsRef$current4);\n                            updateState({\n                                \"createRootHooks.useSubscription.useCallback[reset].subscription\": (prev)=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, prev), {}, {\n                                        status: \"idle\",\n                                        error: null,\n                                        data: void 0\n                                    })\n                            }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"]);\n                        }\n                    }[\"createRootHooks.useSubscription.useCallback[reset].subscription\"]\n                });\n                currentSubscriptionRef.current = subscription;\n            }\n        }[\"createRootHooks.useSubscription.useCallback[reset]\"], [\n            client,\n            queryKey,\n            enabled,\n            updateState\n        ]);\n        react__WEBPACK_IMPORTED_MODULE_2__.useEffect({\n            \"createRootHooks.useSubscription.useEffect\": ()=>{\n                reset();\n                return ({\n                    \"createRootHooks.useSubscription.useEffect\": ()=>{\n                        var _currentSubscriptionR2;\n                        (_currentSubscriptionR2 = currentSubscriptionRef.current) === null || _currentSubscriptionR2 === void 0 || _currentSubscriptionR2.unsubscribe();\n                    }\n                })[\"createRootHooks.useSubscription.useEffect\"];\n            }\n        }[\"createRootHooks.useSubscription.useEffect\"], [\n            reset\n        ]);\n        const resultRef = react__WEBPACK_IMPORTED_MODULE_2__.useRef(enabled ? (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, initialStateConnecting), {}, {\n            reset\n        }) : (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, initialStateIdle), {}, {\n            reset\n        }));\n        const [state, setState] = react__WEBPACK_IMPORTED_MODULE_2__.useState(trackResult(resultRef.current, addTrackedProp));\n        return state;\n    }\n    function useInfiniteQuery$1(path, input, opts) {\n        var _opts$trpc5, _opts$enabled3, _opts$trpc$abortOnUnm4, _opts$trpc6, _opts$initialCursor;\n        const { client, ssrState, prefetchInfiniteQuery, queryClient, abortOnUnmount } = useContext();\n        const queryKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, \"infinite\");\n        const defaultOpts = queryClient.getQueryDefaults(queryKey);\n        const isInputSkipToken = input === _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken;\n        if ( true && ssrState === \"prepass\" && (opts === null || opts === void 0 || (_opts$trpc5 = opts.trpc) === null || _opts$trpc5 === void 0 ? void 0 : _opts$trpc5.ssr) !== false && ((_opts$enabled3 = opts === null || opts === void 0 ? void 0 : opts.enabled) !== null && _opts$enabled3 !== void 0 ? _opts$enabled3 : defaultOpts === null || defaultOpts === void 0 ? void 0 : defaultOpts.enabled) !== false && !isInputSkipToken && !queryClient.getQueryCache().find({\n            queryKey\n        })) prefetchInfiniteQuery(queryKey, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, defaultOpts), opts));\n        const ssrOpts = useSSRQueryOptionsIfNeeded(queryKey, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, defaultOpts), opts));\n        const shouldAbortOnUnmount = (_opts$trpc$abortOnUnm4 = opts === null || opts === void 0 || (_opts$trpc6 = opts.trpc) === null || _opts$trpc6 === void 0 ? void 0 : _opts$trpc6.abortOnUnmount) !== null && _opts$trpc$abortOnUnm4 !== void 0 ? _opts$trpc$abortOnUnm4 : abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_13__.useInfiniteQuery)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts), {}, {\n            initialPageParam: (_opts$initialCursor = opts.initialCursor) !== null && _opts$initialCursor !== void 0 ? _opts$initialCursor : null,\n            persister: opts.persister,\n            queryKey,\n            queryFn: isInputSkipToken ? input : ({\n                \"createRootHooks.useInfiniteQuery$1.useInfiniteQuery[hook]\": (queryFunctionContext)=>{\n                    var _queryFunctionContext;\n                    const actualOpts = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts), {}, {\n                        trpc: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts === null || ssrOpts === void 0 ? void 0 : ssrOpts.trpc), shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {\n                            signal: null\n                        })\n                    });\n                    return client.query(...getClientArgs(queryKey, actualOpts, {\n                        pageParam: (_queryFunctionContext = queryFunctionContext.pageParam) !== null && _queryFunctionContext !== void 0 ? _queryFunctionContext : opts.initialCursor,\n                        direction: queryFunctionContext.direction\n                    }));\n                }\n            })[\"createRootHooks.useInfiniteQuery$1.useInfiniteQuery[hook]\"]\n        }), queryClient);\n        hook.trpc = useHookResult({\n            path\n        });\n        return hook;\n    }\n    function usePrefetchInfiniteQuery$1(path, input, opts) {\n        var _opts$trpc$abortOnUnm5, _opts$trpc7, _opts$initialCursor2;\n        const context = useContext();\n        const queryKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, \"infinite\");\n        const defaultOpts = context.queryClient.getQueryDefaults(queryKey);\n        const isInputSkipToken = input === _tanstack_react_query__WEBPACK_IMPORTED_MODULE_5__.skipToken;\n        const ssrOpts = useSSRQueryOptionsIfNeeded(queryKey, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, defaultOpts), opts));\n        const shouldAbortOnUnmount = (_opts$trpc$abortOnUnm5 = opts === null || opts === void 0 || (_opts$trpc7 = opts.trpc) === null || _opts$trpc7 === void 0 ? void 0 : _opts$trpc7.abortOnUnmount) !== null && _opts$trpc$abortOnUnm5 !== void 0 ? _opts$trpc$abortOnUnm5 : context.abortOnUnmount;\n        (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_14__.usePrefetchInfiniteQuery)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            initialPageParam: (_opts$initialCursor2 = opts.initialCursor) !== null && _opts$initialCursor2 !== void 0 ? _opts$initialCursor2 : null,\n            queryKey,\n            queryFn: isInputSkipToken ? input : ({\n                \"createRootHooks.usePrefetchInfiniteQuery$1.usePrefetchInfiniteQuery\": (queryFunctionContext)=>{\n                    var _queryFunctionContext2;\n                    const actualOpts = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts), {}, {\n                        trpc: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts === null || ssrOpts === void 0 ? void 0 : ssrOpts.trpc), shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {})\n                    });\n                    return context.client.query(...getClientArgs(queryKey, actualOpts, {\n                        pageParam: (_queryFunctionContext2 = queryFunctionContext.pageParam) !== null && _queryFunctionContext2 !== void 0 ? _queryFunctionContext2 : opts.initialCursor,\n                        direction: queryFunctionContext.direction\n                    }));\n                }\n            })[\"createRootHooks.usePrefetchInfiniteQuery$1.usePrefetchInfiniteQuery\"]\n        }));\n    }\n    function useSuspenseInfiniteQuery$1(path, input, opts) {\n        var _opts$trpc$abortOnUnm6, _opts$trpc8, _opts$initialCursor3;\n        const context = useContext();\n        const queryKey = (0,_getQueryKey_BY58RNzP_mjs__WEBPACK_IMPORTED_MODULE_0__.getQueryKeyInternal)(path, input, \"infinite\");\n        const defaultOpts = context.queryClient.getQueryDefaults(queryKey);\n        const ssrOpts = useSSRQueryOptionsIfNeeded(queryKey, (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, defaultOpts), opts));\n        const shouldAbortOnUnmount = (_opts$trpc$abortOnUnm6 = opts === null || opts === void 0 || (_opts$trpc8 = opts.trpc) === null || _opts$trpc8 === void 0 ? void 0 : _opts$trpc8.abortOnUnmount) !== null && _opts$trpc$abortOnUnm6 !== void 0 ? _opts$trpc$abortOnUnm6 : context.abortOnUnmount;\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_15__.useSuspenseInfiniteQuery)((0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, opts), {}, {\n            initialPageParam: (_opts$initialCursor3 = opts.initialCursor) !== null && _opts$initialCursor3 !== void 0 ? _opts$initialCursor3 : null,\n            queryKey,\n            queryFn: {\n                \"createRootHooks.useSuspenseInfiniteQuery$1.useSuspenseInfiniteQuery[hook]\": (queryFunctionContext)=>{\n                    var _queryFunctionContext3;\n                    const actualOpts = (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts), {}, {\n                        trpc: (0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, ssrOpts === null || ssrOpts === void 0 ? void 0 : ssrOpts.trpc), shouldAbortOnUnmount ? {\n                            signal: queryFunctionContext.signal\n                        } : {})\n                    });\n                    return context.client.query(...getClientArgs(queryKey, actualOpts, {\n                        pageParam: (_queryFunctionContext3 = queryFunctionContext.pageParam) !== null && _queryFunctionContext3 !== void 0 ? _queryFunctionContext3 : opts.initialCursor,\n                        direction: queryFunctionContext.direction\n                    }));\n                }\n            }[\"createRootHooks.useSuspenseInfiniteQuery$1.useSuspenseInfiniteQuery[hook]\"]\n        }), context.queryClient);\n        hook.trpc = useHookResult({\n            path\n        });\n        return [\n            hook.data,\n            hook\n        ];\n    }\n    const useQueries$1 = (queriesCallback, options)=>{\n        const { ssrState, queryClient, prefetchQuery, client } = useContext();\n        const proxy = createUseQueries(client);\n        const queries = queriesCallback(proxy);\n        if ( true && ssrState === \"prepass\") for (const query of queries){\n            var _queryOption$trpc;\n            const queryOption = query;\n            if (((_queryOption$trpc = queryOption.trpc) === null || _queryOption$trpc === void 0 ? void 0 : _queryOption$trpc.ssr) !== false && !queryClient.getQueryCache().find({\n                queryKey: queryOption.queryKey\n            })) prefetchQuery(queryOption.queryKey, queryOption);\n        }\n        return (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_16__.useQueries)({\n            queries: queries.map({\n                \"createRootHooks.useQueries$1.useQueries\": (query)=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, query), {}, {\n                        queryKey: query.queryKey\n                    })\n            }[\"createRootHooks.useQueries$1.useQueries\"]),\n            combine: options === null || options === void 0 ? void 0 : options.combine\n        }, queryClient);\n    };\n    const useSuspenseQueries$1 = (queriesCallback)=>{\n        const { queryClient, client } = useContext();\n        const proxy = createUseQueries(client);\n        const queries = queriesCallback(proxy);\n        const hook = (0,_tanstack_react_query__WEBPACK_IMPORTED_MODULE_17__.useSuspenseQueries)({\n            queries: queries.map({\n                \"createRootHooks.useSuspenseQueries$1.useSuspenseQueries[hook]\": (query)=>(0, import_objectSpread2.default)((0, import_objectSpread2.default)({}, query), {}, {\n                        queryFn: query.queryFn,\n                        queryKey: query.queryKey\n                    })\n            }[\"createRootHooks.useSuspenseQueries$1.useSuspenseQueries[hook]\"])\n        }, queryClient);\n        return [\n            hook.map((h)=>h.data),\n            hook\n        ];\n    };\n    return {\n        Provider: TRPCProvider,\n        createClient,\n        useContext,\n        useUtils: useContext,\n        useQuery: useQuery$1,\n        usePrefetchQuery: usePrefetchQuery$1,\n        useSuspenseQuery: useSuspenseQuery$1,\n        useQueries: useQueries$1,\n        useSuspenseQueries: useSuspenseQueries$1,\n        useMutation: useMutation$1,\n        useSubscription,\n        useInfiniteQuery: useInfiniteQuery$1,\n        usePrefetchInfiniteQuery: usePrefetchInfiniteQuery$1,\n        useSuspenseInfiniteQuery: useSuspenseInfiniteQuery$1\n    };\n}\n//#endregion\n//#region src/shared/queryClient.ts\n/**\n* @internal\n*/ const getQueryClient = (config)=>{\n    var _config$queryClient;\n    return (_config$queryClient = config.queryClient) !== null && _config$queryClient !== void 0 ? _config$queryClient : new _tanstack_react_query__WEBPACK_IMPORTED_MODULE_18__.QueryClient(config.queryClientConfig);\n};\n//#endregion\n //# sourceMappingURL=shared-JtnEvJvB.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../../node_modules/.pnpm/@trpc+react-query@11.4.2_@tanstack+react-query@5.81.2_react@19.1.0__@trpc+client@11.4.2_ad30ee42df6b1b1de5cc662e6ccbb2af/node_modules/@trpc/react-query/dist/shared-JtnEvJvB.mjs\n");

/***/ })

};
;