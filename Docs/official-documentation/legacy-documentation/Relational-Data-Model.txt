CRM Data Model for Solo Wellness Practitioners

CRM Needs of Wellness Solopreneurs

Solo wellness professionals – yoga instructors, massage therapists, meditation coaches, reiki healers, reflexologists, acupuncturists, etc. – all share a need to efficiently manage client relationships and sessions. They typically expect a CRM/practice management system to provide:
	•	Centralized Client Records: A detailed client database storing contact info, session history, personal preferences, health notes, and intake details ￼ ￼. This helps tailor treatments and track each client’s progress over time.
	•	Scheduling & Session Management: Integrated calendar tools to book sessions (classes or one-on-one appointments), avoid conflicts, and send automated reminders ￼. Practitioners often manage recurring appointments or multi-session packages, so the system should handle session series or programs (e.g. a 6-week course or a 10-session therapy plan). Attendance tracking (for classes or no-shows) is important for analyzing client engagement.
	•	Session Plans & Treatment Tracking: Ability to document or plan sessions. Many practitioners create session plans or use treatment phases for clients – e.g. a yoga teacher planning class sequences, or a therapist outlining phases of a treatment plan (assessment, active treatment, maintenance). The CRM should accommodate recording these plans and linking them to sessions or programs. This often involves storing session notes (e.g. SOAP notes for therapists) and marking milestones or phases in a client’s program.
	•	Follow-ups and Communications: Tools for staying in touch with clients outside of sessions. Automated follow-up tasks (e.g. check-in a day after a session, or remind a client when it’s time to book their next appointment) are highly valued ￼. Integrated email/SMS for appointment reminders and personalized follow-ups help maintain engagement ￼.
	•	Billing & Payments: Integration with payment processing (like Stripe) to handle session payments, package purchases, and invoices ￼. Solopreneurs want to easily track who has paid, see payment history, and manage prepaid session packages or deposits. For example, if a client buys a 5-session package, the system should record that purchase and decrement the remaining sessions as they are used. Payment confirmation status (paid, pending, refunded, etc.) needs to be visible for each session or program enrollment.
	•	Streamlined Workflow: Above all, the CRM should feel tailored to wellness workflows rather than sales. Instead of pipelines or “deals,” the focus is on scheduling sessions, recording client progress, and building long-term client relationships. This means using terms like sessions, plans, or programs (not “opportunities”), and tracking client attendance and program participation (not sales stages). The system should fit a one-person business – simple to use, but scalable as the practice grows (able to add group classes, new services, or even product sales later).

These expectations align with features found in top wellness industry software: client-centric records, class scheduling, secure payments, and automation to reduce admin workload ￼ ￼. Solo practitioners essentially want a personal assistant in software form, handling “appointment scheduling, payment processing, and client communications” so they can focus on delivering care ￼.

Proposed Relational Data Model

To meet these needs, we propose a normalized, scalable database schema for a modern wellness CRM. The design uses relational tables with clear primary/foreign keys and avoids generic sales terminology. Key entities include Clients, Sessions (appointments), Programs (multi-session plans or offerings), and related tables to manage participation, payments, and follow-ups. All tables have an id primary key (PK), and foreign keys (FK) enforce relationships. Indexed fields are noted for efficient lookups. This schema can be implemented in PostgreSQL with a TypeScript-based server (using an ORM or query builder for type-safe integration).

Clients (or Contacts)

Represents individuals who take sessions or participate in programs. (In a solo business, essentially all contacts are clients, whether prospective or current.) Primary key: id. Important fields:
	•	first_name, last_name – Client’s name.
	•	email – Contact email (unique and indexed for quick lookup/login).
	•	phone – Contact number.
	•	address – Mailing or billing address (optional).
	•	date_of_birth – (Optional) for health forms or personal records.
	•	notes – General notes about the client (e.g. preferences, medical conditions).
	•	created_at – Timestamp of when the client record was created (for record-keeping).

Relationships: One client can have many sessions, notes, payments, and follow-ups. In database terms, other tables will use client_id (FK to Clients) for these links. We index client_id in those tables to optimize queries like “find all sessions for client X”.

Services (Offerings Catalog)

Defines the types of services or session offerings available. This helps avoid hard-coding service names in each session and allows future extension (e.g. adding new class types). Primary key: id. Fields:
	•	name – Name of service (e.g. “60-min Massage”, “Yoga – Beginner Class”, “Acupuncture Session”).
	•	description – Longer description (if needed) of the service.
	•	duration – Default duration (e.g. 60 minutes) for scheduling convenience.
	•	price – Standard price (which can be used as a default for billing).
	•	created_at – Timestamp of creation.

Relationships: One Service to many Sessions (each Session may reference a service type). For instance, a Session might be of type “Yoga – Beginner Class”. This table is indexed by name or id (PK) for internal use.

Sessions (Appointments/Classes)

Represents a scheduled session or appointment – this could be a one-on-one appointment or a group class instance. Primary key: id. Key fields:
	•	service_id – FK to Services. Identifies the type of session (what service is being delivered).
	•	start_time – Date/time the session begins (using timestamp with time zone).
	•	end_time – Date/time the session ends. (Alternatively store duration if end can be derived.)
	•	location – Location or method (e.g. “Studio Room A”, “Zoom Link …”, or “Client’s home”).
	•	status – Status of the session (scheduled, completed, canceled, no-show, etc. – could use an enum).
	•	notes – Any notes or plan for this session. Practitioners can record session outcomes or plan details here (e.g. “Focus on lower back today, used lavender oil” or a yoga class plan outline). This helps with continuity of care and progress tracking ￼.
	•	program_id – Optional FK to Programs, if this session is part of a larger program or series. This links individual sessions to a program (e.g. Session 3 of a 6-session package). program_id is indexed to quickly retrieve all sessions under a program.
	•	created_at – Timestamp when the session was created in the system (booking time).

Relationships:
	•	Client participation: A Session may involve one or multiple clients. For one-on-one appointments, there will be a single client attendee; for group classes or workshops, many clients attend one session. We model this via a join table SessionAttendees (see below). This many-to-many structure allows flexibility (one client can attend many sessions, and one session can have many clients).
	•	Service: Each Session references a Service type (one-to-many relationship from Service to Sessions).
	•	Program: Sessions can optionally belong to a Program (one Program to many Sessions). If program_id is null, the session is standalone (e.g. a single drop-in session). If not null, it’s part of a defined program or package.

We ensure fast querying by indexing sessions on start_time (for calendar views like “upcoming sessions this week”) and on foreign keys like client_id (via the join table) and program_id.

SessionAttendees (Session Participants)

This join table links Clients to Sessions to record attendance. It enables managing group session enrollment and tracking no-shows or cancellations at the individual level. Primary key: id (each attendance record). Fields:
	•	session_id – FK to a Session.
	•	client_id – FK to a Client.
	•	attendance_status – Status of this client for that session (e.g. registered, attended, canceled, no-show). This can help the practitioner follow up if, say, a client missed a class.
	•	check_in_time – (Optional) timestamp when the client checked in or was marked present. Useful for in-person class attendance tracking.
	•	payment_status – (Optional) status indicating if this particular session attendance is paid, unpaid, or prepaid. (In many cases payment is handled per session or via program purchase, but this field can mark exceptions or unpaid drop-ins.)

Relationships: Many-to-many between Clients and Sessions. This table would have an index on client_id (e.g. to quickly find all upcoming sessions a specific client is registered for) and on session_id (to list all attendees of a session). The combination of session_id+client_id could be unique to prevent duplicate sign-ups.

Programs (Wellness Programs / Packages)

Programs represent structured offerings that span multiple sessions or a period of time. This concept covers things like a multi-session wellness program, a yoga course, a treatment plan for a client, or a prepaid session package. Primary key: id. Fields:
	•	name – Program name (e.g. “8-Week Mindfulness Course Jan 2025”, “Massage Therapy 5-Session Package”, “Reiki Level I Training”).
	•	description – Description of the program (purpose, outline, etc.).
	•	type – Category or type of program (could be an enum or text; e.g. group-class series, one-on-one plan, package). This helps distinguish whether multiple clients can join or if it’s individualized.
	•	start_date – (Optional) start date of the program (for scheduled group programs).
	•	end_date – (Optional) end date or expected completion date.
	•	sessions_count – (Optional) planned number of sessions (especially for packages or fixed-length programs). The actual sessions are listed in the Sessions table linked by program_id, but this provides a quick reference.
	•	price – Price for the full program (if sold as a package). For free programs or trial, this could be zero.
	•	created_at – Creation timestamp.

Relationships: One Program can have many Sessions (the sessions that make up the program) and many enrolled Clients. Sessions linked to a program share the program_id. Clients enroll via ProgramEnrollments (join table described next).

Programs make it easy to group sessions and manage clients in a holistic way. For example, a massage therapist could create a “Rehab 5-Session Package” program and assign all five scheduled sessions to that program for a client, allowing tracking of progress across the package. A yoga instructor could set up a “Beginner Series – April” program and enroll a cohort of clients, each session being a class in that series.

If needed, treatment phases can be modeled by adding a sub-structure to Programs (e.g., a ProgramPhase table with program_id, phase name, sequence, and maybe linking sessions to phases). This would allow dividing a program into stages (e.g. Phase I: Assessment, Phase II: Intensive, Phase III: Maintenance). This is an optional extension – the basic model keeps it simple, but it’s designed so that additional tables can be introduced without major changes. For instance, a phase field on Session or a separate Phase table can be related to Program and Session to track which phase a session belongs to.

ProgramEnrollments (Program Participation)

Join table linking Clients to Programs, representing a client’s enrollment in or purchase of a program. Primary key: id. Fields:
	•	program_id – FK to Programs.
	•	client_id – FK to Clients.
	•	enrolled_at – Date the client enrolled or started the program.
	•	status – Status of enrollment (active, completed, dropped, etc.). For one-on-one programs or packages, this might be active until all sessions used, then completed.
	•	sessions_remaining – (Optional) for a package, how many session credits remain (if applicable). This can be calculated from Sessions, but storing it can simplify quick checks.
	•	completion_date – (Optional) date the client finished the program (if completed).

Relationships: Many-to-many between Clients and Programs. We index program_id and client_id for efficient querying (e.g., list all participants in a program, or list all programs a client is involved in).

Through this table, the system can answer questions like “Who is signed up for Program X?” or “Is Client Y currently in any program?”. It’s also useful for future features like group messaging to all participants of a program, or checking eligibility (e.g. if a drop-in client wants to attend a class that’s actually part of a closed program, the system knows they’re not enrolled).

Payments

Tracks payments and transactions, anticipating integration with Stripe or other billing systems. Each record represents a payment (or charge) made by a client. Primary key: id. Key fields:
	•	client_id – FK to the Client who made the payment (or for whom the payment was made). Indexed to view all payments by a client.
	•	session_id – Optional FK to a Session that this payment covers (if it’s payment for a single session or drop-in class).
	•	program_id – Optional FK to a Program if the payment was for a full program/package purchase.
	•	Note: (Either session_id or program_id might be filled, depending on what the payment is for. For example, a one-off session payment vs. paying upfront for a program. Both could also be null if it’s a general credit or gift card, though that’s an edge case. In case a single payment covers multiple sessions without a formal program (e.g. buying 5 separate sessions in one transaction), that would typically be handled by creating a Program record for the 5-session package or by multiple Payment records. The design can be extended to have a separate Invoice table or PaymentLineItems if needed to allocate one payment to multiple sessions, but initially we assume one payment ties to one billable item.)
	•	amount – Amount paid (numeric, e.g. in cents to avoid floating point issues).
	•	currency – Currency code (e.g. “USD”), in case of multi-currency support.
	•	status – Payment status (e.g. completed, pending, failed, refunded). This could correspond to Stripe payment intent status.
	•	stripe_payment_id – (Optional) External reference ID (such as Stripe charge ID or payment intent ID) for reconciliation with Stripe. Storing this allows the CRM to query or verify payment details via the Stripe API if needed.
	•	paid_at – Timestamp when the payment was completed.
	•	method – (Optional) Payment method (e.g. “credit_card”, “cash”, “bank_transfer”). Especially if not all payments go through Stripe (some clients might pay cash).

Relationships: Many-to-one: each Payment is linked to a Client, and optionally to a specific Session or Program. We will typically query payments per client, or per program (to see who has paid for the program). Indexes on client_id, program_id, and session_id speed up these lookups.

This table, combined with session/program data, lets the practitioner see financial info like: has the client paid for their upcoming session? How many sessions in the package are paid versus outstanding? Future integration can use this to trigger access (e.g. only mark a session confirmed if payment exists).

FollowUps (Tasks/Reminders)

Represents scheduled follow-ups or tasks related to clients and sessions. Solo practitioners often set reminders to check in with a client or perform an admin task. Primary key: id. Fields:
	•	client_id – FK to the Client that the follow-up is about. (For example, a reminder to follow up with Client X one week after their session.)
	•	session_id – Optional FK to Session, if the follow-up is tied to a specific past session or an upcoming one (e.g. “Call client 2 days after Session 123 to see how they felt”). This can be null for general follow-ups (like sending a newsletter, or “wish happy birthday”).
	•	type – Type of follow-up or task (could be an enum: call, email, SMS, admin, etc.).
	•	notes – Description of the follow-up task (e.g. “Email exercise plan after first appointment” or “Send feedback survey link”).
	•	due_date – Date or date-time when the follow-up should happen or be due.
	•	completed – Boolean or status field to mark when the follow-up task is done (or perhaps a date completed).

Relationships: Many follow-ups can be associated with one client (one-to-many). Possibly many follow-ups per session as well (if multiple tasks around a single session). We index client_id so the user can view all pending follow-ups for a given client easily. You might also index due_date to fetch upcoming tasks chronologically. This table helps implement the “task automation” aspect of a CRM ￼ – for example, the system could automatically create a follow-up entry after each session, or allow the user to create their own reminders.

Notes (Optional Extension)

In addition to the above, a Notes table could be introduced to store detailed session notes or client notes separately (rather than embedding in the Sessions table). For instance, if practitioners write lengthy SOAP notes or attach files, a separate table with client_id, session_id, note_text, created_at might be useful. In this design, we included a notes field in Sessions and Clients for simplicity, but a normalized approach may use a notes table for unlimited historical notes. This is an example of how the model can be extended without altering core relationships.

Entity-Relationship Overview

The diagram below (described in text) outlines how these entities relate:
	•	Clients – Primary entity, connected to many other records. One client can have multiple Sessions (through SessionAttendees), multiple ProgramEnrollments, multiple Payments, and multiple FollowUps.
	•	Sessions – Each session record may be linked to one Service (what type of session it is) and zero or one Program. Sessions <-> Clients is a many-to-many via SessionAttendees: a session can have many attending clients (or just one for individual sessions). If a session is one-on-one, there will simply be one entry in SessionAttendees for that session.
	•	SessionAttendees – Connects Sessions and Clients. Ensures the model can handle group sessions and track attendance or payment per participant if needed.
	•	Programs – Can group multiple sessions and have many client participants. The ProgramEnrollments join table links clients to programs (many-to-many). If a program is a one-client package (like a personal treatment plan), there will be just one enrollment for that program. If it’s a group class series, there could be many enrollments (one per client).
	•	ProgramEnrollments – Connects Clients and Programs. Also carries any enrollment-specific data (status, remaining sessions, etc.).
	•	Payments – Each payment is linked to a Client. Optionally, it references either a Session or a Program (depending on what was paid for). This effectively links finances to services delivered: e.g., a payment for a program covers all sessions in that program, a payment for a single session covers that one appointment.
	•	FollowUps – Linked to a Client (and possibly a specific Session). It stands somewhat apart from the service delivery entities, as it represents internal tasks. But it’s connected so that, for example, completing a session can trigger creating a follow-up entry.

In summary, the model avoids sales-centric entities and instead uses wellness-centric ones. For example: rather than an “Opportunity” linked to a Contact, you would have a ProgramEnrollment linked to a Client (representing a client signing up for a package or series). Instead of “Sales pipeline stage,” you might use a status or phase on a ProgramEnrollment to indicate progress (active, completed, etc.) in a wellness program. This ensures the terminology and data structure fit real practice: scheduling sessions, logging client progress, and managing ongoing relationships.

Implementation Guidance (TypeScript + PostgreSQL)

When implementing this schema in a TypeScript/Postgres stack, consider the following:
	•	Database Setup: Use PostgreSQL’s relational features for data integrity. Define the tables with the fields above, using appropriate data types (VARCHAR/TEXT for names and notes, TIMESTAMP WITH TIME ZONE for dates, INTEGER or SERIAL/BIGSERIAL or UUID for primary keys). Add FOREIGN KEY constraints (with ON DELETE CASCADE or RESTRICT as appropriate) to enforce the relationships. For example, session_id in SessionAttendees should be a foreign key referencing Sessions(id), and client_id referencing Clients(id).
	•	Primary Keys: Each table uses a single-field primary key id. In Postgres, you can use SERIAL (auto-increment integers) or UUID (for globally unique ids). Many modern apps use UUIDs for keys (ensure to use Postgres’s uuid-ossp extension or generate UUIDs in application code). Primary keys are automatically indexed.
	•	Indexes: Besides the automatic PK indexes, add indexes on foreign key fields and any frequently queried fields. For example, index Clients(email) for quick lookups by email (and enforce uniqueness). Index Sessions(start_time) for sorting and querying upcoming sessions. Index join table FKs like SessionAttendees(session_id) and (client_id) for performance. In Postgres, foreign keys don’t automatically create indexes, so do this in the schema or via ORM migrations. Composite indexes can be used for unique constraints (like ensure one client can enroll only once per program by a unique index on (program_id, client_id) in ProgramEnrollments).
	•	TypeScript ORM/Models: Use an ORM (like TypeORM, Prisma, or Sequelize) or a schema definition tool (like Knex migrations) to define these tables in code. Each table becomes a TypeScript interface or class (e.g. a Client model with fields typed as string, Date, etc.). Use ORM relations to link models: e.g., a Client model having a relation sessions: Session[] (through SessionAttendees), or a Program model with sessions: Session[] and participants: Client[] (through ProgramEnrollments). These relations in an ORM will mirror the foreign keys in the DB, providing convenient navigation and ensuring referential integrity.
	•	Scalability and Extensions: The schema is normalized to eliminate duplication and ensure consistency (e.g., client names stored once, service definitions stored once, etc.). This design can scale to support additional features. For example, to add product sales later, you could introduce a Products table and a Sales table linking Clients to Products (similar to how ProgramEnrollments links Clients to Programs). It wouldn’t conflict with existing tables. To support group memberships or subscriptions, you might add a Membership entity and perhaps link it to allowed services or sessions – again, easily added alongside this schema. The current tables already handle group sessions and packages, which covers many “membership” scenarios (a membership could be a Program with a long duration and many sessions).
	•	Integration Hooks: Anticipating integration with external services, you might add fields to store external IDs (as we did with stripe_payment_id, and one could do similarly for a calendly_event_id on Sessions if syncing with Calendly bookings). Keep such fields to track synchronization state or references. For instance, if using Calendly for scheduling, when a booking is made you’d insert a record into Sessions (with status “scheduled”) and store Calendly’s event ID in a field like external_event_id – this way, changes or cancellations via Calendly can be reconciled to your DB record. In TypeScript, you might have integration modules that listen to webhooks (Calendly webhooks, Stripe webhooks) and update the database accordingly (e.g., mark a Payment as paid when a Stripe webhook confirms payment).
	•	Workflow Alignment: Ensure the application logic uses this schema in a user-friendly way. For example, when a practitioner books a new appointment for a client through the app, you would create a Session, and automatically create the corresponding SessionAttendees entry linking the client. If the appointment is part of a program the client purchased, set the program_id on those sessions and perhaps decrement sessions_remaining in ProgramEnrollments. When a session is completed, you might prompt to add a FollowUp or notes. The database design supports these flows; the application code should enforce business rules (like “cannot schedule more sessions than a package allows” or “only enrolled clients can attend program sessions”) by checking the relevant tables.

Using this structured approach, the CRM will be well-aligned to the workflows of wellness solopreneurs. It captures the essential entities – clients, sessions, programs – and their real-world relationships (clients attending sessions, enrolling in programs, making payments, etc.). The design prioritizes flexibility (to add features like product sales or more detailed treatment plans later) and a clear separation of concerns (e.g. scheduling vs. billing vs. follow-ups), which keeps the system maintainable as the business grows. By implementing this in a TypeScript/Postgres stack, you gain type safety and reliable transactions – ensuring that, for example, when a payment is recorded, the related session or program information is consistently updated. The end result is a CRM that forgoes clunky sales terminology in favor of wellness-centric functionality, enabling solo practitioners to manage their practice and client relationships with ease ￼ ￼.